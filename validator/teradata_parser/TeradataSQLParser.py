# Generated from sql/teradata/TeradataSQLParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,1233,14481,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,
        2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,
        7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,
        2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,
        7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
        2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,
        7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
        2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
        7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,
        2,362,7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,
        7,367,2,368,7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,
        2,373,7,373,2,374,7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,
        7,378,2,379,7,379,2,380,7,380,2,381,7,381,2,382,7,382,2,383,7,383,
        2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,2,388,7,388,2,389,
        7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,2,394,7,394,
        2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,2,400,
        7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
        2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,
        7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
        2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
        7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,
        2,428,7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,
        7,433,2,434,7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,
        2,439,7,439,2,440,7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,
        7,444,2,445,7,445,2,446,7,446,2,447,7,447,2,448,7,448,2,449,7,449,
        2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,2,454,7,454,2,455,
        7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,2,460,7,460,
        2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,2,466,
        7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
        2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,
        7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
        2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
        7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,
        2,494,7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,
        7,499,2,500,7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,
        2,505,7,505,2,506,7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,
        7,510,2,511,7,511,2,512,7,512,2,513,7,513,2,514,7,514,2,515,7,515,
        2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,2,520,7,520,2,521,
        7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,2,526,7,526,
        2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,2,532,
        7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
        2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,
        7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
        2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,
        7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,
        2,560,7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,
        7,565,2,566,7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,
        2,571,7,571,2,572,7,572,2,573,7,573,2,574,7,574,2,575,7,575,2,576,
        7,576,2,577,7,577,2,578,7,578,2,579,7,579,2,580,7,580,2,581,7,581,
        2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,2,586,7,586,2,587,
        7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,2,592,7,592,
        2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,2,598,
        7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
        2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,
        7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
        2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,
        7,620,2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,
        2,626,7,626,2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,
        7,631,2,632,7,632,2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,
        2,637,7,637,2,638,7,638,2,639,7,639,2,640,7,640,2,641,7,641,2,642,
        7,642,2,643,7,643,2,644,7,644,2,645,7,645,1,0,1,0,1,0,5,0,1296,8,
        0,10,0,12,0,1299,9,0,1,0,3,0,1302,8,0,1,0,1,0,1,1,1,1,1,1,3,1,1309,
        8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1401,8,2,1,3,1,3,
        1,3,1,3,3,3,1407,8,3,1,3,1,3,3,3,1411,8,3,1,3,1,3,3,3,1415,8,3,1,
        3,1,3,1,3,5,3,1420,8,3,10,3,12,3,1423,9,3,1,4,1,4,1,4,1,4,1,4,3,
        4,1430,8,4,3,4,1432,8,4,1,5,1,5,1,5,1,5,1,5,4,5,1439,8,5,11,5,12,
        5,1440,3,5,1443,8,5,3,5,1445,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,5,6,1457,8,6,10,6,12,6,1460,9,6,3,6,1462,8,6,1,6,3,6,1465,
        8,6,3,6,1467,8,6,1,6,1,6,3,6,1471,8,6,1,6,1,6,1,6,3,6,1476,8,6,3,
        6,1478,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,3,9,1499,8,9,1,10,1,10,1,10,1,10,1,10,1,10,
        5,10,1507,8,10,10,10,12,10,1510,9,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,3,10,1521,8,10,1,10,3,10,1524,8,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,3,10,1533,8,10,1,10,1,10,1,10,1,10,1,10,3,
        10,1540,8,10,1,10,1,10,1,10,1,10,3,10,1546,8,10,1,10,1,10,3,10,1550,
        8,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,1558,8,11,10,11,12,11,1561,
        9,11,1,12,3,12,1564,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
        1573,8,12,1,12,1,12,3,12,1577,8,12,3,12,1579,8,12,1,13,1,13,1,13,
        1,13,1,13,3,13,1586,8,13,1,13,1,13,1,13,1,13,1,13,3,13,1593,8,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,
        1607,8,15,10,15,12,15,1610,9,15,1,15,1,15,3,15,1614,8,15,1,15,1,
        15,1,15,5,15,1619,8,15,10,15,12,15,1622,9,15,3,15,1624,8,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,5,15,1633,8,15,10,15,12,15,1636,9,
        15,3,15,1638,8,15,1,15,1,15,3,15,1642,8,15,1,15,1,15,1,15,5,15,1647,
        8,15,10,15,12,15,1650,9,15,3,15,1652,8,15,1,16,1,16,1,16,1,16,1,
        16,3,16,1659,8,16,1,16,1,16,1,16,1,16,1,16,3,16,1666,8,16,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1676,8,17,1,17,1,17,3,17,1680,
        8,17,3,17,1682,8,17,1,18,1,18,1,18,1,18,3,18,1688,8,18,1,18,3,18,
        1691,8,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,3,18,1705,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,3,19,1719,8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,
        1727,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1738,
        8,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1746,8,19,1,20,1,20,1,20,
        1,20,1,20,5,20,1753,8,20,10,20,12,20,1756,9,20,1,20,1,20,3,20,1760,
        8,20,1,20,1,20,3,20,1764,8,20,1,20,3,20,1767,8,20,1,20,1,20,1,20,
        3,20,1772,8,20,1,20,1,20,1,20,3,20,1777,8,20,5,20,1779,8,20,10,20,
        12,20,1782,9,20,1,20,1,20,3,20,1786,8,20,1,20,1,20,3,20,1790,8,20,
        1,20,1,20,1,20,1,20,3,20,1796,8,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,1814,8,20,
        10,20,12,20,1817,9,20,1,20,1,20,3,20,1821,8,20,1,21,1,21,1,21,1,
        21,1,21,3,21,1828,8,21,1,21,1,21,1,21,1,21,3,21,1834,8,21,1,21,1,
        21,1,21,1,21,1,21,1,21,5,21,1842,8,21,10,21,12,21,1845,9,21,1,21,
        1,21,1,21,1,21,3,21,1851,8,21,1,21,3,21,1854,8,21,1,21,1,21,1,21,
        1,21,1,21,1,21,5,21,1862,8,21,10,21,12,21,1865,9,21,1,21,1,21,3,
        21,1869,8,21,1,22,1,22,3,22,1873,8,22,1,22,3,22,1876,8,22,1,22,1,
        22,3,22,1880,8,22,1,22,3,22,1883,8,22,1,22,1,22,1,22,3,22,1888,8,
        22,1,22,1,22,1,22,1,22,5,22,1894,8,22,10,22,12,22,1897,9,22,1,22,
        1,22,3,22,1901,8,22,1,22,3,22,1904,8,22,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,5,23,1913,8,23,10,23,12,23,1916,9,23,1,23,1,23,3,23,1920,
        8,23,1,23,1,23,1,23,5,23,1925,8,23,10,23,12,23,1928,9,23,3,23,1930,
        8,23,1,23,1,23,1,23,3,23,1935,8,23,1,23,1,23,3,23,1939,8,23,3,23,
        1941,8,23,1,23,1,23,3,23,1945,8,23,1,24,1,24,1,24,1,24,3,24,1951,
        8,24,1,24,1,24,3,24,1955,8,24,1,25,1,25,1,25,1,25,4,25,1961,8,25,
        11,25,12,25,1962,1,25,4,25,1966,8,25,11,25,12,25,1967,1,25,1,25,
        5,25,1972,8,25,10,25,12,25,1975,9,25,1,25,4,25,1978,8,25,11,25,12,
        25,1979,3,25,1982,8,25,1,26,1,26,1,26,1,26,1,26,5,26,1989,8,26,10,
        26,12,26,1992,9,26,1,26,1,26,1,26,1,26,1,26,3,26,1999,8,26,1,26,
        1,26,3,26,2003,8,26,1,26,1,26,1,26,1,26,3,26,2009,8,26,1,26,1,26,
        1,26,3,26,2014,8,26,1,27,1,27,1,27,3,27,2019,8,27,1,27,1,27,1,27,
        1,27,3,27,2025,8,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,2033,8,28,
        1,28,1,28,3,28,2037,8,28,1,28,1,28,1,28,1,28,3,28,2043,8,28,1,28,
        1,28,1,28,3,28,2048,8,28,1,29,1,29,1,29,3,29,2053,8,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,2064,8,29,3,29,2066,8,29,
        1,30,1,30,1,30,1,30,1,30,5,30,2073,8,30,10,30,12,30,2076,9,30,1,
        31,1,31,3,31,2080,8,31,1,31,1,31,1,31,1,31,5,31,2086,8,31,10,31,
        12,31,2089,9,31,1,32,1,32,1,32,1,32,1,32,1,32,5,32,2097,8,32,10,
        32,12,32,2100,9,32,1,33,1,33,1,33,1,33,1,33,5,33,2107,8,33,10,33,
        12,33,2110,9,33,1,34,1,34,3,34,2114,8,34,1,34,1,34,3,34,2118,8,34,
        1,34,1,34,1,34,3,34,2123,8,34,1,34,5,34,2126,8,34,10,34,12,34,2129,
        9,34,1,35,1,35,1,35,1,35,3,35,2135,8,35,1,35,1,35,1,35,3,35,2140,
        8,35,1,35,5,35,2143,8,35,10,35,12,35,2146,9,35,1,36,3,36,2149,8,
        36,1,36,1,36,1,36,1,36,1,36,5,36,2156,8,36,10,36,12,36,2159,9,36,
        3,36,2161,8,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,2169,8,36,1,36,
        1,36,3,36,2173,8,36,1,36,3,36,2176,8,36,1,36,5,36,2179,8,36,10,36,
        12,36,2182,9,36,1,36,1,36,4,36,2186,8,36,11,36,12,36,2187,1,36,4,
        36,2191,8,36,11,36,12,36,2192,1,36,1,36,5,36,2197,8,36,10,36,12,
        36,2200,9,36,3,36,2202,8,36,1,37,3,37,2205,8,37,1,37,1,37,1,37,1,
        37,1,37,5,37,2212,8,37,10,37,12,37,2215,9,37,1,37,1,37,3,37,2219,
        8,37,1,37,1,37,3,37,2223,8,37,1,37,1,37,1,38,1,38,3,38,2229,8,38,
        1,38,1,38,1,38,1,38,1,38,1,38,5,38,2237,8,38,10,38,12,38,2240,9,
        38,1,38,1,38,1,38,1,38,3,38,2246,8,38,1,38,1,38,3,38,2250,8,38,1,
        39,1,39,1,39,3,39,2255,8,39,1,39,1,39,3,39,2259,8,39,1,39,1,39,1,
        39,1,39,1,39,3,39,2266,8,39,1,39,1,39,1,39,1,39,5,39,2272,8,39,10,
        39,12,39,2275,9,39,3,39,2277,8,39,1,39,1,39,1,39,3,39,2282,8,39,
        1,39,1,39,1,39,1,39,5,39,2288,8,39,10,39,12,39,2291,9,39,3,39,2293,
        8,39,1,39,1,39,1,39,1,39,5,39,2299,8,39,10,39,12,39,2302,9,39,3,
        39,2304,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,3,40,2408,8,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,2416,8,41,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,2439,8,42,1,43,1,43,1,
        43,1,43,1,43,1,43,3,43,2447,8,43,1,43,1,43,1,43,3,43,2452,8,43,1,
        43,3,43,2455,8,43,1,43,1,43,1,43,3,43,2460,8,43,1,43,3,43,2463,8,
        43,3,43,2465,8,43,3,43,2467,8,43,1,43,1,43,3,43,2471,8,43,1,43,1,
        43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,5,44,2484,8,44,10,
        44,12,44,2487,9,44,3,44,2489,8,44,1,44,1,44,1,44,3,44,2494,8,44,
        1,44,1,44,1,44,1,44,3,44,2500,8,44,3,44,2502,8,44,1,44,1,44,1,44,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,2515,8,45,1,45,1,45,
        1,45,1,45,1,45,3,45,2522,8,45,1,45,1,45,1,45,1,45,1,45,3,45,2529,
        8,45,1,45,3,45,2532,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,2548,8,46,1,46,3,46,2551,8,46,
        3,46,2553,8,46,1,47,1,47,1,47,3,47,2558,8,47,1,48,1,48,3,48,2562,
        8,48,1,49,1,49,1,49,5,49,2567,8,49,10,49,12,49,2570,9,49,1,49,3,
        49,2573,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,2582,8,50,10,
        50,12,50,2585,9,50,1,50,1,50,3,50,2589,8,50,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,5,51,2598,8,51,10,51,12,51,2601,9,51,1,51,1,51,3,
        51,2605,8,51,1,52,1,52,3,52,2609,8,52,1,52,1,52,1,52,1,52,1,52,1,
        52,1,53,1,53,3,53,2619,8,53,1,53,1,53,1,53,1,53,1,53,5,53,2626,8,
        53,10,53,12,53,2629,9,53,3,53,2631,8,53,1,53,3,53,2634,8,53,1,53,
        1,53,1,53,1,53,5,53,2640,8,53,10,53,12,53,2643,9,53,3,53,2645,8,
        53,1,53,1,53,1,53,5,53,2650,8,53,10,53,12,53,2653,9,53,3,53,2655,
        8,53,1,53,1,53,3,53,2659,8,53,1,53,1,53,3,53,2663,8,53,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,2680,8,54,1,54,3,54,2683,8,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,3,54,2693,8,54,1,54,1,54,3,54,2697,8,54,1,55,3,55,2700,
        8,55,1,55,3,55,2703,8,55,1,55,1,55,1,55,1,55,3,55,2709,8,55,1,56,
        1,56,3,56,2713,8,56,1,56,3,56,2716,8,56,1,56,1,56,1,56,1,56,5,56,
        2722,8,56,10,56,12,56,2725,9,56,1,56,1,56,3,56,2729,8,56,3,56,2731,
        8,56,1,57,1,57,3,57,2735,8,57,1,57,3,57,2738,8,57,1,57,1,57,1,57,
        3,57,2743,8,57,1,57,1,57,1,57,3,57,2748,8,57,5,57,2750,8,57,10,57,
        12,57,2753,9,57,1,57,1,57,3,57,2757,8,57,1,57,3,57,2760,8,57,1,57,
        1,57,3,57,2764,8,57,1,58,3,58,2767,8,58,1,58,1,58,1,59,1,59,1,59,
        3,59,2774,8,59,1,59,1,59,1,59,3,59,2779,8,59,1,59,1,59,1,59,1,59,
        3,59,2785,8,59,1,59,1,59,1,59,3,59,2790,8,59,5,59,2792,8,59,10,59,
        12,59,2795,9,59,1,59,3,59,2798,8,59,3,59,2800,8,59,1,60,1,60,3,60,
        2804,8,60,1,60,3,60,2807,8,60,1,60,1,60,1,60,1,60,3,60,2813,8,60,
        1,60,3,60,2816,8,60,1,60,1,60,1,60,3,60,2821,8,60,1,61,1,61,1,61,
        1,61,1,61,1,61,3,61,2829,8,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,
        1,62,3,62,2839,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,5,63,2848,
        8,63,10,63,12,63,2851,9,63,3,63,2853,8,63,1,63,1,63,1,63,1,63,1,
        63,5,63,2860,8,63,10,63,12,63,2863,9,63,1,63,5,63,2866,8,63,10,63,
        12,63,2869,9,63,1,63,1,63,5,63,2873,8,63,10,63,12,63,2876,9,63,1,
        63,5,63,2879,8,63,10,63,12,63,2882,9,63,1,63,1,63,1,63,3,63,2887,
        8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,5,64,2904,8,64,10,64,12,64,2907,9,64,3,64,2909,8,
        64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,2917,8,64,10,64,12,64,2920,
        9,64,1,64,5,64,2923,8,64,10,64,12,64,2926,9,64,1,64,1,64,5,64,2930,
        8,64,10,64,12,64,2933,9,64,1,64,5,64,2936,8,64,10,64,12,64,2939,
        9,64,1,64,1,64,1,64,3,64,2944,8,64,1,64,3,64,2947,8,64,1,64,1,64,
        1,64,1,64,3,64,2953,8,64,3,64,2955,8,64,1,64,3,64,2958,8,64,1,64,
        1,64,1,64,1,64,3,64,2964,8,64,1,64,3,64,2967,8,64,3,64,2969,8,64,
        1,64,1,64,3,64,2973,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,
        2982,8,65,10,65,12,65,2985,9,65,3,65,2987,8,65,1,65,1,65,1,65,1,
        65,1,65,1,65,3,65,2995,8,65,1,65,1,65,5,65,2999,8,65,10,65,12,65,
        3002,9,65,1,65,5,65,3005,8,65,10,65,12,65,3008,9,65,1,65,1,65,5,
        65,3012,8,65,10,65,12,65,3015,9,65,1,65,5,65,3018,8,65,10,65,12,
        65,3021,9,65,1,65,1,65,1,65,1,65,3,65,3027,8,65,1,65,1,65,1,65,1,
        65,3,65,3033,8,65,3,65,3035,8,65,1,65,3,65,3038,8,65,1,65,1,65,1,
        65,1,65,3,65,3044,8,65,1,65,3,65,3047,8,65,3,65,3049,8,65,1,66,1,
        66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,3,69,3063,8,
        69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,3075,8,
        69,1,70,1,70,1,70,1,70,5,70,3081,8,70,10,70,12,70,3084,9,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,3096,8,70,3,70,
        3098,8,70,3,70,3100,8,70,1,71,3,71,3103,8,71,1,71,1,71,1,72,1,72,
        1,72,1,73,1,73,1,73,3,73,3113,8,73,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,3121,8,73,1,74,1,74,1,74,1,74,1,75,3,75,3128,8,75,1,75,1,75,
        1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,3142,8,77,
        1,77,1,77,3,77,3146,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,3,77,3160,8,77,1,78,1,78,1,78,1,78,1,79,1,79,
        1,79,1,80,1,80,1,80,1,80,1,80,3,80,3174,8,80,1,80,1,80,1,80,1,80,
        1,80,5,80,3181,8,80,10,80,12,80,3184,9,80,1,80,1,80,3,80,3188,8,
        80,1,80,1,80,1,80,3,80,3193,8,80,1,80,3,80,3196,8,80,1,80,1,80,1,
        80,3,80,3201,8,80,1,80,1,80,4,80,3205,8,80,11,80,12,80,3206,1,80,
        1,80,1,81,1,81,1,81,1,81,1,81,1,81,5,81,3217,8,81,10,81,12,81,3220,
        9,81,1,81,1,81,3,81,3224,8,81,1,81,5,81,3227,8,81,10,81,12,81,3230,
        9,81,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,5,83,3241,8,83,
        10,83,12,83,3244,9,83,3,83,3246,8,83,1,83,1,83,1,83,1,83,5,83,3252,
        8,83,10,83,12,83,3255,9,83,1,83,1,83,1,84,3,84,3260,8,84,1,84,1,
        84,1,84,5,84,3265,8,84,10,84,12,84,3268,9,84,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,3,85,3278,8,85,1,86,1,86,1,86,1,86,1,86,1,87,
        1,87,1,87,1,87,1,88,1,88,3,88,3291,8,88,1,89,1,89,1,89,1,89,1,89,
        1,89,1,89,1,89,3,89,3301,8,89,1,89,1,89,3,89,3305,8,89,1,89,1,89,
        1,89,1,89,1,89,1,89,1,89,1,89,1,89,4,89,3316,8,89,11,89,12,89,3317,
        1,89,1,89,1,89,3,89,3323,8,89,1,89,1,89,1,90,1,90,1,90,3,90,3330,
        8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,3,91,3347,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,3,92,3396,8,92,1,93,1,93,1,93,3,93,3401,8,93,1,94,1,94,1,94,
        3,94,3406,8,94,1,94,1,94,5,94,3410,8,94,10,94,12,94,3413,9,94,1,
        94,5,94,3416,8,94,10,94,12,94,3419,9,94,1,94,5,94,3422,8,94,10,94,
        12,94,3425,9,94,1,94,5,94,3428,8,94,10,94,12,94,3431,9,94,1,94,1,
        94,3,94,3435,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
        95,3,95,3447,8,95,1,96,1,96,1,96,1,96,1,96,1,97,1,97,3,97,3456,8,
        97,1,98,1,98,1,98,1,98,3,98,3462,8,98,1,99,1,99,1,99,1,99,3,99,3468,
        8,99,3,99,3470,8,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
        5,99,3481,8,99,10,99,12,99,3484,9,99,3,99,3486,8,99,1,99,1,99,1,
        99,1,99,1,99,5,99,3493,8,99,10,99,12,99,3496,9,99,1,99,1,99,1,99,
        1,99,1,99,3,99,3503,8,99,1,99,1,99,1,99,5,99,3508,8,99,10,99,12,
        99,3511,9,99,3,99,3513,8,99,1,100,1,100,1,100,1,100,5,100,3519,8,
        100,10,100,12,100,3522,9,100,1,101,1,101,1,101,1,101,5,101,3528,
        8,101,10,101,12,101,3531,9,101,1,101,1,101,5,101,3535,8,101,10,101,
        12,101,3538,9,101,1,101,1,101,1,101,1,101,3,101,3544,8,101,3,101,
        3546,8,101,1,101,1,101,1,102,1,102,1,102,3,102,3553,8,102,1,102,
        3,102,3556,8,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,3564,
        8,102,1,102,1,102,3,102,3568,8,102,3,102,3570,8,102,1,102,1,102,
        3,102,3574,8,102,1,102,3,102,3577,8,102,1,102,1,102,1,102,1,102,
        1,102,3,102,3584,8,102,3,102,3586,8,102,1,102,3,102,3589,8,102,1,
        102,1,102,1,102,1,102,1,102,3,102,3596,8,102,3,102,3598,8,102,1,
        102,1,102,1,103,1,103,1,103,1,103,1,103,1,103,3,103,3608,8,103,1,
        103,1,103,1,103,1,103,5,103,3614,8,103,10,103,12,103,3617,9,103,
        1,103,1,103,1,103,1,103,1,103,3,103,3624,8,103,1,103,1,103,1,103,
        1,103,1,103,1,103,3,103,3632,8,103,5,103,3634,8,103,10,103,12,103,
        3637,9,103,3,103,3639,8,103,1,103,1,103,1,104,1,104,1,104,1,104,
        1,104,1,104,1,104,1,105,1,105,1,105,1,106,1,106,1,106,1,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,3,108,
        3668,8,108,1,108,3,108,3671,8,108,1,108,1,108,1,108,1,108,5,108,
        3677,8,108,10,108,12,108,3680,9,108,1,108,1,108,1,108,1,108,1,108,
        1,109,1,109,1,109,1,109,1,109,1,109,5,109,3693,8,109,10,109,12,109,
        3696,9,109,3,109,3698,8,109,1,110,1,110,1,110,1,110,1,111,1,111,
        3,111,3706,8,111,1,111,3,111,3709,8,111,1,111,1,111,1,111,1,111,
        1,111,5,111,3716,8,111,10,111,12,111,3719,9,111,1,112,1,112,1,112,
        1,112,1,112,1,112,5,112,3727,8,112,10,112,12,112,3730,9,112,3,112,
        3732,8,112,1,113,1,113,1,113,1,113,1,113,3,113,3739,8,113,1,114,
        1,114,1,114,4,114,3744,8,114,11,114,12,114,3745,1,114,4,114,3749,
        8,114,11,114,12,114,3750,3,114,3753,8,114,1,114,1,114,4,114,3757,
        8,114,11,114,12,114,3758,3,114,3761,8,114,1,114,1,114,1,114,1,115,
        1,115,1,115,1,115,4,115,3770,8,115,11,115,12,115,3771,1,116,1,116,
        1,116,1,116,4,116,3778,8,116,11,116,12,116,3779,1,117,1,117,1,117,
        1,117,4,117,3786,8,117,11,117,12,117,3787,1,117,1,117,1,117,1,117,
        4,117,3794,8,117,11,117,12,117,3795,5,117,3798,8,117,10,117,12,117,
        3801,9,117,1,117,1,117,4,117,3805,8,117,11,117,12,117,3806,3,117,
        3809,8,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,4,118,3818,
        8,118,11,118,12,118,3819,1,118,1,118,1,118,1,119,1,119,4,119,3827,
        8,119,11,119,12,119,3828,1,119,1,119,1,119,1,120,1,120,1,120,1,120,
        1,120,1,120,1,120,3,120,3841,8,120,1,120,3,120,3844,8,120,1,120,
        3,120,3847,8,120,1,120,1,120,1,120,4,120,3852,8,120,11,120,12,120,
        3853,1,120,1,120,1,120,1,121,1,121,4,121,3861,8,121,11,121,12,121,
        3862,1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,123,
        1,123,1,123,1,123,1,124,1,124,1,125,1,125,1,126,1,126,3,126,3884,
        8,126,1,127,1,127,3,127,3888,8,127,1,127,1,127,1,128,1,128,3,128,
        3894,8,128,1,128,1,128,1,128,1,128,3,128,3900,8,128,1,128,3,128,
        3903,8,128,1,128,1,128,3,128,3907,8,128,1,128,1,128,3,128,3911,8,
        128,1,128,3,128,3914,8,128,1,128,3,128,3917,8,128,1,128,1,128,1,
        129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,3929,8,129,1,
        129,1,129,3,129,3933,8,129,3,129,3935,8,129,1,129,1,129,1,129,3,
        129,3940,8,129,1,129,1,129,1,130,1,130,1,130,3,130,3947,8,130,1,
        130,1,130,1,130,3,130,3952,8,130,1,130,1,130,1,130,1,130,5,130,3958,
        8,130,10,130,12,130,3961,9,130,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,1,131,1,131,3,131,3972,8,131,1,132,1,132,1,132,1,132,5,132,
        3978,8,132,10,132,12,132,3981,9,132,1,132,1,132,3,132,3985,8,132,
        1,132,1,132,1,133,3,133,3990,8,133,1,133,1,133,3,133,3994,8,133,
        1,133,3,133,3997,8,133,1,133,1,133,1,133,1,133,5,133,4003,8,133,
        10,133,12,133,4006,9,133,1,133,1,133,3,133,4010,8,133,1,133,3,133,
        4013,8,133,1,134,1,134,1,134,1,134,1,134,1,134,1,134,5,134,4022,
        8,134,10,134,12,134,4025,9,134,1,134,1,134,1,134,1,134,3,134,4031,
        8,134,1,134,5,134,4034,8,134,10,134,12,134,4037,9,134,3,134,4039,
        8,134,1,135,1,135,1,135,1,135,5,135,4045,8,135,10,135,12,135,4048,
        9,135,1,135,1,135,1,135,1,135,5,135,4054,8,135,10,135,12,135,4057,
        9,135,1,135,1,135,1,135,1,135,1,135,1,135,5,135,4065,8,135,10,135,
        12,135,4068,9,135,1,135,1,135,1,135,3,135,4073,8,135,1,135,1,135,
        1,135,1,135,5,135,4079,8,135,10,135,12,135,4082,9,135,1,135,1,135,
        3,135,4086,8,135,1,135,1,135,3,135,4090,8,135,3,135,4092,8,135,1,
        135,1,135,1,135,1,135,5,135,4098,8,135,10,135,12,135,4101,9,135,
        1,135,3,135,4104,8,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,136,1,136,3,136,4116,8,136,1,137,1,137,1,137,1,137,1,137,
        1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,1,137,
        1,137,1,137,3,137,4136,8,137,1,137,3,137,4139,8,137,1,137,3,137,
        4142,8,137,1,138,1,138,3,138,4146,8,138,1,138,3,138,4149,8,138,1,
        138,3,138,4152,8,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,
        139,4161,8,139,1,139,3,139,4164,8,139,3,139,4166,8,139,1,139,1,139,
        1,139,1,139,3,139,4172,8,139,3,139,4174,8,139,1,139,1,139,1,139,
        1,139,1,139,5,139,4181,8,139,10,139,12,139,4184,9,139,1,140,1,140,
        1,140,5,140,4189,8,140,10,140,12,140,4192,9,140,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,5,141,4201,8,141,10,141,12,141,4204,9,141,
        3,141,4206,8,141,1,142,1,142,1,142,1,142,1,142,5,142,4213,8,142,
        10,142,12,142,4216,9,142,1,142,3,142,4219,8,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,1,142,1,142,3,142,4230,8,142,1,142,3,142,
        4233,8,142,1,142,1,142,3,142,4237,8,142,1,142,1,142,1,142,1,142,
        1,142,5,142,4244,8,142,10,142,12,142,4247,9,142,1,142,1,142,1,142,
        3,142,4252,8,142,1,142,1,142,1,142,1,142,1,142,3,142,4259,8,142,
        1,142,1,142,3,142,4263,8,142,1,142,1,142,1,142,1,142,1,142,1,142,
        1,142,1,142,1,142,1,142,5,142,4275,8,142,10,142,12,142,4278,9,142,
        3,142,4280,8,142,1,142,1,142,1,142,1,142,1,142,1,142,3,142,4288,
        8,142,1,142,1,142,1,142,1,142,1,142,5,142,4295,8,142,10,142,12,142,
        4298,9,142,3,142,4300,8,142,1,143,1,143,1,143,1,143,3,143,4306,8,
        143,1,143,1,143,1,143,1,143,3,143,4312,8,143,1,143,1,143,1,143,1,
        143,3,143,4318,8,143,1,143,1,143,1,143,1,143,3,143,4324,8,143,1,
        143,1,143,1,143,1,143,3,143,4330,8,143,1,143,1,143,1,143,1,143,3,
        143,4336,8,143,1,143,1,143,1,143,1,143,3,143,4342,8,143,1,143,1,
        143,1,143,1,143,3,143,4348,8,143,1,143,1,143,1,143,1,143,3,143,4354,
        8,143,3,143,4356,8,143,1,144,1,144,1,144,1,144,3,144,4362,8,144,
        1,144,1,144,3,144,4366,8,144,1,144,3,144,4369,8,144,1,144,1,144,
        1,144,3,144,4374,8,144,1,144,1,144,1,144,3,144,4379,8,144,3,144,
        4381,8,144,1,145,1,145,1,145,3,145,4386,8,145,1,145,1,145,1,145,
        1,146,1,146,4,146,4393,8,146,11,146,12,146,4394,1,147,1,147,1,147,
        1,147,1,147,1,148,1,148,3,148,4404,8,148,1,149,1,149,1,149,1,149,
        1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,152,1,152,1,153,1,153,
        1,153,1,153,1,153,1,153,5,153,4425,8,153,10,153,12,153,4428,9,153,
        1,153,1,153,1,153,1,153,5,153,4434,8,153,10,153,12,153,4437,9,153,
        1,153,1,153,1,153,1,153,1,153,1,153,1,153,1,153,5,153,4447,8,153,
        10,153,12,153,4450,9,153,3,153,4452,8,153,1,153,1,153,1,153,1,153,
        3,153,4458,8,153,1,153,1,153,1,153,1,153,5,153,4464,8,153,10,153,
        12,153,4467,9,153,1,153,1,153,3,153,4471,8,153,3,153,4473,8,153,
        1,154,1,154,3,154,4477,8,154,1,154,1,154,1,154,1,155,1,155,1,155,
        1,155,1,155,1,155,3,155,4488,8,155,1,156,1,156,3,156,4492,8,156,
        1,156,1,156,3,156,4496,8,156,1,156,1,156,1,156,5,156,4501,8,156,
        10,156,12,156,4504,9,156,1,156,1,156,1,156,1,156,5,156,4510,8,156,
        10,156,12,156,4513,9,156,1,156,1,156,1,156,3,156,4518,8,156,1,156,
        5,156,4521,8,156,10,156,12,156,4524,9,156,3,156,4526,8,156,1,156,
        3,156,4529,8,156,1,157,1,157,3,157,4533,8,157,1,157,1,157,3,157,
        4537,8,157,1,157,1,157,1,157,5,157,4542,8,157,10,157,12,157,4545,
        9,157,1,157,1,157,1,157,1,157,5,157,4551,8,157,10,157,12,157,4554,
        9,157,1,157,1,157,3,157,4558,8,157,1,157,1,157,1,157,1,157,3,157,
        4564,8,157,1,157,1,157,1,157,3,157,4569,8,157,1,157,1,157,3,157,
        4573,8,157,1,157,1,157,1,157,3,157,4578,8,157,1,157,3,157,4581,8,
        157,1,157,1,157,3,157,4585,8,157,1,157,5,157,4588,8,157,10,157,12,
        157,4591,9,157,3,157,4593,8,157,1,157,3,157,4596,8,157,1,158,1,158,
        3,158,4600,8,158,1,158,1,158,3,158,4604,8,158,1,158,1,158,1,158,
        1,158,1,158,5,158,4611,8,158,10,158,12,158,4614,9,158,1,158,1,158,
        1,158,1,158,5,158,4620,8,158,10,158,12,158,4623,9,158,1,158,1,158,
        5,158,4627,8,158,10,158,12,158,4630,9,158,1,158,1,158,1,158,3,158,
        4635,8,158,1,158,5,158,4638,8,158,10,158,12,158,4641,9,158,3,158,
        4643,8,158,1,159,1,159,3,159,4647,8,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,5,159,4656,8,159,10,159,12,159,4659,9,159,1,159,
        1,159,1,159,1,159,3,159,4665,8,159,1,159,1,159,1,159,1,159,1,159,
        5,159,4672,8,159,10,159,12,159,4675,9,159,1,159,1,159,3,159,4679,
        8,159,1,160,1,160,3,160,4683,8,160,1,160,1,160,1,160,1,160,1,160,
        5,160,4690,8,160,10,160,12,160,4693,9,160,1,160,1,160,3,160,4697,
        8,160,1,160,1,160,1,160,1,160,1,160,1,160,1,160,5,160,4706,8,160,
        10,160,12,160,4709,9,160,3,160,4711,8,160,1,160,1,160,3,160,4715,
        8,160,1,160,1,160,1,160,1,160,5,160,4721,8,160,10,160,12,160,4724,
        9,160,1,160,1,160,3,160,4728,8,160,1,160,1,160,1,160,3,160,4733,
        8,160,1,160,3,160,4736,8,160,1,160,1,160,1,160,3,160,4741,8,160,
        1,161,1,161,1,161,1,161,3,161,4747,8,161,1,161,1,161,1,161,1,161,
        3,161,4753,8,161,1,162,1,162,1,162,1,162,3,162,4759,8,162,1,162,
        1,162,1,162,3,162,4764,8,162,1,162,1,162,1,162,1,162,1,162,3,162,
        4771,8,162,3,162,4773,8,162,1,163,1,163,1,163,1,163,1,163,1,163,
        1,163,1,163,3,163,4783,8,163,1,163,1,163,1,163,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,3,163,4795,8,163,1,163,1,163,1,163,1,163,
        3,163,4801,8,163,1,164,1,164,5,164,4805,8,164,10,164,12,164,4808,
        9,164,1,164,1,164,5,164,4812,8,164,10,164,12,164,4815,9,164,1,164,
        1,164,1,164,1,164,5,164,4821,8,164,10,164,12,164,4824,9,164,1,164,
        1,164,5,164,4828,8,164,10,164,12,164,4831,9,164,1,164,1,164,3,164,
        4835,8,164,1,164,1,164,3,164,4839,8,164,1,164,1,164,1,164,1,164,
        1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,164,4852,8,164,1,165,
        1,165,5,165,4856,8,165,10,165,12,165,4859,9,165,1,165,1,165,1,165,
        1,165,5,165,4865,8,165,10,165,12,165,4868,9,165,1,165,1,165,3,165,
        4872,8,165,1,165,1,165,3,165,4876,8,165,1,165,3,165,4879,8,165,1,
        166,3,166,4882,8,166,1,166,3,166,4885,8,166,1,166,1,166,3,166,4889,
        8,166,1,166,1,166,1,166,1,166,5,166,4895,8,166,10,166,12,166,4898,
        9,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,4908,
        8,166,1,166,3,166,4911,8,166,1,166,1,166,1,166,1,166,5,166,4917,
        8,166,10,166,12,166,4920,9,166,1,166,1,166,1,166,1,166,1,166,1,166,
        1,166,1,166,1,166,5,166,4931,8,166,10,166,12,166,4934,9,166,1,166,
        1,166,3,166,4938,8,166,1,166,1,166,1,166,3,166,4943,8,166,1,166,
        1,166,1,166,1,166,5,166,4949,8,166,10,166,12,166,4952,9,166,1,166,
        1,166,3,166,4956,8,166,1,166,3,166,4959,8,166,1,166,1,166,3,166,
        4963,8,166,1,166,1,166,1,166,1,166,1,166,5,166,4970,8,166,10,166,
        12,166,4973,9,166,1,166,1,166,3,166,4977,8,166,1,166,3,166,4980,
        8,166,3,166,4982,8,166,1,167,1,167,1,167,3,167,4987,8,167,1,167,
        3,167,4990,8,167,1,167,1,167,1,167,1,167,1,167,3,167,4997,8,167,
        1,168,1,168,1,168,1,168,3,168,5003,8,168,1,168,1,168,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,170,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
        1,170,1,170,3,170,5033,8,170,1,171,1,171,1,171,1,171,1,171,1,171,
        1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
        1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
        3,171,5063,8,171,1,172,1,172,1,172,1,172,1,172,1,173,1,173,1,173,
        1,173,1,173,1,173,3,173,5076,8,173,1,173,1,173,3,173,5080,8,173,
        1,174,1,174,1,174,1,174,3,174,5086,8,174,1,174,1,174,3,174,5090,
        8,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,5099,8,175,
        1,175,1,175,1,175,1,175,1,175,3,175,5106,8,175,3,175,5108,8,175,
        1,176,1,176,1,176,3,176,5113,8,176,1,177,1,177,1,177,1,177,1,177,
        1,177,1,177,1,177,1,177,1,177,3,177,5125,8,177,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,5,178,5137,8,178,10,178,
        12,178,5140,9,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,3,178,5151,8,178,1,179,1,179,1,179,1,179,1,179,1,179,3,179,
        5159,8,179,1,180,1,180,3,180,5163,8,180,1,180,1,180,1,180,1,180,
        1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,5,180,5177,8,180,
        10,180,12,180,5180,9,180,1,180,1,180,3,180,5184,8,180,1,181,3,181,
        5187,8,181,1,181,1,181,1,181,1,182,1,182,1,182,1,182,3,182,5196,
        8,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,3,182,5216,8,182,
        1,182,4,182,5219,8,182,11,182,12,182,5220,1,182,1,182,1,183,3,183,
        5226,8,183,1,183,1,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        5,184,5237,8,184,10,184,12,184,5240,9,184,1,184,1,184,3,184,5244,
        8,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,
        5255,8,184,3,184,5257,8,184,3,184,5259,8,184,1,185,1,185,3,185,5263,
        8,185,1,185,1,185,1,185,3,185,5268,8,185,1,185,1,185,1,185,1,185,
        5,185,5274,8,185,10,185,12,185,5277,9,185,1,185,1,185,1,185,1,185,
        1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,5,185,5292,
        8,185,10,185,12,185,5295,9,185,1,185,1,185,1,185,3,185,5300,8,185,
        1,186,1,186,1,186,3,186,5305,8,186,1,186,1,186,3,186,5309,8,186,
        1,186,1,186,1,186,1,186,1,186,5,186,5316,8,186,10,186,12,186,5319,
        9,186,1,186,1,186,3,186,5323,8,186,1,187,1,187,1,187,3,187,5328,
        8,187,1,187,1,187,3,187,5332,8,187,1,187,1,187,3,187,5336,8,187,
        1,187,1,187,3,187,5340,8,187,1,187,1,187,3,187,5344,8,187,1,187,
        1,187,1,187,5,187,5349,8,187,10,187,12,187,5352,9,187,3,187,5354,
        8,187,1,187,1,187,3,187,5358,8,187,1,188,1,188,3,188,5362,8,188,
        1,188,1,188,1,188,1,188,1,188,5,188,5369,8,188,10,188,12,188,5372,
        9,188,1,188,1,188,3,188,5376,8,188,1,188,3,188,5379,8,188,1,188,
        1,188,3,188,5383,8,188,1,188,1,188,1,189,1,189,1,189,3,189,5390,
        8,189,1,190,1,190,1,190,3,190,5395,8,190,1,190,1,190,1,190,1,190,
        1,190,1,190,5,190,5403,8,190,10,190,12,190,5406,9,190,1,190,1,190,
        3,190,5410,8,190,1,190,1,190,1,190,1,190,1,190,5,190,5417,8,190,
        10,190,12,190,5420,9,190,3,190,5422,8,190,1,191,1,191,1,191,3,191,
        5427,8,191,1,191,1,191,1,191,1,191,1,191,3,191,5434,8,191,1,192,
        1,192,1,192,1,192,3,192,5440,8,192,1,193,1,193,1,193,3,193,5445,
        8,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,3,193,
        5456,8,193,1,194,1,194,1,194,3,194,5461,8,194,1,194,1,194,1,194,
        1,194,1,194,3,194,5468,8,194,1,194,1,194,1,194,1,194,1,194,1,194,
        1,194,3,194,5477,8,194,1,195,1,195,1,195,3,195,5482,8,195,1,195,
        1,195,1,195,1,195,1,195,1,195,4,195,5490,8,195,11,195,12,195,5491,
        1,195,1,195,3,195,5496,8,195,1,196,1,196,1,196,3,196,5501,8,196,
        1,196,1,196,1,196,1,196,1,196,3,196,5508,8,196,1,196,1,196,4,196,
        5512,8,196,11,196,12,196,5513,1,196,1,196,1,196,1,196,3,196,5520,
        8,196,1,197,1,197,1,197,1,198,3,198,5526,8,198,1,198,1,198,3,198,
        5530,8,198,1,198,1,198,1,198,1,198,1,198,5,198,5537,8,198,10,198,
        12,198,5540,9,198,3,198,5542,8,198,1,198,1,198,1,198,1,198,1,198,
        1,198,1,198,1,198,3,198,5552,8,198,3,198,5554,8,198,1,198,1,198,
        3,198,5558,8,198,1,198,3,198,5561,8,198,1,198,1,198,1,198,3,198,
        5566,8,198,1,198,5,198,5569,8,198,10,198,12,198,5572,9,198,1,198,
        1,198,4,198,5576,8,198,11,198,12,198,5577,1,198,4,198,5581,8,198,
        11,198,12,198,5582,1,198,1,198,5,198,5587,8,198,10,198,12,198,5590,
        9,198,3,198,5592,8,198,1,199,3,199,5595,8,199,1,199,1,199,3,199,
        5599,8,199,1,199,1,199,1,199,1,199,1,199,5,199,5606,8,199,10,199,
        12,199,5609,9,199,3,199,5611,8,199,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,1,199,3,199,5621,8,199,3,199,5623,8,199,1,199,1,199,
        3,199,5627,8,199,1,199,3,199,5630,8,199,1,199,1,199,1,199,3,199,
        5635,8,199,1,199,5,199,5638,8,199,10,199,12,199,5641,9,199,1,199,
        1,199,4,199,5645,8,199,11,199,12,199,5646,1,199,4,199,5650,8,199,
        11,199,12,199,5651,1,199,1,199,5,199,5656,8,199,10,199,12,199,5659,
        9,199,3,199,5661,8,199,1,200,3,200,5664,8,200,1,200,1,200,1,200,
        3,200,5669,8,200,1,201,1,201,1,201,3,201,5674,8,201,1,202,1,202,
        1,202,1,203,1,203,3,203,5681,8,203,1,203,1,203,1,203,1,203,1,203,
        3,203,5688,8,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,
        1,203,1,203,1,203,1,203,3,203,5702,8,203,1,204,1,204,1,204,3,204,
        5707,8,204,1,204,1,204,1,205,1,205,1,205,3,205,5714,8,205,1,205,
        1,205,1,206,1,206,1,206,1,206,1,207,3,207,5723,8,207,1,207,1,207,
        1,208,1,208,1,208,1,208,1,208,3,208,5732,8,208,1,208,1,208,1,208,
        1,208,5,208,5738,8,208,10,208,12,208,5741,9,208,3,208,5743,8,208,
        1,208,3,208,5746,8,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,
        1,208,1,208,3,208,5757,8,208,1,208,3,208,5760,8,208,1,208,1,208,
        1,208,5,208,5765,8,208,10,208,12,208,5768,9,208,3,208,5770,8,208,
        1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,1,209,1,209,5,209,5788,8,209,10,209,12,209,5791,
        9,209,1,209,3,209,5794,8,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,1,209,3,209,5806,8,209,1,209,1,209,3,209,5810,
        8,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,1,209,1,209,1,209,3,209,5826,8,209,1,209,1,209,1,209,1,209,
        3,209,5832,8,209,1,209,1,209,1,209,1,209,1,209,5,209,5839,8,209,
        10,209,12,209,5842,9,209,1,209,1,209,1,209,1,209,1,209,1,209,1,209,
        1,209,5,209,5852,8,209,10,209,12,209,5855,9,209,1,209,1,209,1,209,
        1,209,3,209,5861,8,209,3,209,5863,8,209,1,210,1,210,1,210,1,210,
        1,211,1,211,1,211,1,211,3,211,5873,8,211,1,211,3,211,5876,8,211,
        1,211,1,211,1,211,3,211,5881,8,211,1,211,3,211,5884,8,211,5,211,
        5886,8,211,10,211,12,211,5889,9,211,1,211,1,211,1,211,1,211,1,211,
        3,211,5896,8,211,1,212,1,212,1,212,1,213,1,213,1,213,1,213,3,213,
        5905,8,213,1,214,1,214,1,214,1,214,3,214,5911,8,214,1,215,1,215,
        1,215,1,215,1,216,1,216,1,216,1,216,1,216,3,216,5922,8,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,217,1,217,1,217,1,217,1,218,1,218,
        1,218,1,218,1,219,1,219,1,219,1,219,1,219,1,219,3,219,5944,8,219,
        1,220,1,220,1,220,1,220,3,220,5950,8,220,1,220,1,220,1,221,1,221,
        1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,1,221,5,221,5965,
        8,221,10,221,12,221,5968,9,221,1,221,1,221,3,221,5972,8,221,3,221,
        5974,8,221,1,222,1,222,1,222,1,222,1,222,1,223,1,223,1,223,1,223,
        1,223,1,223,5,223,5987,8,223,10,223,12,223,5990,9,223,1,223,1,223,
        1,223,3,223,5995,8,223,1,223,3,223,5998,8,223,1,223,1,223,3,223,
        6002,8,223,1,223,1,223,1,224,1,224,1,224,1,224,1,224,1,225,1,225,
        1,225,1,225,1,225,1,226,1,226,1,226,1,226,1,226,1,227,1,227,1,227,
        1,227,1,228,1,228,1,228,1,228,1,229,1,229,1,229,3,229,6032,8,229,
        1,229,1,229,1,230,1,230,1,230,1,230,1,230,1,231,1,231,1,231,1,231,
        1,232,1,232,1,232,1,232,1,233,1,233,1,233,1,233,1,233,1,234,1,234,
        1,234,1,234,1,234,1,234,1,234,1,235,1,235,1,235,1,235,1,236,1,236,
        1,236,1,236,3,236,6069,8,236,1,236,1,236,1,237,1,237,1,237,3,237,
        6076,8,237,1,237,1,237,1,237,1,237,5,237,6082,8,237,10,237,12,237,
        6085,9,237,3,237,6087,8,237,1,237,1,237,1,237,5,237,6092,8,237,10,
        237,12,237,6095,9,237,3,237,6097,8,237,1,237,1,237,3,237,6101,8,
        237,1,238,1,238,3,238,6105,8,238,1,238,3,238,6108,8,238,1,238,1,
        238,1,238,3,238,6113,8,238,1,239,1,239,1,239,1,239,1,239,3,239,6120,
        8,239,1,239,1,239,3,239,6124,8,239,1,239,1,239,1,239,1,240,1,240,
        1,240,1,240,1,241,1,241,1,241,1,241,1,242,1,242,1,242,1,242,1,243,
        1,243,1,243,1,243,1,244,1,244,1,244,1,244,1,245,1,245,3,245,6151,
        8,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,3,245,6160,8,245,
        1,246,1,246,1,246,3,246,6165,8,246,1,246,1,246,3,246,6169,8,246,
        1,246,1,246,1,246,1,246,1,246,5,246,6176,8,246,10,246,12,246,6179,
        9,246,3,246,6181,8,246,1,246,1,246,1,246,3,246,6186,8,246,1,246,
        1,246,1,246,3,246,6191,8,246,1,246,1,246,1,246,1,246,5,246,6197,
        8,246,10,246,12,246,6200,9,246,3,246,6202,8,246,1,246,1,246,1,246,
        1,246,5,246,6208,8,246,10,246,12,246,6211,9,246,3,246,6213,8,246,
        1,247,1,247,1,247,1,247,1,248,1,248,1,248,1,248,1,248,1,248,1,249,
        1,249,1,249,1,249,3,249,6229,8,249,1,250,1,250,1,250,1,251,1,251,
        1,251,1,251,1,251,1,251,1,252,1,252,1,253,1,253,1,253,1,253,1,253,
        1,253,1,253,1,253,1,253,3,253,6251,8,253,1,253,1,253,1,253,1,253,
        1,253,1,253,3,253,6259,8,253,5,253,6261,8,253,10,253,12,253,6264,
        9,253,1,253,1,253,1,253,1,253,1,253,5,253,6271,8,253,10,253,12,253,
        6274,9,253,1,253,1,253,1,253,1,253,5,253,6280,8,253,10,253,12,253,
        6283,9,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,5,253,6292,
        8,253,10,253,12,253,6295,9,253,1,253,1,253,1,253,1,253,1,253,1,253,
        1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        1,253,1,253,3,253,6327,8,253,1,253,1,253,1,253,1,253,1,253,5,253,
        6334,8,253,10,253,12,253,6337,9,253,1,253,1,253,3,253,6341,8,253,
        1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        1,253,3,253,6355,8,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        5,253,6364,8,253,10,253,12,253,6367,9,253,3,253,6369,8,253,1,253,
        3,253,6372,8,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        1,253,1,253,3,253,6384,8,253,1,253,1,253,1,253,1,253,1,253,3,253,
        6391,8,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        3,253,6402,8,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,6420,8,253,
        1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,
        1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,6441,8,253,
        1,254,1,254,3,254,6445,8,254,1,254,1,254,3,254,6449,8,254,1,254,
        3,254,6452,8,254,1,254,1,254,1,255,1,255,3,255,6458,8,255,1,255,
        1,255,3,255,6462,8,255,1,255,1,255,1,255,1,255,1,255,1,255,3,255,
        6470,8,255,1,255,1,255,3,255,6474,8,255,1,255,1,255,3,255,6478,8,
        255,1,256,1,256,1,256,1,256,1,256,1,256,1,256,1,256,5,256,6488,8,
        256,10,256,12,256,6491,9,256,1,257,1,257,1,257,1,257,1,257,1,257,
        1,257,1,257,5,257,6501,8,257,10,257,12,257,6504,9,257,1,258,1,258,
        1,258,1,258,1,258,1,258,1,258,1,258,5,258,6514,8,258,10,258,12,258,
        6517,9,258,1,258,1,258,1,258,3,258,6522,8,258,1,259,1,259,1,259,
        1,259,1,259,1,259,1,259,5,259,6531,8,259,10,259,12,259,6534,9,259,
        1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,
        6546,8,260,1,261,1,261,1,261,1,261,1,261,1,261,1,261,5,261,6555,
        8,261,10,261,12,261,6558,9,261,1,262,1,262,1,262,1,262,1,262,1,262,
        1,262,5,262,6567,8,262,10,262,12,262,6570,9,262,1,263,1,263,1,263,
        1,263,1,263,3,263,6577,8,263,1,263,1,263,1,263,1,263,1,263,1,263,
        1,263,1,263,1,263,3,263,6588,8,263,1,263,1,263,3,263,6592,8,263,
        1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,5,263,6602,8,263,
        10,263,12,263,6605,9,263,1,263,3,263,6608,8,263,1,263,1,263,1,263,
        1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,
        1,263,1,263,1,263,1,263,3,263,6628,8,263,1,263,1,263,3,263,6632,
        8,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,1,263,
        1,263,1,263,1,263,1,263,3,263,6648,8,263,1,263,1,263,1,263,1,263,
        3,263,6654,8,263,1,263,1,263,1,263,1,263,1,263,5,263,6661,8,263,
        10,263,12,263,6664,9,263,3,263,6666,8,263,1,263,1,263,3,263,6670,
        8,263,1,263,1,263,1,263,1,263,1,263,3,263,6677,8,263,1,263,1,263,
        1,263,1,263,1,263,5,263,6684,8,263,10,263,12,263,6687,9,263,3,263,
        6689,8,263,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,1,264,
        1,264,1,264,1,264,1,264,5,264,6704,8,264,10,264,12,264,6707,9,264,
        1,264,1,264,3,264,6711,8,264,1,264,1,264,1,264,3,264,6716,8,264,
        1,265,1,265,1,265,1,265,1,265,1,265,1,266,1,266,1,266,1,266,1,266,
        1,266,1,267,1,267,1,267,1,267,1,267,1,267,1,268,1,268,1,268,1,268,
        1,268,1,268,1,269,1,269,1,269,1,269,1,269,1,269,1,270,1,270,1,270,
        1,270,1,270,1,270,1,270,5,270,6755,8,270,10,270,12,270,6758,9,270,
        3,270,6760,8,270,1,270,1,270,1,270,3,270,6765,8,270,1,270,1,270,
        1,270,1,270,3,270,6771,8,270,3,270,6773,8,270,1,270,1,270,1,270,
        1,271,1,271,1,271,3,271,6781,8,271,1,271,1,271,1,271,1,271,1,271,
        1,271,1,271,1,271,1,271,3,271,6792,8,271,1,271,1,271,1,271,1,271,
        1,271,1,271,3,271,6800,8,271,1,271,1,271,1,271,1,271,1,271,1,271,
        1,271,1,271,1,271,3,271,6811,8,271,1,271,1,271,1,271,1,271,1,271,
        3,271,6818,8,271,1,271,1,271,1,271,5,271,6823,8,271,10,271,12,271,
        6826,9,271,1,271,1,271,1,271,3,271,6831,8,271,1,271,1,271,1,271,
        1,271,1,271,3,271,6838,8,271,1,271,1,271,1,271,1,271,1,271,1,271,
        3,271,6846,8,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,3,271,
        6855,8,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,1,271,3,271,
        6865,8,271,1,271,1,271,3,271,6869,8,271,1,271,3,271,6872,8,271,1,
        271,1,271,1,271,1,271,1,271,3,271,6879,8,271,1,271,1,271,1,271,1,
        271,3,271,6885,8,271,1,271,1,271,1,271,3,271,6890,8,271,1,271,1,
        271,1,271,1,271,1,271,1,271,1,271,3,271,6899,8,271,1,271,1,271,1,
        271,1,271,1,271,5,271,6906,8,271,10,271,12,271,6909,9,271,1,271,
        1,271,1,271,3,271,6914,8,271,1,271,1,271,1,271,1,271,1,271,1,271,
        1,271,1,271,1,271,1,271,1,271,1,271,3,271,6928,8,271,1,271,1,271,
        1,271,3,271,6933,8,271,1,271,1,271,1,271,1,271,1,271,5,271,6940,
        8,271,10,271,12,271,6943,9,271,1,271,1,271,1,271,1,271,1,271,1,271,
        5,271,6951,8,271,10,271,12,271,6954,9,271,3,271,6956,8,271,1,272,
        1,272,1,273,1,273,1,273,1,273,1,273,1,273,1,273,1,273,5,273,6968,
        8,273,10,273,12,273,6971,9,273,1,273,3,273,6974,8,273,1,273,1,273,
        1,274,1,274,1,274,1,274,1,274,3,274,6983,8,274,1,275,1,275,1,275,
        1,275,1,275,1,275,3,275,6991,8,275,1,275,3,275,6994,8,275,1,276,
        1,276,1,276,1,276,3,276,7000,8,276,1,276,1,276,1,276,1,277,1,277,
        1,277,1,277,1,277,1,277,1,277,3,277,7012,8,277,1,278,1,278,1,278,
        1,278,1,278,3,278,7019,8,278,1,278,3,278,7022,8,278,1,278,1,278,
        1,278,3,278,7027,8,278,1,278,3,278,7030,8,278,1,279,1,279,1,279,
        3,279,7035,8,279,1,279,1,279,1,279,1,279,1,279,1,279,3,279,7043,
        8,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,3,279,
        7054,8,279,1,279,3,279,7057,8,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,3,279,7072,8,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,5,279,7090,8,279,10,279,12,279,7093,
        9,279,1,279,1,279,3,279,7097,8,279,1,279,1,279,1,279,1,279,3,279,
        7103,8,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,3,279,7117,8,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,1,279,
        1,279,1,279,1,279,3,279,7138,8,279,1,279,1,279,1,279,3,279,7143,
        8,279,1,279,3,279,7146,8,279,1,280,1,280,1,280,1,280,1,280,1,280,
        1,281,1,281,1,281,3,281,7157,8,281,1,281,3,281,7160,8,281,1,281,
        1,281,1,282,1,282,1,282,3,282,7167,8,282,1,282,3,282,7170,8,282,
        1,282,3,282,7173,8,282,1,282,1,282,1,282,3,282,7178,8,282,3,282,
        7180,8,282,1,282,1,282,1,282,5,282,7185,8,282,10,282,12,282,7188,
        9,282,3,282,7190,8,282,1,282,1,282,1,282,1,282,3,282,7196,8,282,
        1,283,1,283,1,283,3,283,7201,8,283,1,283,1,283,1,283,3,283,7206,
        8,283,3,283,7208,8,283,1,283,1,283,1,283,5,283,7213,8,283,10,283,
        12,283,7216,9,283,3,283,7218,8,283,1,283,1,283,1,283,1,283,1,283,
        1,283,1,283,3,283,7227,8,283,1,283,1,283,3,283,7231,8,283,1,283,
        1,283,3,283,7235,8,283,1,284,3,284,7238,8,284,1,284,1,284,1,284,
        1,284,3,284,7244,8,284,1,285,3,285,7247,8,285,1,285,1,285,1,285,
        1,285,1,285,1,285,5,285,7255,8,285,10,285,12,285,7258,9,285,3,285,
        7260,8,285,1,285,3,285,7263,8,285,1,285,1,285,1,285,1,286,1,286,
        3,286,7270,8,286,1,286,1,286,1,286,1,287,1,287,1,287,1,287,1,287,
        1,287,1,287,3,287,7282,8,287,1,288,1,288,1,288,1,288,1,288,1,288,
        3,288,7290,8,288,1,289,1,289,1,289,1,289,1,289,1,289,3,289,7298,
        8,289,1,290,1,290,1,290,1,290,3,290,7304,8,290,1,290,3,290,7307,
        8,290,1,291,1,291,1,291,1,291,3,291,7313,8,291,1,291,3,291,7316,
        8,291,1,292,1,292,1,292,1,292,1,292,3,292,7323,8,292,1,292,1,292,
        3,292,7327,8,292,1,292,1,292,3,292,7331,8,292,1,293,3,293,7334,8,
        293,1,293,1,293,3,293,7338,8,293,1,294,3,294,7341,8,294,1,294,3,
        294,7344,8,294,1,294,1,294,1,295,1,295,1,295,3,295,7351,8,295,1,
        295,3,295,7354,8,295,1,295,1,295,1,295,1,296,1,296,1,296,1,296,1,
        296,1,296,1,297,1,297,1,297,1,297,1,297,1,297,3,297,7371,8,297,1,
        298,1,298,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,
        1,299,1,299,1,299,1,299,1,299,1,299,3,299,7401,8,299,1,300,3,300,
        7404,8,300,1,300,1,300,1,301,1,301,1,301,1,301,1,301,1,301,1,301,
        3,301,7415,8,301,1,301,1,301,1,301,1,302,3,302,7421,8,302,1,302,
        1,302,3,302,7425,8,302,1,302,1,302,1,302,1,302,1,302,5,302,7432,
        8,302,10,302,12,302,7435,9,302,1,302,1,302,1,302,1,302,1,302,5,302,
        7442,8,302,10,302,12,302,7445,9,302,3,302,7447,8,302,1,302,1,302,
        3,302,7451,8,302,1,303,1,303,3,303,7455,8,303,1,303,3,303,7458,8,
        303,1,303,1,303,3,303,7462,8,303,1,303,1,303,3,303,7466,8,303,1,
        304,3,304,7469,8,304,1,304,1,304,3,304,7473,8,304,1,304,3,304,7476,
        8,304,1,304,1,304,3,304,7480,8,304,1,304,3,304,7483,8,304,1,304,
        1,304,3,304,7487,8,304,1,304,1,304,3,304,7491,8,304,5,304,7493,8,
        304,10,304,12,304,7496,9,304,1,304,1,304,1,304,1,304,1,304,1,304,
        3,304,7504,8,304,1,304,3,304,7507,8,304,1,304,1,304,3,304,7511,8,
        304,1,304,3,304,7514,8,304,1,304,3,304,7517,8,304,1,304,1,304,1,
        304,3,304,7522,8,304,1,304,1,304,3,304,7526,8,304,1,305,1,305,1,
        305,1,305,1,305,5,305,7533,8,305,10,305,12,305,7536,9,305,1,305,
        3,305,7539,8,305,1,306,1,306,1,306,1,306,1,306,1,306,5,306,7547,
        8,306,10,306,12,306,7550,9,306,1,307,1,307,1,307,3,307,7555,8,307,
        1,308,3,308,7558,8,308,1,308,1,308,3,308,7562,8,308,1,308,1,308,
        3,308,7566,8,308,1,308,3,308,7569,8,308,1,308,1,308,1,308,1,308,
        5,308,7575,8,308,10,308,12,308,7578,9,308,1,308,1,308,3,308,7582,
        8,308,1,309,3,309,7585,8,309,1,309,1,309,3,309,7589,8,309,1,309,
        1,309,1,309,1,309,1,309,5,309,7596,8,309,10,309,12,309,7599,9,309,
        1,309,1,309,1,309,1,309,5,309,7605,8,309,10,309,12,309,7608,9,309,
        1,309,1,309,3,309,7612,8,309,1,310,3,310,7615,8,310,1,310,1,310,
        3,310,7619,8,310,1,310,1,310,3,310,7623,8,310,1,310,1,310,1,310,
        1,310,1,310,1,310,5,310,7631,8,310,10,310,12,310,7634,9,310,1,310,
        1,310,1,310,1,310,1,310,3,310,7641,8,310,1,310,1,310,3,310,7645,
        8,310,1,310,1,310,1,310,3,310,7650,8,310,1,310,1,310,1,310,1,310,
        3,310,7656,8,310,1,311,1,311,3,311,7660,8,311,1,311,3,311,7663,8,
        311,1,311,1,311,3,311,7667,8,311,1,311,1,311,3,311,7671,8,311,1,
        312,3,312,7674,8,312,1,312,1,312,3,312,7678,8,312,1,312,3,312,7681,
        8,312,1,312,1,312,3,312,7685,8,312,1,312,3,312,7688,8,312,1,312,
        1,312,1,312,1,312,1,312,3,312,7695,8,312,1,312,3,312,7698,8,312,
        1,312,1,312,3,312,7702,8,312,1,312,1,312,1,312,1,312,3,312,7708,
        8,312,1,312,1,312,3,312,7712,8,312,3,312,7714,8,312,1,312,3,312,
        7717,8,312,1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,5,313,
        7727,8,313,10,313,12,313,7730,9,313,1,313,3,313,7733,8,313,1,314,
        1,314,1,314,1,314,1,314,1,314,1,314,1,314,1,314,3,314,7744,8,314,
        1,314,1,314,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,5,315,
        7756,8,315,10,315,12,315,7759,9,315,1,315,1,315,3,315,7763,8,315,
        1,315,1,315,1,315,1,315,1,315,1,315,3,315,7771,8,315,1,316,1,316,
        1,316,1,316,1,316,1,316,3,316,7779,8,316,1,316,1,316,1,316,1,316,
        1,316,3,316,7786,8,316,1,316,1,316,3,316,7790,8,316,1,316,1,316,
        3,316,7794,8,316,1,316,3,316,7797,8,316,1,316,1,316,1,316,1,317,
        1,317,1,317,1,317,1,317,1,317,3,317,7808,8,317,1,317,1,317,1,317,
        3,317,7813,8,317,5,317,7815,8,317,10,317,12,317,7818,9,317,1,317,
        3,317,7821,8,317,1,317,1,317,1,317,1,317,1,317,1,317,5,317,7829,
        8,317,10,317,12,317,7832,9,317,1,317,1,317,3,317,7836,8,317,3,317,
        7838,8,317,1,318,1,318,1,318,1,318,1,318,3,318,7845,8,318,1,318,
        1,318,3,318,7849,8,318,1,319,1,319,1,319,1,319,1,319,1,319,3,319,
        7857,8,319,1,319,3,319,7860,8,319,1,319,1,319,3,319,7864,8,319,1,
        319,1,319,1,320,1,320,1,320,1,320,1,320,1,320,1,320,5,320,7875,8,
        320,10,320,12,320,7878,9,320,3,320,7880,8,320,1,320,1,320,1,320,
        1,320,1,320,1,320,1,320,1,320,1,320,1,320,5,320,7892,8,320,10,320,
        12,320,7895,9,320,3,320,7897,8,320,1,320,1,320,3,320,7901,8,320,
        1,320,1,320,1,320,3,320,7906,8,320,1,320,1,320,3,320,7910,8,320,
        1,320,1,320,1,320,1,320,1,320,5,320,7917,8,320,10,320,12,320,7920,
        9,320,3,320,7922,8,320,1,320,1,320,3,320,7926,8,320,1,320,3,320,
        7929,8,320,1,321,1,321,1,321,1,321,1,322,1,322,1,323,1,323,1,323,
        1,323,1,323,1,323,1,323,5,323,7944,8,323,10,323,12,323,7947,9,323,
        3,323,7949,8,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,3,323,
        7958,8,323,1,324,1,324,1,324,1,324,3,324,7964,8,324,1,324,1,324,
        1,324,1,324,1,324,3,324,7971,8,324,3,324,7973,8,324,3,324,7975,8,
        324,1,324,1,324,3,324,7979,8,324,1,324,1,324,1,324,1,324,5,324,7985,
        8,324,10,324,12,324,7988,9,324,3,324,7990,8,324,1,324,1,324,1,324,
        1,324,3,324,7996,8,324,1,324,3,324,7999,8,324,1,324,1,324,3,324,
        8003,8,324,1,324,1,324,3,324,8007,8,324,1,324,1,324,1,324,3,324,
        8012,8,324,3,324,8014,8,324,1,324,1,324,1,325,1,325,1,325,1,325,
        1,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,8029,8,325,1,325,
        3,325,8032,8,325,1,326,1,326,1,326,1,326,1,326,1,326,5,326,8040,
        8,326,10,326,12,326,8043,9,326,3,326,8045,8,326,1,326,1,326,1,327,
        1,327,3,327,8051,8,327,1,327,3,327,8054,8,327,1,328,1,328,1,328,
        1,328,1,328,1,328,5,328,8062,8,328,10,328,12,328,8065,9,328,1,328,
        1,328,1,328,1,328,1,328,1,328,1,328,1,328,5,328,8075,8,328,10,328,
        12,328,8078,9,328,3,328,8080,8,328,1,328,1,328,3,328,8084,8,328,
        1,329,1,329,1,329,3,329,8089,8,329,3,329,8091,8,329,1,330,1,330,
        3,330,8095,8,330,1,330,3,330,8098,8,330,1,330,3,330,8101,8,330,1,
        330,3,330,8104,8,330,1,331,1,331,3,331,8108,8,331,1,331,3,331,8111,
        8,331,1,331,3,331,8114,8,331,1,332,1,332,1,332,3,332,8119,8,332,
        1,333,1,333,1,333,3,333,8124,8,333,1,334,1,334,1,335,1,335,3,335,
        8130,8,335,1,335,3,335,8133,8,335,1,335,1,335,1,335,1,335,3,335,
        8139,8,335,1,336,1,336,1,336,1,336,1,336,3,336,8146,8,336,1,337,
        1,337,3,337,8150,8,337,1,338,1,338,1,339,1,339,1,339,1,339,1,340,
        1,340,3,340,8160,8,340,1,340,3,340,8163,8,340,1,340,1,340,1,340,
        1,341,1,341,3,341,8170,8,341,1,341,1,341,1,341,1,341,1,341,1,341,
        1,341,3,341,8179,8,341,3,341,8181,8,341,1,342,1,342,1,342,1,342,
        1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,
        1,342,3,342,8199,8,342,1,343,1,343,1,343,1,343,1,343,1,343,3,343,
        8207,8,343,1,344,1,344,1,344,1,344,3,344,8213,8,344,3,344,8215,8,
        344,1,345,1,345,1,345,1,345,1,345,1,346,1,346,1,346,1,346,1,346,
        1,346,3,346,8228,8,346,1,347,1,347,1,347,1,347,1,347,1,347,1,347,
        3,347,8237,8,347,1,348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,
        1,348,1,348,3,348,8249,8,348,1,349,1,349,1,349,1,349,1,349,1,349,
        1,349,1,349,3,349,8259,8,349,1,349,1,349,3,349,8263,8,349,1,349,
        3,349,8266,8,349,1,349,1,349,1,349,1,349,1,349,3,349,8273,8,349,
        1,349,1,349,1,349,3,349,8278,8,349,1,349,1,349,1,349,1,349,3,349,
        8284,8,349,1,349,1,349,3,349,8288,8,349,1,349,3,349,8291,8,349,3,
        349,8293,8,349,1,350,1,350,3,350,8297,8,350,1,350,3,350,8300,8,350,
        1,350,1,350,3,350,8304,8,350,1,350,1,350,1,350,1,350,1,350,3,350,
        8311,8,350,1,350,1,350,3,350,8315,8,350,1,350,1,350,1,350,1,350,
        1,350,1,350,1,350,1,350,1,350,1,350,3,350,8327,8,350,1,350,3,350,
        8330,8,350,1,350,3,350,8333,8,350,3,350,8335,8,350,1,351,1,351,3,
        351,8339,8,351,1,351,1,351,3,351,8343,8,351,3,351,8345,8,351,1,352,
        1,352,1,352,1,352,3,352,8351,8,352,1,352,1,352,1,352,1,352,1,352,
        1,352,3,352,8359,8,352,1,352,1,352,3,352,8363,8,352,1,353,1,353,
        3,353,8367,8,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,8375,
        8,353,1,353,3,353,8378,8,353,3,353,8380,8,353,1,354,1,354,1,354,
        3,354,8385,8,354,1,354,3,354,8388,8,354,1,354,1,354,3,354,8392,8,
        354,1,354,3,354,8395,8,354,1,354,1,354,3,354,8399,8,354,1,355,1,
        355,1,355,1,355,1,355,1,355,1,355,1,355,3,355,8409,8,355,1,355,3,
        355,8412,8,355,1,355,1,355,1,355,1,355,1,355,3,355,8419,8,355,1,
        355,3,355,8422,8,355,1,355,3,355,8425,8,355,1,356,3,356,8428,8,356,
        1,356,1,356,3,356,8432,8,356,1,356,3,356,8435,8,356,1,356,3,356,
        8438,8,356,1,356,1,356,3,356,8442,8,356,1,356,3,356,8445,8,356,1,
        356,1,356,3,356,8449,8,356,1,356,3,356,8452,8,356,1,356,1,356,3,
        356,8456,8,356,1,356,3,356,8459,8,356,1,356,3,356,8462,8,356,1,356,
        1,356,3,356,8466,8,356,1,356,3,356,8469,8,356,1,356,1,356,3,356,
        8473,8,356,1,356,3,356,8476,8,356,1,357,1,357,1,357,1,357,1,357,
        1,357,1,357,1,357,3,357,8486,8,357,1,358,3,358,8489,8,358,1,358,
        1,358,1,358,1,358,1,358,3,358,8496,8,358,1,359,1,359,1,359,1,359,
        1,359,1,359,3,359,8504,8,359,1,360,1,360,3,360,8508,8,360,1,361,
        1,361,1,361,1,362,1,362,3,362,8515,8,362,1,362,1,362,3,362,8519,
        8,362,1,362,1,362,3,362,8523,8,362,1,362,1,362,3,362,8527,8,362,
        1,362,1,362,1,362,1,362,1,362,1,362,1,362,3,362,8536,8,362,3,362,
        8538,8,362,1,362,1,362,3,362,8542,8,362,1,362,1,362,1,362,1,362,
        1,362,3,362,8549,8,362,3,362,8551,8,362,1,362,1,362,3,362,8555,8,
        362,1,362,1,362,1,362,3,362,8560,8,362,3,362,8562,8,362,1,362,1,
        362,1,362,1,362,1,362,3,362,8569,8,362,1,362,1,362,3,362,8573,8,
        362,3,362,8575,8,362,1,363,1,363,1,363,1,363,1,364,1,364,1,364,3,
        364,8584,8,364,1,364,1,364,1,365,1,365,1,365,3,365,8591,8,365,1,
        365,1,365,1,366,1,366,1,366,1,366,1,367,1,367,1,368,3,368,8602,8,
        368,1,368,1,368,1,369,1,369,1,369,1,369,3,369,8610,8,369,1,370,1,
        370,1,370,1,371,1,371,1,371,1,372,1,372,1,372,1,372,1,373,1,373,
        1,373,1,373,1,374,1,374,1,374,1,374,1,375,1,375,1,375,1,375,3,375,
        8634,8,375,1,376,1,376,1,376,3,376,8639,8,376,3,376,8641,8,376,1,
        377,1,377,1,377,1,377,1,378,1,378,1,378,1,378,1,379,1,379,1,379,
        1,379,1,379,1,379,1,379,1,379,1,379,1,379,1,379,1,379,1,379,3,379,
        8664,8,379,1,380,1,380,1,381,3,381,8669,8,381,1,381,4,381,8672,8,
        381,11,381,12,381,8673,1,382,3,382,8677,8,382,1,382,1,382,5,382,
        8681,8,382,10,382,12,382,8684,9,382,1,382,1,382,1,382,1,383,3,383,
        8690,8,383,1,383,1,383,1,384,1,384,1,385,1,385,1,386,1,386,1,387,
        1,387,1,388,3,388,8703,8,388,1,388,1,388,1,389,3,389,8708,8,389,
        1,389,1,389,1,390,3,390,8713,8,390,1,390,1,390,1,391,1,391,3,391,
        8719,8,391,1,391,1,391,1,391,1,392,1,392,1,392,1,392,1,392,1,392,
        1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
        1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,3,392,
        8751,8,392,1,393,1,393,1,393,1,394,1,394,1,394,1,394,1,394,1,394,
        1,394,1,394,1,394,1,394,1,394,3,394,8767,8,394,1,395,1,395,1,395,
        1,395,3,395,8773,8,395,1,396,1,396,3,396,8777,8,396,1,397,1,397,
        1,397,3,397,8782,8,397,1,397,1,397,3,397,8786,8,397,1,398,1,398,
        1,398,3,398,8791,8,398,1,398,1,398,3,398,8795,8,398,1,399,1,399,
        1,399,3,399,8800,8,399,1,399,1,399,3,399,8804,8,399,1,400,1,400,
        1,400,3,400,8809,8,400,1,400,1,400,3,400,8813,8,400,1,401,1,401,
        1,401,3,401,8818,8,401,1,401,1,401,3,401,8822,8,401,1,402,1,402,
        3,402,8826,8,402,1,403,1,403,3,403,8830,8,403,1,404,1,404,1,404,
        3,404,8835,8,404,1,405,1,405,3,405,8839,8,405,1,406,1,406,3,406,
        8843,8,406,1,407,1,407,3,407,8847,8,407,1,408,1,408,3,408,8851,8,
        408,1,409,1,409,3,409,8855,8,409,1,410,1,410,3,410,8859,8,410,1,
        411,1,411,3,411,8863,8,411,1,412,1,412,3,412,8867,8,412,1,413,1,
        413,3,413,8871,8,413,1,414,1,414,3,414,8875,8,414,1,415,1,415,3,
        415,8879,8,415,1,416,1,416,3,416,8883,8,416,1,417,1,417,1,418,1,
        418,1,419,1,419,1,419,1,419,1,419,1,419,3,419,8895,8,419,1,419,1,
        419,1,419,3,419,8900,8,419,1,419,5,419,8903,8,419,10,419,12,419,
        8906,9,419,1,420,1,420,3,420,8910,8,420,1,420,3,420,8913,8,420,1,
        420,1,420,1,420,5,420,8918,8,420,10,420,12,420,8921,9,420,1,420,
        1,420,1,420,1,420,1,420,3,420,8928,8,420,1,420,1,420,5,420,8932,
        8,420,10,420,12,420,8935,9,420,1,420,1,420,5,420,8939,8,420,10,420,
        12,420,8942,9,420,1,420,5,420,8945,8,420,10,420,12,420,8948,9,420,
        1,420,3,420,8951,8,420,1,421,1,421,1,421,1,421,1,422,1,422,1,422,
        1,423,1,423,1,423,1,423,3,423,8964,8,423,1,423,3,423,8967,8,423,
        1,423,1,423,3,423,8971,8,423,1,424,1,424,1,424,1,424,3,424,8977,
        8,424,1,424,3,424,8980,8,424,1,424,1,424,3,424,8984,8,424,1,425,
        1,425,1,425,1,425,1,425,1,425,1,425,1,425,1,425,3,425,8995,8,425,
        3,425,8997,8,425,1,426,1,426,1,426,1,426,1,426,1,426,3,426,9005,
        8,426,1,426,1,426,1,426,1,427,1,427,1,427,1,427,5,427,9014,8,427,
        10,427,12,427,9017,9,427,3,427,9019,8,427,1,428,1,428,3,428,9023,
        8,428,1,428,3,428,9026,8,428,1,428,1,428,1,428,1,428,3,428,9032,
        8,428,1,429,1,429,1,429,3,429,9037,8,429,1,429,1,429,1,429,3,429,
        9042,8,429,5,429,9044,8,429,10,429,12,429,9047,9,429,1,430,1,430,
        1,430,1,431,1,431,5,431,9054,8,431,10,431,12,431,9057,9,431,1,431,
        1,431,5,431,9061,8,431,10,431,12,431,9064,9,431,1,431,1,431,5,431,
        9068,8,431,10,431,12,431,9071,9,431,1,431,1,431,1,431,1,431,5,431,
        9077,8,431,10,431,12,431,9080,9,431,3,431,9082,8,431,1,432,1,432,
        1,432,1,432,1,432,1,432,3,432,9090,8,432,1,433,1,433,1,433,1,433,
        1,433,1,433,1,433,1,433,1,433,3,433,9101,8,433,1,434,1,434,3,434,
        9105,8,434,1,434,1,434,1,435,1,435,3,435,9111,8,435,1,435,1,435,
        1,436,1,436,1,436,3,436,9118,8,436,3,436,9120,8,436,1,436,3,436,
        9123,8,436,1,436,3,436,9126,8,436,1,437,1,437,1,437,3,437,9131,8,
        437,3,437,9133,8,437,1,437,1,437,1,437,5,437,9138,8,437,10,437,12,
        437,9141,9,437,1,437,1,437,1,437,3,437,9146,8,437,3,437,9148,8,437,
        1,437,1,437,1,437,1,437,1,437,5,437,9155,8,437,10,437,12,437,9158,
        9,437,1,437,1,437,1,437,1,437,5,437,9164,8,437,10,437,12,437,9167,
        9,437,1,437,1,437,1,437,1,437,1,437,1,437,5,437,9175,8,437,10,437,
        12,437,9178,9,437,3,437,9180,8,437,1,438,1,438,1,438,1,439,1,439,
        1,439,1,439,1,439,4,439,9190,8,439,11,439,12,439,9191,3,439,9194,
        8,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,5,439,9203,8,439,
        10,439,12,439,9206,9,439,1,439,1,439,3,439,9210,8,439,1,439,3,439,
        9213,8,439,1,439,1,439,1,440,1,440,1,440,1,440,4,440,9221,8,440,
        11,440,12,440,9222,1,440,1,440,3,440,9227,8,440,1,440,1,440,1,441,
        1,441,1,441,1,441,1,441,5,441,9236,8,441,10,441,12,441,9239,9,441,
        1,441,1,441,5,441,9243,8,441,10,441,12,441,9246,9,441,1,441,3,441,
        9249,8,441,1,441,3,441,9252,8,441,1,441,1,441,1,442,1,442,1,442,
        3,442,9259,8,442,1,442,1,442,3,442,9263,8,442,1,443,1,443,4,443,
        9267,8,443,11,443,12,443,9268,1,444,1,444,1,444,1,444,1,444,1,445,
        1,445,1,445,1,445,1,445,5,445,9281,8,445,10,445,12,445,9284,9,445,
        1,445,1,445,1,446,1,446,1,446,1,447,1,447,1,447,1,447,3,447,9295,
        8,447,1,447,1,447,3,447,9299,8,447,1,447,1,447,3,447,9303,8,447,
        1,448,1,448,1,448,1,448,3,448,9309,8,448,1,448,3,448,9312,8,448,
        1,448,1,448,5,448,9316,8,448,10,448,12,448,9319,9,448,1,449,3,449,
        9322,8,449,1,449,1,449,1,449,1,449,1,449,3,449,9329,8,449,1,449,
        1,449,1,449,1,449,3,449,9335,8,449,1,450,1,450,1,450,1,450,1,450,
        1,450,5,450,9343,8,450,10,450,12,450,9346,9,450,1,450,1,450,3,450,
        9350,8,450,1,451,1,451,1,451,1,451,1,451,1,451,5,451,9358,8,451,
        10,451,12,451,9361,9,451,1,452,1,452,1,452,1,452,1,452,5,452,9368,
        8,452,10,452,12,452,9371,9,452,1,453,1,453,1,453,1,453,1,453,1,453,
        1,453,1,453,1,453,1,453,3,453,9383,8,453,1,453,3,453,9386,8,453,
        1,453,1,453,3,453,9390,8,453,1,454,1,454,1,454,3,454,9395,8,454,
        1,454,1,454,3,454,9399,8,454,1,454,3,454,9402,8,454,1,454,1,454,
        1,455,3,455,9407,8,455,1,455,1,455,1,455,1,455,1,455,3,455,9414,
        8,455,1,455,1,455,1,455,1,455,1,455,5,455,9421,8,455,10,455,12,455,
        9424,9,455,3,455,9426,8,455,1,455,1,455,1,455,1,455,1,455,1,455,
        5,455,9434,8,455,10,455,12,455,9437,9,455,3,455,9439,8,455,1,455,
        1,455,1,455,1,455,1,455,1,455,1,455,1,455,1,455,1,455,3,455,9451,
        8,455,1,455,1,455,1,455,1,455,1,455,3,455,9458,8,455,1,455,1,455,
        1,455,1,455,1,455,3,455,9465,8,455,1,456,1,456,1,456,1,456,1,456,
        3,456,9472,8,456,1,456,1,456,1,456,1,456,5,456,9478,8,456,10,456,
        12,456,9481,9,456,1,456,1,456,1,456,1,457,1,457,1,457,1,457,1,457,
        1,457,1,457,1,457,1,457,5,457,9495,8,457,10,457,12,457,9498,9,457,
        3,457,9500,8,457,1,457,3,457,9503,8,457,1,457,1,457,1,457,1,457,
        1,457,3,457,9510,8,457,1,457,1,457,1,457,1,457,1,457,3,457,9517,
        8,457,1,457,1,457,1,457,1,457,1,457,3,457,9524,8,457,1,457,1,457,
        1,457,1,457,1,457,3,457,9531,8,457,1,457,1,457,1,458,3,458,9536,
        8,458,1,458,1,458,1,458,1,458,1,458,3,458,9543,8,458,1,458,1,458,
        1,458,1,458,1,458,1,458,5,458,9551,8,458,10,458,12,458,9554,9,458,
        1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,5,458,
        9566,8,458,10,458,12,458,9569,9,458,1,458,1,458,1,458,1,458,1,458,
        1,458,5,458,9577,8,458,10,458,12,458,9580,9,458,1,458,1,458,1,458,
        1,458,1,458,1,458,3,458,9588,8,458,1,459,1,459,1,459,1,459,1,459,
        1,459,1,459,5,459,9597,8,459,10,459,12,459,9600,9,459,1,459,1,459,
        1,459,1,460,3,460,9606,8,460,1,460,1,460,1,460,1,460,1,460,1,460,
        1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,461,3,461,
        9624,8,461,1,461,1,461,1,461,1,461,1,461,1,461,4,461,9632,8,461,
        11,461,12,461,9633,3,461,9636,8,461,1,461,1,461,1,462,3,462,9641,
        8,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,1,462,
        1,462,1,462,1,462,1,462,5,462,9657,8,462,10,462,12,462,9660,9,462,
        1,462,1,462,1,462,1,462,1,462,1,462,5,462,9668,8,462,10,462,12,462,
        9671,9,462,1,462,1,462,1,462,1,462,1,462,1,462,3,462,9679,8,462,
        1,462,1,462,1,462,1,462,1,462,3,462,9686,8,462,1,462,1,462,1,463,
        1,463,1,463,5,463,9693,8,463,10,463,12,463,9696,9,463,1,463,3,463,
        9699,8,463,1,463,5,463,9702,8,463,10,463,12,463,9705,9,463,1,463,
        3,463,9708,8,463,1,463,1,463,1,464,1,464,1,464,3,464,9715,8,464,
        1,464,1,464,3,464,9719,8,464,1,464,1,464,3,464,9723,8,464,1,464,
        3,464,9726,8,464,1,464,1,464,1,464,1,464,1,464,5,464,9733,8,464,
        10,464,12,464,9736,9,464,3,464,9738,8,464,1,465,1,465,1,465,1,465,
        1,465,1,465,1,465,1,465,3,465,9748,8,465,1,466,1,466,1,466,1,466,
        1,466,1,466,1,466,1,467,1,467,4,467,9759,8,467,11,467,12,467,9760,
        1,468,1,468,1,468,3,468,9766,8,468,1,469,1,469,1,469,1,469,1,469,
        1,470,1,470,1,470,1,470,1,470,5,470,9778,8,470,10,470,12,470,9781,
        9,470,1,470,1,470,1,470,3,470,9786,8,470,1,471,1,471,3,471,9790,
        8,471,1,471,1,471,3,471,9794,8,471,1,472,1,472,1,472,1,472,1,472,
        1,473,1,473,1,473,1,473,3,473,9805,8,473,1,473,1,473,1,473,1,473,
        1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,
        1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,
        1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,1,473,
        1,473,1,473,1,473,1,473,1,473,3,473,9849,8,473,1,474,1,474,1,474,
        1,474,3,474,9855,8,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,
        1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,
        1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,
        1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,1,474,
        1,474,1,474,1,474,1,474,1,474,1,474,1,474,3,474,9904,8,474,1,475,
        1,475,1,475,3,475,9909,8,475,1,475,1,475,1,475,3,475,9914,8,475,
        5,475,9916,8,475,10,475,12,475,9919,9,475,1,475,3,475,9922,8,475,
        1,476,1,476,1,476,1,476,5,476,9928,8,476,10,476,12,476,9931,9,476,
        1,477,1,477,1,477,1,477,1,477,1,478,1,478,1,478,1,479,1,479,1,479,
        1,479,1,479,1,479,1,479,1,479,4,479,9949,8,479,11,479,12,479,9950,
        3,479,9953,8,479,1,480,1,480,1,480,1,480,3,480,9959,8,480,1,481,
        1,481,3,481,9963,8,481,1,481,1,481,1,481,3,481,9968,8,481,5,481,
        9970,8,481,10,481,12,481,9973,9,481,1,482,1,482,1,482,1,482,4,482,
        9979,8,482,11,482,12,482,9980,1,482,1,482,1,483,1,483,1,483,1,484,
        1,484,1,484,1,484,1,484,1,485,1,485,1,485,1,485,1,485,1,486,1,486,
        1,486,1,486,1,486,1,486,5,486,10004,8,486,10,486,12,486,10007,9,
        486,1,486,1,486,1,487,1,487,1,487,1,487,1,487,3,487,10016,8,487,
        1,488,1,488,1,488,1,489,1,489,1,489,1,490,1,490,1,490,3,490,10027,
        8,490,1,490,1,490,3,490,10031,8,490,1,490,1,490,1,490,3,490,10036,
        8,490,1,491,1,491,1,491,5,491,10041,8,491,10,491,12,491,10044,9,
        491,1,492,1,492,1,492,5,492,10049,8,492,10,492,12,492,10052,9,492,
        1,493,1,493,1,493,1,493,1,493,3,493,10059,8,493,4,493,10061,8,493,
        11,493,12,493,10062,1,493,1,493,1,493,3,493,10068,8,493,3,493,10070,
        8,493,1,493,1,493,1,494,1,494,1,494,1,494,3,494,10078,8,494,1,494,
        1,494,1,494,1,494,1,494,3,494,10085,8,494,1,494,1,494,1,494,3,494,
        10090,8,494,3,494,10092,8,494,3,494,10094,8,494,1,494,1,494,3,494,
        10098,8,494,1,495,1,495,1,495,1,495,1,495,5,495,10105,8,495,10,495,
        12,495,10108,9,495,1,496,1,496,3,496,10112,8,496,1,496,1,496,3,496,
        10116,8,496,1,497,1,497,3,497,10120,8,497,1,498,1,498,1,498,1,498,
        1,499,1,499,1,499,1,499,1,499,1,499,1,499,1,499,1,499,1,499,5,499,
        10136,8,499,10,499,12,499,10139,9,499,1,499,1,499,1,499,1,499,1,
        499,5,499,10146,8,499,10,499,12,499,10149,9,499,1,499,1,499,3,499,
        10153,8,499,1,499,1,499,1,499,1,499,1,499,1,499,1,499,3,499,10162,
        8,499,1,499,3,499,10165,8,499,1,499,1,499,3,499,10169,8,499,1,499,
        1,499,5,499,10173,8,499,10,499,12,499,10176,9,499,1,499,1,499,3,
        499,10180,8,499,1,499,3,499,10183,8,499,1,499,1,499,3,499,10187,
        8,499,1,499,1,499,5,499,10191,8,499,10,499,12,499,10194,9,499,1,
        499,1,499,3,499,10198,8,499,1,499,3,499,10201,8,499,1,499,1,499,
        3,499,10205,8,499,1,499,1,499,5,499,10209,8,499,10,499,12,499,10212,
        9,499,1,499,1,499,3,499,10216,8,499,1,499,3,499,10219,8,499,1,499,
        1,499,3,499,10223,8,499,1,499,1,499,5,499,10227,8,499,10,499,12,
        499,10230,9,499,1,499,1,499,3,499,10234,8,499,1,499,1,499,1,499,
        1,499,3,499,10240,8,499,1,499,1,499,3,499,10244,8,499,1,499,1,499,
        1,499,1,499,5,499,10250,8,499,10,499,12,499,10253,9,499,1,499,1,
        499,3,499,10257,8,499,1,499,5,499,10260,8,499,10,499,12,499,10263,
        9,499,1,499,1,499,3,499,10267,8,499,1,499,1,499,1,499,1,499,5,499,
        10273,8,499,10,499,12,499,10276,9,499,1,499,1,499,3,499,10280,8,
        499,1,499,5,499,10283,8,499,10,499,12,499,10286,9,499,1,499,3,499,
        10289,8,499,1,499,1,499,1,499,1,499,1,499,1,499,1,499,3,499,10298,
        8,499,1,499,1,499,1,499,1,499,3,499,10304,8,499,1,499,1,499,1,499,
        1,499,1,499,3,499,10311,8,499,1,499,1,499,1,499,1,499,1,499,3,499,
        10318,8,499,1,499,1,499,1,499,1,499,1,499,3,499,10325,8,499,1,499,
        1,499,1,499,1,499,1,499,3,499,10332,8,499,1,499,1,499,1,499,1,499,
        1,499,1,499,1,499,1,499,1,499,1,499,1,499,1,499,1,499,1,499,1,499,
        1,499,1,499,1,499,1,499,1,499,1,499,3,499,10355,8,499,1,499,1,499,
        1,499,1,499,1,499,1,499,1,499,1,499,1,499,3,499,10366,8,499,1,499,
        1,499,1,499,1,499,3,499,10372,8,499,1,499,1,499,1,499,1,499,1,499,
        1,499,5,499,10380,8,499,10,499,12,499,10383,9,499,1,500,1,500,1,
        500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        3,500,10398,8,500,1,500,1,500,1,500,1,500,1,500,5,500,10405,8,500,
        10,500,12,500,10408,9,500,3,500,10410,8,500,1,500,1,500,1,500,1,
        500,1,500,1,500,1,500,1,500,3,500,10420,8,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,3,500,10429,8,500,1,500,3,500,10432,8,500,
        1,500,1,500,1,500,3,500,10437,8,500,1,500,3,500,10440,8,500,5,500,
        10442,8,500,10,500,12,500,10445,9,500,1,500,1,500,1,500,1,500,1,
        500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,3,500,
        10461,8,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,4,500,
        10493,8,500,11,500,12,500,10494,1,500,1,500,1,500,1,500,1,500,1,
        500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,3,500,10514,8,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,3,500,10548,8,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,3,500,10557,8,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,3,500,10572,8,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,3,500,10642,8,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,3,500,10682,
        8,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,5,500,10703,
        8,500,10,500,12,500,10706,9,500,1,500,1,500,1,500,1,500,1,500,1,
        500,1,500,3,500,10715,8,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,3,500,10725,8,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,3,500,10736,8,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,3,500,10747,8,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,3,500,10756,8,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,3,500,10766,8,500,3,500,10768,8,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,3,500,10787,8,500,3,500,10789,8,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,3,500,10801,
        8,500,3,500,10803,8,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,3,500,10817,8,500,3,500,10819,8,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,3,500,10845,8,500,1,500,1,500,1,500,1,500,1,500,1,500,
        1,500,1,500,5,500,10855,8,500,10,500,12,500,10858,9,500,3,500,10860,
        8,500,1,500,1,500,1,500,1,500,5,500,10866,8,500,10,500,12,500,10869,
        9,500,1,501,1,501,1,501,1,501,4,501,10875,8,501,11,501,12,501,10876,
        1,501,1,501,1,502,1,502,3,502,10883,8,502,1,502,3,502,10886,8,502,
        1,502,1,502,1,502,3,502,10891,8,502,1,502,1,502,1,502,3,502,10896,
        8,502,1,503,1,503,1,503,1,503,3,503,10902,8,503,1,504,1,504,1,504,
        1,504,1,504,1,504,1,504,4,504,10911,8,504,11,504,12,504,10912,1,
        504,1,504,3,504,10917,8,504,1,504,1,504,1,505,1,505,1,505,1,505,
        1,505,1,505,4,505,10927,8,505,11,505,12,505,10928,1,505,1,505,3,
        505,10933,8,505,1,505,1,505,1,506,1,506,1,506,1,507,1,507,1,507,
        1,507,1,507,1,507,1,507,1,508,1,508,1,508,1,508,1,508,1,508,1,508,
        1,508,1,508,1,508,3,508,10957,8,508,1,509,1,509,1,509,1,509,1,509,
        1,510,1,510,1,510,1,510,1,510,3,510,10969,8,510,1,510,1,510,3,510,
        10973,8,510,1,510,1,510,1,510,1,510,1,510,1,510,3,510,10981,8,510,
        3,510,10983,8,510,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,
        1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,1,511,
        1,511,1,511,1,511,3,511,11007,8,511,1,512,1,512,1,512,3,512,11012,
        8,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,
        1,512,1,512,1,512,1,512,3,512,11028,8,512,1,512,3,512,11031,8,512,
        1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,1,512,
        3,512,11044,8,512,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,3,513,
        11064,8,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,4,513,11073,
        8,513,11,513,12,513,11074,1,513,1,513,1,513,1,513,1,513,1,513,1,
        513,1,513,1,513,1,513,3,513,11087,8,513,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,3,513,11096,8,513,1,513,1,513,1,513,1,513,3,513,
        11102,8,513,3,513,11104,8,513,1,513,1,513,3,513,11108,8,513,1,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,4,513,11119,8,513,
        11,513,12,513,11120,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,
        513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,5,513,
        11151,8,513,10,513,12,513,11154,9,513,1,513,1,513,1,513,1,513,1,
        513,1,513,1,513,4,513,11163,8,513,11,513,12,513,11164,1,513,1,513,
        1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,1,513,5,513,11178,
        8,513,10,513,12,513,11181,9,513,1,513,1,513,1,513,1,513,1,513,1,
        513,1,513,1,513,1,513,1,513,1,513,1,513,3,513,11195,8,513,1,514,
        1,514,1,514,1,514,1,514,1,514,3,514,11203,8,514,1,514,1,514,1,514,
        1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,3,514,
        11218,8,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,3,514,
        11228,8,514,1,514,1,514,1,514,1,514,1,514,3,514,11235,8,514,1,514,
        1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,1,514,
        1,514,1,514,3,514,11251,8,514,1,515,3,515,11254,8,515,1,515,1,515,
        1,515,1,515,1,515,1,515,1,515,3,515,11263,8,515,3,515,11265,8,515,
        1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,5,515,11276,
        8,515,10,515,12,515,11279,9,515,1,515,1,515,1,515,1,515,1,515,1,
        515,1,515,1,515,1,515,5,515,11290,8,515,10,515,12,515,11293,9,515,
        1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,5,515,11304,
        8,515,10,515,12,515,11307,9,515,1,515,1,515,1,515,1,515,1,515,1,
        515,1,515,1,515,1,515,5,515,11318,8,515,10,515,12,515,11321,9,515,
        1,515,1,515,1,515,1,515,1,515,1,515,1,515,5,515,11330,8,515,10,515,
        12,515,11333,9,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,5,515,
        11342,8,515,10,515,12,515,11345,9,515,1,515,1,515,1,515,1,515,4,
        515,11351,8,515,11,515,12,515,11352,3,515,11355,8,515,1,515,1,515,
        1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,
        1,515,1,515,1,515,4,515,11373,8,515,11,515,12,515,11374,1,515,1,
        515,1,515,3,515,11380,8,515,1,515,1,515,1,515,1,515,1,515,1,515,
        1,515,1,515,1,515,4,515,11391,8,515,11,515,12,515,11392,1,515,1,
        515,3,515,11397,8,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,
        1,515,1,515,1,515,1,515,4,515,11410,8,515,11,515,12,515,11411,1,
        515,1,515,3,515,11416,8,515,1,515,1,515,1,515,3,515,11421,8,515,
        1,515,1,515,1,515,1,515,1,515,1,515,1,515,1,515,3,515,11431,8,515,
        1,515,1,515,1,515,1,515,1,515,1,515,3,515,11439,8,515,1,515,1,515,
        1,515,1,515,1,515,1,515,1,515,3,515,11448,8,515,3,515,11450,8,515,
        1,515,1,515,1,515,3,515,11455,8,515,1,515,1,515,1,515,1,515,1,515,
        3,515,11462,8,515,1,515,1,515,3,515,11466,8,515,1,516,1,516,1,516,
        1,516,1,516,3,516,11473,8,516,1,516,1,516,1,516,1,516,1,516,1,516,
        1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,
        3,516,11492,8,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,1,516,
        1,516,1,516,3,516,11504,8,516,1,516,1,516,3,516,11508,8,516,1,517,
        3,517,11511,8,517,1,517,1,517,1,517,1,517,1,517,1,517,3,517,11519,
        8,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,3,517,11529,
        8,517,1,517,1,517,1,517,1,517,1,517,3,517,11536,8,517,1,517,1,517,
        1,517,3,517,11541,8,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,
        3,517,11550,8,517,1,517,1,517,1,517,3,517,11555,8,517,1,517,1,517,
        1,517,1,517,1,517,1,517,1,517,1,517,1,517,1,517,3,517,11567,8,517,
        1,517,1,517,1,517,1,517,1,517,3,517,11574,8,517,1,518,1,518,1,518,
        1,518,3,518,11580,8,518,1,518,1,518,1,518,3,518,11585,8,518,1,518,
        3,518,11588,8,518,1,518,1,518,1,518,3,518,11593,8,518,1,518,1,518,
        1,518,3,518,11598,8,518,1,518,3,518,11601,8,518,1,518,1,518,3,518,
        11605,8,518,1,518,3,518,11608,8,518,1,518,1,518,1,518,1,518,3,518,
        11614,8,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,
        3,518,11625,8,518,1,518,1,518,3,518,11629,8,518,1,518,3,518,11632,
        8,518,1,519,3,519,11635,8,519,1,519,1,519,1,519,1,519,1,519,1,519,
        3,519,11643,8,519,1,519,1,519,1,519,1,519,3,519,11649,8,519,1,519,
        1,519,3,519,11653,8,519,1,519,1,519,3,519,11657,8,519,1,520,3,520,
        11660,8,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,1,520,
        1,520,1,520,1,520,3,520,11674,8,520,1,520,1,520,1,520,1,520,1,520,
        4,520,11681,8,520,11,520,12,520,11682,1,520,1,520,3,520,11687,8,
        520,1,521,3,521,11690,8,521,1,521,1,521,1,521,1,521,1,521,1,522,
        1,522,1,522,1,522,1,522,1,522,5,522,11703,8,522,10,522,12,522,11706,
        9,522,1,522,4,522,11709,8,522,11,522,12,522,11710,3,522,11713,8,
        522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        3,522,11725,8,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        3,522,11735,8,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        3,522,11745,8,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        3,522,11755,8,522,3,522,11757,8,522,3,522,11759,8,522,1,522,1,522,
        1,522,3,522,11764,8,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,
        1,522,3,522,11774,8,522,3,522,11776,8,522,3,522,11778,8,522,1,522,
        1,522,1,522,3,522,11783,8,522,1,522,1,522,1,522,1,522,1,522,1,522,
        3,522,11791,8,522,1,522,1,522,1,522,3,522,11796,8,522,1,522,1,522,
        1,522,1,522,1,522,1,522,3,522,11804,8,522,3,522,11806,8,522,1,522,
        1,522,1,522,3,522,11811,8,522,1,522,1,522,1,522,1,522,1,522,1,522,
        3,522,11819,8,522,1,522,1,522,1,522,1,522,1,522,1,522,1,522,3,522,
        11828,8,522,1,523,1,523,1,523,1,523,1,523,1,523,3,523,11836,8,523,
        1,523,1,523,1,523,1,523,1,523,1,523,3,523,11844,8,523,1,523,1,523,
        1,523,1,523,1,523,1,523,1,523,1,523,3,523,11854,8,523,1,523,1,523,
        1,523,1,523,1,523,1,523,1,523,1,523,3,523,11864,8,523,1,523,1,523,
        1,523,1,523,1,523,1,523,1,523,1,523,1,523,1,523,1,523,1,523,1,523,
        1,523,3,523,11880,8,523,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,1,524,
        1,524,1,524,1,524,5,524,11903,8,524,10,524,12,524,11906,9,524,1,
        524,1,524,3,524,11910,8,524,1,525,3,525,11913,8,525,1,525,1,525,
        1,525,1,525,1,526,3,526,11920,8,526,1,526,1,526,1,526,1,526,1,526,
        1,526,3,526,11928,8,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,
        1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,3,526,11946,
        8,526,1,526,1,526,1,526,1,526,1,526,1,526,1,526,3,526,11955,8,526,
        1,527,3,527,11958,8,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,
        1,527,3,527,11968,8,527,1,527,1,527,1,527,1,527,1,527,1,527,1,527,
        1,527,1,527,3,527,11979,8,527,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,3,528,
        11997,8,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,1,528,
        1,528,1,528,1,528,3,528,12022,8,528,1,529,3,529,12025,8,529,1,529,
        1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,
        3,529,12039,8,529,1,529,1,529,1,529,3,529,12044,8,529,1,529,1,529,
        1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,
        1,529,3,529,12060,8,529,1,529,1,529,1,529,3,529,12065,8,529,1,529,
        1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,1,529,
        1,529,1,529,3,529,12081,8,529,1,529,1,529,1,529,3,529,12086,8,529,
        1,529,1,529,1,529,1,529,1,529,1,529,1,529,3,529,12095,8,529,1,529,
        1,529,1,529,3,529,12100,8,529,1,529,1,529,1,529,1,529,1,529,1,529,
        1,529,1,529,1,529,1,529,1,529,3,529,12113,8,529,1,530,3,530,12116,
        8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,5,530,12135,8,530,10,530,
        12,530,12138,9,530,1,530,1,530,1,530,3,530,12143,8,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,5,530,12154,8,530,10,530,
        12,530,12157,9,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        3,530,12167,8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,3,530,12179,8,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,3,530,12195,8,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,3,530,
        12207,8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        3,530,12218,8,530,3,530,12220,8,530,1,530,1,530,1,530,3,530,12225,
        8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,3,530,12241,8,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,3,530,12251,8,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,3,530,12260,8,530,1,530,1,530,1,530,3,530,12265,
        8,530,1,530,1,530,1,530,1,530,1,530,3,530,12272,8,530,1,530,1,530,
        1,530,3,530,12277,8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,3,530,12288,8,530,1,530,1,530,1,530,3,530,12293,8,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        3,530,12306,8,530,3,530,12308,8,530,3,530,12310,8,530,1,530,1,530,
        1,530,3,530,12315,8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        3,530,12324,8,530,1,530,1,530,1,530,3,530,12329,8,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,3,530,12348,8,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,3,530,12357,8,530,3,530,12359,8,530,1,530,1,530,
        1,530,3,530,12364,8,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,3,530,12390,8,530,1,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,3,530,12401,8,530,1,530,
        1,530,1,530,1,530,1,530,1,530,1,530,1,530,1,530,3,530,12412,8,530,
        1,530,1,530,1,530,1,530,1,530,1,530,3,530,12420,8,530,1,530,3,530,
        12423,8,530,1,530,1,530,1,530,3,530,12428,8,530,1,531,3,531,12431,
        8,531,1,531,1,531,1,531,1,531,1,531,3,531,12438,8,531,1,531,3,531,
        12441,8,531,1,531,1,531,1,531,1,531,1,531,3,531,12448,8,531,1,531,
        1,531,1,531,3,531,12453,8,531,1,531,1,531,1,531,1,531,1,531,1,531,
        3,531,12461,8,531,1,531,1,531,1,531,1,531,1,531,3,531,12468,8,531,
        1,531,1,531,3,531,12472,8,531,1,531,3,531,12475,8,531,1,531,1,531,
        1,531,1,531,1,531,1,531,1,531,1,531,3,531,12485,8,531,1,531,1,531,
        1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,
        1,531,1,531,1,531,1,531,1,531,1,531,1,531,3,531,12507,8,531,1,531,
        1,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,3,531,12518,8,531,
        3,531,12520,8,531,1,531,1,531,1,531,1,531,1,531,1,531,1,531,5,531,
        12529,8,531,10,531,12,531,12532,9,531,1,531,1,531,3,531,12536,8,
        531,1,531,1,531,1,531,1,531,1,531,5,531,12543,8,531,10,531,12,531,
        12546,9,531,1,531,1,531,3,531,12550,8,531,3,531,12552,8,531,1,532,
        1,532,1,532,1,532,1,532,1,532,3,532,12560,8,532,1,532,1,532,1,532,
        1,532,1,532,1,532,1,532,1,532,1,532,3,532,12571,8,532,1,532,3,532,
        12574,8,532,1,532,3,532,12577,8,532,1,532,1,532,1,532,1,532,1,532,
        1,532,1,532,1,532,3,532,12587,8,532,1,532,3,532,12590,8,532,1,532,
        1,532,3,532,12594,8,532,1,532,3,532,12597,8,532,1,532,1,532,3,532,
        12601,8,532,1,532,1,532,3,532,12605,8,532,1,532,1,532,1,532,1,532,
        1,532,1,532,3,532,12613,8,532,1,532,1,532,1,532,1,532,1,532,1,532,
        3,532,12621,8,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,
        3,532,12631,8,532,1,532,1,532,3,532,12635,8,532,1,532,1,532,3,532,
        12639,8,532,1,532,3,532,12642,8,532,1,532,1,532,1,532,1,532,1,532,
        3,532,12649,8,532,1,532,1,532,1,532,5,532,12654,8,532,10,532,12,
        532,12657,9,532,3,532,12659,8,532,1,532,3,532,12662,8,532,1,532,
        3,532,12665,8,532,1,532,1,532,1,532,1,532,1,532,1,532,5,532,12673,
        8,532,10,532,12,532,12676,9,532,1,532,3,532,12679,8,532,1,532,1,
        532,1,532,1,532,1,532,1,532,3,532,12687,8,532,1,532,1,532,1,532,
        1,532,1,532,1,532,1,532,1,532,3,532,12697,8,532,1,532,3,532,12700,
        8,532,1,532,1,532,1,532,1,532,1,532,1,532,3,532,12708,8,532,1,532,
        1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,
        1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,
        3,532,12733,8,532,1,532,1,532,3,532,12737,8,532,1,532,1,532,1,532,
        1,532,1,532,1,532,1,532,1,532,1,532,1,532,5,532,12749,8,532,10,532,
        12,532,12752,9,532,3,532,12754,8,532,1,532,3,532,12757,8,532,1,532,
        1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,
        1,532,5,532,12772,8,532,10,532,12,532,12775,9,532,1,532,1,532,1,
        532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,
        1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,1,532,
        3,532,12801,8,532,1,533,1,533,1,533,1,533,1,533,5,533,12808,8,533,
        10,533,12,533,12811,9,533,1,533,1,533,1,533,3,533,12816,8,533,1,
        533,1,533,1,533,1,533,1,533,3,533,12823,8,533,3,533,12825,8,533,
        1,534,1,534,1,534,1,534,1,534,5,534,12832,8,534,10,534,12,534,12835,
        9,534,1,534,1,534,3,534,12839,8,534,1,534,1,534,1,534,1,534,1,534,
        1,534,1,534,1,534,1,534,3,534,12850,8,534,1,534,1,534,3,534,12854,
        8,534,1,535,1,535,1,535,1,536,1,536,1,536,1,537,1,537,1,537,1,538,
        1,538,1,538,1,539,1,539,1,540,1,540,1,540,1,540,5,540,12874,8,540,
        10,540,12,540,12877,9,540,1,540,1,540,1,541,1,541,1,541,1,541,1,
        541,3,541,12886,8,541,1,542,1,542,1,542,1,542,3,542,12892,8,542,
        1,543,1,543,1,543,1,543,5,543,12898,8,543,10,543,12,543,12901,9,
        543,1,543,1,543,1,543,1,543,3,543,12907,8,543,5,543,12909,8,543,
        10,543,12,543,12912,9,543,1,543,1,543,1,544,1,544,1,544,3,544,12919,
        8,544,1,545,1,545,1,545,1,545,3,545,12925,8,545,1,545,3,545,12928,
        8,545,1,546,1,546,1,546,3,546,12933,8,546,1,547,1,547,1,547,1,547,
        3,547,12939,8,547,3,547,12941,8,547,1,547,1,547,5,547,12945,8,547,
        10,547,12,547,12948,9,547,1,547,1,547,1,547,1,548,1,548,1,548,1,
        548,3,548,12957,8,548,1,548,1,548,3,548,12961,8,548,1,549,1,549,
        1,549,1,549,3,549,12967,8,549,1,550,1,550,1,550,1,550,1,550,1,550,
        3,550,12975,8,550,1,551,1,551,1,551,1,551,3,551,12981,8,551,1,551,
        3,551,12984,8,551,1,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,
        1,552,3,552,12995,8,552,1,552,1,552,1,552,1,552,1,552,1,552,1,552,
        1,552,3,552,13005,8,552,1,553,1,553,1,553,3,553,13010,8,553,1,553,
        3,553,13013,8,553,1,553,3,553,13016,8,553,1,553,1,553,1,554,1,554,
        1,554,3,554,13023,8,554,1,554,1,554,1,554,1,555,1,555,1,555,3,555,
        13031,8,555,1,555,1,555,3,555,13035,8,555,1,555,1,555,1,556,1,556,
        1,556,1,556,1,556,5,556,13044,8,556,10,556,12,556,13047,9,556,1,
        557,1,557,1,557,1,557,1,557,5,557,13054,8,557,10,557,12,557,13057,
        9,557,1,557,1,557,1,557,3,557,13062,8,557,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,1,558,
        1,558,1,558,3,558,13147,8,558,3,558,13149,8,558,1,559,1,559,1,559,
        1,559,1,559,3,559,13156,8,559,1,559,1,559,3,559,13160,8,559,1,560,
        1,560,1,560,3,560,13165,8,560,1,560,1,560,1,560,1,560,5,560,13171,
        8,560,10,560,12,560,13174,9,560,3,560,13176,8,560,1,561,1,561,1,
        561,1,561,1,562,1,562,1,562,1,562,1,562,5,562,13187,8,562,10,562,
        12,562,13190,9,562,1,562,1,562,1,563,1,563,1,563,3,563,13197,8,563,
        1,564,1,564,1,564,3,564,13202,8,564,1,565,1,565,3,565,13206,8,565,
        1,566,1,566,1,566,1,566,1,566,5,566,13213,8,566,10,566,12,566,13216,
        9,566,1,566,1,566,1,567,1,567,1,567,1,567,1,567,1,567,1,567,1,567,
        3,567,13228,8,567,1,568,1,568,1,568,1,568,1,568,1,568,3,568,13236,
        8,568,1,568,1,568,1,568,1,568,1,568,1,568,3,568,13244,8,568,5,568,
        13246,8,568,10,568,12,568,13249,9,568,1,569,1,569,1,569,1,569,3,
        569,13255,8,569,1,569,1,569,3,569,13259,8,569,1,570,1,570,1,570,
        1,571,1,571,1,571,1,571,1,572,1,572,1,572,1,573,1,573,1,573,1,573,
        1,573,1,573,1,573,1,573,3,573,13279,8,573,1,574,1,574,1,574,1,575,
        1,575,1,576,1,576,1,576,1,576,1,577,1,577,1,577,1,577,1,577,3,577,
        13295,8,577,1,577,3,577,13298,8,577,1,577,1,577,3,577,13302,8,577,
        1,578,1,578,1,578,5,578,13307,8,578,10,578,12,578,13310,9,578,1,
        578,1,578,1,578,1,579,1,579,1,579,1,579,5,579,13319,8,579,10,579,
        12,579,13322,9,579,1,580,1,580,3,580,13326,8,580,1,580,3,580,13329,
        8,580,1,581,1,581,1,581,1,581,1,581,1,581,5,581,13337,8,581,10,581,
        12,581,13340,9,581,1,581,1,581,1,581,1,581,1,581,1,581,1,581,1,581,
        5,581,13350,8,581,10,581,12,581,13353,9,581,1,581,1,581,1,581,1,
        581,1,581,1,581,1,581,1,581,5,581,13363,8,581,10,581,12,581,13366,
        9,581,1,581,1,581,1,581,1,581,1,581,1,581,3,581,13374,8,581,1,582,
        1,582,3,582,13378,8,582,1,582,1,582,1,583,1,583,3,583,13384,8,583,
        1,583,3,583,13387,8,583,1,584,1,584,3,584,13391,8,584,1,584,1,584,
        1,585,1,585,1,585,3,585,13398,8,585,1,585,1,585,1,585,1,585,3,585,
        13404,8,585,1,585,1,585,3,585,13408,8,585,1,586,1,586,1,586,1,586,
        1,586,1,586,1,586,1,586,5,586,13418,8,586,10,586,12,586,13421,9,
        586,1,586,1,586,1,586,1,586,1,586,1,586,1,586,1,586,1,586,1,586,
        5,586,13433,8,586,10,586,12,586,13436,9,586,1,586,1,586,3,586,13440,
        8,586,1,587,1,587,3,587,13444,8,587,1,587,3,587,13447,8,587,1,588,
        1,588,3,588,13451,8,588,1,588,3,588,13454,8,588,1,589,1,589,1,589,
        1,589,3,589,13460,8,589,1,589,3,589,13463,8,589,1,590,1,590,3,590,
        13467,8,590,1,591,1,591,1,591,1,591,5,591,13473,8,591,10,591,12,
        591,13476,9,591,1,591,1,591,1,592,1,592,1,592,1,592,5,592,13484,
        8,592,10,592,12,592,13487,9,592,1,592,1,592,1,593,1,593,1,593,1,
        593,5,593,13495,8,593,10,593,12,593,13498,9,593,1,593,1,593,1,594,
        1,594,3,594,13504,8,594,1,594,1,594,1,594,1,595,1,595,1,595,1,596,
        1,596,1,596,1,597,1,597,1,597,1,597,1,598,1,598,1,598,1,599,1,599,
        1,599,1,599,1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,
        1,600,1,600,1,600,1,600,1,600,1,600,1,600,1,600,3,600,13543,8,600,
        1,601,1,601,1,602,1,602,1,602,1,602,3,602,13551,8,602,1,603,4,603,
        13554,8,603,11,603,12,603,13555,1,604,1,604,3,604,13560,8,604,1,
        604,1,604,3,604,13564,8,604,1,604,1,604,3,604,13568,8,604,1,604,
        1,604,3,604,13572,8,604,1,604,3,604,13575,8,604,1,604,1,604,3,604,
        13579,8,604,1,604,3,604,13582,8,604,1,605,1,605,1,605,1,605,1,605,
        3,605,13589,8,605,1,605,1,605,1,605,1,605,3,605,13595,8,605,1,606,
        1,606,1,606,1,606,5,606,13601,8,606,10,606,12,606,13604,9,606,1,
        607,1,607,3,607,13608,8,607,1,608,1,608,3,608,13612,8,608,1,608,
        1,608,1,608,1,609,1,609,1,609,3,609,13620,8,609,1,609,1,609,1,609,
        1,609,1,609,1,609,4,609,13628,8,609,11,609,12,609,13629,1,609,1,
        609,1,610,1,610,1,610,1,610,1,610,5,610,13639,8,610,10,610,12,610,
        13642,9,610,1,610,1,610,1,611,1,611,1,611,5,611,13649,8,611,10,611,
        12,611,13652,9,611,1,611,1,611,1,611,1,611,3,611,13658,8,611,1,611,
        3,611,13661,8,611,3,611,13663,8,611,1,612,3,612,13666,8,612,1,612,
        1,612,1,612,1,612,3,612,13672,8,612,3,612,13674,8,612,1,613,1,613,
        1,613,3,613,13679,8,613,1,614,1,614,1,614,1,614,1,614,1,615,1,615,
        1,615,1,615,1,615,1,615,1,615,1,615,3,615,13694,8,615,1,616,1,616,
        1,616,1,616,1,616,1,616,1,616,1,616,5,616,13704,8,616,10,616,12,
        616,13707,9,616,3,616,13709,8,616,1,616,1,616,1,616,5,616,13714,
        8,616,10,616,12,616,13717,9,616,3,616,13719,8,616,1,616,1,616,1,
        616,1,616,5,616,13725,8,616,10,616,12,616,13728,9,616,1,616,3,616,
        13731,8,616,1,616,3,616,13734,8,616,1,616,1,616,1,616,5,616,13739,
        8,616,10,616,12,616,13742,9,616,3,616,13744,8,616,1,617,1,617,1,
        617,1,617,1,617,1,617,1,617,1,617,1,617,5,617,13755,8,617,10,617,
        12,617,13758,9,617,1,617,3,617,13761,8,617,1,618,1,618,1,618,3,618,
        13766,8,618,1,618,1,618,3,618,13770,8,618,1,618,1,618,1,618,5,618,
        13775,8,618,10,618,12,618,13778,9,618,1,618,3,618,13781,8,618,1,
        618,1,618,1,618,1,618,1,618,5,618,13788,8,618,10,618,12,618,13791,
        9,618,1,618,1,618,1,618,5,618,13796,8,618,10,618,12,618,13799,9,
        618,1,618,1,618,1,618,5,618,13804,8,618,10,618,12,618,13807,9,618,
        1,618,1,618,1,618,5,618,13812,8,618,10,618,12,618,13815,9,618,1,
        618,1,618,1,618,1,618,3,618,13821,8,618,1,618,1,618,1,618,1,618,
        5,618,13827,8,618,10,618,12,618,13830,9,618,1,618,3,618,13833,8,
        618,1,618,1,618,3,618,13837,8,618,1,618,1,618,1,618,5,618,13842,
        8,618,10,618,12,618,13845,9,618,3,618,13847,8,618,1,619,1,619,1,
        619,1,619,1,619,1,619,3,619,13855,8,619,1,619,1,619,1,619,1,619,
        5,619,13861,8,619,10,619,12,619,13864,9,619,1,619,1,619,1,619,1,
        619,1,619,5,619,13871,8,619,10,619,12,619,13874,9,619,1,619,1,619,
        1,619,3,619,13879,8,619,1,619,1,619,1,619,3,619,13884,8,619,1,619,
        1,619,1,619,1,619,5,619,13890,8,619,10,619,12,619,13893,9,619,1,
        619,1,619,1,619,1,619,1,619,5,619,13900,8,619,10,619,12,619,13903,
        9,619,1,619,1,619,3,619,13907,8,619,3,619,13909,8,619,1,620,1,620,
        1,620,1,620,1,620,1,620,5,620,13917,8,620,10,620,12,620,13920,9,
        620,1,620,3,620,13923,8,620,1,620,1,620,1,620,1,620,1,620,1,620,
        5,620,13931,8,620,10,620,12,620,13934,9,620,3,620,13936,8,620,1,
        620,1,620,1,620,3,620,13941,8,620,1,621,1,621,1,621,1,621,1,621,
        1,621,1,621,5,621,13950,8,621,10,621,12,621,13953,9,621,1,621,3,
        621,13956,8,621,1,621,3,621,13959,8,621,1,622,1,622,1,622,1,622,
        1,622,1,622,1,622,5,622,13968,8,622,10,622,12,622,13971,9,622,1,
        623,1,623,1,623,1,623,1,623,1,623,1,623,5,623,13980,8,623,10,623,
        12,623,13983,9,623,1,624,1,624,1,624,1,624,1,624,1,624,1,624,1,624,
        3,624,13993,8,624,1,625,1,625,3,625,13997,8,625,1,625,1,625,1,625,
        1,625,1,625,1,625,1,625,5,625,14006,8,625,10,625,12,625,14009,9,
        625,3,625,14011,8,625,1,625,1,625,1,625,5,625,14016,8,625,10,625,
        12,625,14019,9,625,3,625,14021,8,625,1,625,1,625,1,625,1,625,5,625,
        14027,8,625,10,625,12,625,14030,9,625,1,625,3,625,14033,8,625,1,
        626,1,626,1,626,1,626,3,626,14039,8,626,1,626,1,626,1,626,5,626,
        14044,8,626,10,626,12,626,14047,9,626,1,626,1,626,1,626,1,626,5,
        626,14053,8,626,10,626,12,626,14056,9,626,1,627,1,627,3,627,14060,
        8,627,1,627,1,627,3,627,14064,8,627,1,627,1,627,3,627,14068,8,627,
        1,627,1,627,1,627,5,627,14073,8,627,10,627,12,627,14076,9,627,3,
        627,14078,8,627,1,627,1,627,1,627,1,627,1,627,5,627,14085,8,627,
        10,627,12,627,14088,9,627,1,627,1,627,1,627,5,627,14093,8,627,10,
        627,12,627,14096,9,627,1,627,1,627,1,627,5,627,14101,8,627,10,627,
        12,627,14104,9,627,1,627,1,627,1,627,5,627,14109,8,627,10,627,12,
        627,14112,9,627,3,627,14114,8,627,1,627,1,627,1,627,1,627,5,627,
        14120,8,627,10,627,12,627,14123,9,627,1,627,1,627,1,627,1,627,5,
        627,14129,8,627,10,627,12,627,14132,9,627,3,627,14134,8,627,1,628,
        1,628,1,628,1,628,1,628,1,628,1,628,1,628,5,628,14144,8,628,10,628,
        12,628,14147,9,628,1,628,1,628,1,628,1,628,1,628,5,628,14154,8,628,
        10,628,12,628,14157,9,628,1,628,1,628,1,628,3,628,14162,8,628,1,
        628,1,628,1,628,3,628,14167,8,628,1,628,1,628,1,628,1,628,5,628,
        14173,8,628,10,628,12,628,14176,9,628,1,628,1,628,1,628,1,628,1,
        628,5,628,14183,8,628,10,628,12,628,14186,9,628,3,628,14188,8,628,
        3,628,14190,8,628,1,628,1,628,1,628,3,628,14195,8,628,1,629,1,629,
        1,629,1,629,1,629,1,629,5,629,14203,8,629,10,629,12,629,14206,9,
        629,1,629,3,629,14209,8,629,1,629,1,629,1,629,1,629,1,629,1,629,
        5,629,14217,8,629,10,629,12,629,14220,9,629,3,629,14222,8,629,1,
        630,1,630,3,630,14226,8,630,1,630,1,630,1,630,1,630,1,630,1,630,
        5,630,14234,8,630,10,630,12,630,14237,9,630,1,630,3,630,14240,8,
        630,1,631,1,631,1,631,1,631,1,631,1,631,1,631,5,631,14249,8,631,
        10,631,12,631,14252,9,631,1,632,1,632,1,632,1,632,1,632,1,632,1,
        632,5,632,14261,8,632,10,632,12,632,14264,9,632,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,1,633,
        1,633,1,633,3,633,14392,8,633,1,634,1,634,1,634,1,634,1,634,1,634,
        1,634,3,634,14401,8,634,1,634,1,634,1,634,1,634,1,634,5,634,14408,
        8,634,10,634,12,634,14411,9,634,3,634,14413,8,634,1,634,1,634,1,
        634,1,634,3,634,14419,8,634,1,634,3,634,14422,8,634,1,635,1,635,
        1,635,1,635,1,635,3,635,14429,8,635,1,636,1,636,1,636,1,636,1,636,
        3,636,14436,8,636,1,637,1,637,1,637,1,637,1,637,3,637,14443,8,637,
        1,638,1,638,1,638,1,638,1,638,3,638,14450,8,638,1,639,1,639,1,640,
        3,640,14455,8,640,1,640,1,640,1,641,3,641,14460,8,641,1,641,1,641,
        1,642,3,642,14465,8,642,1,642,1,642,1,643,1,643,1,643,1,643,1,644,
        1,644,1,644,1,644,1,645,1,645,1,645,1,645,1,645,1,9191,4,278,838,
        998,1000,646,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
        38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
        82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,
        152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
        184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
        216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
        248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
        280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
        312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,
        344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
        376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,
        408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,
        440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
        472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,
        504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,
        536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,
        568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,
        600,602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,
        632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,
        664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,
        696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,
        728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,
        760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,
        792,794,796,798,800,802,804,806,808,810,812,814,816,818,820,822,
        824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,
        856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,
        888,890,892,894,896,898,900,902,904,906,908,910,912,914,916,918,
        920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,
        952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,
        984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,
        1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,
        1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,
        1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,
        1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,
        1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,
        1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,
        1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,
        1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,
        1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,
        1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,
        1274,1276,1278,1280,1282,1284,1286,1288,1290,0,157,2,0,664,664,699,
        699,1,0,1221,1222,2,0,372,372,884,884,2,0,20,20,426,426,2,0,115,
        115,307,307,3,0,111,111,283,283,286,286,3,0,69,69,361,361,951,951,
        1,0,873,874,2,0,290,290,1208,1208,3,0,13,13,198,198,269,269,2,0,
        283,283,286,286,2,0,75,75,199,199,1,0,1139,1140,3,0,599,600,644,
        645,714,714,3,0,395,395,937,937,939,939,2,0,300,300,1077,1077,2,
        0,20,20,207,207,2,0,86,86,340,340,2,0,624,624,713,713,4,0,557,557,
        598,598,718,718,1085,1085,3,0,386,386,718,718,1086,1086,3,0,557,
        557,598,598,718,718,2,0,12,12,493,493,2,0,72,72,623,623,3,0,386,
        386,718,718,961,961,3,0,190,190,195,195,293,293,4,0,602,602,624,
        624,713,713,834,834,2,0,560,560,575,575,2,0,78,78,146,146,1,0,114,
        115,1,0,452,453,2,0,156,156,267,267,5,0,573,573,589,590,768,769,
        888,888,946,946,5,0,277,277,582,583,787,787,895,895,1002,1002,1,
        0,369,370,2,0,69,69,361,361,3,0,83,83,238,238,244,244,2,0,258,258,
        478,478,2,0,219,219,355,355,2,0,385,385,417,417,2,0,1023,1023,1192,
        1192,2,0,178,178,460,460,2,0,261,261,372,372,2,0,735,735,1015,1015,
        3,0,45,45,727,727,729,729,3,0,111,111,239,239,246,246,4,0,502,502,
        544,544,754,754,791,791,3,0,111,111,647,647,1065,1065,2,0,557,557,
        598,598,2,0,386,386,961,961,3,0,17,17,203,203,274,274,3,0,725,725,
        735,735,1015,1015,15,0,13,13,111,111,150,150,226,226,280,280,386,
        386,398,398,404,404,477,477,496,496,501,501,838,838,940,940,977,
        979,1019,1019,3,0,537,537,539,539,541,541,2,0,243,243,538,538,2,
        0,930,930,954,954,2,0,343,343,371,371,2,0,17,17,203,203,4,0,111,
        111,137,137,274,274,741,741,6,0,535,535,570,570,642,642,691,691,
        719,719,788,788,3,0,302,303,385,385,417,417,2,0,126,126,268,268,
        2,0,1193,1193,1205,1205,1,0,197,198,4,0,567,567,580,581,705,706,
        908,908,1,0,143,144,2,0,108,109,278,278,2,0,52,52,55,55,2,0,1042,
        1042,1059,1059,3,0,681,681,723,723,752,752,2,0,723,723,752,752,4,
        0,173,173,725,725,735,735,1015,1015,2,0,438,438,455,455,2,0,272,
        272,1211,1211,2,0,49,49,88,88,2,0,556,556,1010,1010,1,0,1069,1072,
        2,0,1198,1200,1203,1203,12,0,106,106,506,509,678,678,774,774,778,
        779,863,864,904,904,949,949,985,985,1009,1009,1026,1028,1061,1062,
        1,0,488,1192,4,0,142,142,204,204,247,247,447,447,3,0,165,165,219,
        219,355,355,1,0,1185,1186,2,0,178,178,840,840,2,0,21,21,116,116,
        2,0,156,156,731,731,4,0,556,556,735,735,1010,1010,1015,1015,1,0,
        1219,1220,1,0,1217,1218,2,0,736,736,876,876,3,0,520,521,523,525,
        530,530,4,0,513,513,519,519,528,529,531,531,3,0,515,515,526,527,
        532,532,3,0,817,817,823,823,825,825,3,0,815,816,819,820,822,822,
        6,0,106,106,185,185,248,248,258,258,368,368,478,478,4,0,185,185,
        248,248,258,258,368,368,9,0,30,32,213,213,238,239,244,244,246,246,
        380,380,396,397,403,403,461,462,2,0,13,13,121,121,3,0,80,80,84,85,
        327,335,3,0,13,13,121,121,448,448,7,0,30,32,238,239,244,244,246,
        246,396,397,403,403,461,462,3,0,301,301,603,603,630,630,2,0,673,
        673,734,734,2,0,730,730,737,737,3,0,237,237,241,241,260,260,1,0,
        851,852,16,0,3,3,6,7,22,23,25,25,27,27,81,82,113,113,147,147,222,
        222,228,228,276,276,318,318,378,379,390,390,407,408,479,479,3,0,
        565,566,674,674,926,926,3,0,26,26,251,251,319,319,2,0,894,894,1006,
        1006,2,0,815,816,819,820,2,0,43,43,45,45,3,0,52,53,55,58,240,240,
        3,0,161,161,425,425,437,437,5,0,547,547,549,550,682,682,892,893,
        924,925,3,0,957,960,966,970,972,976,5,0,612,616,783,785,867,868,
        1033,1036,1064,1064,2,0,689,689,738,738,6,0,561,562,620,621,748,
        751,964,965,1003,1004,1141,1144,1,0,997,998,2,0,995,995,999,999,
        1,0,808,809,7,0,185,185,248,248,258,258,368,368,478,478,1076,1076,
        1099,1099,2,0,9,9,814,814,7,0,106,106,185,185,248,248,258,258,368,
        368,423,424,478,478,1,0,179,180,1,0,650,651,1,0,450,451,5,0,535,
        535,572,572,708,708,739,739,1084,1084,4,0,54,54,383,383,399,399,
        465,465,3,0,233,233,454,454,1011,1011,2,0,746,746,898,898,2,0,747,
        747,899,899,2,0,159,159,1208,1208,1,0,401,402,1,0,433,434,3,0,39,
        39,217,217,429,429,2,0,593,593,636,636,2,0,661,661,701,701,2,0,307,
        307,942,942,3,0,593,593,636,636,914,914,1,0,1104,1107,2,0,274,274,
        649,649,2,0,593,593,914,914,4,0,274,274,489,489,649,649,794,794,
        2,0,697,697,885,885,4,0,32,32,629,629,690,690,745,745,2,0,660,660,
        700,700,2,0,1207,1207,1210,1210,3,0,13,13,18,18,382,382,1,0,226,
        227,2,0,159,159,190,190,2,0,659,659,662,662,2,0,128,128,938,938,
        2,0,164,164,426,426,4,0,2,2,256,257,373,373,375,375,16815,0,1292,
        1,0,0,0,2,1308,1,0,0,0,4,1400,1,0,0,0,6,1402,1,0,0,0,8,1424,1,0,
        0,0,10,1433,1,0,0,0,12,1446,1,0,0,0,14,1479,1,0,0,0,16,1485,1,0,
        0,0,18,1498,1,0,0,0,20,1500,1,0,0,0,22,1551,1,0,0,0,24,1563,1,0,
        0,0,26,1580,1,0,0,0,28,1594,1,0,0,0,30,1600,1,0,0,0,32,1665,1,0,
        0,0,34,1667,1,0,0,0,36,1704,1,0,0,0,38,1745,1,0,0,0,40,1820,1,0,
        0,0,42,1868,1,0,0,0,44,1870,1,0,0,0,46,1944,1,0,0,0,48,1954,1,0,
        0,0,50,1956,1,0,0,0,52,1983,1,0,0,0,54,2015,1,0,0,0,56,2026,1,0,
        0,0,58,2049,1,0,0,0,60,2067,1,0,0,0,62,2077,1,0,0,0,64,2090,1,0,
        0,0,66,2101,1,0,0,0,68,2111,1,0,0,0,70,2130,1,0,0,0,72,2148,1,0,
        0,0,74,2204,1,0,0,0,76,2226,1,0,0,0,78,2251,1,0,0,0,80,2407,1,0,
        0,0,82,2415,1,0,0,0,84,2438,1,0,0,0,86,2440,1,0,0,0,88,2476,1,0,
        0,0,90,2531,1,0,0,0,92,2552,1,0,0,0,94,2557,1,0,0,0,96,2559,1,0,
        0,0,98,2563,1,0,0,0,100,2574,1,0,0,0,102,2590,1,0,0,0,104,2606,1,
        0,0,0,106,2616,1,0,0,0,108,2692,1,0,0,0,110,2708,1,0,0,0,112,2730,
        1,0,0,0,114,2763,1,0,0,0,116,2766,1,0,0,0,118,2773,1,0,0,0,120,2801,
        1,0,0,0,122,2822,1,0,0,0,124,2838,1,0,0,0,126,2840,1,0,0,0,128,2896,
        1,0,0,0,130,2974,1,0,0,0,132,3050,1,0,0,0,134,3053,1,0,0,0,136,3056,
        1,0,0,0,138,3074,1,0,0,0,140,3099,1,0,0,0,142,3102,1,0,0,0,144,3106,
        1,0,0,0,146,3120,1,0,0,0,148,3122,1,0,0,0,150,3127,1,0,0,0,152,3131,
        1,0,0,0,154,3159,1,0,0,0,156,3161,1,0,0,0,158,3165,1,0,0,0,160,3173,
        1,0,0,0,162,3210,1,0,0,0,164,3231,1,0,0,0,166,3233,1,0,0,0,168,3259,
        1,0,0,0,170,3277,1,0,0,0,172,3279,1,0,0,0,174,3284,1,0,0,0,176,3290,
        1,0,0,0,178,3322,1,0,0,0,180,3329,1,0,0,0,182,3346,1,0,0,0,184,3395,
        1,0,0,0,186,3400,1,0,0,0,188,3405,1,0,0,0,190,3446,1,0,0,0,192,3448,
        1,0,0,0,194,3455,1,0,0,0,196,3461,1,0,0,0,198,3512,1,0,0,0,200,3514,
        1,0,0,0,202,3523,1,0,0,0,204,3549,1,0,0,0,206,3601,1,0,0,0,208,3642,
        1,0,0,0,210,3649,1,0,0,0,212,3652,1,0,0,0,214,3656,1,0,0,0,216,3664,
        1,0,0,0,218,3686,1,0,0,0,220,3699,1,0,0,0,222,3703,1,0,0,0,224,3720,
        1,0,0,0,226,3733,1,0,0,0,228,3740,1,0,0,0,230,3765,1,0,0,0,232,3773,
        1,0,0,0,234,3781,1,0,0,0,236,3813,1,0,0,0,238,3824,1,0,0,0,240,3833,
        1,0,0,0,242,3858,1,0,0,0,244,3869,1,0,0,0,246,3873,1,0,0,0,248,3877,
        1,0,0,0,250,3879,1,0,0,0,252,3883,1,0,0,0,254,3885,1,0,0,0,256,3902,
        1,0,0,0,258,3920,1,0,0,0,260,3946,1,0,0,0,262,3971,1,0,0,0,264,3973,
        1,0,0,0,266,3989,1,0,0,0,268,4014,1,0,0,0,270,4040,1,0,0,0,272,4115,
        1,0,0,0,274,4135,1,0,0,0,276,4151,1,0,0,0,278,4165,1,0,0,0,280,4185,
        1,0,0,0,282,4193,1,0,0,0,284,4299,1,0,0,0,286,4355,1,0,0,0,288,4357,
        1,0,0,0,290,4382,1,0,0,0,292,4390,1,0,0,0,294,4396,1,0,0,0,296,4401,
        1,0,0,0,298,4405,1,0,0,0,300,4409,1,0,0,0,302,4413,1,0,0,0,304,4416,
        1,0,0,0,306,4418,1,0,0,0,308,4474,1,0,0,0,310,4487,1,0,0,0,312,4495,
        1,0,0,0,314,4536,1,0,0,0,316,4603,1,0,0,0,318,4644,1,0,0,0,320,4680,
        1,0,0,0,322,4742,1,0,0,0,324,4772,1,0,0,0,326,4800,1,0,0,0,328,4851,
        1,0,0,0,330,4878,1,0,0,0,332,4981,1,0,0,0,334,4983,1,0,0,0,336,4998,
        1,0,0,0,338,5006,1,0,0,0,340,5014,1,0,0,0,342,5062,1,0,0,0,344,5064,
        1,0,0,0,346,5079,1,0,0,0,348,5081,1,0,0,0,350,5091,1,0,0,0,352,5109,
        1,0,0,0,354,5124,1,0,0,0,356,5150,1,0,0,0,358,5158,1,0,0,0,360,5162,
        1,0,0,0,362,5186,1,0,0,0,364,5191,1,0,0,0,366,5225,1,0,0,0,368,5229,
        1,0,0,0,370,5262,1,0,0,0,372,5301,1,0,0,0,374,5353,1,0,0,0,376,5359,
        1,0,0,0,378,5389,1,0,0,0,380,5391,1,0,0,0,382,5423,1,0,0,0,384,5439,
        1,0,0,0,386,5441,1,0,0,0,388,5457,1,0,0,0,390,5478,1,0,0,0,392,5497,
        1,0,0,0,394,5521,1,0,0,0,396,5525,1,0,0,0,398,5594,1,0,0,0,400,5663,
        1,0,0,0,402,5670,1,0,0,0,404,5675,1,0,0,0,406,5701,1,0,0,0,408,5703,
        1,0,0,0,410,5710,1,0,0,0,412,5717,1,0,0,0,414,5722,1,0,0,0,416,5726,
        1,0,0,0,418,5862,1,0,0,0,420,5864,1,0,0,0,422,5868,1,0,0,0,424,5897,
        1,0,0,0,426,5900,1,0,0,0,428,5906,1,0,0,0,430,5912,1,0,0,0,432,5916,
        1,0,0,0,434,5929,1,0,0,0,436,5933,1,0,0,0,438,5937,1,0,0,0,440,5945,
        1,0,0,0,442,5973,1,0,0,0,444,5975,1,0,0,0,446,5980,1,0,0,0,448,6005,
        1,0,0,0,450,6010,1,0,0,0,452,6015,1,0,0,0,454,6020,1,0,0,0,456,6024,
        1,0,0,0,458,6028,1,0,0,0,460,6035,1,0,0,0,462,6040,1,0,0,0,464,6044,
        1,0,0,0,466,6048,1,0,0,0,468,6053,1,0,0,0,470,6060,1,0,0,0,472,6064,
        1,0,0,0,474,6072,1,0,0,0,476,6102,1,0,0,0,478,6114,1,0,0,0,480,6128,
        1,0,0,0,482,6132,1,0,0,0,484,6136,1,0,0,0,486,6140,1,0,0,0,488,6144,
        1,0,0,0,490,6148,1,0,0,0,492,6161,1,0,0,0,494,6214,1,0,0,0,496,6218,
        1,0,0,0,498,6228,1,0,0,0,500,6230,1,0,0,0,502,6233,1,0,0,0,504,6239,
        1,0,0,0,506,6440,1,0,0,0,508,6442,1,0,0,0,510,6455,1,0,0,0,512,6479,
        1,0,0,0,514,6492,1,0,0,0,516,6505,1,0,0,0,518,6523,1,0,0,0,520,6545,
        1,0,0,0,522,6547,1,0,0,0,524,6559,1,0,0,0,526,6688,1,0,0,0,528,6690,
        1,0,0,0,530,6717,1,0,0,0,532,6723,1,0,0,0,534,6729,1,0,0,0,536,6735,
        1,0,0,0,538,6741,1,0,0,0,540,6747,1,0,0,0,542,6955,1,0,0,0,544,6957,
        1,0,0,0,546,6959,1,0,0,0,548,6982,1,0,0,0,550,6993,1,0,0,0,552,6995,
        1,0,0,0,554,7004,1,0,0,0,556,7013,1,0,0,0,558,7145,1,0,0,0,560,7147,
        1,0,0,0,562,7153,1,0,0,0,564,7163,1,0,0,0,566,7197,1,0,0,0,568,7243,
        1,0,0,0,570,7246,1,0,0,0,572,7267,1,0,0,0,574,7274,1,0,0,0,576,7289,
        1,0,0,0,578,7291,1,0,0,0,580,7299,1,0,0,0,582,7308,1,0,0,0,584,7317,
        1,0,0,0,586,7333,1,0,0,0,588,7340,1,0,0,0,590,7353,1,0,0,0,592,7358,
        1,0,0,0,594,7364,1,0,0,0,596,7372,1,0,0,0,598,7400,1,0,0,0,600,7403,
        1,0,0,0,602,7407,1,0,0,0,604,7420,1,0,0,0,606,7465,1,0,0,0,608,7468,
        1,0,0,0,610,7527,1,0,0,0,612,7540,1,0,0,0,614,7554,1,0,0,0,616,7557,
        1,0,0,0,618,7584,1,0,0,0,620,7614,1,0,0,0,622,7670,1,0,0,0,624,7673,
        1,0,0,0,626,7718,1,0,0,0,628,7734,1,0,0,0,630,7747,1,0,0,0,632,7772,
        1,0,0,0,634,7837,1,0,0,0,636,7839,1,0,0,0,638,7850,1,0,0,0,640,7867,
        1,0,0,0,642,7930,1,0,0,0,644,7934,1,0,0,0,646,7936,1,0,0,0,648,7959,
        1,0,0,0,650,8017,1,0,0,0,652,8033,1,0,0,0,654,8053,1,0,0,0,656,8055,
        1,0,0,0,658,8085,1,0,0,0,660,8092,1,0,0,0,662,8105,1,0,0,0,664,8118,
        1,0,0,0,666,8123,1,0,0,0,668,8125,1,0,0,0,670,8127,1,0,0,0,672,8140,
        1,0,0,0,674,8147,1,0,0,0,676,8151,1,0,0,0,678,8153,1,0,0,0,680,8157,
        1,0,0,0,682,8167,1,0,0,0,684,8198,1,0,0,0,686,8206,1,0,0,0,688,8208,
        1,0,0,0,690,8216,1,0,0,0,692,8227,1,0,0,0,694,8236,1,0,0,0,696,8248,
        1,0,0,0,698,8292,1,0,0,0,700,8334,1,0,0,0,702,8344,1,0,0,0,704,8362,
        1,0,0,0,706,8379,1,0,0,0,708,8398,1,0,0,0,710,8424,1,0,0,0,712,8475,
        1,0,0,0,714,8485,1,0,0,0,716,8495,1,0,0,0,718,8503,1,0,0,0,720,8507,
        1,0,0,0,722,8509,1,0,0,0,724,8574,1,0,0,0,726,8576,1,0,0,0,728,8580,
        1,0,0,0,730,8587,1,0,0,0,732,8594,1,0,0,0,734,8598,1,0,0,0,736,8601,
        1,0,0,0,738,8605,1,0,0,0,740,8611,1,0,0,0,742,8614,1,0,0,0,744,8617,
        1,0,0,0,746,8621,1,0,0,0,748,8625,1,0,0,0,750,8629,1,0,0,0,752,8640,
        1,0,0,0,754,8642,1,0,0,0,756,8646,1,0,0,0,758,8663,1,0,0,0,760,8665,
        1,0,0,0,762,8668,1,0,0,0,764,8676,1,0,0,0,766,8689,1,0,0,0,768,8693,
        1,0,0,0,770,8695,1,0,0,0,772,8697,1,0,0,0,774,8699,1,0,0,0,776,8702,
        1,0,0,0,778,8707,1,0,0,0,780,8712,1,0,0,0,782,8716,1,0,0,0,784,8750,
        1,0,0,0,786,8752,1,0,0,0,788,8766,1,0,0,0,790,8772,1,0,0,0,792,8776,
        1,0,0,0,794,8781,1,0,0,0,796,8790,1,0,0,0,798,8799,1,0,0,0,800,8808,
        1,0,0,0,802,8817,1,0,0,0,804,8825,1,0,0,0,806,8829,1,0,0,0,808,8834,
        1,0,0,0,810,8838,1,0,0,0,812,8842,1,0,0,0,814,8846,1,0,0,0,816,8850,
        1,0,0,0,818,8854,1,0,0,0,820,8858,1,0,0,0,822,8862,1,0,0,0,824,8866,
        1,0,0,0,826,8870,1,0,0,0,828,8874,1,0,0,0,830,8878,1,0,0,0,832,8882,
        1,0,0,0,834,8884,1,0,0,0,836,8886,1,0,0,0,838,8894,1,0,0,0,840,8907,
        1,0,0,0,842,8952,1,0,0,0,844,8956,1,0,0,0,846,8970,1,0,0,0,848,8972,
        1,0,0,0,850,8985,1,0,0,0,852,9004,1,0,0,0,854,9018,1,0,0,0,856,9031,
        1,0,0,0,858,9033,1,0,0,0,860,9048,1,0,0,0,862,9081,1,0,0,0,864,9089,
        1,0,0,0,866,9100,1,0,0,0,868,9104,1,0,0,0,870,9110,1,0,0,0,872,9114,
        1,0,0,0,874,9179,1,0,0,0,876,9181,1,0,0,0,878,9184,1,0,0,0,880,9216,
        1,0,0,0,882,9230,1,0,0,0,884,9262,1,0,0,0,886,9264,1,0,0,0,888,9270,
        1,0,0,0,890,9275,1,0,0,0,892,9287,1,0,0,0,894,9290,1,0,0,0,896,9304,
        1,0,0,0,898,9321,1,0,0,0,900,9336,1,0,0,0,902,9351,1,0,0,0,904,9362,
        1,0,0,0,906,9382,1,0,0,0,908,9391,1,0,0,0,910,9406,1,0,0,0,912,9466,
        1,0,0,0,914,9485,1,0,0,0,916,9535,1,0,0,0,918,9589,1,0,0,0,920,9605,
        1,0,0,0,922,9623,1,0,0,0,924,9640,1,0,0,0,926,9689,1,0,0,0,928,9711,
        1,0,0,0,930,9739,1,0,0,0,932,9749,1,0,0,0,934,9756,1,0,0,0,936,9762,
        1,0,0,0,938,9767,1,0,0,0,940,9785,1,0,0,0,942,9787,1,0,0,0,944,9795,
        1,0,0,0,946,9848,1,0,0,0,948,9903,1,0,0,0,950,9905,1,0,0,0,952,9923,
        1,0,0,0,954,9932,1,0,0,0,956,9937,1,0,0,0,958,9952,1,0,0,0,960,9958,
        1,0,0,0,962,9962,1,0,0,0,964,9974,1,0,0,0,966,9984,1,0,0,0,968,9987,
        1,0,0,0,970,9992,1,0,0,0,972,9997,1,0,0,0,974,10015,1,0,0,0,976,
        10017,1,0,0,0,978,10020,1,0,0,0,980,10023,1,0,0,0,982,10037,1,0,
        0,0,984,10045,1,0,0,0,986,10060,1,0,0,0,988,10073,1,0,0,0,990,10099,
        1,0,0,0,992,10109,1,0,0,0,994,10117,1,0,0,0,996,10121,1,0,0,0,998,
        10371,1,0,0,0,1000,10460,1,0,0,0,1002,10870,1,0,0,0,1004,10895,1,
        0,0,0,1006,10901,1,0,0,0,1008,10903,1,0,0,0,1010,10920,1,0,0,0,1012,
        10936,1,0,0,0,1014,10939,1,0,0,0,1016,10956,1,0,0,0,1018,10958,1,
        0,0,0,1020,10963,1,0,0,0,1022,11006,1,0,0,0,1024,11043,1,0,0,0,1026,
        11194,1,0,0,0,1028,11250,1,0,0,0,1030,11465,1,0,0,0,1032,11507,1,
        0,0,0,1034,11573,1,0,0,0,1036,11631,1,0,0,0,1038,11656,1,0,0,0,1040,
        11686,1,0,0,0,1042,11689,1,0,0,0,1044,11827,1,0,0,0,1046,11879,1,
        0,0,0,1048,11909,1,0,0,0,1050,11912,1,0,0,0,1052,11954,1,0,0,0,1054,
        11978,1,0,0,0,1056,12021,1,0,0,0,1058,12112,1,0,0,0,1060,12427,1,
        0,0,0,1062,12551,1,0,0,0,1064,12800,1,0,0,0,1066,12824,1,0,0,0,1068,
        12853,1,0,0,0,1070,12855,1,0,0,0,1072,12858,1,0,0,0,1074,12861,1,
        0,0,0,1076,12864,1,0,0,0,1078,12867,1,0,0,0,1080,12869,1,0,0,0,1082,
        12885,1,0,0,0,1084,12891,1,0,0,0,1086,12893,1,0,0,0,1088,12918,1,
        0,0,0,1090,12927,1,0,0,0,1092,12932,1,0,0,0,1094,12940,1,0,0,0,1096,
        12952,1,0,0,0,1098,12962,1,0,0,0,1100,12968,1,0,0,0,1102,12983,1,
        0,0,0,1104,13004,1,0,0,0,1106,13006,1,0,0,0,1108,13019,1,0,0,0,1110,
        13027,1,0,0,0,1112,13038,1,0,0,0,1114,13048,1,0,0,0,1116,13063,1,
        0,0,0,1118,13150,1,0,0,0,1120,13161,1,0,0,0,1122,13177,1,0,0,0,1124,
        13181,1,0,0,0,1126,13193,1,0,0,0,1128,13198,1,0,0,0,1130,13203,1,
        0,0,0,1132,13207,1,0,0,0,1134,13227,1,0,0,0,1136,13229,1,0,0,0,1138,
        13250,1,0,0,0,1140,13260,1,0,0,0,1142,13263,1,0,0,0,1144,13267,1,
        0,0,0,1146,13270,1,0,0,0,1148,13280,1,0,0,0,1150,13283,1,0,0,0,1152,
        13285,1,0,0,0,1154,13289,1,0,0,0,1156,13303,1,0,0,0,1158,13314,1,
        0,0,0,1160,13323,1,0,0,0,1162,13373,1,0,0,0,1164,13375,1,0,0,0,1166,
        13381,1,0,0,0,1168,13388,1,0,0,0,1170,13394,1,0,0,0,1172,13439,1,
        0,0,0,1174,13441,1,0,0,0,1176,13448,1,0,0,0,1178,13455,1,0,0,0,1180,
        13466,1,0,0,0,1182,13468,1,0,0,0,1184,13479,1,0,0,0,1186,13490,1,
        0,0,0,1188,13501,1,0,0,0,1190,13508,1,0,0,0,1192,13511,1,0,0,0,1194,
        13514,1,0,0,0,1196,13518,1,0,0,0,1198,13521,1,0,0,0,1200,13542,1,
        0,0,0,1202,13544,1,0,0,0,1204,13550,1,0,0,0,1206,13553,1,0,0,0,1208,
        13557,1,0,0,0,1210,13594,1,0,0,0,1212,13596,1,0,0,0,1214,13607,1,
        0,0,0,1216,13609,1,0,0,0,1218,13616,1,0,0,0,1220,13633,1,0,0,0,1222,
        13645,1,0,0,0,1224,13665,1,0,0,0,1226,13678,1,0,0,0,1228,13680,1,
        0,0,0,1230,13693,1,0,0,0,1232,13695,1,0,0,0,1234,13745,1,0,0,0,1236,
        13762,1,0,0,0,1238,13848,1,0,0,0,1240,13910,1,0,0,0,1242,13942,1,
        0,0,0,1244,13960,1,0,0,0,1246,13972,1,0,0,0,1248,13992,1,0,0,0,1250,
        13994,1,0,0,0,1252,14034,1,0,0,0,1254,14057,1,0,0,0,1256,14135,1,
        0,0,0,1258,14196,1,0,0,0,1260,14223,1,0,0,0,1262,14241,1,0,0,0,1264,
        14253,1,0,0,0,1266,14391,1,0,0,0,1268,14421,1,0,0,0,1270,14428,1,
        0,0,0,1272,14435,1,0,0,0,1274,14442,1,0,0,0,1276,14449,1,0,0,0,1278,
        14451,1,0,0,0,1280,14454,1,0,0,0,1282,14459,1,0,0,0,1284,14464,1,
        0,0,0,1286,14468,1,0,0,0,1288,14472,1,0,0,0,1290,14476,1,0,0,0,1292,
        1297,3,2,1,0,1293,1294,5,1206,0,0,1294,1296,3,2,1,0,1295,1293,1,
        0,0,0,1296,1299,1,0,0,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,
        1301,1,0,0,0,1299,1297,1,0,0,0,1300,1302,5,1206,0,0,1301,1300,1,
        0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1304,5,0,0,1,1304,
        1,1,0,0,0,1305,1309,3,4,2,0,1306,1309,3,1226,613,0,1307,1309,3,598,
        299,0,1308,1305,1,0,0,0,1308,1306,1,0,0,0,1308,1307,1,0,0,0,1309,
        3,1,0,0,0,1310,1401,3,6,3,0,1311,1401,3,12,6,0,1312,1401,3,14,7,
        0,1313,1401,3,16,8,0,1314,1401,3,18,9,0,1315,1401,3,58,29,0,1316,
        1401,3,76,38,0,1317,1401,3,78,39,0,1318,1401,3,86,43,0,1319,1401,
        3,88,44,0,1320,1401,3,104,52,0,1321,1401,3,106,53,0,1322,1401,3,
        120,60,0,1323,1401,3,122,61,0,1324,1401,3,124,62,0,1325,1401,3,160,
        80,0,1326,1401,3,164,82,0,1327,1401,3,256,128,0,1328,1401,3,260,
        130,0,1329,1401,3,288,144,0,1330,1401,3,306,153,0,1331,1401,3,264,
        132,0,1332,1401,3,268,134,0,1333,1401,3,282,141,0,1334,1401,3,308,
        154,0,1335,1401,3,310,155,0,1336,1401,3,378,189,0,1337,1401,3,416,
        208,0,1338,1401,3,424,212,0,1339,1401,3,426,213,0,1340,1401,3,428,
        214,0,1341,1401,3,430,215,0,1342,1401,3,432,216,0,1343,1401,3,434,
        217,0,1344,1401,3,436,218,0,1345,1401,3,438,219,0,1346,1401,3,440,
        220,0,1347,1401,3,442,221,0,1348,1401,3,444,222,0,1349,1401,3,448,
        224,0,1350,1401,3,452,226,0,1351,1401,3,446,223,0,1352,1401,3,450,
        225,0,1353,1401,3,454,227,0,1354,1401,3,456,228,0,1355,1401,3,458,
        229,0,1356,1401,3,460,230,0,1357,1401,3,462,231,0,1358,1401,3,464,
        232,0,1359,1401,3,466,233,0,1360,1401,3,468,234,0,1361,1401,3,470,
        235,0,1362,1401,3,472,236,0,1363,1401,3,474,237,0,1364,1401,3,476,
        238,0,1365,1401,3,478,239,0,1366,1401,3,480,240,0,1367,1401,3,482,
        241,0,1368,1401,3,484,242,0,1369,1401,3,486,243,0,1370,1401,3,488,
        244,0,1371,1401,3,490,245,0,1372,1401,3,492,246,0,1373,1401,3,494,
        247,0,1374,1401,3,496,248,0,1375,1401,3,502,251,0,1376,1401,3,506,
        253,0,1377,1401,3,508,254,0,1378,1401,3,510,255,0,1379,1401,3,512,
        256,0,1380,1401,3,514,257,0,1381,1401,3,516,258,0,1382,1401,3,518,
        259,0,1383,1401,3,522,261,0,1384,1401,3,524,262,0,1385,1401,3,528,
        264,0,1386,1401,3,530,265,0,1387,1401,3,532,266,0,1388,1401,3,534,
        267,0,1389,1401,3,536,268,0,1390,1401,3,538,269,0,1391,1401,3,540,
        270,0,1392,1401,3,542,271,0,1393,1401,3,554,277,0,1394,1401,3,556,
        278,0,1395,1401,3,558,279,0,1396,1401,3,560,280,0,1397,1401,3,562,
        281,0,1398,1401,3,564,282,0,1399,1401,3,566,283,0,1400,1310,1,0,
        0,0,1400,1311,1,0,0,0,1400,1312,1,0,0,0,1400,1313,1,0,0,0,1400,1314,
        1,0,0,0,1400,1315,1,0,0,0,1400,1316,1,0,0,0,1400,1317,1,0,0,0,1400,
        1318,1,0,0,0,1400,1319,1,0,0,0,1400,1320,1,0,0,0,1400,1321,1,0,0,
        0,1400,1322,1,0,0,0,1400,1323,1,0,0,0,1400,1324,1,0,0,0,1400,1325,
        1,0,0,0,1400,1326,1,0,0,0,1400,1327,1,0,0,0,1400,1328,1,0,0,0,1400,
        1329,1,0,0,0,1400,1330,1,0,0,0,1400,1331,1,0,0,0,1400,1332,1,0,0,
        0,1400,1333,1,0,0,0,1400,1334,1,0,0,0,1400,1335,1,0,0,0,1400,1336,
        1,0,0,0,1400,1337,1,0,0,0,1400,1338,1,0,0,0,1400,1339,1,0,0,0,1400,
        1340,1,0,0,0,1400,1341,1,0,0,0,1400,1342,1,0,0,0,1400,1343,1,0,0,
        0,1400,1344,1,0,0,0,1400,1345,1,0,0,0,1400,1346,1,0,0,0,1400,1347,
        1,0,0,0,1400,1348,1,0,0,0,1400,1349,1,0,0,0,1400,1350,1,0,0,0,1400,
        1351,1,0,0,0,1400,1352,1,0,0,0,1400,1353,1,0,0,0,1400,1354,1,0,0,
        0,1400,1355,1,0,0,0,1400,1356,1,0,0,0,1400,1357,1,0,0,0,1400,1358,
        1,0,0,0,1400,1359,1,0,0,0,1400,1360,1,0,0,0,1400,1361,1,0,0,0,1400,
        1362,1,0,0,0,1400,1363,1,0,0,0,1400,1364,1,0,0,0,1400,1365,1,0,0,
        0,1400,1366,1,0,0,0,1400,1367,1,0,0,0,1400,1368,1,0,0,0,1400,1369,
        1,0,0,0,1400,1370,1,0,0,0,1400,1371,1,0,0,0,1400,1372,1,0,0,0,1400,
        1373,1,0,0,0,1400,1374,1,0,0,0,1400,1375,1,0,0,0,1400,1376,1,0,0,
        0,1400,1377,1,0,0,0,1400,1378,1,0,0,0,1400,1379,1,0,0,0,1400,1380,
        1,0,0,0,1400,1381,1,0,0,0,1400,1382,1,0,0,0,1400,1383,1,0,0,0,1400,
        1384,1,0,0,0,1400,1385,1,0,0,0,1400,1386,1,0,0,0,1400,1387,1,0,0,
        0,1400,1388,1,0,0,0,1400,1389,1,0,0,0,1400,1390,1,0,0,0,1400,1391,
        1,0,0,0,1400,1392,1,0,0,0,1400,1393,1,0,0,0,1400,1394,1,0,0,0,1400,
        1395,1,0,0,0,1400,1396,1,0,0,0,1400,1397,1,0,0,0,1400,1398,1,0,0,
        0,1400,1399,1,0,0,0,1401,5,1,0,0,0,1402,1403,5,14,0,0,1403,1404,
        5,160,0,0,1404,1406,5,917,0,0,1405,1407,3,1076,538,0,1406,1405,1,
        0,0,0,1406,1407,1,0,0,0,1407,1408,1,0,0,0,1408,1410,3,792,396,0,
        1409,1411,3,290,145,0,1410,1409,1,0,0,0,1410,1411,1,0,0,0,1411,1414,
        1,0,0,0,1412,1415,3,8,4,0,1413,1415,3,10,5,0,1414,1412,1,0,0,0,1414,
        1413,1,0,0,0,1415,1421,1,0,0,0,1416,1417,5,1208,0,0,1417,1420,3,
        8,4,0,1418,1420,3,10,5,0,1419,1416,1,0,0,0,1419,1418,1,0,0,0,1420,
        1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,7,1,0,0,0,
        1423,1421,1,0,0,0,1424,1431,5,8,0,0,1425,1432,3,294,147,0,1426,1429,
        7,0,0,0,1427,1430,3,292,146,0,1428,1430,3,302,151,0,1429,1427,1,
        0,0,0,1429,1428,1,0,0,0,1430,1432,1,0,0,0,1431,1425,1,0,0,0,1431,
        1426,1,0,0,0,1432,9,1,0,0,0,1433,1444,5,125,0,0,1434,1445,3,304,
        152,0,1435,1442,7,0,0,0,1436,1438,5,457,0,0,1437,1439,3,304,152,
        0,1438,1437,1,0,0,0,1439,1440,1,0,0,0,1440,1438,1,0,0,0,1440,1441,
        1,0,0,0,1441,1443,1,0,0,0,1442,1436,1,0,0,0,1442,1443,1,0,0,0,1443,
        1445,1,0,0,0,1444,1434,1,0,0,0,1444,1435,1,0,0,0,1445,11,1,0,0,0,
        1446,1466,5,14,0,0,1447,1448,5,384,0,0,1448,1449,5,166,0,0,1449,
        1467,3,800,400,0,1450,1451,5,166,0,0,1451,1464,3,800,400,0,1452,
        1461,5,1213,0,0,1453,1458,3,694,347,0,1454,1455,5,1208,0,0,1455,
        1457,3,694,347,0,1456,1454,1,0,0,0,1457,1460,1,0,0,0,1458,1456,1,
        0,0,0,1458,1459,1,0,0,0,1459,1462,1,0,0,0,1460,1458,1,0,0,0,1461,
        1453,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1465,5,1214,
        0,0,1464,1452,1,0,0,0,1464,1465,1,0,0,0,1465,1467,1,0,0,0,1466,1447,
        1,0,0,0,1466,1450,1,0,0,0,1467,1477,1,0,0,0,1468,1470,5,144,0,0,
        1469,1471,5,272,0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,0,1471,1472,
        1,0,0,0,1472,1478,5,862,0,0,1473,1475,5,585,0,0,1474,1476,5,287,
        0,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1478,1,0,0,0,1477,1468,
        1,0,0,0,1477,1473,1,0,0,0,1478,13,1,0,0,0,1479,1480,5,14,0,0,1480,
        1481,5,210,0,0,1481,1482,5,192,0,0,1482,1483,3,796,398,0,1483,1484,
        3,578,289,0,1484,15,1,0,0,0,1485,1486,5,14,0,0,1486,1487,5,178,0,
        0,1487,1488,5,192,0,0,1488,1489,3,796,398,0,1489,1490,3,578,289,
        0,1490,17,1,0,0,0,1491,1499,3,20,10,0,1492,1499,3,22,11,0,1493,1499,
        3,24,12,0,1494,1499,3,26,13,0,1495,1499,3,28,14,0,1496,1499,3,30,
        15,0,1497,1499,3,34,17,0,1498,1491,1,0,0,0,1498,1492,1,0,0,0,1498,
        1493,1,0,0,0,1498,1494,1,0,0,0,1498,1495,1,0,0,0,1498,1496,1,0,0,
        0,1498,1497,1,0,0,0,1499,19,1,0,0,0,1500,1501,5,14,0,0,1501,1502,
        5,406,0,0,1502,1549,3,796,398,0,1503,1508,3,36,18,0,1504,1505,5,
        1208,0,0,1505,1507,3,36,18,0,1506,1504,1,0,0,0,1507,1510,1,0,0,0,
        1508,1506,1,0,0,0,1508,1509,1,0,0,0,1509,1550,1,0,0,0,1510,1508,
        1,0,0,0,1511,1550,3,38,19,0,1512,1550,3,368,184,0,1513,1514,5,125,
        0,0,1514,1550,5,271,0,0,1515,1550,3,44,22,0,1516,1517,5,254,0,0,
        1517,1518,5,268,0,0,1518,1520,5,308,0,0,1519,1521,5,192,0,0,1520,
        1519,1,0,0,0,1520,1521,1,0,0,0,1521,1523,1,0,0,0,1522,1524,3,46,
        23,0,1523,1522,1,0,0,0,1523,1524,1,0,0,0,1524,1550,1,0,0,0,1525,
        1526,5,254,0,0,1526,1550,3,46,23,0,1527,1528,5,164,0,0,1528,1529,
        5,421,0,0,1529,1530,5,480,0,0,1530,1532,5,1224,0,0,1531,1533,7,1,
        0,0,1532,1531,1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,0,0,0,1534,1539,
        3,762,381,0,1535,1536,5,1208,0,0,1536,1537,5,1093,0,0,1537,1538,
        5,1224,0,0,1538,1540,3,768,384,0,1539,1535,1,0,0,0,1539,1540,1,0,
        0,0,1540,1545,1,0,0,0,1541,1542,5,1208,0,0,1542,1543,5,474,0,0,1543,
        1544,5,421,0,0,1544,1546,5,480,0,0,1545,1541,1,0,0,0,1545,1546,1,
        0,0,0,1546,1550,1,0,0,0,1547,1548,7,2,0,0,1548,1550,5,638,0,0,1549,
        1503,1,0,0,0,1549,1511,1,0,0,0,1549,1512,1,0,0,0,1549,1513,1,0,0,
        0,1549,1515,1,0,0,0,1549,1516,1,0,0,0,1549,1525,1,0,0,0,1549,1527,
        1,0,0,0,1549,1547,1,0,0,0,1550,21,1,0,0,0,1551,1552,5,14,0,0,1552,
        1553,5,406,0,0,1553,1554,3,796,398,0,1554,1559,3,56,28,0,1555,1556,
        5,1208,0,0,1556,1558,3,56,28,0,1557,1555,1,0,0,0,1558,1561,1,0,0,
        0,1559,1557,1,0,0,0,1559,1560,1,0,0,0,1560,23,1,0,0,0,1561,1559,
        1,0,0,0,1562,1564,5,270,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,
        1564,1565,1,0,0,0,1565,1566,5,14,0,0,1566,1567,5,406,0,0,1567,1568,
        3,796,398,0,1568,1578,5,353,0,0,1569,1576,5,474,0,0,1570,1572,5,
        198,0,0,1571,1573,5,206,0,0,1572,1571,1,0,0,0,1572,1573,1,0,0,0,
        1573,1574,1,0,0,0,1574,1577,3,796,398,0,1575,1577,5,115,0,0,1576,
        1570,1,0,0,0,1576,1575,1,0,0,0,1577,1579,1,0,0,0,1578,1569,1,0,0,
        0,1578,1579,1,0,0,0,1579,25,1,0,0,0,1580,1581,5,14,0,0,1581,1582,
        5,406,0,0,1582,1583,3,796,398,0,1583,1585,5,337,0,0,1584,1586,5,
        1079,0,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,1586,1587,1,0,0,0,1587,
        1592,5,364,0,0,1588,1589,5,16,0,0,1589,1590,5,884,0,0,1590,1591,
        5,742,0,0,1591,1593,5,187,0,0,1592,1588,1,0,0,0,1592,1593,1,0,0,
        0,1593,27,1,0,0,0,1594,1595,5,14,0,0,1595,1596,5,406,0,0,1596,1597,
        3,796,398,0,1597,1598,5,1208,0,0,1598,1599,3,578,289,0,1599,29,1,
        0,0,0,1600,1601,5,14,0,0,1601,1602,5,160,0,0,1602,1603,5,406,0,0,
        1603,1608,3,796,398,0,1604,1605,5,1208,0,0,1605,1607,3,326,163,0,
        1606,1604,1,0,0,0,1607,1610,1,0,0,0,1608,1606,1,0,0,0,1608,1609,
        1,0,0,0,1609,1613,1,0,0,0,1610,1608,1,0,0,0,1611,1612,5,1208,0,0,
        1612,1614,3,336,168,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,1623,
        1,0,0,0,1615,1620,3,32,16,0,1616,1617,5,1208,0,0,1617,1619,3,32,
        16,0,1618,1616,1,0,0,0,1619,1622,1,0,0,0,1620,1618,1,0,0,0,1620,
        1621,1,0,0,0,1621,1624,1,0,0,0,1622,1620,1,0,0,0,1623,1615,1,0,0,
        0,1623,1624,1,0,0,0,1624,1641,1,0,0,0,1625,1626,5,1213,0,0,1626,
        1627,3,338,169,0,1627,1637,5,1208,0,0,1628,1638,3,340,170,0,1629,
        1634,3,328,164,0,1630,1631,5,1208,0,0,1631,1633,3,328,164,0,1632,
        1630,1,0,0,0,1633,1636,1,0,0,0,1634,1632,1,0,0,0,1634,1635,1,0,0,
        0,1635,1638,1,0,0,0,1636,1634,1,0,0,0,1637,1628,1,0,0,0,1637,1629,
        1,0,0,0,1638,1639,1,0,0,0,1639,1640,5,1214,0,0,1640,1642,1,0,0,0,
        1641,1625,1,0,0,0,1641,1642,1,0,0,0,1642,1651,1,0,0,0,1643,1648,
        5,453,0,0,1644,1647,3,944,472,0,1645,1647,3,342,171,0,1646,1644,
        1,0,0,0,1646,1645,1,0,0,0,1647,1650,1,0,0,0,1648,1646,1,0,0,0,1648,
        1649,1,0,0,0,1649,1652,1,0,0,0,1650,1648,1,0,0,0,1651,1643,1,0,0,
        0,1651,1652,1,0,0,0,1652,31,1,0,0,0,1653,1654,5,8,0,0,1654,1666,
        3,40,20,0,1655,1656,5,125,0,0,1656,1658,3,792,396,0,1657,1659,5,
        187,0,0,1658,1657,1,0,0,0,1658,1659,1,0,0,0,1659,1666,1,0,0,0,1660,
        1661,5,338,0,0,1661,1662,3,792,396,0,1662,1663,7,3,0,0,1663,1664,
        3,792,396,0,1664,1666,1,0,0,0,1665,1653,1,0,0,0,1665,1655,1,0,0,
        0,1665,1660,1,0,0,0,1666,33,1,0,0,0,1667,1668,5,14,0,0,1668,1669,
        5,406,0,0,1669,1670,3,796,398,0,1670,1671,5,426,0,0,1671,1681,5,
        93,0,0,1672,1679,5,474,0,0,1673,1675,5,198,0,0,1674,1676,5,206,0,
        0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,1677,1,0,0,0,1677,1680,
        3,796,398,0,1678,1680,5,115,0,0,1679,1673,1,0,0,0,1679,1678,1,0,
        0,0,1680,1682,1,0,0,0,1681,1672,1,0,0,0,1681,1682,1,0,0,0,1682,35,
        1,0,0,0,1683,1684,5,8,0,0,1684,1705,3,40,20,0,1685,1690,5,254,0,
        0,1686,1688,5,74,0,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,1689,
        1,0,0,0,1689,1691,3,792,396,0,1690,1687,1,0,0,0,1690,1691,1,0,0,
        0,1691,1692,1,0,0,0,1692,1693,5,59,0,0,1693,1694,5,1213,0,0,1694,
        1695,3,998,499,0,1695,1696,5,1214,0,0,1696,1705,1,0,0,0,1697,1698,
        5,338,0,0,1698,1699,3,792,396,0,1699,1700,7,3,0,0,1700,1701,3,792,
        396,0,1701,1705,1,0,0,0,1702,1703,5,125,0,0,1703,1705,3,42,21,0,
        1704,1683,1,0,0,0,1704,1685,1,0,0,0,1704,1697,1,0,0,0,1704,1702,
        1,0,0,0,1705,37,1,0,0,0,1706,1746,3,586,293,0,1707,1708,5,474,0,
        0,1708,1709,5,211,0,0,1709,1710,5,406,0,0,1710,1711,5,1224,0,0,1711,
        1746,3,796,398,0,1712,1746,3,588,294,0,1713,1714,5,286,0,0,1714,
        1715,5,71,0,0,1715,1716,7,4,0,0,1716,1746,5,364,0,0,1717,1719,5,
        268,0,0,1718,1717,1,0,0,0,1718,1719,1,0,0,0,1719,1720,1,0,0,0,1720,
        1746,5,228,0,0,1721,1727,5,268,0,0,1722,1727,5,126,0,0,1723,1727,
        5,224,0,0,1724,1725,5,272,0,0,1725,1727,5,224,0,0,1726,1721,1,0,
        0,0,1726,1722,1,0,0,0,1726,1723,1,0,0,0,1726,1724,1,0,0,0,1726,1727,
        1,0,0,0,1727,1728,1,0,0,0,1728,1729,5,11,0,0,1729,1746,5,211,0,0,
        1730,1731,5,571,0,0,1731,1732,5,1224,0,0,1732,1746,7,5,0,0,1733,
        1734,5,163,0,0,1734,1735,5,1224,0,0,1735,1737,3,768,384,0,1736,1738,
        5,300,0,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1746,1,0,0,0,
        1739,1740,3,348,174,0,1740,1741,5,189,0,0,1741,1746,1,0,0,0,1742,
        1746,3,346,173,0,1743,1746,3,350,175,0,1744,1746,3,54,27,0,1745,
        1706,1,0,0,0,1745,1707,1,0,0,0,1745,1712,1,0,0,0,1745,1713,1,0,0,
        0,1745,1718,1,0,0,0,1745,1726,1,0,0,0,1745,1730,1,0,0,0,1745,1733,
        1,0,0,0,1745,1739,1,0,0,0,1745,1742,1,0,0,0,1745,1743,1,0,0,0,1745,
        1744,1,0,0,0,1746,39,1,0,0,0,1747,1760,3,50,25,0,1748,1749,5,1213,
        0,0,1749,1754,3,50,25,0,1750,1751,5,1208,0,0,1751,1753,3,50,25,0,
        1752,1750,1,0,0,0,1753,1756,1,0,0,0,1754,1752,1,0,0,0,1754,1755,
        1,0,0,0,1755,1757,1,0,0,0,1756,1754,1,0,0,0,1757,1758,5,1214,0,0,
        1758,1760,1,0,0,0,1759,1747,1,0,0,0,1759,1748,1,0,0,0,1760,1763,
        1,0,0,0,1761,1762,5,206,0,0,1762,1764,3,792,396,0,1763,1761,1,0,
        0,0,1763,1764,1,0,0,0,1764,1821,1,0,0,0,1765,1767,7,6,0,0,1766,1765,
        1,0,0,0,1766,1767,1,0,0,0,1767,1768,1,0,0,0,1768,1771,5,1213,0,0,
        1769,1772,3,792,396,0,1770,1772,3,50,25,0,1771,1769,1,0,0,0,1771,
        1770,1,0,0,0,1772,1780,1,0,0,0,1773,1776,5,1208,0,0,1774,1777,3,
        792,396,0,1775,1777,3,50,25,0,1776,1774,1,0,0,0,1776,1775,1,0,0,
        0,1777,1779,1,0,0,0,1778,1773,1,0,0,0,1779,1782,1,0,0,0,1780,1778,
        1,0,0,0,1780,1781,1,0,0,0,1781,1783,1,0,0,0,1782,1780,1,0,0,0,1783,
        1789,5,1214,0,0,1784,1786,5,268,0,0,1785,1784,1,0,0,0,1785,1786,
        1,0,0,0,1786,1787,1,0,0,0,1787,1788,5,543,0,0,1788,1790,5,72,0,0,
        1789,1785,1,0,0,0,1789,1790,1,0,0,0,1790,1821,1,0,0,0,1791,1792,
        5,1213,0,0,1792,1793,3,792,396,0,1793,1795,5,1214,0,0,1794,1796,
        5,268,0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1797,1,0,0,0,
        1797,1798,5,543,0,0,1798,1799,5,72,0,0,1799,1821,1,0,0,0,1800,1801,
        5,853,0,0,1801,1802,5,159,0,0,1802,1803,3,792,396,0,1803,1804,5,
        1213,0,0,1804,1805,3,792,396,0,1805,1806,5,1208,0,0,1806,1807,3,
        792,396,0,1807,1808,5,1214,0,0,1808,1821,1,0,0,0,1809,1821,3,370,
        185,0,1810,1815,3,792,396,0,1811,1812,5,1208,0,0,1812,1814,3,792,
        396,0,1813,1811,1,0,0,0,1814,1817,1,0,0,0,1815,1813,1,0,0,0,1815,
        1816,1,0,0,0,1816,1818,1,0,0,0,1817,1815,1,0,0,0,1818,1819,5,74,
        0,0,1819,1821,1,0,0,0,1820,1759,1,0,0,0,1820,1766,1,0,0,0,1820,1791,
        1,0,0,0,1820,1800,1,0,0,0,1820,1809,1,0,0,0,1820,1810,1,0,0,0,1821,
        41,1,0,0,0,1822,1823,5,853,0,0,1823,1824,5,159,0,0,1824,1869,3,792,
        396,0,1825,1827,3,792,396,0,1826,1828,5,187,0,0,1827,1826,1,0,0,
        0,1827,1828,1,0,0,0,1828,1869,1,0,0,0,1829,1830,5,74,0,0,1830,1869,
        3,792,396,0,1831,1832,5,74,0,0,1832,1834,3,792,396,0,1833,1831,1,
        0,0,0,1833,1834,1,0,0,0,1834,1835,1,0,0,0,1835,1836,5,160,0,0,1836,
        1837,5,212,0,0,1837,1838,5,1213,0,0,1838,1843,3,792,396,0,1839,1840,
        5,1208,0,0,1840,1842,3,792,396,0,1841,1839,1,0,0,0,1842,1845,1,0,
        0,0,1843,1841,1,0,0,0,1843,1844,1,0,0,0,1844,1846,1,0,0,0,1845,1843,
        1,0,0,0,1846,1847,5,1214,0,0,1847,1848,3,372,186,0,1848,1869,1,0,
        0,0,1849,1851,5,74,0,0,1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,
        1852,1,0,0,0,1852,1854,3,792,396,0,1853,1850,1,0,0,0,1853,1854,1,
        0,0,0,1854,1855,1,0,0,0,1855,1869,5,59,0,0,1856,1857,5,191,0,0,1857,
        1869,5,325,0,0,1858,1863,3,792,396,0,1859,1860,5,1208,0,0,1860,1862,
        3,792,396,0,1861,1859,1,0,0,0,1862,1865,1,0,0,0,1863,1861,1,0,0,
        0,1863,1864,1,0,0,0,1864,1866,1,0,0,0,1865,1863,1,0,0,0,1866,1867,
        5,74,0,0,1867,1869,1,0,0,0,1868,1822,1,0,0,0,1868,1825,1,0,0,0,1868,
        1829,1,0,0,0,1868,1833,1,0,0,0,1868,1853,1,0,0,0,1868,1856,1,0,0,
        0,1868,1858,1,0,0,0,1869,43,1,0,0,0,1870,1875,5,254,0,0,1871,1873,
        5,272,0,0,1872,1871,1,0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,
        1874,1876,5,448,0,0,1875,1872,1,0,0,0,1875,1876,1,0,0,0,1876,1877,
        1,0,0,0,1877,1879,5,308,0,0,1878,1880,5,15,0,0,1879,1878,1,0,0,0,
        1879,1880,1,0,0,0,1880,1882,1,0,0,0,1881,1883,5,192,0,0,1882,1881,
        1,0,0,0,1882,1883,1,0,0,0,1883,1887,1,0,0,0,1884,1888,3,792,396,
        0,1885,1886,5,272,0,0,1886,1888,5,262,0,0,1887,1884,1,0,0,0,1887,
        1885,1,0,0,0,1887,1888,1,0,0,0,1888,1900,1,0,0,0,1889,1890,5,1213,
        0,0,1890,1895,3,792,396,0,1891,1892,5,1208,0,0,1892,1894,3,792,396,
        0,1893,1891,1,0,0,0,1894,1897,1,0,0,0,1895,1893,1,0,0,0,1895,1896,
        1,0,0,0,1896,1898,1,0,0,0,1897,1895,1,0,0,0,1898,1899,5,1214,0,0,
        1899,1901,1,0,0,0,1900,1889,1,0,0,0,1900,1901,1,0,0,0,1901,1903,
        1,0,0,0,1902,1904,3,46,23,0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,
        1904,45,1,0,0,0,1905,1906,5,840,0,0,1906,1919,5,42,0,0,1907,1920,
        3,374,187,0,1908,1909,5,1213,0,0,1909,1914,3,374,187,0,1910,1911,
        5,1208,0,0,1911,1913,3,374,187,0,1912,1910,1,0,0,0,1913,1916,1,0,
        0,0,1914,1912,1,0,0,0,1914,1915,1,0,0,0,1915,1917,1,0,0,0,1916,1914,
        1,0,0,0,1917,1918,5,1214,0,0,1918,1920,1,0,0,0,1919,1907,1,0,0,0,
        1919,1908,1,0,0,0,1920,1930,1,0,0,0,1921,1926,3,48,24,0,1922,1923,
        5,1208,0,0,1923,1925,3,48,24,0,1924,1922,1,0,0,0,1925,1928,1,0,0,
        0,1926,1924,1,0,0,0,1926,1927,1,0,0,0,1927,1930,1,0,0,0,1928,1926,
        1,0,0,0,1929,1905,1,0,0,0,1929,1921,1,0,0,0,1930,1940,1,0,0,0,1931,
        1938,5,474,0,0,1932,1934,5,198,0,0,1933,1935,5,206,0,0,1934,1933,
        1,0,0,0,1934,1935,1,0,0,0,1935,1936,1,0,0,0,1936,1939,3,796,398,
        0,1937,1939,5,115,0,0,1938,1932,1,0,0,0,1938,1937,1,0,0,0,1939,1941,
        1,0,0,0,1940,1931,1,0,0,0,1940,1941,1,0,0,0,1941,1945,1,0,0,0,1942,
        1943,5,272,0,0,1943,1945,5,842,0,0,1944,1929,1,0,0,0,1944,1942,1,
        0,0,0,1945,47,1,0,0,0,1946,1947,5,125,0,0,1947,1950,3,52,26,0,1948,
        1949,5,8,0,0,1949,1951,3,52,26,0,1950,1948,1,0,0,0,1950,1951,1,0,
        0,0,1951,1955,1,0,0,0,1952,1953,5,8,0,0,1953,1955,3,52,26,0,1954,
        1946,1,0,0,0,1954,1952,1,0,0,0,1955,49,1,0,0,0,1956,1981,3,792,396,
        0,1957,1982,3,692,346,0,1958,1960,3,692,346,0,1959,1961,3,354,177,
        0,1960,1959,1,0,0,0,1961,1962,1,0,0,0,1962,1960,1,0,0,0,1962,1963,
        1,0,0,0,1963,1982,1,0,0,0,1964,1966,3,354,177,0,1965,1964,1,0,0,
        0,1966,1967,1,0,0,0,1967,1965,1,0,0,0,1967,1968,1,0,0,0,1968,1969,
        1,0,0,0,1969,1973,3,692,346,0,1970,1972,3,354,177,0,1971,1970,1,
        0,0,0,1972,1975,1,0,0,0,1973,1971,1,0,0,0,1973,1974,1,0,0,0,1974,
        1982,1,0,0,0,1975,1973,1,0,0,0,1976,1978,3,354,177,0,1977,1976,1,
        0,0,0,1978,1979,1,0,0,0,1979,1977,1,0,0,0,1979,1980,1,0,0,0,1980,
        1982,1,0,0,0,1981,1957,1,0,0,0,1981,1958,1,0,0,0,1981,1965,1,0,0,
        0,1981,1977,1,0,0,0,1982,51,1,0,0,0,1983,2013,7,7,0,0,1984,1985,
        5,35,0,0,1985,1990,3,1100,550,0,1986,1987,5,1208,0,0,1987,1989,3,
        1100,550,0,1988,1986,1,0,0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,
        1990,1991,1,0,0,0,1991,2002,1,0,0,0,1992,1990,1,0,0,0,1993,1994,
        5,1208,0,0,1994,1995,5,268,0,0,1995,1998,5,873,0,0,1996,1997,7,8,
        0,0,1997,1999,5,1016,0,0,1998,1996,1,0,0,0,1998,1999,1,0,0,0,1999,
        2003,1,0,0,0,2000,2001,5,1208,0,0,2001,2003,5,1016,0,0,2002,1993,
        1,0,0,0,2002,2000,1,0,0,0,2002,2003,1,0,0,0,2003,2014,1,0,0,0,2004,
        2005,5,268,0,0,2005,2008,5,873,0,0,2006,2007,7,8,0,0,2007,2009,5,
        1016,0,0,2008,2006,1,0,0,0,2008,2009,1,0,0,0,2009,2014,1,0,0,0,2010,
        2014,5,1016,0,0,2011,2012,5,471,0,0,2012,2014,3,998,499,0,2013,1984,
        1,0,0,0,2013,2004,1,0,0,0,2013,2010,1,0,0,0,2013,2011,1,0,0,0,2014,
        53,1,0,0,0,2015,2018,3,680,340,0,2016,2017,5,159,0,0,2017,2019,7,
        9,0,0,2018,2016,1,0,0,0,2018,2019,1,0,0,0,2019,2024,1,0,0,0,2020,
        2021,5,457,0,0,2021,2022,5,1080,0,0,2022,2023,5,252,0,0,2023,2025,
        7,10,0,0,2024,2020,1,0,0,0,2024,2025,1,0,0,0,2025,55,1,0,0,0,2026,
        2047,5,8,0,0,2027,2028,7,6,0,0,2028,2029,5,1213,0,0,2029,2030,3,
        792,396,0,2030,2036,5,1214,0,0,2031,2033,5,268,0,0,2032,2031,1,0,
        0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2035,5,543,0,0,2035,
        2037,5,72,0,0,2036,2032,1,0,0,0,2036,2037,1,0,0,0,2037,2048,1,0,
        0,0,2038,2039,5,1213,0,0,2039,2040,3,792,396,0,2040,2042,5,1214,
        0,0,2041,2043,5,268,0,0,2042,2041,1,0,0,0,2042,2043,1,0,0,0,2043,
        2044,1,0,0,0,2044,2045,5,543,0,0,2045,2046,5,72,0,0,2046,2048,1,
        0,0,0,2047,2027,1,0,0,0,2047,2038,1,0,0,0,2048,57,1,0,0,0,2049,2050,
        5,14,0,0,2050,2052,5,437,0,0,2051,2053,3,722,361,0,2052,2051,1,0,
        0,0,2052,2053,1,0,0,0,2053,2054,1,0,0,0,2054,2065,3,828,414,0,2055,
        2066,3,60,30,0,2056,2066,3,62,31,0,2057,2066,3,64,32,0,2058,2066,
        3,66,33,0,2059,2066,3,68,34,0,2060,2066,3,70,35,0,2061,2063,5,585,
        0,0,2062,2064,5,287,0,0,2063,2062,1,0,0,0,2063,2064,1,0,0,0,2064,
        2066,1,0,0,0,2065,2055,1,0,0,0,2065,2056,1,0,0,0,2065,2057,1,0,0,
        0,2065,2058,1,0,0,0,2065,2059,1,0,0,0,2065,2060,1,0,0,0,2065,2061,
        1,0,0,0,2066,59,1,0,0,0,2067,2068,5,8,0,0,2068,2069,5,538,0,0,2069,
        2074,3,394,197,0,2070,2071,5,1208,0,0,2071,2073,3,394,197,0,2072,
        2070,1,0,0,0,2073,2076,1,0,0,0,2074,2072,1,0,0,0,2074,2075,1,0,0,
        0,2075,61,1,0,0,0,2076,2074,1,0,0,0,2077,2079,5,8,0,0,2078,2080,
        7,11,0,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,2081,1,0,0,0,2081,
        2082,5,243,0,0,2082,2087,3,72,36,0,2083,2084,5,1208,0,0,2084,2086,
        3,72,36,0,2085,2083,1,0,0,0,2086,2089,1,0,0,0,2087,2085,1,0,0,0,
        2087,2088,1,0,0,0,2088,63,1,0,0,0,2089,2087,1,0,0,0,2090,2091,5,
        8,0,0,2091,2092,5,384,0,0,2092,2093,5,243,0,0,2093,2098,3,74,37,
        0,2094,2095,5,1208,0,0,2095,2097,3,74,37,0,2096,2094,1,0,0,0,2097,
        2100,1,0,0,0,2098,2096,1,0,0,0,2098,2099,1,0,0,0,2099,65,1,0,0,0,
        2100,2098,1,0,0,0,2101,2102,5,125,0,0,2102,2103,5,538,0,0,2103,2108,
        3,830,415,0,2104,2105,5,1208,0,0,2105,2107,3,830,415,0,2106,2104,
        1,0,0,0,2107,2110,1,0,0,0,2108,2106,1,0,0,0,2108,2109,1,0,0,0,2109,
        67,1,0,0,0,2110,2108,1,0,0,0,2111,2113,5,125,0,0,2112,2114,7,11,
        0,0,2113,2112,1,0,0,0,2113,2114,1,0,0,0,2114,2115,1,0,0,0,2115,2117,
        5,243,0,0,2116,2118,3,722,361,0,2117,2116,1,0,0,0,2117,2118,1,0,
        0,0,2118,2119,1,0,0,0,2119,2127,3,832,416,0,2120,2122,5,1208,0,0,
        2121,2123,3,722,361,0,2122,2121,1,0,0,0,2122,2123,1,0,0,0,2123,2124,
        1,0,0,0,2124,2126,3,832,416,0,2125,2120,1,0,0,0,2126,2129,1,0,0,
        0,2127,2125,1,0,0,0,2127,2128,1,0,0,0,2128,69,1,0,0,0,2129,2127,
        1,0,0,0,2130,2131,5,125,0,0,2131,2132,5,384,0,0,2132,2134,5,243,
        0,0,2133,2135,3,722,361,0,2134,2133,1,0,0,0,2134,2135,1,0,0,0,2135,
        2136,1,0,0,0,2136,2144,3,832,416,0,2137,2139,5,1208,0,0,2138,2140,
        3,722,361,0,2139,2138,1,0,0,0,2139,2140,1,0,0,0,2140,2141,1,0,0,
        0,2141,2143,3,832,416,0,2142,2137,1,0,0,0,2143,2146,1,0,0,0,2144,
        2142,1,0,0,0,2144,2145,1,0,0,0,2145,71,1,0,0,0,2146,2144,1,0,0,0,
        2147,2149,3,722,361,0,2148,2147,1,0,0,0,2148,2149,1,0,0,0,2149,2150,
        1,0,0,0,2150,2151,3,832,416,0,2151,2160,5,1213,0,0,2152,2157,3,692,
        346,0,2153,2154,5,1208,0,0,2154,2156,3,692,346,0,2155,2153,1,0,0,
        0,2156,2159,1,0,0,0,2157,2155,1,0,0,0,2157,2158,1,0,0,0,2158,2161,
        1,0,0,0,2159,2157,1,0,0,0,2160,2152,1,0,0,0,2160,2161,1,0,0,0,2161,
        2162,1,0,0,0,2162,2163,5,1214,0,0,2163,2164,5,352,0,0,2164,2168,
        3,402,201,0,2165,2166,5,50,0,0,2166,2167,5,164,0,0,2167,2169,3,692,
        346,0,2168,2165,1,0,0,0,2168,2169,1,0,0,0,2169,2175,1,0,0,0,2170,
        2172,5,384,0,0,2171,2173,3,722,361,0,2172,2171,1,0,0,0,2172,2173,
        1,0,0,0,2173,2174,1,0,0,0,2174,2176,3,832,416,0,2175,2170,1,0,0,
        0,2175,2176,1,0,0,0,2176,2201,1,0,0,0,2177,2179,3,406,203,0,2178,
        2177,1,0,0,0,2179,2182,1,0,0,0,2180,2178,1,0,0,0,2180,2181,1,0,0,
        0,2181,2183,1,0,0,0,2182,2180,1,0,0,0,2183,2185,3,404,202,0,2184,
        2186,3,406,203,0,2185,2184,1,0,0,0,2186,2187,1,0,0,0,2187,2185,1,
        0,0,0,2187,2188,1,0,0,0,2188,2202,1,0,0,0,2189,2191,3,406,203,0,
        2190,2189,1,0,0,0,2191,2192,1,0,0,0,2192,2190,1,0,0,0,2192,2193,
        1,0,0,0,2193,2194,1,0,0,0,2194,2198,3,404,202,0,2195,2197,3,406,
        203,0,2196,2195,1,0,0,0,2197,2200,1,0,0,0,2198,2196,1,0,0,0,2198,
        2199,1,0,0,0,2199,2202,1,0,0,0,2200,2198,1,0,0,0,2201,2180,1,0,0,
        0,2201,2190,1,0,0,0,2202,73,1,0,0,0,2203,2205,3,722,361,0,2204,2203,
        1,0,0,0,2204,2205,1,0,0,0,2205,2206,1,0,0,0,2206,2218,3,832,416,
        0,2207,2208,5,1213,0,0,2208,2213,3,692,346,0,2209,2210,5,1208,0,
        0,2210,2212,3,692,346,0,2211,2209,1,0,0,0,2212,2215,1,0,0,0,2213,
        2211,1,0,0,0,2213,2214,1,0,0,0,2214,2216,1,0,0,0,2215,2213,1,0,0,
        0,2216,2217,5,1214,0,0,2217,2219,1,0,0,0,2218,2207,1,0,0,0,2218,
        2219,1,0,0,0,2219,2220,1,0,0,0,2220,2222,5,159,0,0,2221,2223,3,722,
        361,0,2222,2221,1,0,0,0,2222,2223,1,0,0,0,2223,2224,1,0,0,0,2224,
        2225,3,828,414,0,2225,75,1,0,0,0,2226,2228,5,34,0,0,2227,2229,5,
        587,0,0,2228,2227,1,0,0,0,2228,2229,1,0,0,0,2229,2230,1,0,0,0,2230,
        2231,5,716,0,0,2231,2232,5,223,0,0,2232,2233,5,286,0,0,2233,2238,
        3,796,398,0,2234,2235,5,1208,0,0,2235,2237,3,796,398,0,2236,2234,
        1,0,0,0,2237,2240,1,0,0,0,2238,2236,1,0,0,0,2238,2239,1,0,0,0,2239,
        2241,1,0,0,0,2240,2238,1,0,0,0,2241,2242,5,457,0,0,2242,2243,5,870,
        0,0,2243,2249,3,762,381,0,2244,2246,5,190,0,0,2245,2244,1,0,0,0,
        2245,2246,1,0,0,0,2246,2247,1,0,0,0,2247,2248,7,12,0,0,2248,2250,
        5,371,0,0,2249,2245,1,0,0,0,2249,2250,1,0,0,0,2250,77,1,0,0,0,2251,
        2252,5,34,0,0,2252,2254,5,229,0,0,2253,2255,5,628,0,0,2254,2253,
        1,0,0,0,2254,2255,1,0,0,0,2255,2258,1,0,0,0,2256,2257,5,474,0,0,
        2257,2259,5,982,0,0,2258,2256,1,0,0,0,2258,2259,1,0,0,0,2259,2260,
        1,0,0,0,2260,2261,5,286,0,0,2261,2265,3,82,41,0,2262,2263,5,159,
        0,0,2263,2264,5,74,0,0,2264,2266,3,794,397,0,2265,2262,1,0,0,0,2265,
        2266,1,0,0,0,2266,2276,1,0,0,0,2267,2277,5,13,0,0,2268,2273,3,80,
        40,0,2269,2270,5,1208,0,0,2270,2272,3,80,40,0,2271,2269,1,0,0,0,
        2272,2275,1,0,0,0,2273,2271,1,0,0,0,2273,2274,1,0,0,0,2274,2277,
        1,0,0,0,2275,2273,1,0,0,0,2276,2267,1,0,0,0,2276,2268,1,0,0,0,2277,
        2281,1,0,0,0,2278,2279,5,159,0,0,2279,2280,5,74,0,0,2280,2282,3,
        794,397,0,2281,2278,1,0,0,0,2281,2282,1,0,0,0,2282,2292,1,0,0,0,
        2283,2284,5,42,0,0,2284,2289,3,806,403,0,2285,2286,5,1208,0,0,2286,
        2288,3,806,403,0,2287,2285,1,0,0,0,2288,2291,1,0,0,0,2289,2287,1,
        0,0,0,2289,2290,1,0,0,0,2290,2293,1,0,0,0,2291,2289,1,0,0,0,2292,
        2283,1,0,0,0,2292,2293,1,0,0,0,2293,2303,1,0,0,0,2294,2295,5,286,
        0,0,2295,2300,3,84,42,0,2296,2297,5,1208,0,0,2297,2299,3,84,42,0,
        2298,2296,1,0,0,0,2299,2302,1,0,0,0,2300,2298,1,0,0,0,2300,2301,
        1,0,0,0,2301,2304,1,0,0,0,2302,2300,1,0,0,0,2303,2294,1,0,0,0,2303,
        2304,1,0,0,0,2304,79,1,0,0,0,2305,2306,5,14,0,0,2306,2307,5,151,
        0,0,2307,2408,5,310,0,0,2308,2309,5,14,0,0,2309,2408,5,166,0,0,2310,
        2311,5,14,0,0,2311,2408,5,310,0,0,2312,2408,5,60,0,0,2313,2314,5,
        86,0,0,2314,2408,5,29,0,0,2315,2316,5,86,0,0,2316,2408,5,102,0,0,
        2317,2318,5,86,0,0,2318,2319,5,151,0,0,2319,2408,5,310,0,0,2320,
        2321,5,86,0,0,2321,2408,5,166,0,0,2322,2323,5,86,0,0,2323,2324,5,
        688,0,0,2324,2408,5,372,0,0,2325,2326,5,86,0,0,2326,2408,5,235,0,
        0,2327,2328,5,86,0,0,2328,2408,5,310,0,0,2329,2330,5,86,0,0,2330,
        2408,5,311,0,0,2331,2332,5,86,0,0,2332,2408,5,357,0,0,2333,2334,
        5,86,0,0,2334,2408,5,406,0,0,2335,2336,5,86,0,0,2336,2408,5,435,
        0,0,2337,2338,5,86,0,0,2338,2408,5,456,0,0,2339,2340,5,86,0,0,2340,
        2408,5,468,0,0,2341,2408,5,102,0,0,2342,2408,5,125,0,0,2343,2344,
        5,125,0,0,2344,2408,5,29,0,0,2345,2346,5,125,0,0,2346,2408,5,102,
        0,0,2347,2348,5,125,0,0,2348,2408,5,166,0,0,2349,2350,5,125,0,0,
        2350,2351,5,688,0,0,2351,2408,5,372,0,0,2352,2353,5,125,0,0,2353,
        2408,5,235,0,0,2354,2355,5,125,0,0,2355,2408,5,310,0,0,2356,2357,
        5,125,0,0,2357,2408,5,311,0,0,2358,2359,5,125,0,0,2359,2408,5,357,
        0,0,2360,2361,5,125,0,0,2361,2408,5,406,0,0,2362,2363,5,125,0,0,
        2363,2408,5,435,0,0,2364,2365,5,125,0,0,2365,2408,5,456,0,0,2366,
        2367,5,125,0,0,2367,2408,5,468,0,0,2368,2408,5,127,0,0,2369,2408,
        5,144,0,0,2370,2371,5,144,0,0,2371,2408,5,166,0,0,2372,2373,5,144,
        0,0,2373,2408,5,310,0,0,2374,2408,5,172,0,0,2375,2408,5,192,0,0,
        2376,2408,5,235,0,0,2377,2408,5,310,0,0,2378,2408,5,325,0,0,2379,
        2408,5,346,0,0,2380,2381,5,358,0,0,2381,2408,5,102,0,0,2382,2383,
        5,359,0,0,2383,2408,5,102,0,0,2384,2408,5,406,0,0,2385,2408,5,435,
        0,0,2386,2408,5,441,0,0,2387,2408,5,442,0,0,2388,2408,5,443,0,0,
        2389,2408,5,456,0,0,2390,2408,5,468,0,0,2391,2408,5,115,0,0,2392,
        2408,5,198,0,0,2393,2394,5,297,0,0,2394,2408,5,115,0,0,2395,2396,
        5,297,0,0,2396,2408,5,127,0,0,2397,2398,5,297,0,0,2398,2408,5,198,
        0,0,2399,2400,5,297,0,0,2400,2408,5,346,0,0,2401,2402,5,297,0,0,
        2402,2408,5,370,0,0,2403,2404,5,297,0,0,2404,2408,5,453,0,0,2405,
        2408,5,370,0,0,2406,2408,5,453,0,0,2407,2305,1,0,0,0,2407,2308,1,
        0,0,0,2407,2310,1,0,0,0,2407,2312,1,0,0,0,2407,2313,1,0,0,0,2407,
        2315,1,0,0,0,2407,2317,1,0,0,0,2407,2320,1,0,0,0,2407,2322,1,0,0,
        0,2407,2325,1,0,0,0,2407,2327,1,0,0,0,2407,2329,1,0,0,0,2407,2331,
        1,0,0,0,2407,2333,1,0,0,0,2407,2335,1,0,0,0,2407,2337,1,0,0,0,2407,
        2339,1,0,0,0,2407,2341,1,0,0,0,2407,2342,1,0,0,0,2407,2343,1,0,0,
        0,2407,2345,1,0,0,0,2407,2347,1,0,0,0,2407,2349,1,0,0,0,2407,2352,
        1,0,0,0,2407,2354,1,0,0,0,2407,2356,1,0,0,0,2407,2358,1,0,0,0,2407,
        2360,1,0,0,0,2407,2362,1,0,0,0,2407,2364,1,0,0,0,2407,2366,1,0,0,
        0,2407,2368,1,0,0,0,2407,2369,1,0,0,0,2407,2370,1,0,0,0,2407,2372,
        1,0,0,0,2407,2374,1,0,0,0,2407,2375,1,0,0,0,2407,2376,1,0,0,0,2407,
        2377,1,0,0,0,2407,2378,1,0,0,0,2407,2379,1,0,0,0,2407,2380,1,0,0,
        0,2407,2382,1,0,0,0,2407,2384,1,0,0,0,2407,2385,1,0,0,0,2407,2386,
        1,0,0,0,2407,2387,1,0,0,0,2407,2388,1,0,0,0,2407,2389,1,0,0,0,2407,
        2390,1,0,0,0,2407,2391,1,0,0,0,2407,2392,1,0,0,0,2407,2393,1,0,0,
        0,2407,2395,1,0,0,0,2407,2397,1,0,0,0,2407,2399,1,0,0,0,2407,2401,
        1,0,0,0,2407,2403,1,0,0,0,2407,2405,1,0,0,0,2407,2406,1,0,0,0,2408,
        81,1,0,0,0,2409,2416,5,156,0,0,2410,2416,5,731,0,0,2411,2412,5,156,
        0,0,2412,2413,5,16,0,0,2413,2416,5,731,0,0,2414,2416,5,129,0,0,2415,
        2409,1,0,0,0,2415,2410,1,0,0,0,2415,2411,1,0,0,0,2415,2414,1,0,0,
        0,2416,83,1,0,0,0,2417,2418,5,29,0,0,2418,2439,3,794,397,0,2419,
        2420,5,102,0,0,2420,2439,3,804,402,0,2421,2422,5,456,0,0,2422,2439,
        3,806,403,0,2423,2424,5,406,0,0,2424,2439,3,796,398,0,2425,2426,
        5,468,0,0,2426,2439,3,796,398,0,2427,2428,5,235,0,0,2428,2439,3,
        802,401,0,2429,2430,5,310,0,0,2430,2439,3,798,399,0,2431,2432,5,
        166,0,0,2432,2439,3,800,400,0,2433,2434,5,166,0,0,2434,2435,5,755,
        0,0,2435,2439,3,794,397,0,2436,2437,5,437,0,0,2437,2439,3,712,356,
        0,2438,2417,1,0,0,0,2438,2419,1,0,0,0,2438,2421,1,0,0,0,2438,2423,
        1,0,0,0,2438,2425,1,0,0,0,2438,2427,1,0,0,0,2438,2429,1,0,0,0,2438,
        2431,1,0,0,0,2438,2433,1,0,0,0,2438,2436,1,0,0,0,2439,85,1,0,0,0,
        2440,2441,5,34,0,0,2441,2442,5,869,0,0,2442,2446,5,563,0,0,2443,
        2444,5,159,0,0,2444,2445,5,192,0,0,2445,2447,5,504,0,0,2446,2443,
        1,0,0,0,2446,2447,1,0,0,0,2447,2466,1,0,0,0,2448,2454,5,474,0,0,
        2449,2455,5,1022,0,0,2450,2452,5,632,0,0,2451,2450,1,0,0,0,2451,
        2452,1,0,0,0,2452,2453,1,0,0,0,2453,2455,5,940,0,0,2454,2449,1,0,
        0,0,2454,2451,1,0,0,0,2455,2464,1,0,0,0,2456,2462,5,1208,0,0,2457,
        2463,5,1022,0,0,2458,2460,5,632,0,0,2459,2458,1,0,0,0,2459,2460,
        1,0,0,0,2460,2461,1,0,0,0,2461,2463,5,940,0,0,2462,2457,1,0,0,0,
        2462,2459,1,0,0,0,2463,2465,1,0,0,0,2464,2456,1,0,0,0,2464,2465,
        1,0,0,0,2465,2467,1,0,0,0,2466,2448,1,0,0,0,2466,2467,1,0,0,0,2467,
        2470,1,0,0,0,2468,2469,5,206,0,0,2469,2471,3,804,402,0,2470,2468,
        1,0,0,0,2470,2471,1,0,0,0,2471,2472,1,0,0,0,2472,2473,5,20,0,0,2473,
        2474,5,1040,0,0,2474,2475,3,792,396,0,2475,87,1,0,0,0,2476,2477,
        5,34,0,0,2477,2478,5,869,0,0,2478,2488,5,229,0,0,2479,2480,5,474,
        0,0,2480,2485,3,90,45,0,2481,2482,5,1208,0,0,2482,2484,3,90,45,0,
        2483,2481,1,0,0,0,2484,2487,1,0,0,0,2485,2483,1,0,0,0,2485,2486,
        1,0,0,0,2486,2489,1,0,0,0,2487,2485,1,0,0,0,2488,2479,1,0,0,0,2488,
        2489,1,0,0,0,2489,2493,1,0,0,0,2490,2491,5,252,0,0,2491,2492,5,1224,
        0,0,2492,2494,3,768,384,0,2493,2490,1,0,0,0,2493,2494,1,0,0,0,2494,
        2501,1,0,0,0,2495,2496,5,221,0,0,2496,2499,3,92,46,0,2497,2498,5,
        16,0,0,2498,2500,3,92,46,0,2499,2497,1,0,0,0,2499,2500,1,0,0,0,2500,
        2502,1,0,0,0,2501,2495,1,0,0,0,2501,2502,1,0,0,0,2502,2503,1,0,0,
        0,2503,2504,5,286,0,0,2504,2505,3,94,47,0,2505,89,1,0,0,0,2506,2532,
        5,13,0,0,2507,2532,5,150,0,0,2508,2509,5,226,0,0,2509,2510,5,1224,
        0,0,2510,2532,3,768,384,0,2511,2532,5,269,0,0,2512,2513,5,268,0,
        0,2513,2515,5,579,0,0,2514,2512,1,0,0,0,2514,2515,1,0,0,0,2515,2516,
        1,0,0,0,2516,2532,5,280,0,0,2517,2532,5,838,0,0,2518,2532,5,667,
        0,0,2519,2532,5,386,0,0,2520,2522,5,632,0,0,2521,2520,1,0,0,0,2521,
        2522,1,0,0,0,2522,2523,1,0,0,0,2523,2532,5,940,0,0,2524,2532,5,398,
        0,0,2525,2532,5,1019,0,0,2526,2532,5,1020,0,0,2527,2529,5,1022,0,
        0,2528,2527,1,0,0,0,2528,2529,1,0,0,0,2529,2530,1,0,0,0,2530,2532,
        5,477,0,0,2531,2506,1,0,0,0,2531,2507,1,0,0,0,2531,2508,1,0,0,0,
        2531,2511,1,0,0,0,2531,2514,1,0,0,0,2531,2517,1,0,0,0,2531,2518,
        1,0,0,0,2531,2519,1,0,0,0,2531,2521,1,0,0,0,2531,2524,1,0,0,0,2531,
        2525,1,0,0,0,2531,2526,1,0,0,0,2531,2528,1,0,0,0,2532,91,1,0,0,0,
        2533,2534,5,388,0,0,2534,2535,5,1224,0,0,2535,2553,3,768,384,0,2536,
        2537,5,404,0,0,2537,2538,5,1224,0,0,2538,2539,3,768,384,0,2539,2540,
        5,1208,0,0,2540,2541,3,768,384,0,2541,2542,5,1208,0,0,2542,2543,
        3,768,384,0,2543,2548,1,0,0,0,2544,2545,5,420,0,0,2545,2546,5,1224,
        0,0,2546,2548,3,768,384,0,2547,2536,1,0,0,0,2547,2544,1,0,0,0,2548,
        2550,1,0,0,0,2549,2551,7,13,0,0,2550,2549,1,0,0,0,2550,2551,1,0,
        0,0,2551,2553,1,0,0,0,2552,2533,1,0,0,0,2552,2547,1,0,0,0,2553,93,
        1,0,0,0,2554,2558,3,96,48,0,2555,2558,3,98,49,0,2556,2558,3,100,
        50,0,2557,2554,1,0,0,0,2557,2555,1,0,0,0,2557,2556,1,0,0,0,2558,
        95,1,0,0,0,2559,2561,5,13,0,0,2560,2562,3,102,51,0,2561,2560,1,0,
        0,0,2561,2562,1,0,0,0,2562,97,1,0,0,0,2563,2568,3,806,403,0,2564,
        2565,5,1208,0,0,2565,2567,3,806,403,0,2566,2564,1,0,0,0,2567,2570,
        1,0,0,0,2568,2566,1,0,0,0,2568,2569,1,0,0,0,2569,2572,1,0,0,0,2570,
        2568,1,0,0,0,2571,2573,3,102,51,0,2572,2571,1,0,0,0,2572,2573,1,
        0,0,0,2573,99,1,0,0,0,2574,2575,5,510,0,0,2575,2588,5,1224,0,0,2576,
        2589,3,762,381,0,2577,2578,5,1213,0,0,2578,2583,3,762,381,0,2579,
        2580,5,1208,0,0,2580,2582,3,762,381,0,2581,2579,1,0,0,0,2582,2585,
        1,0,0,0,2583,2581,1,0,0,0,2583,2584,1,0,0,0,2584,2586,1,0,0,0,2585,
        2583,1,0,0,0,2586,2587,5,1214,0,0,2587,2589,1,0,0,0,2588,2576,1,
        0,0,0,2588,2577,1,0,0,0,2589,101,1,0,0,0,2590,2591,5,5,0,0,2591,
        2604,5,1224,0,0,2592,2605,3,762,381,0,2593,2594,5,1213,0,0,2594,
        2599,3,762,381,0,2595,2596,5,1208,0,0,2596,2598,3,762,381,0,2597,
        2595,1,0,0,0,2598,2601,1,0,0,0,2599,2597,1,0,0,0,2599,2600,1,0,0,
        0,2600,2602,1,0,0,0,2601,2599,1,0,0,0,2602,2603,5,1214,0,0,2603,
        2605,1,0,0,0,2604,2592,1,0,0,0,2604,2593,1,0,0,0,2605,103,1,0,0,
        0,2606,2608,5,60,0,0,2607,2609,5,587,0,0,2608,2607,1,0,0,0,2608,
        2609,1,0,0,0,2609,2610,1,0,0,0,2610,2611,5,716,0,0,2611,2612,5,223,
        0,0,2612,2613,5,159,0,0,2613,2614,5,870,0,0,2614,2615,3,762,381,
        0,2615,105,1,0,0,0,2616,2618,5,68,0,0,2617,2619,5,404,0,0,2618,2617,
        1,0,0,0,2618,2619,1,0,0,0,2619,2620,1,0,0,0,2620,2630,7,14,0,0,2621,
        2622,5,457,0,0,2622,2627,3,108,54,0,2623,2624,5,16,0,0,2624,2626,
        3,108,54,0,2625,2623,1,0,0,0,2626,2629,1,0,0,0,2627,2625,1,0,0,0,
        2627,2628,1,0,0,0,2628,2631,1,0,0,0,2629,2627,1,0,0,0,2630,2621,
        1,0,0,0,2630,2631,1,0,0,0,2631,2658,1,0,0,0,2632,2634,5,286,0,0,
        2633,2632,1,0,0,0,2633,2634,1,0,0,0,2634,2635,1,0,0,0,2635,2644,
        3,116,58,0,2636,2641,3,110,55,0,2637,2638,5,1208,0,0,2638,2640,3,
        110,55,0,2639,2637,1,0,0,0,2640,2643,1,0,0,0,2641,2639,1,0,0,0,2641,
        2642,1,0,0,0,2642,2645,1,0,0,0,2643,2641,1,0,0,0,2644,2636,1,0,0,
        0,2644,2645,1,0,0,0,2645,2659,1,0,0,0,2646,2651,3,110,55,0,2647,
        2648,5,1208,0,0,2648,2650,3,110,55,0,2649,2647,1,0,0,0,2650,2653,
        1,0,0,0,2651,2649,1,0,0,0,2651,2652,1,0,0,0,2652,2655,1,0,0,0,2653,
        2651,1,0,0,0,2654,2646,1,0,0,0,2654,2655,1,0,0,0,2655,2656,1,0,0,
        0,2656,2657,5,286,0,0,2657,2659,3,116,58,0,2658,2633,1,0,0,0,2658,
        2654,1,0,0,0,2659,2662,1,0,0,0,2660,2661,5,164,0,0,2661,2663,3,118,
        59,0,2662,2660,1,0,0,0,2662,2663,1,0,0,0,2663,107,1,0,0,0,2664,2693,
        5,365,0,0,2665,2666,5,951,0,0,2666,2693,5,365,0,0,2667,2668,5,365,
        0,0,2668,2669,3,768,384,0,2669,2670,5,300,0,0,2670,2693,1,0,0,0,
        2671,2672,5,268,0,0,2672,2693,5,365,0,0,2673,2674,5,951,0,0,2674,
        2680,5,420,0,0,2675,2676,5,420,0,0,2676,2680,3,768,384,0,2677,2678,
        5,268,0,0,2678,2680,5,420,0,0,2679,2673,1,0,0,0,2679,2675,1,0,0,
        0,2679,2677,1,0,0,0,2680,2682,1,0,0,0,2681,2683,7,15,0,0,2682,2681,
        1,0,0,0,2682,2683,1,0,0,0,2683,2693,1,0,0,0,2684,2685,5,759,0,0,
        2685,2693,3,768,384,0,2686,2687,5,951,0,0,2687,2693,5,759,0,0,2688,
        2689,5,762,0,0,2689,2693,3,768,384,0,2690,2691,5,951,0,0,2691,2693,
        5,762,0,0,2692,2664,1,0,0,0,2692,2665,1,0,0,0,2692,2667,1,0,0,0,
        2692,2671,1,0,0,0,2692,2679,1,0,0,0,2692,2684,1,0,0,0,2692,2686,
        1,0,0,0,2692,2688,1,0,0,0,2692,2690,1,0,0,0,2693,2696,1,0,0,0,2694,
        2695,5,159,0,0,2695,2697,5,93,0,0,2696,2694,1,0,0,0,2696,2697,1,
        0,0,0,2697,109,1,0,0,0,2698,2700,5,448,0,0,2699,2698,1,0,0,0,2699,
        2700,1,0,0,0,2700,2702,1,0,0,0,2701,2703,5,308,0,0,2702,2701,1,0,
        0,0,2702,2703,1,0,0,0,2703,2704,1,0,0,0,2704,2705,5,192,0,0,2705,
        2709,3,112,56,0,2706,2707,5,69,0,0,2707,2709,3,114,57,0,2708,2699,
        1,0,0,0,2708,2706,1,0,0,0,2709,111,1,0,0,0,2710,2731,3,796,398,0,
        2711,2713,3,796,398,0,2712,2711,1,0,0,0,2712,2713,1,0,0,0,2713,2715,
        1,0,0,0,2714,2716,5,13,0,0,2715,2714,1,0,0,0,2715,2716,1,0,0,0,2716,
        2717,1,0,0,0,2717,2718,5,1213,0,0,2718,2723,3,792,396,0,2719,2720,
        5,1208,0,0,2720,2722,3,792,396,0,2721,2719,1,0,0,0,2722,2725,1,0,
        0,0,2723,2721,1,0,0,0,2723,2724,1,0,0,0,2724,2726,1,0,0,0,2725,2723,
        1,0,0,0,2726,2728,5,1214,0,0,2727,2729,3,574,287,0,2728,2727,1,0,
        0,0,2728,2729,1,0,0,0,2729,2731,1,0,0,0,2730,2710,1,0,0,0,2730,2712,
        1,0,0,0,2731,113,1,0,0,0,2732,2737,3,1000,500,0,2733,2735,5,20,0,
        0,2734,2733,1,0,0,0,2734,2735,1,0,0,0,2735,2736,1,0,0,0,2736,2738,
        3,826,413,0,2737,2734,1,0,0,0,2737,2738,1,0,0,0,2738,2764,1,0,0,
        0,2739,2742,5,1213,0,0,2740,2743,3,1000,500,0,2741,2743,5,840,0,
        0,2742,2740,1,0,0,0,2742,2741,1,0,0,0,2743,2751,1,0,0,0,2744,2747,
        5,1208,0,0,2745,2748,3,1000,500,0,2746,2748,5,840,0,0,2747,2745,
        1,0,0,0,2747,2746,1,0,0,0,2748,2750,1,0,0,0,2749,2744,1,0,0,0,2750,
        2753,1,0,0,0,2751,2749,1,0,0,0,2751,2752,1,0,0,0,2752,2754,1,0,0,
        0,2753,2751,1,0,0,0,2754,2759,5,1214,0,0,2755,2757,5,20,0,0,2756,
        2755,1,0,0,0,2756,2757,1,0,0,0,2757,2758,1,0,0,0,2758,2760,3,826,
        413,0,2759,2756,1,0,0,0,2759,2760,1,0,0,0,2760,2764,1,0,0,0,2761,
        2764,5,840,0,0,2762,2764,3,826,413,0,2763,2732,1,0,0,0,2763,2739,
        1,0,0,0,2763,2761,1,0,0,0,2763,2762,1,0,0,0,2764,115,1,0,0,0,2765,
        2767,5,417,0,0,2766,2765,1,0,0,0,2766,2767,1,0,0,0,2767,2768,1,0,
        0,0,2768,2769,3,796,398,0,2769,117,1,0,0,0,2770,2771,5,417,0,0,2771,
        2774,3,796,398,0,2772,2774,3,796,398,0,2773,2770,1,0,0,0,2773,2772,
        1,0,0,0,2774,2799,1,0,0,0,2775,2797,5,69,0,0,2776,2779,3,792,396,
        0,2777,2779,5,840,0,0,2778,2776,1,0,0,0,2778,2777,1,0,0,0,2779,2798,
        1,0,0,0,2780,2798,3,826,413,0,2781,2784,5,1213,0,0,2782,2785,3,792,
        396,0,2783,2785,5,840,0,0,2784,2782,1,0,0,0,2784,2783,1,0,0,0,2785,
        2793,1,0,0,0,2786,2789,5,1208,0,0,2787,2790,3,792,396,0,2788,2790,
        5,840,0,0,2789,2787,1,0,0,0,2789,2788,1,0,0,0,2790,2792,1,0,0,0,
        2791,2786,1,0,0,0,2792,2795,1,0,0,0,2793,2791,1,0,0,0,2793,2794,
        1,0,0,0,2794,2796,1,0,0,0,2795,2793,1,0,0,0,2796,2798,5,1214,0,0,
        2797,2778,1,0,0,0,2797,2780,1,0,0,0,2797,2781,1,0,0,0,2798,2800,
        1,0,0,0,2799,2775,1,0,0,0,2799,2800,1,0,0,0,2800,119,1,0,0,0,2801,
        2803,5,70,0,0,2802,2804,5,286,0,0,2803,2802,1,0,0,0,2803,2804,1,
        0,0,0,2804,2812,1,0,0,0,2805,2807,3,684,342,0,2806,2805,1,0,0,0,
        2806,2807,1,0,0,0,2807,2808,1,0,0,0,2808,2813,3,794,397,0,2809,2810,
        5,69,0,0,2810,2813,3,788,394,0,2811,2813,3,788,394,0,2812,2806,1,
        0,0,0,2812,2809,1,0,0,0,2812,2811,1,0,0,0,2813,2815,1,0,0,0,2814,
        2816,7,16,0,0,2815,2814,1,0,0,0,2815,2816,1,0,0,0,2816,2820,1,0,
        0,0,2817,2821,3,762,381,0,2818,2821,3,764,382,0,2819,2821,3,766,
        383,0,2820,2817,1,0,0,0,2820,2818,1,0,0,0,2820,2819,1,0,0,0,2821,
        121,1,0,0,0,2822,2823,7,17,0,0,2823,2824,5,29,0,0,2824,2828,3,794,
        397,0,2825,2826,5,20,0,0,2826,2827,7,18,0,0,2827,2829,5,1130,0,0,
        2828,2825,1,0,0,0,2828,2829,1,0,0,0,2829,2830,1,0,0,0,2830,2831,
        5,456,0,0,2831,2832,3,762,381,0,2832,2833,5,299,0,0,2833,2834,3,
        762,381,0,2834,123,1,0,0,0,2835,2839,3,126,63,0,2836,2839,3,128,
        64,0,2837,2839,3,130,65,0,2838,2835,1,0,0,0,2838,2836,1,0,0,0,2838,
        2837,1,0,0,0,2839,125,1,0,0,0,2840,2841,7,17,0,0,2841,2842,5,166,
        0,0,2842,2843,3,800,400,0,2843,2852,5,1213,0,0,2844,2849,3,132,66,
        0,2845,2846,5,1208,0,0,2846,2848,3,132,66,0,2847,2845,1,0,0,0,2848,
        2851,1,0,0,0,2849,2847,1,0,0,0,2849,2850,1,0,0,0,2850,2853,1,0,0,
        0,2851,2849,1,0,0,0,2852,2844,1,0,0,0,2852,2853,1,0,0,0,2853,2854,
        1,0,0,0,2854,2855,5,1214,0,0,2855,2856,5,352,0,0,2856,2861,3,692,
        346,0,2857,2860,3,134,67,0,2858,2860,3,136,68,0,2859,2857,1,0,0,
        0,2859,2858,1,0,0,0,2860,2863,1,0,0,0,2861,2859,1,0,0,0,2861,2862,
        1,0,0,0,2862,2867,1,0,0,0,2863,2861,1,0,0,0,2864,2866,3,138,69,0,
        2865,2864,1,0,0,0,2866,2869,1,0,0,0,2867,2865,1,0,0,0,2867,2868,
        1,0,0,0,2868,2874,1,0,0,0,2869,2867,1,0,0,0,2870,2873,3,134,67,0,
        2871,2873,3,136,68,0,2872,2870,1,0,0,0,2872,2871,1,0,0,0,2873,2876,
        1,0,0,0,2874,2872,1,0,0,0,2874,2875,1,0,0,0,2875,2880,1,0,0,0,2876,
        2874,1,0,0,0,2877,2879,3,138,69,0,2878,2877,1,0,0,0,2879,2882,1,
        0,0,0,2880,2878,1,0,0,0,2880,2881,1,0,0,0,2881,2886,1,0,0,0,2882,
        2880,1,0,0,0,2883,2884,5,386,0,0,2884,2885,5,910,0,0,2885,2887,5,
        624,0,0,2886,2883,1,0,0,0,2886,2887,1,0,0,0,2887,2888,1,0,0,0,2888,
        2889,5,67,0,0,2889,2890,5,713,0,0,2890,2891,5,709,0,0,2891,2892,
        5,437,0,0,2892,2893,5,1194,0,0,2893,2894,5,351,0,0,2894,2895,3,1000,
        500,0,2895,127,1,0,0,0,2896,2897,7,17,0,0,2897,2898,5,166,0,0,2898,
        2899,3,800,400,0,2899,2908,5,1213,0,0,2900,2905,3,142,71,0,2901,
        2902,5,1208,0,0,2902,2904,3,142,71,0,2903,2901,1,0,0,0,2904,2907,
        1,0,0,0,2905,2903,1,0,0,0,2905,2906,1,0,0,0,2906,2909,1,0,0,0,2907,
        2905,1,0,0,0,2908,2900,1,0,0,0,2908,2909,1,0,0,0,2909,2910,1,0,0,
        0,2910,2911,5,1214,0,0,2911,2912,5,352,0,0,2912,2913,5,406,0,0,2913,
        2918,3,140,70,0,2914,2917,3,144,72,0,2915,2917,3,158,79,0,2916,2914,
        1,0,0,0,2916,2915,1,0,0,0,2917,2920,1,0,0,0,2918,2916,1,0,0,0,2918,
        2919,1,0,0,0,2919,2924,1,0,0,0,2920,2918,1,0,0,0,2921,2923,3,146,
        73,0,2922,2921,1,0,0,0,2923,2926,1,0,0,0,2924,2922,1,0,0,0,2924,
        2925,1,0,0,0,2925,2931,1,0,0,0,2926,2924,1,0,0,0,2927,2930,3,144,
        72,0,2928,2930,3,158,79,0,2929,2927,1,0,0,0,2929,2928,1,0,0,0,2930,
        2933,1,0,0,0,2931,2929,1,0,0,0,2931,2932,1,0,0,0,2932,2937,1,0,0,
        0,2933,2931,1,0,0,0,2934,2936,3,146,73,0,2935,2934,1,0,0,0,2936,
        2939,1,0,0,0,2937,2935,1,0,0,0,2937,2938,1,0,0,0,2938,2946,1,0,0,
        0,2939,2937,1,0,0,0,2940,2943,5,457,0,0,2941,2942,5,688,0,0,2942,
        2944,5,372,0,0,2943,2941,1,0,0,0,2943,2944,1,0,0,0,2944,2945,1,0,
        0,0,2945,2947,3,794,397,0,2946,2940,1,0,0,0,2946,2947,1,0,0,0,2947,
        2948,1,0,0,0,2948,2954,5,151,0,0,2949,2952,5,789,0,0,2950,2953,3,
        800,400,0,2951,2953,3,762,381,0,2952,2950,1,0,0,0,2952,2951,1,0,
        0,0,2953,2955,1,0,0,0,2954,2949,1,0,0,0,2954,2955,1,0,0,0,2955,2957,
        1,0,0,0,2956,2958,3,148,74,0,2957,2956,1,0,0,0,2957,2958,1,0,0,0,
        2958,2968,1,0,0,0,2959,2960,5,151,0,0,2960,2966,5,910,0,0,2961,2963,
        5,624,0,0,2962,2964,3,794,397,0,2963,2962,1,0,0,0,2963,2964,1,0,
        0,0,2964,2967,1,0,0,0,2965,2967,5,713,0,0,2966,2961,1,0,0,0,2966,
        2965,1,0,0,0,2967,2969,1,0,0,0,2968,2959,1,0,0,0,2968,2969,1,0,0,
        0,2969,2972,1,0,0,0,2970,2971,5,144,0,0,2971,2973,3,578,289,0,2972,
        2970,1,0,0,0,2972,2973,1,0,0,0,2973,129,1,0,0,0,2974,2975,7,17,0,
        0,2975,2976,5,166,0,0,2976,2977,3,800,400,0,2977,2986,5,1213,0,0,
        2978,2983,3,150,75,0,2979,2980,5,1208,0,0,2980,2982,3,150,75,0,2981,
        2979,1,0,0,0,2982,2985,1,0,0,0,2983,2981,1,0,0,0,2983,2984,1,0,0,
        0,2984,2987,1,0,0,0,2985,2983,1,0,0,0,2986,2978,1,0,0,0,2986,2987,
        1,0,0,0,2987,2988,1,0,0,0,2988,2989,5,1214,0,0,2989,2990,5,352,0,
        0,2990,2994,3,696,348,0,2991,2992,5,50,0,0,2992,2993,5,164,0,0,2993,
        2995,3,696,348,0,2994,2991,1,0,0,0,2994,2995,1,0,0,0,2995,3000,1,
        0,0,0,2996,2999,3,152,76,0,2997,2999,3,158,79,0,2998,2996,1,0,0,
        0,2998,2997,1,0,0,0,2999,3002,1,0,0,0,3000,2998,1,0,0,0,3000,3001,
        1,0,0,0,3001,3006,1,0,0,0,3002,3000,1,0,0,0,3003,3005,3,154,77,0,
        3004,3003,1,0,0,0,3005,3008,1,0,0,0,3006,3004,1,0,0,0,3006,3007,
        1,0,0,0,3007,3013,1,0,0,0,3008,3006,1,0,0,0,3009,3012,3,152,76,0,
        3010,3012,3,158,79,0,3011,3009,1,0,0,0,3011,3010,1,0,0,0,3012,3015,
        1,0,0,0,3013,3011,1,0,0,0,3013,3014,1,0,0,0,3014,3019,1,0,0,0,3015,
        3013,1,0,0,0,3016,3018,3,154,77,0,3017,3016,1,0,0,0,3018,3021,1,
        0,0,0,3019,3017,1,0,0,0,3019,3020,1,0,0,0,3020,3026,1,0,0,0,3021,
        3019,1,0,0,0,3022,3023,5,457,0,0,3023,3024,5,688,0,0,3024,3025,5,
        372,0,0,3025,3027,3,794,397,0,3026,3022,1,0,0,0,3026,3027,1,0,0,
        0,3027,3028,1,0,0,0,3028,3034,5,151,0,0,3029,3032,5,789,0,0,3030,
        3033,3,800,400,0,3031,3033,3,762,381,0,3032,3030,1,0,0,0,3032,3031,
        1,0,0,0,3033,3035,1,0,0,0,3034,3029,1,0,0,0,3034,3035,1,0,0,0,3035,
        3037,1,0,0,0,3036,3038,3,156,78,0,3037,3036,1,0,0,0,3037,3038,1,
        0,0,0,3038,3048,1,0,0,0,3039,3040,5,151,0,0,3040,3046,5,910,0,0,
        3041,3043,5,624,0,0,3042,3044,3,794,397,0,3043,3042,1,0,0,0,3043,
        3044,1,0,0,0,3044,3047,1,0,0,0,3045,3047,5,713,0,0,3046,3041,1,0,
        0,0,3046,3045,1,0,0,0,3047,3049,1,0,0,0,3048,3039,1,0,0,0,3048,3049,
        1,0,0,0,3049,131,1,0,0,0,3050,3051,3,816,408,0,3051,3052,3,694,347,
        0,3052,133,1,0,0,0,3053,3054,5,214,0,0,3054,3055,5,386,0,0,3055,
        135,1,0,0,0,3056,3057,5,77,0,0,3057,3058,5,386,0,0,3058,137,1,0,
        0,0,3059,3060,5,384,0,0,3060,3075,3,800,400,0,3061,3063,5,272,0,
        0,3062,3061,1,0,0,0,3062,3063,1,0,0,0,3063,3064,1,0,0,0,3064,3075,
        5,117,0,0,3065,3066,5,559,0,0,3066,3067,5,286,0,0,3067,3068,5,274,
        0,0,3068,3075,5,196,0,0,3069,3070,5,352,0,0,3070,3071,5,274,0,0,
        3071,3072,5,286,0,0,3072,3073,5,274,0,0,3073,3075,5,196,0,0,3074,
        3059,1,0,0,0,3074,3062,1,0,0,0,3074,3065,1,0,0,0,3074,3069,1,0,0,
        0,3075,139,1,0,0,0,3076,3077,5,1213,0,0,3077,3082,3,1190,595,0,3078,
        3079,5,1208,0,0,3079,3081,3,1190,595,0,3080,3078,1,0,0,0,3081,3084,
        1,0,0,0,3082,3080,1,0,0,0,3082,3083,1,0,0,0,3083,3085,1,0,0,0,3084,
        3082,1,0,0,0,3085,3086,5,1214,0,0,3086,3100,1,0,0,0,3087,3097,5,
        467,0,0,3088,3089,5,579,0,0,3089,3090,5,1213,0,0,3090,3091,5,1194,
        0,0,3091,3098,5,1214,0,0,3092,3093,5,457,0,0,3093,3095,5,166,0,0,
        3094,3096,3,800,400,0,3095,3094,1,0,0,0,3095,3096,1,0,0,0,3096,3098,
        1,0,0,0,3097,3088,1,0,0,0,3097,3092,1,0,0,0,3098,3100,1,0,0,0,3099,
        3076,1,0,0,0,3099,3087,1,0,0,0,3100,141,1,0,0,0,3101,3103,3,816,
        408,0,3102,3101,1,0,0,0,3102,3103,1,0,0,0,3103,3104,1,0,0,0,3104,
        3105,3,696,348,0,3105,143,1,0,0,0,3106,3107,5,214,0,0,3107,3108,
        7,19,0,0,3108,145,1,0,0,0,3109,3110,5,384,0,0,3110,3121,3,800,400,
        0,3111,3113,5,272,0,0,3112,3111,1,0,0,0,3112,3113,1,0,0,0,3113,3114,
        1,0,0,0,3114,3121,5,117,0,0,3115,3116,5,559,0,0,3116,3117,5,286,
        0,0,3117,3118,5,274,0,0,3118,3121,5,196,0,0,3119,3121,3,148,74,0,
        3120,3109,1,0,0,0,3120,3112,1,0,0,0,3120,3115,1,0,0,0,3120,3119,
        1,0,0,0,3121,147,1,0,0,0,3122,3123,5,298,0,0,3123,3124,5,944,0,0,
        3124,3125,7,20,0,0,3125,149,1,0,0,0,3126,3128,3,816,408,0,3127,3126,
        1,0,0,0,3127,3128,1,0,0,0,3128,3129,1,0,0,0,3129,3130,3,696,348,
        0,3130,151,1,0,0,0,3131,3132,5,214,0,0,3132,3133,7,21,0,0,3133,153,
        1,0,0,0,3134,3135,5,384,0,0,3135,3160,3,800,400,0,3136,3137,5,61,
        0,0,3137,3141,7,22,0,0,3138,3139,5,1213,0,0,3139,3140,5,1194,0,0,
        3140,3142,5,1214,0,0,3141,3138,1,0,0,0,3141,3142,1,0,0,0,3142,3160,
        1,0,0,0,3143,3160,3,156,78,0,3144,3146,5,272,0,0,3145,3144,1,0,0,
        0,3145,3146,1,0,0,0,3146,3147,1,0,0,0,3147,3160,5,117,0,0,3148,3149,
        5,559,0,0,3149,3150,5,286,0,0,3150,3151,5,274,0,0,3151,3160,5,196,
        0,0,3152,3153,5,352,0,0,3153,3154,5,274,0,0,3154,3155,5,286,0,0,
        3155,3156,5,274,0,0,3156,3160,5,196,0,0,3157,3158,5,159,0,0,3158,
        3160,7,23,0,0,3159,3134,1,0,0,0,3159,3136,1,0,0,0,3159,3143,1,0,
        0,0,3159,3145,1,0,0,0,3159,3148,1,0,0,0,3159,3152,1,0,0,0,3159,3157,
        1,0,0,0,3160,155,1,0,0,0,3161,3162,5,298,0,0,3162,3163,5,944,0,0,
        3163,3164,7,24,0,0,3164,157,1,0,0,0,3165,3166,5,268,0,0,3166,3167,
        5,386,0,0,3167,159,1,0,0,0,3168,3169,5,86,0,0,3169,3174,5,235,0,
        0,3170,3174,5,65,0,0,3171,3172,5,340,0,0,3172,3174,5,235,0,0,3173,
        3168,1,0,0,0,3173,3170,1,0,0,0,3173,3171,1,0,0,0,3174,3175,1,0,0,
        0,3175,3187,3,802,401,0,3176,3177,5,1213,0,0,3177,3182,3,162,81,
        0,3178,3179,5,1208,0,0,3179,3181,3,162,81,0,3180,3178,1,0,0,0,3181,
        3184,1,0,0,0,3182,3180,1,0,0,0,3182,3183,1,0,0,0,3183,3185,1,0,0,
        0,3184,3182,1,0,0,0,3185,3186,5,1214,0,0,3186,3188,1,0,0,0,3187,
        3176,1,0,0,0,3187,3188,1,0,0,0,3188,3189,1,0,0,0,3189,3190,5,20,
        0,0,3190,3204,5,1213,0,0,3191,3193,3,1220,610,0,3192,3191,1,0,0,
        0,3192,3193,1,0,0,0,3193,3195,1,0,0,0,3194,3196,3,1206,603,0,3195,
        3194,1,0,0,0,3195,3196,1,0,0,0,3196,3200,1,0,0,0,3197,3201,3,598,
        299,0,3198,3201,3,4,2,0,3199,3201,3,1226,613,0,3200,3197,1,0,0,0,
        3200,3198,1,0,0,0,3200,3199,1,0,0,0,3201,3202,1,0,0,0,3202,3203,
        5,1206,0,0,3203,3205,1,0,0,0,3204,3192,1,0,0,0,3205,3206,1,0,0,0,
        3206,3204,1,0,0,0,3206,3207,1,0,0,0,3207,3208,1,0,0,0,3208,3209,
        5,1214,0,0,3209,161,1,0,0,0,3210,3223,3,816,408,0,3211,3224,3,692,
        346,0,3212,3213,5,1213,0,0,3213,3218,3,692,346,0,3214,3215,5,1208,
        0,0,3215,3217,3,714,357,0,3216,3214,1,0,0,0,3217,3220,1,0,0,0,3218,
        3216,1,0,0,0,3218,3219,1,0,0,0,3219,3221,1,0,0,0,3220,3218,1,0,0,
        0,3221,3222,5,1214,0,0,3222,3224,1,0,0,0,3223,3211,1,0,0,0,3223,
        3212,1,0,0,0,3224,3228,1,0,0,0,3225,3227,3,714,357,0,3226,3225,1,
        0,0,0,3227,3230,1,0,0,0,3228,3226,1,0,0,0,3228,3229,1,0,0,0,3229,
        163,1,0,0,0,3230,3228,1,0,0,0,3231,3232,3,166,83,0,3232,165,1,0,
        0,0,3233,3234,7,17,0,0,3234,3235,5,310,0,0,3235,3236,3,798,399,0,
        3236,3245,5,1213,0,0,3237,3242,3,168,84,0,3238,3239,5,1208,0,0,3239,
        3241,3,168,84,0,3240,3238,1,0,0,0,3241,3244,1,0,0,0,3242,3240,1,
        0,0,0,3242,3243,1,0,0,0,3243,3246,1,0,0,0,3244,3242,1,0,0,0,3245,
        3237,1,0,0,0,3245,3246,1,0,0,0,3246,3247,1,0,0,0,3247,3253,5,1214,
        0,0,3248,3252,3,170,85,0,3249,3252,3,172,86,0,3250,3252,3,174,87,
        0,3251,3248,1,0,0,0,3251,3249,1,0,0,0,3251,3250,1,0,0,0,3252,3255,
        1,0,0,0,3253,3251,1,0,0,0,3253,3254,1,0,0,0,3254,3256,1,0,0,0,3255,
        3253,1,0,0,0,3256,3257,3,176,88,0,3257,167,1,0,0,0,3258,3260,7,25,
        0,0,3259,3258,1,0,0,0,3259,3260,1,0,0,0,3260,3261,1,0,0,0,3261,3262,
        3,816,408,0,3262,3266,3,694,347,0,3263,3265,3,714,357,0,3264,3263,
        1,0,0,0,3265,3268,1,0,0,0,3266,3264,1,0,0,0,3266,3267,1,0,0,0,3267,
        169,1,0,0,0,3268,3266,1,0,0,0,3269,3270,5,77,0,0,3270,3278,5,386,
        0,0,3271,3272,5,253,0,0,3272,3273,5,386,0,0,3273,3278,5,606,0,0,
        3274,3275,5,322,0,0,3275,3276,5,386,0,0,3276,3278,5,606,0,0,3277,
        3269,1,0,0,0,3277,3271,1,0,0,0,3277,3274,1,0,0,0,3278,171,1,0,0,
        0,3279,3280,5,128,0,0,3280,3281,5,347,0,0,3281,3282,5,374,0,0,3282,
        3283,3,768,384,0,3283,173,1,0,0,0,3284,3285,5,386,0,0,3285,3286,
        5,910,0,0,3286,3287,7,26,0,0,3287,175,1,0,0,0,3288,3291,3,180,90,
        0,3289,3291,3,188,94,0,3290,3288,1,0,0,0,3290,3289,1,0,0,0,3291,
        177,1,0,0,0,3292,3323,3,180,90,0,3293,3323,3,188,94,0,3294,3323,
        3,190,95,0,3295,3323,3,192,96,0,3296,3323,3,194,97,0,3297,3298,3,
        818,409,0,3298,3299,5,1207,0,0,3299,3301,1,0,0,0,3300,3297,1,0,0,
        0,3300,3301,1,0,0,0,3301,3302,1,0,0,0,3302,3304,3,196,98,0,3303,
        3305,3,818,409,0,3304,3303,1,0,0,0,3304,3305,1,0,0,0,3305,3323,1,
        0,0,0,3306,3323,3,198,99,0,3307,3323,3,200,100,0,3308,3309,5,208,
        0,0,3309,3323,3,818,409,0,3310,3311,5,218,0,0,3311,3323,3,818,409,
        0,3312,3313,5,34,0,0,3313,3315,5,343,0,0,3314,3316,3,178,89,0,3315,
        3314,1,0,0,0,3316,3317,1,0,0,0,3317,3315,1,0,0,0,3317,3318,1,0,0,
        0,3318,3319,1,0,0,0,3319,3320,5,134,0,0,3320,3321,5,343,0,0,3321,
        3323,1,0,0,0,3322,3292,1,0,0,0,3322,3293,1,0,0,0,3322,3294,1,0,0,
        0,3322,3295,1,0,0,0,3322,3296,1,0,0,0,3322,3300,1,0,0,0,3322,3306,
        1,0,0,0,3322,3307,1,0,0,0,3322,3308,1,0,0,0,3322,3310,1,0,0,0,3322,
        3312,1,0,0,0,3323,3324,1,0,0,0,3324,3325,5,1206,0,0,3325,179,1,0,
        0,0,3326,3330,3,182,91,0,3327,3330,3,184,92,0,3328,3330,3,186,93,
        0,3329,3326,1,0,0,0,3329,3327,1,0,0,0,3329,3328,1,0,0,0,3330,181,
        1,0,0,0,3331,3347,3,662,331,0,3332,3347,3,664,332,0,3333,3347,3,
        666,333,0,3334,3347,3,652,326,0,3335,3347,3,632,316,0,3336,3347,
        3,658,329,0,3337,3347,3,604,302,0,3338,3347,3,636,318,0,3339,3347,
        3,608,304,0,3340,3347,3,624,312,0,3341,3347,3,660,330,0,3342,3347,
        3,600,300,0,3343,3347,3,602,301,0,3344,3347,3,614,307,0,3345,3347,
        3,668,334,0,3346,3331,1,0,0,0,3346,3332,1,0,0,0,3346,3333,1,0,0,
        0,3346,3334,1,0,0,0,3346,3335,1,0,0,0,3346,3336,1,0,0,0,3346,3337,
        1,0,0,0,3346,3338,1,0,0,0,3346,3339,1,0,0,0,3346,3340,1,0,0,0,3346,
        3341,1,0,0,0,3346,3342,1,0,0,0,3346,3343,1,0,0,0,3346,3344,1,0,0,
        0,3346,3345,1,0,0,0,3347,183,1,0,0,0,3348,3396,3,12,6,0,3349,3396,
        3,18,9,0,3350,3396,3,78,39,0,3351,3396,3,106,53,0,3352,3396,3,120,
        60,0,3353,3396,3,260,130,0,3354,3396,3,322,161,0,3355,3396,3,264,
        132,0,3356,3396,3,320,160,0,3357,3396,3,268,134,0,3358,3396,3,306,
        153,0,3359,3396,3,160,80,0,3360,3396,3,282,141,0,3361,3396,3,308,
        154,0,3362,3396,3,314,157,0,3363,3396,3,312,156,0,3364,3396,3,416,
        208,0,3365,3396,3,256,128,0,3366,3396,3,426,213,0,3367,3396,3,428,
        214,0,3368,3396,3,432,216,0,3369,3396,3,436,218,0,3370,3396,3,438,
        219,0,3371,3396,3,446,223,0,3372,3396,3,450,225,0,3373,3396,3,452,
        226,0,3374,3396,3,454,227,0,3375,3396,3,460,230,0,3376,3396,3,462,
        231,0,3377,3396,3,464,232,0,3378,3396,3,470,235,0,3379,3396,3,474,
        237,0,3380,3396,3,476,238,0,3381,3396,3,478,239,0,3382,3396,3,480,
        240,0,3383,3396,3,484,242,0,3384,3396,3,486,243,0,3385,3396,3,492,
        246,0,3386,3396,3,518,259,0,3387,3396,3,522,261,0,3388,3396,3,524,
        262,0,3389,3396,3,532,266,0,3390,3396,3,530,265,0,3391,3396,3,534,
        267,0,3392,3396,3,536,268,0,3393,3396,3,538,269,0,3394,3396,3,556,
        278,0,3395,3348,1,0,0,0,3395,3349,1,0,0,0,3395,3350,1,0,0,0,3395,
        3351,1,0,0,0,3395,3352,1,0,0,0,3395,3353,1,0,0,0,3395,3354,1,0,0,
        0,3395,3355,1,0,0,0,3395,3356,1,0,0,0,3395,3357,1,0,0,0,3395,3358,
        1,0,0,0,3395,3359,1,0,0,0,3395,3360,1,0,0,0,3395,3361,1,0,0,0,3395,
        3362,1,0,0,0,3395,3363,1,0,0,0,3395,3364,1,0,0,0,3395,3365,1,0,0,
        0,3395,3366,1,0,0,0,3395,3367,1,0,0,0,3395,3368,1,0,0,0,3395,3369,
        1,0,0,0,3395,3370,1,0,0,0,3395,3371,1,0,0,0,3395,3372,1,0,0,0,3395,
        3373,1,0,0,0,3395,3374,1,0,0,0,3395,3375,1,0,0,0,3395,3376,1,0,0,
        0,3395,3377,1,0,0,0,3395,3378,1,0,0,0,3395,3379,1,0,0,0,3395,3380,
        1,0,0,0,3395,3381,1,0,0,0,3395,3382,1,0,0,0,3395,3383,1,0,0,0,3395,
        3384,1,0,0,0,3395,3385,1,0,0,0,3395,3386,1,0,0,0,3395,3387,1,0,0,
        0,3395,3388,1,0,0,0,3395,3389,1,0,0,0,3395,3390,1,0,0,0,3395,3391,
        1,0,0,0,3395,3392,1,0,0,0,3395,3393,1,0,0,0,3395,3394,1,0,0,0,3396,
        185,1,0,0,0,3397,3401,3,1228,614,0,3398,3401,3,1230,615,0,3399,3401,
        3,1248,624,0,3400,3397,1,0,0,0,3400,3398,1,0,0,0,3400,3399,1,0,0,
        0,3401,187,1,0,0,0,3402,3403,3,818,409,0,3403,3404,5,1207,0,0,3404,
        3406,1,0,0,0,3405,3402,1,0,0,0,3405,3406,1,0,0,0,3406,3407,1,0,0,
        0,3407,3411,5,34,0,0,3408,3410,3,202,101,0,3409,3408,1,0,0,0,3410,
        3413,1,0,0,0,3411,3409,1,0,0,0,3411,3412,1,0,0,0,3412,3417,1,0,0,
        0,3413,3411,1,0,0,0,3414,3416,3,204,102,0,3415,3414,1,0,0,0,3416,
        3419,1,0,0,0,3417,3415,1,0,0,0,3417,3418,1,0,0,0,3418,3423,1,0,0,
        0,3419,3417,1,0,0,0,3420,3422,3,206,103,0,3421,3420,1,0,0,0,3422,
        3425,1,0,0,0,3423,3421,1,0,0,0,3423,3424,1,0,0,0,3424,3429,1,0,0,
        0,3425,3423,1,0,0,0,3426,3428,3,178,89,0,3427,3426,1,0,0,0,3428,
        3431,1,0,0,0,3429,3427,1,0,0,0,3429,3430,1,0,0,0,3430,3432,1,0,0,
        0,3431,3429,1,0,0,0,3432,3434,5,134,0,0,3433,3435,3,818,409,0,3434,
        3433,1,0,0,0,3434,3435,1,0,0,0,3435,189,1,0,0,0,3436,3447,3,208,
        104,0,3437,3447,3,210,105,0,3438,3447,3,212,106,0,3439,3447,3,214,
        107,0,3440,3447,3,216,108,0,3441,3447,3,218,109,0,3442,3447,3,220,
        110,0,3443,3447,3,222,111,0,3444,3447,3,224,112,0,3445,3447,3,226,
        113,0,3446,3436,1,0,0,0,3446,3437,1,0,0,0,3446,3438,1,0,0,0,3446,
        3439,1,0,0,0,3446,3440,1,0,0,0,3446,3441,1,0,0,0,3446,3442,1,0,0,
        0,3446,3443,1,0,0,0,3446,3444,1,0,0,0,3446,3445,1,0,0,0,3447,191,
        1,0,0,0,3448,3449,5,372,0,0,3449,3450,3,814,407,0,3450,3451,5,1224,
        0,0,3451,3452,3,1000,500,0,3452,193,1,0,0,0,3453,3456,3,228,114,
        0,3454,3456,3,234,117,0,3455,3453,1,0,0,0,3455,3454,1,0,0,0,3456,
        195,1,0,0,0,3457,3462,3,236,118,0,3458,3462,3,238,119,0,3459,3462,
        3,240,120,0,3460,3462,3,242,121,0,3461,3457,1,0,0,0,3461,3458,1,
        0,0,0,3461,3459,1,0,0,0,3461,3460,1,0,0,0,3462,197,1,0,0,0,3463,
        3464,5,377,0,0,3464,3470,3,252,126,0,3465,3467,5,344,0,0,3466,3468,
        3,252,126,0,3467,3466,1,0,0,0,3467,3468,1,0,0,0,3468,3470,1,0,0,
        0,3469,3463,1,0,0,0,3469,3465,1,0,0,0,3470,3485,1,0,0,0,3471,3472,
        5,372,0,0,3472,3473,3,248,124,0,3473,3474,5,1224,0,0,3474,3482,3,
        1000,500,0,3475,3476,5,1208,0,0,3476,3477,3,248,124,0,3477,3478,
        5,1224,0,0,3478,3479,3,1000,500,0,3479,3481,1,0,0,0,3480,3475,1,
        0,0,0,3481,3484,1,0,0,0,3482,3480,1,0,0,0,3482,3483,1,0,0,0,3483,
        3486,1,0,0,0,3484,3482,1,0,0,0,3485,3471,1,0,0,0,3485,3486,1,0,0,
        0,3486,3513,1,0,0,0,3487,3488,5,170,0,0,3488,3489,5,633,0,0,3489,
        3494,3,244,122,0,3490,3491,5,1208,0,0,3491,3493,3,244,122,0,3492,
        3490,1,0,0,0,3493,3496,1,0,0,0,3494,3492,1,0,0,0,3494,3495,1,0,0,
        0,3495,3513,1,0,0,0,3496,3494,1,0,0,0,3497,3498,5,170,0,0,3498,3499,
        5,633,0,0,3499,3502,5,658,0,0,3500,3503,3,768,384,0,3501,3503,3,
        814,407,0,3502,3500,1,0,0,0,3502,3501,1,0,0,0,3503,3504,1,0,0,0,
        3504,3509,3,246,123,0,3505,3506,5,1208,0,0,3506,3508,3,246,123,0,
        3507,3505,1,0,0,0,3508,3511,1,0,0,0,3509,3507,1,0,0,0,3509,3510,
        1,0,0,0,3510,3513,1,0,0,0,3511,3509,1,0,0,0,3512,3469,1,0,0,0,3512,
        3487,1,0,0,0,3512,3497,1,0,0,0,3513,199,1,0,0,0,3514,3515,5,860,
        0,0,3515,3520,3,1000,500,0,3516,3517,5,1208,0,0,3517,3519,3,1000,
        500,0,3518,3516,1,0,0,0,3519,3522,1,0,0,0,3520,3518,1,0,0,0,3520,
        3521,1,0,0,0,3521,201,1,0,0,0,3522,3520,1,0,0,0,3523,3545,5,110,
        0,0,3524,3529,3,814,407,0,3525,3526,5,1208,0,0,3526,3528,3,814,407,
        0,3527,3525,1,0,0,0,3528,3531,1,0,0,0,3529,3527,1,0,0,0,3529,3530,
        1,0,0,0,3530,3532,1,0,0,0,3531,3529,1,0,0,0,3532,3536,3,694,347,
        0,3533,3535,3,714,357,0,3534,3533,1,0,0,0,3535,3538,1,0,0,0,3536,
        3534,1,0,0,0,3536,3537,1,0,0,0,3537,3546,1,0,0,0,3538,3536,1,0,0,
        0,3539,3540,3,820,410,0,3540,3543,5,588,0,0,3541,3542,5,159,0,0,
        3542,3544,3,254,127,0,3543,3541,1,0,0,0,3543,3544,1,0,0,0,3544,3546,
        1,0,0,0,3545,3524,1,0,0,0,3545,3539,1,0,0,0,3546,3547,1,0,0,0,3547,
        3548,5,1206,0,0,3548,203,1,0,0,0,3549,3550,5,110,0,0,3550,3555,3,
        822,411,0,3551,3553,5,268,0,0,3552,3551,1,0,0,0,3552,3553,1,0,0,
        0,3553,3554,1,0,0,0,3554,3556,5,367,0,0,3555,3552,1,0,0,0,3555,3556,
        1,0,0,0,3556,3557,1,0,0,0,3557,3569,5,99,0,0,3558,3559,5,475,0,0,
        3559,3570,5,351,0,0,3560,3561,5,474,0,0,3561,3563,5,351,0,0,3562,
        3564,5,287,0,0,3563,3562,1,0,0,0,3563,3564,1,0,0,0,3564,3567,1,0,
        0,0,3565,3566,5,426,0,0,3566,3568,7,27,0,0,3567,3565,1,0,0,0,3567,
        3568,1,0,0,0,3568,3570,1,0,0,0,3569,3558,1,0,0,0,3569,3560,1,0,0,
        0,3569,3570,1,0,0,0,3570,3571,1,0,0,0,3571,3588,5,159,0,0,3572,3574,
        3,1206,603,0,3573,3572,1,0,0,0,3573,3574,1,0,0,0,3574,3576,1,0,0,
        0,3575,3577,3,1212,606,0,3576,3575,1,0,0,0,3576,3577,1,0,0,0,3577,
        3578,1,0,0,0,3578,3585,3,838,419,0,3579,3583,5,159,0,0,3580,3581,
        5,877,0,0,3581,3584,5,287,0,0,3582,3584,5,453,0,0,3583,3580,1,0,
        0,0,3583,3582,1,0,0,0,3584,3586,1,0,0,0,3585,3579,1,0,0,0,3585,3586,
        1,0,0,0,3586,3589,1,0,0,0,3587,3589,3,824,412,0,3588,3573,1,0,0,
        0,3588,3587,1,0,0,0,3589,3597,1,0,0,0,3590,3591,5,306,0,0,3591,3592,
        3,824,412,0,3592,3595,5,164,0,0,3593,3596,3,762,381,0,3594,3596,
        3,814,407,0,3595,3593,1,0,0,0,3595,3594,1,0,0,0,3596,3598,1,0,0,
        0,3597,3590,1,0,0,0,3597,3598,1,0,0,0,3598,3599,1,0,0,0,3599,3600,
        5,1206,0,0,3600,205,1,0,0,0,3601,3607,5,110,0,0,3602,3603,7,28,0,
        0,3603,3608,5,177,0,0,3604,3605,3,820,410,0,3605,3606,5,588,0,0,
        3606,3608,1,0,0,0,3607,3602,1,0,0,0,3607,3604,1,0,0,0,3608,3609,
        1,0,0,0,3609,3638,5,159,0,0,3610,3615,3,254,127,0,3611,3612,5,1208,
        0,0,3612,3614,3,254,127,0,3613,3611,1,0,0,0,3614,3617,1,0,0,0,3615,
        3613,1,0,0,0,3615,3616,1,0,0,0,3616,3639,1,0,0,0,3617,3615,1,0,0,
        0,3618,3624,5,387,0,0,3619,3624,5,389,0,0,3620,3621,5,272,0,0,3621,
        3624,5,162,0,0,3622,3624,3,820,410,0,3623,3618,1,0,0,0,3623,3619,
        1,0,0,0,3623,3620,1,0,0,0,3623,3622,1,0,0,0,3624,3635,1,0,0,0,3625,
        3631,5,1208,0,0,3626,3632,5,387,0,0,3627,3632,5,389,0,0,3628,3629,
        5,272,0,0,3629,3632,5,162,0,0,3630,3632,3,820,410,0,3631,3626,1,
        0,0,0,3631,3627,1,0,0,0,3631,3628,1,0,0,0,3631,3630,1,0,0,0,3632,
        3634,1,0,0,0,3633,3625,1,0,0,0,3634,3637,1,0,0,0,3635,3633,1,0,0,
        0,3635,3636,1,0,0,0,3636,3639,1,0,0,0,3637,3635,1,0,0,0,3638,3610,
        1,0,0,0,3638,3623,1,0,0,0,3639,3640,1,0,0,0,3640,3641,3,178,89,0,
        3641,207,1,0,0,0,3642,3643,5,497,0,0,3643,3644,3,822,411,0,3644,
        3645,5,99,0,0,3645,3646,5,159,0,0,3646,3647,5,310,0,0,3647,3648,
        3,798,399,0,3648,209,1,0,0,0,3649,3650,5,63,0,0,3650,3651,3,822,
        411,0,3651,211,1,0,0,0,3652,3653,5,107,0,0,3653,3654,5,306,0,0,3654,
        3655,3,824,412,0,3655,213,1,0,0,0,3656,3657,7,29,0,0,3657,3658,5,
        164,0,0,3658,3659,3,796,398,0,3659,3660,5,471,0,0,3660,3661,5,93,
        0,0,3661,3662,5,282,0,0,3662,3663,3,822,411,0,3663,215,1,0,0,0,3664,
        3665,7,30,0,0,3665,3670,3,796,398,0,3666,3668,5,20,0,0,3667,3666,
        1,0,0,0,3667,3668,1,0,0,0,3668,3669,1,0,0,0,3669,3671,3,812,406,
        0,3670,3667,1,0,0,0,3670,3671,1,0,0,0,3671,3672,1,0,0,0,3672,3673,
        5,372,0,0,3673,3678,3,678,339,0,3674,3675,5,1208,0,0,3675,3677,3,
        678,339,0,3676,3674,1,0,0,0,3677,3680,1,0,0,0,3678,3676,1,0,0,0,
        3678,3679,1,0,0,0,3679,3681,1,0,0,0,3680,3678,1,0,0,0,3681,3682,
        5,471,0,0,3682,3683,5,93,0,0,3683,3684,5,282,0,0,3684,3685,3,822,
        411,0,3685,217,1,0,0,0,3686,3687,5,144,0,0,3687,3697,3,824,412,0,
        3688,3689,5,457,0,0,3689,3694,3,814,407,0,3690,3691,5,1208,0,0,3691,
        3693,3,814,407,0,3692,3690,1,0,0,0,3693,3696,1,0,0,0,3694,3692,1,
        0,0,0,3694,3695,1,0,0,0,3695,3698,1,0,0,0,3696,3694,1,0,0,0,3697,
        3688,1,0,0,0,3697,3698,1,0,0,0,3698,219,1,0,0,0,3699,3700,5,144,
        0,0,3700,3701,5,189,0,0,3701,3702,3,824,412,0,3702,221,1,0,0,0,3703,
        3708,5,155,0,0,3704,3706,7,31,0,0,3705,3704,1,0,0,0,3705,3706,1,
        0,0,0,3706,3707,1,0,0,0,3707,3709,5,164,0,0,3708,3705,1,0,0,0,3708,
        3709,1,0,0,0,3709,3710,1,0,0,0,3710,3711,3,822,411,0,3711,3712,5,
        206,0,0,3712,3717,3,814,407,0,3713,3714,5,1208,0,0,3714,3716,3,814,
        407,0,3715,3713,1,0,0,0,3716,3719,1,0,0,0,3717,3715,1,0,0,0,3717,
        3718,1,0,0,0,3718,223,1,0,0,0,3719,3717,1,0,0,0,3720,3721,5,288,
        0,0,3721,3731,3,822,411,0,3722,3723,5,457,0,0,3723,3728,3,814,407,
        0,3724,3725,5,1208,0,0,3725,3727,3,814,407,0,3726,3724,1,0,0,0,3727,
        3730,1,0,0,0,3728,3726,1,0,0,0,3728,3729,1,0,0,0,3729,3732,1,0,0,
        0,3730,3728,1,0,0,0,3731,3722,1,0,0,0,3731,3732,1,0,0,0,3732,225,
        1,0,0,0,3733,3734,5,306,0,0,3734,3735,3,824,412,0,3735,3738,5,164,
        0,0,3736,3739,3,762,381,0,3737,3739,3,814,407,0,3738,3736,1,0,0,
        0,3738,3737,1,0,0,0,3739,227,1,0,0,0,3740,3752,5,47,0,0,3741,3743,
        3,1000,500,0,3742,3744,3,230,115,0,3743,3742,1,0,0,0,3744,3745,1,
        0,0,0,3745,3743,1,0,0,0,3745,3746,1,0,0,0,3746,3753,1,0,0,0,3747,
        3749,3,232,116,0,3748,3747,1,0,0,0,3749,3750,1,0,0,0,3750,3748,1,
        0,0,0,3750,3751,1,0,0,0,3751,3753,1,0,0,0,3752,3741,1,0,0,0,3752,
        3748,1,0,0,0,3753,3760,1,0,0,0,3754,3756,5,131,0,0,3755,3757,3,178,
        89,0,3756,3755,1,0,0,0,3757,3758,1,0,0,0,3758,3756,1,0,0,0,3758,
        3759,1,0,0,0,3759,3761,1,0,0,0,3760,3754,1,0,0,0,3760,3761,1,0,0,
        0,3761,3762,1,0,0,0,3762,3763,5,134,0,0,3763,3764,5,47,0,0,3764,
        229,1,0,0,0,3765,3766,5,470,0,0,3766,3767,3,1000,500,0,3767,3769,
        5,419,0,0,3768,3770,3,178,89,0,3769,3768,1,0,0,0,3770,3771,1,0,0,
        0,3771,3769,1,0,0,0,3771,3772,1,0,0,0,3772,231,1,0,0,0,3773,3774,
        5,470,0,0,3774,3775,3,998,499,0,3775,3777,5,419,0,0,3776,3778,3,
        178,89,0,3777,3776,1,0,0,0,3778,3779,1,0,0,0,3779,3777,1,0,0,0,3779,
        3780,1,0,0,0,3780,233,1,0,0,0,3781,3782,5,188,0,0,3782,3783,3,998,
        499,0,3783,3785,5,419,0,0,3784,3786,3,178,89,0,3785,3784,1,0,0,0,
        3786,3787,1,0,0,0,3787,3785,1,0,0,0,3787,3788,1,0,0,0,3788,3799,
        1,0,0,0,3789,3790,5,132,0,0,3790,3791,3,998,499,0,3791,3793,5,419,
        0,0,3792,3794,3,178,89,0,3793,3792,1,0,0,0,3794,3795,1,0,0,0,3795,
        3793,1,0,0,0,3795,3796,1,0,0,0,3796,3798,1,0,0,0,3797,3789,1,0,0,
        0,3798,3801,1,0,0,0,3799,3797,1,0,0,0,3799,3800,1,0,0,0,3800,3808,
        1,0,0,0,3801,3799,1,0,0,0,3802,3804,5,131,0,0,3803,3805,3,178,89,
        0,3804,3803,1,0,0,0,3805,3806,1,0,0,0,3806,3804,1,0,0,0,3806,3807,
        1,0,0,0,3807,3809,1,0,0,0,3808,3802,1,0,0,0,3808,3809,1,0,0,0,3809,
        3810,1,0,0,0,3810,3811,5,134,0,0,3811,3812,5,188,0,0,3812,235,1,
        0,0,0,3813,3814,5,472,0,0,3814,3815,3,998,499,0,3815,3817,5,122,
        0,0,3816,3818,3,178,89,0,3817,3816,1,0,0,0,3818,3819,1,0,0,0,3819,
        3817,1,0,0,0,3819,3820,1,0,0,0,3820,3821,1,0,0,0,3821,3822,5,134,
        0,0,3822,3823,5,472,0,0,3823,237,1,0,0,0,3824,3826,5,232,0,0,3825,
        3827,3,178,89,0,3826,3825,1,0,0,0,3827,3828,1,0,0,0,3828,3826,1,
        0,0,0,3828,3829,1,0,0,0,3829,3830,1,0,0,0,3830,3831,5,134,0,0,3831,
        3832,5,232,0,0,3832,239,1,0,0,0,3833,3834,5,159,0,0,3834,3835,3,
        814,407,0,3835,3840,5,20,0,0,3836,3837,3,822,411,0,3837,3838,5,99,
        0,0,3838,3839,5,159,0,0,3839,3841,1,0,0,0,3840,3836,1,0,0,0,3840,
        3841,1,0,0,0,3841,3843,1,0,0,0,3842,3844,3,1206,603,0,3843,3842,
        1,0,0,0,3843,3844,1,0,0,0,3844,3846,1,0,0,0,3845,3847,3,1212,606,
        0,3846,3845,1,0,0,0,3846,3847,1,0,0,0,3847,3848,1,0,0,0,3848,3849,
        3,838,419,0,3849,3851,5,122,0,0,3850,3852,3,178,89,0,3851,3850,1,
        0,0,0,3852,3853,1,0,0,0,3853,3851,1,0,0,0,3853,3854,1,0,0,0,3854,
        3855,1,0,0,0,3855,3856,5,134,0,0,3856,3857,5,159,0,0,3857,241,1,
        0,0,0,3858,3860,5,339,0,0,3859,3861,3,178,89,0,3860,3859,1,0,0,0,
        3861,3862,1,0,0,0,3862,3860,1,0,0,0,3862,3863,1,0,0,0,3863,3864,
        1,0,0,0,3864,3865,5,449,0,0,3865,3866,3,998,499,0,3866,3867,5,134,
        0,0,3867,3868,5,339,0,0,3868,243,1,0,0,0,3869,3870,3,814,407,0,3870,
        3871,5,1224,0,0,3871,3872,3,250,125,0,3872,245,1,0,0,0,3873,3874,
        3,814,407,0,3874,3875,5,1224,0,0,3875,3876,3,248,124,0,3876,247,
        1,0,0,0,3877,3878,7,32,0,0,3878,249,1,0,0,0,3879,3880,7,33,0,0,3880,
        251,1,0,0,0,3881,3884,3,820,410,0,3882,3884,3,254,127,0,3883,3881,
        1,0,0,0,3883,3882,1,0,0,0,3884,253,1,0,0,0,3885,3887,5,934,0,0,3886,
        3888,5,459,0,0,3887,3886,1,0,0,0,3887,3888,1,0,0,0,3888,3889,1,0,
        0,0,3889,3890,3,762,381,0,3890,255,1,0,0,0,3891,3893,5,86,0,0,3892,
        3894,5,324,0,0,3893,3892,1,0,0,0,3893,3894,1,0,0,0,3894,3895,1,0,
        0,0,3895,3903,5,468,0,0,3896,3903,5,100,0,0,3897,3899,5,340,0,0,
        3898,3900,5,324,0,0,3899,3898,1,0,0,0,3899,3900,1,0,0,0,3900,3901,
        1,0,0,0,3901,3903,5,468,0,0,3902,3891,1,0,0,0,3902,3896,1,0,0,0,
        3902,3897,1,0,0,0,3903,3904,1,0,0,0,3904,3906,3,796,398,0,3905,3907,
        3,1186,593,0,3906,3905,1,0,0,0,3906,3907,1,0,0,0,3907,3908,1,0,0,
        0,3908,3910,5,20,0,0,3909,3911,3,1206,603,0,3910,3909,1,0,0,0,3910,
        3911,1,0,0,0,3911,3913,1,0,0,0,3912,3914,3,258,129,0,3913,3912,1,
        0,0,0,3913,3914,1,0,0,0,3914,3916,1,0,0,0,3915,3917,3,1212,606,0,
        3916,3915,1,0,0,0,3916,3917,1,0,0,0,3917,3918,1,0,0,0,3918,3919,
        3,838,419,0,3919,257,1,0,0,0,3920,3921,5,20,0,0,3921,3922,5,282,
        0,0,3922,3923,3,1038,519,0,3923,3934,5,1213,0,0,3924,3928,5,104,
        0,0,3925,3926,5,24,0,0,3926,3927,5,421,0,0,3927,3929,5,480,0,0,3928,
        3925,1,0,0,0,3928,3929,1,0,0,0,3929,3935,1,0,0,0,3930,3932,5,422,
        0,0,3931,3933,3,756,378,0,3932,3931,1,0,0,0,3932,3933,1,0,0,0,3933,
        3935,1,0,0,0,3934,3924,1,0,0,0,3934,3930,1,0,0,0,3935,3936,1,0,0,
        0,3936,3939,3,1000,500,0,3937,3938,5,1208,0,0,3938,3940,3,794,397,
        0,3939,3937,1,0,0,0,3939,3940,1,0,0,0,3940,3941,1,0,0,0,3941,3942,
        5,1214,0,0,3942,259,1,0,0,0,3943,3944,5,86,0,0,3944,3947,5,102,0,
        0,3945,3947,5,51,0,0,3946,3943,1,0,0,0,3946,3945,1,0,0,0,3947,3948,
        1,0,0,0,3948,3951,3,804,402,0,3949,3950,5,164,0,0,3950,3952,3,804,
        402,0,3951,3949,1,0,0,0,3951,3952,1,0,0,0,3952,3953,1,0,0,0,3953,
        3954,5,20,0,0,3954,3959,3,262,131,0,3955,3956,5,1208,0,0,3956,3958,
        3,262,131,0,3957,3955,1,0,0,0,3958,3961,1,0,0,0,3959,3957,1,0,0,
        0,3959,3960,1,0,0,0,3960,261,1,0,0,0,3961,3959,1,0,0,0,3962,3972,
        3,580,290,0,3963,3964,5,5,0,0,3964,3965,5,1224,0,0,3965,3972,3,762,
        381,0,3966,3972,3,584,292,0,3967,3972,3,586,293,0,3968,3972,3,588,
        294,0,3969,3972,3,590,295,0,3970,3972,3,592,296,0,3971,3962,1,0,
        0,0,3971,3963,1,0,0,0,3971,3966,1,0,0,0,3971,3967,1,0,0,0,3971,3968,
        1,0,0,0,3971,3969,1,0,0,0,3971,3970,1,0,0,0,3972,263,1,0,0,0,3973,
        3974,5,86,0,0,3974,3979,3,266,133,0,3975,3976,5,1208,0,0,3976,3978,
        3,266,133,0,3977,3975,1,0,0,0,3978,3981,1,0,0,0,3979,3977,1,0,0,
        0,3979,3980,1,0,0,0,3980,3982,1,0,0,0,3981,3979,1,0,0,0,3982,3984,
        5,286,0,0,3983,3985,5,417,0,0,3984,3983,1,0,0,0,3984,3985,1,0,0,
        0,3985,3986,1,0,0,0,3986,3987,3,796,398,0,3987,265,1,0,0,0,3988,
        3990,5,448,0,0,3989,3988,1,0,0,0,3989,3990,1,0,0,0,3990,3991,1,0,
        0,0,3991,3993,5,192,0,0,3992,3994,3,792,396,0,3993,3992,1,0,0,0,
        3993,3994,1,0,0,0,3994,3996,1,0,0,0,3995,3997,5,13,0,0,3996,3995,
        1,0,0,0,3996,3997,1,0,0,0,3997,3998,1,0,0,0,3998,3999,5,1213,0,0,
        3999,4004,3,792,396,0,4000,4001,5,1208,0,0,4001,4003,3,792,396,0,
        4002,4000,1,0,0,0,4003,4006,1,0,0,0,4004,4002,1,0,0,0,4004,4005,
        1,0,0,0,4005,4007,1,0,0,0,4006,4004,1,0,0,0,4007,4009,5,1214,0,0,
        4008,4010,3,574,287,0,4009,4008,1,0,0,0,4009,4010,1,0,0,0,4010,4012,
        1,0,0,0,4011,4013,3,572,286,0,4012,4011,1,0,0,0,4012,4013,1,0,0,
        0,4013,267,1,0,0,0,4014,4015,5,86,0,0,4015,4016,5,210,0,0,4016,4017,
        5,192,0,0,4017,4018,3,796,398,0,4018,4023,3,576,288,0,4019,4020,
        5,1208,0,0,4020,4022,3,576,288,0,4021,4019,1,0,0,0,4022,4025,1,0,
        0,0,4023,4021,1,0,0,0,4023,4024,1,0,0,0,4024,4026,1,0,0,0,4025,4023,
        1,0,0,0,4026,4027,5,20,0,0,4027,4038,3,270,135,0,4028,4035,3,332,
        166,0,4029,4031,5,1208,0,0,4030,4029,1,0,0,0,4030,4031,1,0,0,0,4031,
        4032,1,0,0,0,4032,4034,3,332,166,0,4033,4030,1,0,0,0,4034,4037,1,
        0,0,0,4035,4033,1,0,0,0,4035,4036,1,0,0,0,4036,4039,1,0,0,0,4037,
        4035,1,0,0,0,4038,4028,1,0,0,0,4038,4039,1,0,0,0,4039,269,1,0,0,
        0,4040,4091,7,34,0,0,4041,4046,3,272,136,0,4042,4043,5,1208,0,0,
        4043,4045,3,272,136,0,4044,4042,1,0,0,0,4045,4048,1,0,0,0,4046,4044,
        1,0,0,0,4046,4047,1,0,0,0,4047,4092,1,0,0,0,4048,4046,1,0,0,0,4049,
        4050,5,1213,0,0,4050,4055,3,272,136,0,4051,4052,5,1208,0,0,4052,
        4054,3,272,136,0,4053,4051,1,0,0,0,4054,4057,1,0,0,0,4055,4053,1,
        0,0,0,4055,4056,1,0,0,0,4056,4058,1,0,0,0,4057,4055,1,0,0,0,4058,
        4059,5,1214,0,0,4059,4060,5,1208,0,0,4060,4061,5,1213,0,0,4061,4066,
        3,272,136,0,4062,4063,5,1208,0,0,4063,4065,3,272,136,0,4064,4062,
        1,0,0,0,4065,4068,1,0,0,0,4066,4064,1,0,0,0,4066,4067,1,0,0,0,4067,
        4069,1,0,0,0,4068,4066,1,0,0,0,4069,4070,5,1214,0,0,4070,4092,1,
        0,0,0,4071,4073,7,35,0,0,4072,4071,1,0,0,0,4072,4073,1,0,0,0,4073,
        4074,1,0,0,0,4074,4075,5,1213,0,0,4075,4080,3,272,136,0,4076,4077,
        5,1208,0,0,4077,4079,3,272,136,0,4078,4076,1,0,0,0,4079,4082,1,0,
        0,0,4080,4078,1,0,0,0,4080,4081,1,0,0,0,4081,4083,1,0,0,0,4082,4080,
        1,0,0,0,4083,4089,5,1214,0,0,4084,4086,5,268,0,0,4085,4084,1,0,0,
        0,4085,4086,1,0,0,0,4086,4087,1,0,0,0,4087,4088,5,543,0,0,4088,4090,
        5,72,0,0,4089,4085,1,0,0,0,4089,4090,1,0,0,0,4090,4092,1,0,0,0,4091,
        4041,1,0,0,0,4091,4049,1,0,0,0,4091,4072,1,0,0,0,4092,4093,1,0,0,
        0,4093,4094,5,164,0,0,4094,4099,3,276,138,0,4095,4096,5,1208,0,0,
        4096,4098,3,276,138,0,4097,4095,1,0,0,0,4098,4101,1,0,0,0,4099,4097,
        1,0,0,0,4099,4100,1,0,0,0,4100,4103,1,0,0,0,4101,4099,1,0,0,0,4102,
        4104,3,956,478,0,4103,4102,1,0,0,0,4103,4104,1,0,0,0,4104,4105,1,
        0,0,0,4105,4106,9,0,0,0,4106,4107,5,174,0,0,4107,4108,5,42,0,0,4108,
        4109,3,280,140,0,4109,4110,5,291,0,0,4110,4111,5,42,0,0,4111,4112,
        3,280,140,0,4112,271,1,0,0,0,4113,4116,3,788,394,0,4114,4116,3,274,
        137,0,4115,4113,1,0,0,0,4115,4114,1,0,0,0,4116,273,1,0,0,0,4117,
        4136,3,1000,500,0,4118,4119,5,403,0,0,4119,4120,5,1213,0,0,4120,
        4121,3,1000,500,0,4121,4122,5,1214,0,0,4122,4136,1,0,0,0,4123,4124,
        7,36,0,0,4124,4125,5,1213,0,0,4125,4126,3,1000,500,0,4126,4127,5,
        1214,0,0,4127,4136,1,0,0,0,4128,4129,5,152,0,0,4129,4130,5,1213,
        0,0,4130,4131,7,37,0,0,4131,4132,5,164,0,0,4132,4133,3,1000,500,
        0,4133,4134,5,1214,0,0,4134,4136,1,0,0,0,4135,4117,1,0,0,0,4135,
        4118,1,0,0,0,4135,4123,1,0,0,0,4135,4128,1,0,0,0,4136,4141,1,0,0,
        0,4137,4139,5,20,0,0,4138,4137,1,0,0,0,4138,4139,1,0,0,0,4139,4140,
        1,0,0,0,4140,4142,3,812,406,0,4141,4138,1,0,0,0,4141,4142,1,0,0,
        0,4142,275,1,0,0,0,4143,4148,3,796,398,0,4144,4146,5,20,0,0,4145,
        4144,1,0,0,0,4145,4146,1,0,0,0,4146,4147,1,0,0,0,4147,4149,3,812,
        406,0,4148,4145,1,0,0,0,4148,4149,1,0,0,0,4149,4152,1,0,0,0,4150,
        4152,3,278,139,0,4151,4143,1,0,0,0,4151,4150,1,0,0,0,4152,277,1,
        0,0,0,4153,4154,6,139,-1,0,4154,4155,5,1213,0,0,4155,4156,3,278,
        139,0,4156,4157,5,1214,0,0,4157,4166,1,0,0,0,4158,4163,3,796,398,
        0,4159,4161,5,20,0,0,4160,4159,1,0,0,0,4160,4161,1,0,0,0,4161,4162,
        1,0,0,0,4162,4164,3,812,406,0,4163,4160,1,0,0,0,4163,4164,1,0,0,
        0,4164,4166,1,0,0,0,4165,4153,1,0,0,0,4165,4158,1,0,0,0,4166,4182,
        1,0,0,0,4167,4173,10,2,0,0,4168,4174,5,194,0,0,4169,4171,7,38,0,
        0,4170,4172,5,294,0,0,4171,4170,1,0,0,0,4171,4172,1,0,0,0,4172,4174,
        1,0,0,0,4173,4168,1,0,0,0,4173,4169,1,0,0,0,4173,4174,1,0,0,0,4174,
        4175,1,0,0,0,4175,4176,5,210,0,0,4176,4177,3,278,139,0,4177,4178,
        5,286,0,0,4178,4179,3,998,499,0,4179,4181,1,0,0,0,4180,4167,1,0,
        0,0,4181,4184,1,0,0,0,4182,4180,1,0,0,0,4182,4183,1,0,0,0,4183,279,
        1,0,0,0,4184,4182,1,0,0,0,4185,4190,3,1000,500,0,4186,4187,5,1208,
        0,0,4187,4189,3,1000,500,0,4188,4186,1,0,0,0,4189,4192,1,0,0,0,4190,
        4188,1,0,0,0,4190,4191,1,0,0,0,4191,281,1,0,0,0,4192,4190,1,0,0,
        0,4193,4194,5,86,0,0,4194,4195,5,311,0,0,4195,4205,3,810,405,0,4196,
        4197,5,20,0,0,4197,4202,3,284,142,0,4198,4199,5,1208,0,0,4199,4201,
        3,284,142,0,4200,4198,1,0,0,0,4201,4204,1,0,0,0,4202,4200,1,0,0,
        0,4202,4203,1,0,0,0,4203,4206,1,0,0,0,4204,4202,1,0,0,0,4205,4196,
        1,0,0,0,4205,4206,1,0,0,0,4206,283,1,0,0,0,4207,4208,5,5,0,0,4208,
        4218,5,1224,0,0,4209,4214,3,762,381,0,4210,4211,5,1208,0,0,4211,
        4213,3,762,381,0,4212,4210,1,0,0,0,4213,4216,1,0,0,0,4214,4212,1,
        0,0,0,4214,4215,1,0,0,0,4215,4219,1,0,0,0,4216,4214,1,0,0,0,4217,
        4219,5,274,0,0,4218,4209,1,0,0,0,4218,4217,1,0,0,0,4219,4300,1,0,
        0,0,4220,4300,3,584,292,0,4221,4222,5,111,0,0,4222,4223,5,102,0,
        0,4223,4224,5,1224,0,0,4224,4300,3,804,402,0,4225,4226,7,39,0,0,
        4226,4232,5,1224,0,0,4227,4229,3,1000,500,0,4228,4230,5,45,0,0,4229,
        4228,1,0,0,0,4229,4230,1,0,0,0,4230,4233,1,0,0,0,4231,4233,5,274,
        0,0,4232,4227,1,0,0,0,4232,4231,1,0,0,0,4233,4300,1,0,0,0,4234,4236,
        5,299,0,0,4235,4237,5,539,0,0,4236,4235,1,0,0,0,4236,4237,1,0,0,
        0,4237,4238,1,0,0,0,4238,4251,5,1224,0,0,4239,4240,5,1213,0,0,4240,
        4245,3,286,143,0,4241,4242,5,1208,0,0,4242,4244,3,286,143,0,4243,
        4241,1,0,0,0,4244,4247,1,0,0,0,4245,4243,1,0,0,0,4245,4246,1,0,0,
        0,4246,4248,1,0,0,0,4247,4245,1,0,0,0,4248,4249,5,1214,0,0,4249,
        4252,1,0,0,0,4250,4252,5,274,0,0,4251,4239,1,0,0,0,4251,4250,1,0,
        0,0,4252,4300,1,0,0,0,4253,4254,5,870,0,0,4254,4255,5,1224,0,0,4255,
        4262,3,762,381,0,4256,4258,5,1213,0,0,4257,4259,5,272,0,0,4258,4257,
        1,0,0,0,4258,4259,1,0,0,0,4259,4260,1,0,0,0,4260,4261,5,111,0,0,
        4261,4263,5,1214,0,0,4262,4256,1,0,0,0,4262,4263,1,0,0,0,4263,4300,
        1,0,0,0,4264,4265,5,697,0,0,4265,4266,5,870,0,0,4266,4267,5,460,
        0,0,4267,4268,5,1224,0,0,4268,4300,3,762,381,0,4269,4270,5,432,0,
        0,4270,4279,5,1213,0,0,4271,4276,3,420,210,0,4272,4273,5,1208,0,
        0,4273,4275,3,420,210,0,4274,4272,1,0,0,0,4275,4278,1,0,0,0,4276,
        4274,1,0,0,0,4276,4277,1,0,0,0,4277,4280,1,0,0,0,4278,4276,1,0,0,
        0,4279,4271,1,0,0,0,4279,4280,1,0,0,0,4280,4281,1,0,0,0,4281,4300,
        5,1214,0,0,4282,4283,5,595,0,0,4283,4284,5,311,0,0,4284,4287,5,1224,
        0,0,4285,4288,3,792,396,0,4286,4288,5,274,0,0,4287,4285,1,0,0,0,
        4287,4286,1,0,0,0,4288,4300,1,0,0,0,4289,4290,5,74,0,0,4290,4291,
        5,1224,0,0,4291,4296,3,422,211,0,4292,4293,5,1208,0,0,4293,4295,
        3,422,211,0,4294,4292,1,0,0,0,4295,4298,1,0,0,0,4296,4294,1,0,0,
        0,4296,4297,1,0,0,0,4297,4300,1,0,0,0,4298,4296,1,0,0,0,4299,4207,
        1,0,0,0,4299,4220,1,0,0,0,4299,4221,1,0,0,0,4299,4225,1,0,0,0,4299,
        4234,1,0,0,0,4299,4253,1,0,0,0,4299,4264,1,0,0,0,4299,4269,1,0,0,
        0,4299,4282,1,0,0,0,4299,4289,1,0,0,0,4300,285,1,0,0,0,4301,4302,
        5,663,0,0,4302,4305,5,1224,0,0,4303,4306,3,1000,500,0,4304,4306,
        5,274,0,0,4305,4303,1,0,0,0,4305,4304,1,0,0,0,4306,4356,1,0,0,0,
        4307,4308,5,771,0,0,4308,4311,5,1224,0,0,4309,4312,3,1000,500,0,
        4310,4312,5,274,0,0,4311,4309,1,0,0,0,4311,4310,1,0,0,0,4312,4356,
        1,0,0,0,4313,4314,5,758,0,0,4314,4317,5,1224,0,0,4315,4318,3,1000,
        500,0,4316,4318,5,274,0,0,4317,4315,1,0,0,0,4317,4316,1,0,0,0,4318,
        4356,1,0,0,0,4319,4320,5,634,0,0,4320,4323,5,1224,0,0,4321,4324,
        3,792,396,0,4322,4324,5,274,0,0,4323,4321,1,0,0,0,4323,4322,1,0,
        0,0,4324,4356,1,0,0,0,4325,4326,5,932,0,0,4326,4329,5,1224,0,0,4327,
        4330,3,792,396,0,4328,4330,5,274,0,0,4329,4327,1,0,0,0,4329,4328,
        1,0,0,0,4330,4356,1,0,0,0,4331,4332,5,760,0,0,4332,4335,5,1224,0,
        0,4333,4336,3,1000,500,0,4334,4336,5,274,0,0,4335,4333,1,0,0,0,4335,
        4334,1,0,0,0,4336,4356,1,0,0,0,4337,4338,5,744,0,0,4338,4341,5,1224,
        0,0,4339,4342,3,1000,500,0,4340,4342,5,274,0,0,4341,4339,1,0,0,0,
        4341,4340,1,0,0,0,4342,4356,1,0,0,0,4343,4344,5,890,0,0,4344,4347,
        5,1224,0,0,4345,4348,3,1000,500,0,4346,4348,5,274,0,0,4347,4345,
        1,0,0,0,4347,4346,1,0,0,0,4348,4356,1,0,0,0,4349,4350,5,886,0,0,
        4350,4353,5,1224,0,0,4351,4354,3,792,396,0,4352,4354,5,274,0,0,4353,
        4351,1,0,0,0,4353,4352,1,0,0,0,4354,4356,1,0,0,0,4355,4301,1,0,0,
        0,4355,4307,1,0,0,0,4355,4313,1,0,0,0,4355,4319,1,0,0,0,4355,4325,
        1,0,0,0,4355,4331,1,0,0,0,4355,4337,1,0,0,0,4355,4343,1,0,0,0,4355,
        4349,1,0,0,0,4356,287,1,0,0,0,4357,4358,5,86,0,0,4358,4359,5,160,
        0,0,4359,4361,5,917,0,0,4360,4362,3,1076,538,0,4361,4360,1,0,0,0,
        4361,4362,1,0,0,0,4362,4363,1,0,0,0,4363,4365,3,792,396,0,4364,4366,
        3,290,145,0,4365,4364,1,0,0,0,4365,4366,1,0,0,0,4366,4368,1,0,0,
        0,4367,4369,3,292,146,0,4368,4367,1,0,0,0,4368,4369,1,0,0,0,4369,
        4380,1,0,0,0,4370,4373,3,298,149,0,4371,4372,5,1208,0,0,4372,4374,
        3,300,150,0,4373,4371,1,0,0,0,4373,4374,1,0,0,0,4374,4381,1,0,0,
        0,4375,4378,3,300,150,0,4376,4377,5,1208,0,0,4377,4379,3,298,149,
        0,4378,4376,1,0,0,0,4378,4379,1,0,0,0,4379,4381,1,0,0,0,4380,4370,
        1,0,0,0,4380,4375,1,0,0,0,4380,4381,1,0,0,0,4381,289,1,0,0,0,4382,
        4383,5,151,0,0,4383,4385,5,910,0,0,4384,4386,7,18,0,0,4385,4384,
        1,0,0,0,4385,4386,1,0,0,0,4386,4387,1,0,0,0,4387,4388,5,1130,0,0,
        4388,4389,3,794,397,0,4389,291,1,0,0,0,4390,4392,5,457,0,0,4391,
        4393,3,294,147,0,4392,4391,1,0,0,0,4393,4394,1,0,0,0,4394,4392,1,
        0,0,0,4394,4395,1,0,0,0,4395,293,1,0,0,0,4396,4397,3,304,152,0,4397,
        4398,5,1213,0,0,4398,4399,3,1000,500,0,4399,4400,5,1214,0,0,4400,
        295,1,0,0,0,4401,4403,3,800,400,0,4402,4404,3,292,146,0,4403,4402,
        1,0,0,0,4403,4404,1,0,0,0,4404,297,1,0,0,0,4405,4406,5,122,0,0,4406,
        4407,5,699,0,0,4407,4408,3,302,151,0,4408,299,1,0,0,0,4409,4410,
        5,122,0,0,4410,4411,5,664,0,0,4411,4412,3,302,151,0,4412,301,1,0,
        0,0,4413,4414,5,474,0,0,4414,4415,3,296,148,0,4415,303,1,0,0,0,4416,
        4417,7,40,0,0,4417,305,1,0,0,0,4418,4419,5,86,0,0,4419,4420,5,178,
        0,0,4420,4421,5,192,0,0,4421,4426,3,796,398,0,4422,4423,5,1208,0,
        0,4423,4425,3,576,288,0,4424,4422,1,0,0,0,4425,4428,1,0,0,0,4426,
        4424,1,0,0,0,4426,4427,1,0,0,0,4427,4429,1,0,0,0,4428,4426,1,0,0,
        0,4429,4430,5,1213,0,0,4430,4435,3,792,396,0,4431,4432,5,1208,0,
        0,4432,4434,3,792,396,0,4433,4431,1,0,0,0,4434,4437,1,0,0,0,4435,
        4433,1,0,0,0,4435,4436,1,0,0,0,4436,4438,1,0,0,0,4437,4435,1,0,0,
        0,4438,4439,5,1214,0,0,4439,4440,5,286,0,0,4440,4451,3,796,398,0,
        4441,4442,5,42,0,0,4442,4443,5,1213,0,0,4443,4448,3,792,396,0,4444,
        4445,5,1208,0,0,4445,4447,3,792,396,0,4446,4444,1,0,0,0,4447,4450,
        1,0,0,0,4448,4446,1,0,0,0,4448,4449,1,0,0,0,4449,4452,1,0,0,0,4450,
        4448,1,0,0,0,4451,4441,1,0,0,0,4451,4452,1,0,0,0,4452,4472,1,0,0,
        0,4453,4454,5,291,0,0,4454,4470,5,42,0,0,4455,4471,5,460,0,0,4456,
        4458,7,41,0,0,4457,4456,1,0,0,0,4457,4458,1,0,0,0,4458,4459,1,0,
        0,0,4459,4460,5,1213,0,0,4460,4465,3,792,396,0,4461,4462,5,1208,
        0,0,4462,4464,3,792,396,0,4463,4461,1,0,0,0,4464,4467,1,0,0,0,4465,
        4463,1,0,0,0,4465,4466,1,0,0,0,4466,4468,1,0,0,0,4467,4465,1,0,0,
        0,4468,4469,5,1214,0,0,4469,4471,1,0,0,0,4470,4455,1,0,0,0,4470,
        4457,1,0,0,0,4471,4473,1,0,0,0,4472,4453,1,0,0,0,4472,4473,1,0,0,
        0,4473,307,1,0,0,0,4474,4476,5,86,0,0,4475,4477,5,151,0,0,4476,4475,
        1,0,0,0,4476,4477,1,0,0,0,4477,4478,1,0,0,0,4478,4479,5,357,0,0,
        4479,4480,3,808,404,0,4480,309,1,0,0,0,4481,4488,3,312,156,0,4482,
        4488,3,314,157,0,4483,4488,3,316,158,0,4484,4488,3,318,159,0,4485,
        4488,3,320,160,0,4486,4488,3,322,161,0,4487,4481,1,0,0,0,4487,4482,
        1,0,0,0,4487,4483,1,0,0,0,4487,4484,1,0,0,0,4487,4485,1,0,0,0,4487,
        4486,1,0,0,0,4488,311,1,0,0,0,4489,4491,5,86,0,0,4490,4492,3,324,
        162,0,4491,4490,1,0,0,0,4491,4492,1,0,0,0,4492,4493,1,0,0,0,4493,
        4496,5,406,0,0,4494,4496,5,90,0,0,4495,4489,1,0,0,0,4495,4494,1,
        0,0,0,4496,4497,1,0,0,0,4497,4502,3,796,398,0,4498,4499,5,1208,0,
        0,4499,4501,3,326,163,0,4500,4498,1,0,0,0,4501,4504,1,0,0,0,4502,
        4500,1,0,0,0,4502,4503,1,0,0,0,4503,4505,1,0,0,0,4504,4502,1,0,0,
        0,4505,4506,5,1213,0,0,4506,4511,3,328,164,0,4507,4508,5,1208,0,
        0,4508,4510,3,328,164,0,4509,4507,1,0,0,0,4510,4513,1,0,0,0,4511,
        4509,1,0,0,0,4511,4512,1,0,0,0,4512,4514,1,0,0,0,4513,4511,1,0,0,
        0,4514,4525,5,1214,0,0,4515,4522,3,332,166,0,4516,4518,5,1208,0,
        0,4517,4516,1,0,0,0,4517,4518,1,0,0,0,4518,4519,1,0,0,0,4519,4521,
        3,332,166,0,4520,4517,1,0,0,0,4521,4524,1,0,0,0,4522,4520,1,0,0,
        0,4522,4523,1,0,0,0,4523,4526,1,0,0,0,4524,4522,1,0,0,0,4525,4515,
        1,0,0,0,4525,4526,1,0,0,0,4526,4528,1,0,0,0,4527,4529,3,344,172,
        0,4528,4527,1,0,0,0,4528,4529,1,0,0,0,4529,313,1,0,0,0,4530,4532,
        5,86,0,0,4531,4533,3,324,162,0,4532,4531,1,0,0,0,4532,4533,1,0,0,
        0,4533,4534,1,0,0,0,4534,4537,5,406,0,0,4535,4537,5,90,0,0,4536,
        4530,1,0,0,0,4536,4535,1,0,0,0,4537,4538,1,0,0,0,4538,4543,3,796,
        398,0,4539,4540,5,1208,0,0,4540,4542,3,326,163,0,4541,4539,1,0,0,
        0,4542,4545,1,0,0,0,4543,4541,1,0,0,0,4543,4544,1,0,0,0,4544,4557,
        1,0,0,0,4545,4543,1,0,0,0,4546,4547,5,1213,0,0,4547,4552,3,330,165,
        0,4548,4549,5,1208,0,0,4549,4551,3,330,165,0,4550,4548,1,0,0,0,4551,
        4554,1,0,0,0,4552,4550,1,0,0,0,4552,4553,1,0,0,0,4553,4555,1,0,0,
        0,4554,4552,1,0,0,0,4555,4556,5,1214,0,0,4556,4558,1,0,0,0,4557,
        4546,1,0,0,0,4557,4558,1,0,0,0,4558,4559,1,0,0,0,4559,4568,5,20,
        0,0,4560,4569,3,796,398,0,4561,4563,5,1213,0,0,4562,4564,3,1212,
        606,0,4563,4562,1,0,0,0,4563,4564,1,0,0,0,4564,4565,1,0,0,0,4565,
        4566,3,838,419,0,4566,4567,5,1214,0,0,4567,4569,1,0,0,0,4568,4560,
        1,0,0,0,4568,4561,1,0,0,0,4569,4570,1,0,0,0,4570,4572,5,474,0,0,
        4571,4573,5,268,0,0,4572,4571,1,0,0,0,4572,4573,1,0,0,0,4573,4574,
        1,0,0,0,4574,4580,5,606,0,0,4575,4577,5,16,0,0,4576,4578,5,268,0,
        0,4577,4576,1,0,0,0,4577,4578,1,0,0,0,4578,4579,1,0,0,0,4579,4581,
        7,14,0,0,4580,4575,1,0,0,0,4580,4581,1,0,0,0,4581,4592,1,0,0,0,4582,
        4589,3,332,166,0,4583,4585,5,1208,0,0,4584,4583,1,0,0,0,4584,4585,
        1,0,0,0,4585,4586,1,0,0,0,4586,4588,3,332,166,0,4587,4584,1,0,0,
        0,4588,4591,1,0,0,0,4589,4587,1,0,0,0,4589,4590,1,0,0,0,4590,4593,
        1,0,0,0,4591,4589,1,0,0,0,4592,4582,1,0,0,0,4592,4593,1,0,0,0,4593,
        4595,1,0,0,0,4594,4596,3,344,172,0,4595,4594,1,0,0,0,4595,4596,1,
        0,0,0,4596,315,1,0,0,0,4597,4599,5,86,0,0,4598,4600,3,324,162,0,
        4599,4598,1,0,0,0,4599,4600,1,0,0,0,4600,4601,1,0,0,0,4601,4604,
        5,406,0,0,4602,4604,5,90,0,0,4603,4597,1,0,0,0,4603,4602,1,0,0,0,
        4604,4605,1,0,0,0,4605,4606,3,796,398,0,4606,4607,5,1208,0,0,4607,
        4612,5,317,0,0,4608,4609,5,1208,0,0,4609,4611,3,326,163,0,4610,4608,
        1,0,0,0,4611,4614,1,0,0,0,4612,4610,1,0,0,0,4612,4613,1,0,0,0,4613,
        4615,1,0,0,0,4614,4612,1,0,0,0,4615,4616,5,1213,0,0,4616,4621,3,
        334,167,0,4617,4618,5,1208,0,0,4618,4620,3,328,164,0,4619,4617,1,
        0,0,0,4620,4623,1,0,0,0,4621,4619,1,0,0,0,4621,4622,1,0,0,0,4622,
        4628,1,0,0,0,4623,4621,1,0,0,0,4624,4625,5,1208,0,0,4625,4627,3,
        360,180,0,4626,4624,1,0,0,0,4627,4630,1,0,0,0,4628,4626,1,0,0,0,
        4628,4629,1,0,0,0,4629,4631,1,0,0,0,4630,4628,1,0,0,0,4631,4642,
        5,1214,0,0,4632,4639,3,332,166,0,4633,4635,5,1208,0,0,4634,4633,
        1,0,0,0,4634,4635,1,0,0,0,4635,4636,1,0,0,0,4636,4638,3,332,166,
        0,4637,4634,1,0,0,0,4638,4641,1,0,0,0,4639,4637,1,0,0,0,4639,4640,
        1,0,0,0,4640,4643,1,0,0,0,4641,4639,1,0,0,0,4642,4632,1,0,0,0,4642,
        4643,1,0,0,0,4643,317,1,0,0,0,4644,4646,5,86,0,0,4645,4647,7,42,
        0,0,4646,4645,1,0,0,0,4646,4647,1,0,0,0,4647,4648,1,0,0,0,4648,4649,
        5,687,0,0,4649,4650,5,417,0,0,4650,4651,5,428,0,0,4651,4652,5,406,
        0,0,4652,4657,3,796,398,0,4653,4654,5,1208,0,0,4654,4656,3,326,163,
        0,4655,4653,1,0,0,0,4656,4659,1,0,0,0,4657,4655,1,0,0,0,4657,4658,
        1,0,0,0,4658,4660,1,0,0,0,4659,4657,1,0,0,0,4660,4661,5,1213,0,0,
        4661,4662,5,1127,0,0,4662,4664,5,43,0,0,4663,4665,3,726,363,0,4664,
        4663,1,0,0,0,4664,4665,1,0,0,0,4665,4666,1,0,0,0,4666,4667,5,1208,
        0,0,4667,4668,5,914,0,0,4668,4673,5,202,0,0,4669,4670,5,1208,0,0,
        4670,4672,3,328,164,0,4671,4669,1,0,0,0,4672,4675,1,0,0,0,4673,4671,
        1,0,0,0,4673,4674,1,0,0,0,4674,4676,1,0,0,0,4675,4673,1,0,0,0,4676,
        4678,5,1214,0,0,4677,4679,3,344,172,0,4678,4677,1,0,0,0,4678,4679,
        1,0,0,0,4679,319,1,0,0,0,4680,4682,5,86,0,0,4681,4683,5,261,0,0,
        4682,4681,1,0,0,0,4682,4683,1,0,0,0,4683,4684,1,0,0,0,4684,4685,
        5,160,0,0,4685,4686,5,406,0,0,4686,4691,3,796,398,0,4687,4688,5,
        1208,0,0,4688,4690,3,326,163,0,4689,4687,1,0,0,0,4690,4693,1,0,0,
        0,4691,4689,1,0,0,0,4691,4692,1,0,0,0,4692,4696,1,0,0,0,4693,4691,
        1,0,0,0,4694,4695,5,1208,0,0,4695,4697,3,336,168,0,4696,4694,1,0,
        0,0,4696,4697,1,0,0,0,4697,4714,1,0,0,0,4698,4699,5,1213,0,0,4699,
        4700,3,338,169,0,4700,4710,5,1208,0,0,4701,4711,3,340,170,0,4702,
        4707,3,328,164,0,4703,4704,5,1208,0,0,4704,4706,3,328,164,0,4705,
        4703,1,0,0,0,4706,4709,1,0,0,0,4707,4705,1,0,0,0,4707,4708,1,0,0,
        0,4708,4711,1,0,0,0,4709,4707,1,0,0,0,4710,4701,1,0,0,0,4710,4702,
        1,0,0,0,4711,4712,1,0,0,0,4712,4713,5,1214,0,0,4713,4715,1,0,0,0,
        4714,4698,1,0,0,0,4714,4715,1,0,0,0,4715,4716,1,0,0,0,4716,4717,
        5,457,0,0,4717,4718,5,1213,0,0,4718,4722,3,944,472,0,4719,4721,3,
        342,171,0,4720,4719,1,0,0,0,4721,4724,1,0,0,0,4722,4720,1,0,0,0,
        4722,4723,1,0,0,0,4723,4725,1,0,0,0,4724,4722,1,0,0,0,4725,4732,
        5,1214,0,0,4726,4728,5,1208,0,0,4727,4726,1,0,0,0,4727,4728,1,0,
        0,0,4728,4729,1,0,0,0,4729,4730,5,268,0,0,4730,4731,5,308,0,0,4731,
        4733,5,192,0,0,4732,4727,1,0,0,0,4732,4733,1,0,0,0,4733,4740,1,0,
        0,0,4734,4736,5,1208,0,0,4735,4734,1,0,0,0,4735,4736,1,0,0,0,4736,
        4737,1,0,0,0,4737,4738,5,840,0,0,4738,4739,5,42,0,0,4739,4741,5,
        69,0,0,4740,4735,1,0,0,0,4740,4741,1,0,0,0,4741,321,1,0,0,0,4742,
        4743,5,86,0,0,4743,4744,5,137,0,0,4744,4746,5,406,0,0,4745,4747,
        3,796,398,0,4746,4745,1,0,0,0,4746,4747,1,0,0,0,4747,4748,1,0,0,
        0,4748,4749,5,159,0,0,4749,4752,3,796,398,0,4750,4751,5,268,0,0,
        4751,4753,5,1138,0,0,4752,4750,1,0,0,0,4752,4753,1,0,0,0,4753,323,
        1,0,0,0,4754,4758,7,42,0,0,4755,4756,5,687,0,0,4756,4759,5,417,0,
        0,4757,4759,5,469,0,0,4758,4755,1,0,0,0,4758,4757,1,0,0,0,4759,4773,
        1,0,0,0,4760,4761,5,687,0,0,4761,4764,5,417,0,0,4762,4764,5,469,
        0,0,4763,4760,1,0,0,0,4763,4762,1,0,0,0,4764,4765,1,0,0,0,4765,4773,
        7,42,0,0,4766,4773,7,42,0,0,4767,4768,5,687,0,0,4768,4771,5,417,
        0,0,4769,4771,5,469,0,0,4770,4767,1,0,0,0,4770,4769,1,0,0,0,4771,
        4773,1,0,0,0,4772,4754,1,0,0,0,4772,4763,1,0,0,0,4772,4766,1,0,0,
        0,4772,4770,1,0,0,0,4773,325,1,0,0,0,4774,4801,3,578,289,0,4775,
        4801,3,586,293,0,4776,4777,5,474,0,0,4777,4778,5,211,0,0,4778,4779,
        5,406,0,0,4779,4780,5,1224,0,0,4780,4801,3,796,398,0,4781,4783,5,
        268,0,0,4782,4781,1,0,0,0,4782,4783,1,0,0,0,4783,4784,1,0,0,0,4784,
        4801,5,228,0,0,4785,4801,3,588,294,0,4786,4801,3,590,295,0,4787,
        4788,5,571,0,0,4788,4789,5,1224,0,0,4789,4801,7,5,0,0,4790,4791,
        5,163,0,0,4791,4792,5,1224,0,0,4792,4794,3,768,384,0,4793,4795,5,
        300,0,0,4794,4793,1,0,0,0,4794,4795,1,0,0,0,4795,4801,1,0,0,0,4796,
        4801,3,346,173,0,4797,4801,3,348,174,0,4798,4801,3,350,175,0,4799,
        4801,3,352,176,0,4800,4774,1,0,0,0,4800,4775,1,0,0,0,4800,4776,1,
        0,0,0,4800,4782,1,0,0,0,4800,4785,1,0,0,0,4800,4786,1,0,0,0,4800,
        4787,1,0,0,0,4800,4790,1,0,0,0,4800,4796,1,0,0,0,4800,4797,1,0,0,
        0,4800,4798,1,0,0,0,4800,4799,1,0,0,0,4801,327,1,0,0,0,4802,4806,
        3,792,396,0,4803,4805,3,354,177,0,4804,4803,1,0,0,0,4805,4808,1,
        0,0,0,4806,4804,1,0,0,0,4806,4807,1,0,0,0,4807,4809,1,0,0,0,4808,
        4806,1,0,0,0,4809,4813,3,692,346,0,4810,4812,3,354,177,0,4811,4810,
        1,0,0,0,4812,4815,1,0,0,0,4813,4811,1,0,0,0,4813,4814,1,0,0,0,4814,
        4852,1,0,0,0,4815,4813,1,0,0,0,4816,4817,7,35,0,0,4817,4818,5,1213,
        0,0,4818,4822,3,792,396,0,4819,4821,3,354,177,0,4820,4819,1,0,0,
        0,4821,4824,1,0,0,0,4822,4820,1,0,0,0,4822,4823,1,0,0,0,4823,4825,
        1,0,0,0,4824,4822,1,0,0,0,4825,4829,3,692,346,0,4826,4828,3,354,
        177,0,4827,4826,1,0,0,0,4828,4831,1,0,0,0,4829,4827,1,0,0,0,4829,
        4830,1,0,0,0,4830,4832,1,0,0,0,4831,4829,1,0,0,0,4832,4838,5,1214,
        0,0,4833,4835,5,268,0,0,4834,4833,1,0,0,0,4834,4835,1,0,0,0,4835,
        4836,1,0,0,0,4836,4837,5,543,0,0,4837,4839,5,72,0,0,4838,4834,1,
        0,0,0,4838,4839,1,0,0,0,4839,4852,1,0,0,0,4840,4841,5,853,0,0,4841,
        4842,5,159,0,0,4842,4843,3,792,396,0,4843,4844,5,1213,0,0,4844,4845,
        3,792,396,0,4845,4846,5,1208,0,0,4846,4847,3,792,396,0,4847,4848,
        5,1214,0,0,4848,4852,1,0,0,0,4849,4852,3,368,184,0,4850,4852,3,370,
        185,0,4851,4802,1,0,0,0,4851,4816,1,0,0,0,4851,4840,1,0,0,0,4851,
        4849,1,0,0,0,4851,4850,1,0,0,0,4852,329,1,0,0,0,4853,4857,3,792,
        396,0,4854,4856,3,354,177,0,4855,4854,1,0,0,0,4856,4859,1,0,0,0,
        4857,4855,1,0,0,0,4857,4858,1,0,0,0,4858,4879,1,0,0,0,4859,4857,
        1,0,0,0,4860,4861,7,35,0,0,4861,4862,5,1213,0,0,4862,4866,3,792,
        396,0,4863,4865,3,354,177,0,4864,4863,1,0,0,0,4865,4868,1,0,0,0,
        4866,4864,1,0,0,0,4866,4867,1,0,0,0,4867,4869,1,0,0,0,4868,4866,
        1,0,0,0,4869,4875,5,1214,0,0,4870,4872,5,268,0,0,4871,4870,1,0,0,
        0,4871,4872,1,0,0,0,4872,4873,1,0,0,0,4873,4874,5,543,0,0,4874,4876,
        5,72,0,0,4875,4871,1,0,0,0,4875,4876,1,0,0,0,4876,4879,1,0,0,0,4877,
        4879,3,370,185,0,4878,4853,1,0,0,0,4878,4860,1,0,0,0,4878,4877,1,
        0,0,0,4879,331,1,0,0,0,4880,4882,5,448,0,0,4881,4880,1,0,0,0,4881,
        4882,1,0,0,0,4882,4884,1,0,0,0,4883,4885,5,308,0,0,4884,4883,1,0,
        0,0,4884,4885,1,0,0,0,4885,4886,1,0,0,0,4886,4888,5,192,0,0,4887,
        4889,3,792,396,0,4888,4887,1,0,0,0,4888,4889,1,0,0,0,4889,4890,1,
        0,0,0,4890,4891,5,1213,0,0,4891,4896,3,792,396,0,4892,4893,5,1208,
        0,0,4893,4895,3,792,396,0,4894,4892,1,0,0,0,4895,4898,1,0,0,0,4896,
        4894,1,0,0,0,4896,4897,1,0,0,0,4897,4899,1,0,0,0,4898,4896,1,0,0,
        0,4899,4900,5,1214,0,0,4900,4982,1,0,0,0,4901,4902,5,268,0,0,4902,
        4903,5,308,0,0,4903,4982,5,192,0,0,4904,4905,5,308,0,0,4905,4907,
        5,15,0,0,4906,4908,5,192,0,0,4907,4906,1,0,0,0,4907,4908,1,0,0,0,
        4908,4910,1,0,0,0,4909,4911,3,792,396,0,4910,4909,1,0,0,0,4910,4911,
        1,0,0,0,4911,4912,1,0,0,0,4912,4913,5,1213,0,0,4913,4918,3,792,396,
        0,4914,4915,5,1208,0,0,4915,4917,3,792,396,0,4916,4914,1,0,0,0,4917,
        4920,1,0,0,0,4918,4916,1,0,0,0,4918,4919,1,0,0,0,4919,4921,1,0,0,
        0,4920,4918,1,0,0,0,4921,4922,5,1214,0,0,4922,4982,1,0,0,0,4923,
        4924,5,840,0,0,4924,4937,5,42,0,0,4925,4938,3,374,187,0,4926,4927,
        5,1213,0,0,4927,4932,3,374,187,0,4928,4929,5,1208,0,0,4929,4931,
        3,374,187,0,4930,4928,1,0,0,0,4931,4934,1,0,0,0,4932,4930,1,0,0,
        0,4932,4933,1,0,0,0,4933,4935,1,0,0,0,4934,4932,1,0,0,0,4935,4936,
        5,1214,0,0,4936,4938,1,0,0,0,4937,4925,1,0,0,0,4937,4926,1,0,0,0,
        4938,4982,1,0,0,0,4939,4940,5,448,0,0,4940,4942,5,192,0,0,4941,4943,
        3,792,396,0,4942,4941,1,0,0,0,4942,4943,1,0,0,0,4943,4955,1,0,0,
        0,4944,4945,5,1213,0,0,4945,4950,3,792,396,0,4946,4947,5,1208,0,
        0,4947,4949,3,792,396,0,4948,4946,1,0,0,0,4949,4952,1,0,0,0,4950,
        4948,1,0,0,0,4950,4951,1,0,0,0,4951,4953,1,0,0,0,4952,4950,1,0,0,
        0,4953,4954,5,1214,0,0,4954,4956,1,0,0,0,4955,4944,1,0,0,0,4955,
        4956,1,0,0,0,4956,4958,1,0,0,0,4957,4959,3,572,286,0,4958,4957,1,
        0,0,0,4958,4959,1,0,0,0,4959,4982,1,0,0,0,4960,4962,5,192,0,0,4961,
        4963,3,792,396,0,4962,4961,1,0,0,0,4962,4963,1,0,0,0,4963,4964,1,
        0,0,0,4964,4965,5,13,0,0,4965,4966,5,1213,0,0,4966,4971,3,792,396,
        0,4967,4968,5,1208,0,0,4968,4970,3,792,396,0,4969,4967,1,0,0,0,4970,
        4973,1,0,0,0,4971,4969,1,0,0,0,4971,4972,1,0,0,0,4972,4974,1,0,0,
        0,4973,4971,1,0,0,0,4974,4976,5,1214,0,0,4975,4977,3,574,287,0,4976,
        4975,1,0,0,0,4976,4977,1,0,0,0,4977,4979,1,0,0,0,4978,4980,3,572,
        286,0,4979,4978,1,0,0,0,4979,4980,1,0,0,0,4980,4982,1,0,0,0,4981,
        4881,1,0,0,0,4981,4901,1,0,0,0,4981,4904,1,0,0,0,4981,4923,1,0,0,
        0,4981,4939,1,0,0,0,4981,4960,1,0,0,0,4982,333,1,0,0,0,4983,4984,
        3,788,394,0,4984,4986,5,422,0,0,4985,4987,3,726,363,0,4986,4985,
        1,0,0,0,4986,4987,1,0,0,0,4987,4989,1,0,0,0,4988,4990,3,756,378,
        0,4989,4988,1,0,0,0,4989,4990,1,0,0,0,4990,4991,1,0,0,0,4991,4992,
        5,272,0,0,4992,4993,5,274,0,0,4993,4994,5,111,0,0,4994,4996,5,97,
        0,0,4995,4997,3,726,363,0,4996,4995,1,0,0,0,4996,4997,1,0,0,0,4997,
        335,1,0,0,0,4998,4999,5,151,0,0,4999,5002,5,910,0,0,5000,5001,7,
        18,0,0,5001,5003,5,1130,0,0,5002,5000,1,0,0,0,5002,5003,1,0,0,0,
        5003,5004,1,0,0,0,5004,5005,3,794,397,0,5005,337,1,0,0,0,5006,5007,
        5,1128,0,0,5007,5008,5,464,0,0,5008,5009,3,726,363,0,5009,5010,5,
        55,0,0,5010,5011,5,372,0,0,5011,5012,5,1015,0,0,5012,5013,5,49,0,
        0,5013,339,1,0,0,0,5014,5032,5,1129,0,0,5015,5016,5,720,0,0,5016,
        5017,3,726,363,0,5017,5018,3,746,373,0,5018,5019,5,55,0,0,5019,5020,
        5,372,0,0,5020,5021,7,43,0,0,5021,5033,1,0,0,0,5022,5023,5,607,0,
        0,5023,5024,3,726,363,0,5024,5025,3,746,373,0,5025,5026,5,941,0,
        0,5026,5027,5,161,0,0,5027,5028,5,1073,0,0,5028,5029,5,55,0,0,5029,
        5030,5,372,0,0,5030,5031,7,43,0,0,5031,5033,1,0,0,0,5032,5015,1,
        0,0,0,5032,5022,1,0,0,0,5033,341,1,0,0,0,5034,5035,5,1131,0,0,5035,
        5036,5,1213,0,0,5036,5037,5,1203,0,0,5037,5063,5,1214,0,0,5038,5039,
        5,1132,0,0,5039,5040,5,1213,0,0,5040,5041,5,1203,0,0,5041,5063,5,
        1214,0,0,5042,5043,5,1133,0,0,5043,5044,5,1213,0,0,5044,5045,5,1203,
        0,0,5045,5063,5,1214,0,0,5046,5047,5,1134,0,0,5047,5048,5,1213,0,
        0,5048,5049,5,1203,0,0,5049,5063,5,1214,0,0,5050,5051,5,1135,0,0,
        5051,5052,5,1213,0,0,5052,5053,5,1203,0,0,5053,5063,5,1214,0,0,5054,
        5055,5,1136,0,0,5055,5056,5,1213,0,0,5056,5057,5,1203,0,0,5057,5063,
        5,1214,0,0,5058,5059,5,1137,0,0,5059,5060,5,1213,0,0,5060,5061,5,
        1203,0,0,5061,5063,5,1214,0,0,5062,5034,1,0,0,0,5062,5038,1,0,0,
        0,5062,5042,1,0,0,0,5062,5046,1,0,0,0,5062,5050,1,0,0,0,5062,5054,
        1,0,0,0,5062,5058,1,0,0,0,5063,343,1,0,0,0,5064,5065,5,286,0,0,5065,
        5066,5,71,0,0,5066,5067,7,4,0,0,5067,5068,5,364,0,0,5068,345,1,0,
        0,0,5069,5070,5,111,0,0,5070,5080,5,767,0,0,5071,5072,5,767,0,0,
        5072,5073,5,1224,0,0,5073,5075,3,768,384,0,5074,5076,5,300,0,0,5075,
        5074,1,0,0,0,5075,5076,1,0,0,0,5076,5080,1,0,0,0,5077,5078,5,268,
        0,0,5078,5080,5,767,0,0,5079,5069,1,0,0,0,5079,5071,1,0,0,0,5079,
        5077,1,0,0,0,5080,347,1,0,0,0,5081,5082,5,103,0,0,5082,5089,5,1224,
        0,0,5083,5085,3,768,384,0,5084,5086,7,44,0,0,5085,5084,1,0,0,0,5085,
        5086,1,0,0,0,5086,5090,1,0,0,0,5087,5088,7,45,0,0,5088,5090,5,103,
        0,0,5089,5083,1,0,0,0,5089,5087,1,0,0,0,5090,349,1,0,0,0,5091,5092,
        5,551,0,0,5092,5093,5,1224,0,0,5093,5098,7,46,0,0,5094,5095,5,1208,
        0,0,5095,5096,5,552,0,0,5096,5097,5,1224,0,0,5097,5099,7,47,0,0,
        5098,5094,1,0,0,0,5098,5099,1,0,0,0,5099,5107,1,0,0,0,5100,5101,
        5,1208,0,0,5101,5102,5,553,0,0,5102,5105,5,1224,0,0,5103,5106,3,
        768,384,0,5104,5106,5,111,0,0,5105,5103,1,0,0,0,5105,5104,1,0,0,
        0,5106,5108,1,0,0,0,5107,5100,1,0,0,0,5107,5108,1,0,0,0,5108,351,
        1,0,0,0,5109,5112,3,680,340,0,5110,5111,5,159,0,0,5111,5113,7,9,
        0,0,5112,5110,1,0,0,0,5112,5113,1,0,0,0,5113,353,1,0,0,0,5114,5125,
        3,734,367,0,5115,5125,3,736,368,0,5116,5125,3,738,369,0,5117,5125,
        3,740,370,0,5118,5125,3,716,358,0,5119,5125,3,732,366,0,5120,5125,
        3,356,178,0,5121,5125,3,360,180,0,5122,5125,3,362,181,0,5123,5125,
        3,364,182,0,5124,5114,1,0,0,0,5124,5115,1,0,0,0,5124,5116,1,0,0,
        0,5124,5117,1,0,0,0,5124,5118,1,0,0,0,5124,5119,1,0,0,0,5124,5120,
        1,0,0,0,5124,5121,1,0,0,0,5124,5122,1,0,0,0,5124,5123,1,0,0,0,5125,
        355,1,0,0,0,5126,5127,5,268,0,0,5127,5151,5,72,0,0,5128,5151,5,72,
        0,0,5129,5130,5,72,0,0,5130,5151,3,358,179,0,5131,5132,5,72,0,0,
        5132,5133,5,1213,0,0,5133,5138,3,358,179,0,5134,5135,5,1208,0,0,
        5135,5137,3,358,179,0,5136,5134,1,0,0,0,5137,5140,1,0,0,0,5138,5136,
        1,0,0,0,5138,5139,1,0,0,0,5139,5141,1,0,0,0,5140,5138,1,0,0,0,5141,
        5142,5,1214,0,0,5142,5151,1,0,0,0,5143,5144,5,72,0,0,5144,5145,5,
        457,0,0,5145,5146,3,796,398,0,5146,5147,5,623,0,0,5147,5148,5,457,
        0,0,5148,5149,3,796,398,0,5149,5151,1,0,0,0,5150,5126,1,0,0,0,5150,
        5128,1,0,0,0,5150,5129,1,0,0,0,5150,5131,1,0,0,0,5150,5143,1,0,0,
        0,5151,357,1,0,0,0,5152,5153,5,1222,0,0,5153,5159,3,768,384,0,5154,
        5155,5,1222,0,0,5155,5159,3,772,386,0,5156,5159,3,758,379,0,5157,
        5159,5,274,0,0,5158,5152,1,0,0,0,5158,5154,1,0,0,0,5158,5156,1,0,
        0,0,5158,5157,1,0,0,0,5159,359,1,0,0,0,5160,5161,5,74,0,0,5161,5163,
        3,792,396,0,5162,5160,1,0,0,0,5162,5163,1,0,0,0,5163,5183,1,0,0,
        0,5164,5184,5,448,0,0,5165,5166,5,308,0,0,5166,5184,5,212,0,0,5167,
        5168,5,59,0,0,5168,5169,5,1213,0,0,5169,5170,3,998,499,0,5170,5171,
        5,1214,0,0,5171,5184,1,0,0,0,5172,5184,3,372,186,0,5173,5178,3,792,
        396,0,5174,5175,5,1208,0,0,5175,5177,3,792,396,0,5176,5174,1,0,0,
        0,5177,5180,1,0,0,0,5178,5176,1,0,0,0,5178,5179,1,0,0,0,5179,5181,
        1,0,0,0,5180,5178,1,0,0,0,5181,5182,5,74,0,0,5182,5184,1,0,0,0,5183,
        5164,1,0,0,0,5183,5165,1,0,0,0,5183,5167,1,0,0,0,5183,5172,1,0,0,
        0,5183,5173,1,0,0,0,5184,361,1,0,0,0,5185,5187,5,272,0,0,5186,5185,
        1,0,0,0,5186,5187,1,0,0,0,5187,5188,1,0,0,0,5188,5189,5,543,0,0,
        5189,5190,5,69,0,0,5190,363,1,0,0,0,5191,5195,5,169,0,0,5192,5196,
        5,502,0,0,5193,5194,5,42,0,0,5194,5196,5,111,0,0,5195,5192,1,0,0,
        0,5195,5193,1,0,0,0,5196,5197,1,0,0,0,5197,5198,5,20,0,0,5198,5199,
        5,187,0,0,5199,5218,5,1213,0,0,5200,5201,5,392,0,0,5201,5202,5,474,
        0,0,5202,5219,3,366,183,0,5203,5204,5,702,0,0,5204,5205,5,42,0,0,
        5205,5219,3,366,183,0,5206,5207,5,772,0,0,5207,5219,3,366,183,0,
        5208,5209,5,268,0,0,5209,5219,5,772,0,0,5210,5211,5,761,0,0,5211,
        5219,3,366,183,0,5212,5213,5,268,0,0,5213,5219,5,761,0,0,5214,5216,
        5,268,0,0,5215,5214,1,0,0,0,5215,5216,1,0,0,0,5216,5217,1,0,0,0,
        5217,5219,5,101,0,0,5218,5200,1,0,0,0,5218,5203,1,0,0,0,5218,5206,
        1,0,0,0,5218,5208,1,0,0,0,5218,5210,1,0,0,0,5218,5212,1,0,0,0,5218,
        5215,1,0,0,0,5219,5220,1,0,0,0,5220,5218,1,0,0,0,5220,5221,1,0,0,
        0,5221,5222,1,0,0,0,5222,5223,5,1214,0,0,5223,365,1,0,0,0,5224,5226,
        7,1,0,0,5225,5224,1,0,0,0,5225,5226,1,0,0,0,5226,5227,1,0,0,0,5227,
        5228,3,768,384,0,5228,367,1,0,0,0,5229,5243,5,271,0,0,5230,5231,
        5,13,0,0,5231,5232,5,41,0,0,5232,5233,5,1213,0,0,5233,5238,3,792,
        396,0,5234,5235,5,1208,0,0,5235,5237,3,792,396,0,5236,5234,1,0,0,
        0,5237,5240,1,0,0,0,5238,5236,1,0,0,0,5238,5239,1,0,0,0,5239,5241,
        1,0,0,0,5240,5238,1,0,0,0,5241,5242,5,1214,0,0,5242,5244,1,0,0,0,
        5243,5230,1,0,0,0,5243,5244,1,0,0,0,5244,5245,1,0,0,0,5245,5246,
        5,286,0,0,5246,5258,3,792,396,0,5247,5256,5,286,0,0,5248,5249,5,
        765,0,0,5249,5250,5,290,0,0,5250,5257,5,296,0,0,5251,5254,5,296,
        0,0,5252,5253,5,290,0,0,5253,5255,5,765,0,0,5254,5252,1,0,0,0,5254,
        5255,1,0,0,0,5255,5257,1,0,0,0,5256,5248,1,0,0,0,5256,5251,1,0,0,
        0,5257,5259,1,0,0,0,5258,5247,1,0,0,0,5258,5259,1,0,0,0,5259,369,
        1,0,0,0,5260,5261,5,74,0,0,5261,5263,3,792,396,0,5262,5260,1,0,0,
        0,5262,5263,1,0,0,0,5263,5299,1,0,0,0,5264,5268,5,448,0,0,5265,5266,
        5,308,0,0,5266,5268,5,212,0,0,5267,5264,1,0,0,0,5267,5265,1,0,0,
        0,5268,5269,1,0,0,0,5269,5270,5,1213,0,0,5270,5275,3,792,396,0,5271,
        5272,5,1208,0,0,5272,5274,3,792,396,0,5273,5271,1,0,0,0,5274,5277,
        1,0,0,0,5275,5273,1,0,0,0,5275,5276,1,0,0,0,5276,5278,1,0,0,0,5277,
        5275,1,0,0,0,5278,5279,5,1214,0,0,5279,5300,1,0,0,0,5280,5281,5,
        59,0,0,5281,5282,5,1213,0,0,5282,5283,3,998,499,0,5283,5284,5,1214,
        0,0,5284,5300,1,0,0,0,5285,5286,5,160,0,0,5286,5287,5,212,0,0,5287,
        5288,5,1213,0,0,5288,5293,3,792,396,0,5289,5290,5,1208,0,0,5290,
        5292,3,792,396,0,5291,5289,1,0,0,0,5292,5295,1,0,0,0,5293,5291,1,
        0,0,0,5293,5294,1,0,0,0,5294,5296,1,0,0,0,5295,5293,1,0,0,0,5296,
        5297,5,1214,0,0,5297,5298,3,372,186,0,5298,5300,1,0,0,0,5299,5267,
        1,0,0,0,5299,5280,1,0,0,0,5299,5285,1,0,0,0,5300,371,1,0,0,0,5301,
        5308,5,325,0,0,5302,5304,5,474,0,0,5303,5305,5,268,0,0,5304,5303,
        1,0,0,0,5304,5305,1,0,0,0,5305,5306,1,0,0,0,5306,5307,5,59,0,0,5307,
        5309,5,289,0,0,5308,5302,1,0,0,0,5308,5309,1,0,0,0,5309,5310,1,0,
        0,0,5310,5322,3,796,398,0,5311,5312,5,1213,0,0,5312,5317,3,792,396,
        0,5313,5314,5,1208,0,0,5314,5316,3,792,396,0,5315,5313,1,0,0,0,5316,
        5319,1,0,0,0,5317,5315,1,0,0,0,5317,5318,1,0,0,0,5318,5320,1,0,0,
        0,5319,5317,1,0,0,0,5320,5321,5,1214,0,0,5321,5323,1,0,0,0,5322,
        5311,1,0,0,0,5322,5323,1,0,0,0,5323,373,1,0,0,0,5324,5354,3,1068,
        534,0,5325,5331,5,69,0,0,5326,5328,5,268,0,0,5327,5326,1,0,0,0,5327,
        5328,1,0,0,0,5328,5329,1,0,0,0,5329,5330,5,543,0,0,5330,5332,5,72,
        0,0,5331,5327,1,0,0,0,5331,5332,1,0,0,0,5332,5354,1,0,0,0,5333,5339,
        5,69,0,0,5334,5336,5,268,0,0,5335,5334,1,0,0,0,5335,5336,1,0,0,0,
        5336,5337,1,0,0,0,5337,5338,5,543,0,0,5338,5340,5,72,0,0,5339,5335,
        1,0,0,0,5339,5340,1,0,0,0,5340,5343,1,0,0,0,5341,5342,5,13,0,0,5342,
        5344,5,41,0,0,5343,5341,1,0,0,0,5343,5344,1,0,0,0,5344,5345,1,0,
        0,0,5345,5350,3,376,188,0,5346,5347,5,1208,0,0,5347,5349,3,376,188,
        0,5348,5346,1,0,0,0,5349,5352,1,0,0,0,5350,5348,1,0,0,0,5350,5351,
        1,0,0,0,5351,5354,1,0,0,0,5352,5350,1,0,0,0,5353,5324,1,0,0,0,5353,
        5325,1,0,0,0,5353,5333,1,0,0,0,5354,5357,1,0,0,0,5355,5356,5,8,0,
        0,5356,5358,3,758,379,0,5357,5355,1,0,0,0,5357,5358,1,0,0,0,5358,
        375,1,0,0,0,5359,5361,5,1213,0,0,5360,5362,7,35,0,0,5361,5360,1,
        0,0,0,5361,5362,1,0,0,0,5362,5375,1,0,0,0,5363,5376,3,792,396,0,
        5364,5365,5,1213,0,0,5365,5370,3,792,396,0,5366,5367,5,1208,0,0,
        5367,5369,3,792,396,0,5368,5366,1,0,0,0,5369,5372,1,0,0,0,5370,5368,
        1,0,0,0,5370,5371,1,0,0,0,5371,5373,1,0,0,0,5372,5370,1,0,0,0,5373,
        5374,5,1214,0,0,5374,5376,1,0,0,0,5375,5363,1,0,0,0,5375,5364,1,
        0,0,0,5376,5382,1,0,0,0,5377,5379,5,268,0,0,5378,5377,1,0,0,0,5378,
        5379,1,0,0,0,5379,5380,1,0,0,0,5380,5381,5,543,0,0,5381,5383,5,72,
        0,0,5382,5378,1,0,0,0,5382,5383,1,0,0,0,5383,5384,1,0,0,0,5384,5385,
        5,1214,0,0,5385,377,1,0,0,0,5386,5390,3,380,190,0,5387,5390,3,382,
        191,0,5388,5390,3,384,192,0,5389,5386,1,0,0,0,5389,5387,1,0,0,0,
        5389,5388,1,0,0,0,5390,379,1,0,0,0,5391,5392,5,86,0,0,5392,5394,
        5,437,0,0,5393,5395,3,722,361,0,5394,5393,1,0,0,0,5394,5395,1,0,
        0,0,5395,5396,1,0,0,0,5396,5397,3,828,414,0,5397,5398,5,20,0,0,5398,
        5399,5,1213,0,0,5399,5404,3,394,197,0,5400,5401,5,1208,0,0,5401,
        5403,3,394,197,0,5402,5400,1,0,0,0,5403,5406,1,0,0,0,5404,5402,1,
        0,0,0,5404,5405,1,0,0,0,5405,5407,1,0,0,0,5406,5404,1,0,0,0,5407,
        5409,5,1214,0,0,5408,5410,5,710,0,0,5409,5408,1,0,0,0,5409,5410,
        1,0,0,0,5410,5411,1,0,0,0,5411,5412,5,272,0,0,5412,5421,5,671,0,
        0,5413,5418,3,396,198,0,5414,5415,5,1208,0,0,5415,5417,3,396,198,
        0,5416,5414,1,0,0,0,5417,5420,1,0,0,0,5418,5416,1,0,0,0,5418,5419,
        1,0,0,0,5419,5422,1,0,0,0,5420,5418,1,0,0,0,5421,5413,1,0,0,0,5421,
        5422,1,0,0,0,5422,381,1,0,0,0,5423,5424,5,86,0,0,5424,5426,5,437,
        0,0,5425,5427,3,722,361,0,5426,5425,1,0,0,0,5426,5427,1,0,0,0,5427,
        5428,1,0,0,0,5428,5429,3,828,414,0,5429,5430,5,20,0,0,5430,5431,
        3,692,346,0,5431,5433,5,671,0,0,5432,5434,3,398,199,0,5433,5432,
        1,0,0,0,5433,5434,1,0,0,0,5434,383,1,0,0,0,5435,5440,3,386,193,0,
        5436,5440,3,388,194,0,5437,5440,3,390,195,0,5438,5440,3,392,196,
        0,5439,5435,1,0,0,0,5439,5436,1,0,0,0,5439,5437,1,0,0,0,5439,5438,
        1,0,0,0,5440,385,1,0,0,0,5441,5442,5,86,0,0,5442,5444,5,437,0,0,
        5443,5445,3,722,361,0,5444,5443,1,0,0,0,5444,5445,1,0,0,0,5445,5446,
        1,0,0,0,5446,5447,3,828,414,0,5447,5448,5,20,0,0,5448,5449,3,692,
        346,0,5449,5450,5,512,0,0,5450,5451,5,1215,0,0,5451,5452,3,768,384,
        0,5452,5455,5,1216,0,0,5453,5454,5,111,0,0,5454,5456,5,274,0,0,5455,
        5453,1,0,0,0,5455,5456,1,0,0,0,5456,387,1,0,0,0,5457,5458,5,86,0,
        0,5458,5460,5,437,0,0,5459,5461,3,722,361,0,5460,5459,1,0,0,0,5460,
        5461,1,0,0,0,5461,5462,1,0,0,0,5462,5463,3,828,414,0,5463,5467,5,
        20,0,0,5464,5465,5,467,0,0,5465,5468,5,512,0,0,5466,5468,5,1021,
        0,0,5467,5464,1,0,0,0,5467,5466,1,0,0,0,5468,5469,1,0,0,0,5469,5470,
        5,1213,0,0,5470,5471,3,768,384,0,5471,5472,5,1214,0,0,5472,5473,
        5,282,0,0,5473,5476,3,692,346,0,5474,5475,5,111,0,0,5475,5477,5,
        274,0,0,5476,5474,1,0,0,0,5476,5477,1,0,0,0,5477,389,1,0,0,0,5478,
        5479,5,86,0,0,5479,5481,5,437,0,0,5480,5482,3,722,361,0,5481,5480,
        1,0,0,0,5481,5482,1,0,0,0,5482,5483,1,0,0,0,5483,5484,3,828,414,
        0,5484,5485,5,20,0,0,5485,5486,3,692,346,0,5486,5487,5,512,0,0,5487,
        5489,3,408,204,0,5488,5490,3,408,204,0,5489,5488,1,0,0,0,5490,5491,
        1,0,0,0,5491,5489,1,0,0,0,5491,5492,1,0,0,0,5492,5495,1,0,0,0,5493,
        5494,5,111,0,0,5494,5496,5,274,0,0,5495,5493,1,0,0,0,5495,5496,1,
        0,0,0,5496,391,1,0,0,0,5497,5498,5,86,0,0,5498,5500,5,437,0,0,5499,
        5501,3,722,361,0,5500,5499,1,0,0,0,5500,5501,1,0,0,0,5501,5502,1,
        0,0,0,5502,5503,3,828,414,0,5503,5507,5,20,0,0,5504,5505,5,467,0,
        0,5505,5508,5,512,0,0,5506,5508,5,1021,0,0,5507,5504,1,0,0,0,5507,
        5506,1,0,0,0,5508,5509,1,0,0,0,5509,5511,3,410,205,0,5510,5512,3,
        410,205,0,5511,5510,1,0,0,0,5512,5513,1,0,0,0,5513,5511,1,0,0,0,
        5513,5514,1,0,0,0,5514,5515,1,0,0,0,5515,5516,5,282,0,0,5516,5519,
        3,692,346,0,5517,5518,5,111,0,0,5518,5520,5,274,0,0,5519,5517,1,
        0,0,0,5519,5520,1,0,0,0,5520,393,1,0,0,0,5521,5522,3,830,415,0,5522,
        5523,3,692,346,0,5523,395,1,0,0,0,5524,5526,7,11,0,0,5525,5524,1,
        0,0,0,5525,5526,1,0,0,0,5526,5527,1,0,0,0,5527,5529,5,243,0,0,5528,
        5530,3,722,361,0,5529,5528,1,0,0,0,5529,5530,1,0,0,0,5530,5531,1,
        0,0,0,5531,5532,3,832,416,0,5532,5541,5,1213,0,0,5533,5538,3,400,
        200,0,5534,5535,5,1208,0,0,5535,5537,3,400,200,0,5536,5534,1,0,0,
        0,5537,5540,1,0,0,0,5538,5536,1,0,0,0,5538,5539,1,0,0,0,5539,5542,
        1,0,0,0,5540,5538,1,0,0,0,5541,5533,1,0,0,0,5541,5542,1,0,0,0,5542,
        5543,1,0,0,0,5543,5544,5,1214,0,0,5544,5545,5,352,0,0,5545,5553,
        3,402,201,0,5546,5547,5,50,0,0,5547,5548,5,164,0,0,5548,5551,3,692,
        346,0,5549,5550,5,20,0,0,5550,5552,5,225,0,0,5551,5549,1,0,0,0,5551,
        5552,1,0,0,0,5552,5554,1,0,0,0,5553,5546,1,0,0,0,5553,5554,1,0,0,
        0,5554,5560,1,0,0,0,5555,5557,5,384,0,0,5556,5558,3,722,361,0,5557,
        5556,1,0,0,0,5557,5558,1,0,0,0,5558,5559,1,0,0,0,5559,5561,3,832,
        416,0,5560,5555,1,0,0,0,5560,5561,1,0,0,0,5561,5565,1,0,0,0,5562,
        5563,5,912,0,0,5563,5564,5,20,0,0,5564,5566,5,347,0,0,5565,5562,
        1,0,0,0,5565,5566,1,0,0,0,5566,5591,1,0,0,0,5567,5569,3,406,203,
        0,5568,5567,1,0,0,0,5569,5572,1,0,0,0,5570,5568,1,0,0,0,5570,5571,
        1,0,0,0,5571,5573,1,0,0,0,5572,5570,1,0,0,0,5573,5575,3,404,202,
        0,5574,5576,3,406,203,0,5575,5574,1,0,0,0,5576,5577,1,0,0,0,5577,
        5575,1,0,0,0,5577,5578,1,0,0,0,5578,5592,1,0,0,0,5579,5581,3,406,
        203,0,5580,5579,1,0,0,0,5581,5582,1,0,0,0,5582,5580,1,0,0,0,5582,
        5583,1,0,0,0,5583,5584,1,0,0,0,5584,5588,3,404,202,0,5585,5587,3,
        406,203,0,5586,5585,1,0,0,0,5587,5590,1,0,0,0,5588,5586,1,0,0,0,
        5588,5589,1,0,0,0,5589,5592,1,0,0,0,5590,5588,1,0,0,0,5591,5570,
        1,0,0,0,5591,5580,1,0,0,0,5592,397,1,0,0,0,5593,5595,5,199,0,0,5594,
        5593,1,0,0,0,5594,5595,1,0,0,0,5595,5596,1,0,0,0,5596,5598,5,243,
        0,0,5597,5599,3,722,361,0,5598,5597,1,0,0,0,5598,5599,1,0,0,0,5599,
        5600,1,0,0,0,5600,5601,3,832,416,0,5601,5610,5,1213,0,0,5602,5607,
        3,400,200,0,5603,5604,5,1208,0,0,5604,5606,3,400,200,0,5605,5603,
        1,0,0,0,5606,5609,1,0,0,0,5607,5605,1,0,0,0,5607,5608,1,0,0,0,5608,
        5611,1,0,0,0,5609,5607,1,0,0,0,5610,5602,1,0,0,0,5610,5611,1,0,0,
        0,5611,5612,1,0,0,0,5612,5613,5,1214,0,0,5613,5614,5,352,0,0,5614,
        5622,3,402,201,0,5615,5616,5,50,0,0,5616,5617,5,164,0,0,5617,5620,
        3,692,346,0,5618,5619,5,20,0,0,5619,5621,5,225,0,0,5620,5618,1,0,
        0,0,5620,5621,1,0,0,0,5621,5623,1,0,0,0,5622,5615,1,0,0,0,5622,5623,
        1,0,0,0,5623,5629,1,0,0,0,5624,5626,5,384,0,0,5625,5627,3,722,361,
        0,5626,5625,1,0,0,0,5626,5627,1,0,0,0,5627,5628,1,0,0,0,5628,5630,
        3,832,416,0,5629,5624,1,0,0,0,5629,5630,1,0,0,0,5630,5634,1,0,0,
        0,5631,5632,5,912,0,0,5632,5633,5,20,0,0,5633,5635,5,347,0,0,5634,
        5631,1,0,0,0,5634,5635,1,0,0,0,5635,5660,1,0,0,0,5636,5638,3,406,
        203,0,5637,5636,1,0,0,0,5638,5641,1,0,0,0,5639,5637,1,0,0,0,5639,
        5640,1,0,0,0,5640,5642,1,0,0,0,5641,5639,1,0,0,0,5642,5644,3,404,
        202,0,5643,5645,3,406,203,0,5644,5643,1,0,0,0,5645,5646,1,0,0,0,
        5646,5644,1,0,0,0,5646,5647,1,0,0,0,5647,5661,1,0,0,0,5648,5650,
        3,406,203,0,5649,5648,1,0,0,0,5650,5651,1,0,0,0,5651,5649,1,0,0,
        0,5651,5652,1,0,0,0,5652,5653,1,0,0,0,5653,5657,3,404,202,0,5654,
        5656,3,406,203,0,5655,5654,1,0,0,0,5656,5659,1,0,0,0,5657,5655,1,
        0,0,0,5657,5658,1,0,0,0,5658,5661,1,0,0,0,5659,5657,1,0,0,0,5660,
        5639,1,0,0,0,5660,5649,1,0,0,0,5661,399,1,0,0,0,5662,5664,3,816,
        408,0,5663,5662,1,0,0,0,5663,5664,1,0,0,0,5664,5665,1,0,0,0,5665,
        5668,3,692,346,0,5666,5667,5,20,0,0,5667,5669,5,225,0,0,5668,5666,
        1,0,0,0,5668,5669,1,0,0,0,5669,401,1,0,0,0,5670,5673,3,692,346,0,
        5671,5672,5,20,0,0,5672,5674,5,225,0,0,5673,5671,1,0,0,0,5673,5674,
        1,0,0,0,5674,403,1,0,0,0,5675,5676,5,214,0,0,5676,5677,7,48,0,0,
        5677,405,1,0,0,0,5678,5680,5,384,0,0,5679,5681,3,722,361,0,5680,
        5679,1,0,0,0,5680,5681,1,0,0,0,5681,5682,1,0,0,0,5682,5702,3,832,
        416,0,5683,5684,5,298,0,0,5684,5685,5,944,0,0,5685,5702,7,49,0,0,
        5686,5688,5,272,0,0,5687,5686,1,0,0,0,5687,5688,1,0,0,0,5688,5689,
        1,0,0,0,5689,5702,5,117,0,0,5690,5691,5,559,0,0,5691,5692,5,286,
        0,0,5692,5693,5,274,0,0,5693,5702,5,196,0,0,5694,5695,5,352,0,0,
        5695,5696,5,274,0,0,5696,5697,5,286,0,0,5697,5698,5,274,0,0,5698,
        5702,5,196,0,0,5699,5700,5,268,0,0,5700,5702,5,386,0,0,5701,5678,
        1,0,0,0,5701,5683,1,0,0,0,5701,5687,1,0,0,0,5701,5690,1,0,0,0,5701,
        5694,1,0,0,0,5701,5699,1,0,0,0,5702,407,1,0,0,0,5703,5706,5,1215,
        0,0,5704,5707,3,412,206,0,5705,5707,3,768,384,0,5706,5704,1,0,0,
        0,5706,5705,1,0,0,0,5707,5708,1,0,0,0,5708,5709,5,1216,0,0,5709,
        409,1,0,0,0,5710,5713,5,1213,0,0,5711,5714,3,412,206,0,5712,5714,
        3,768,384,0,5713,5711,1,0,0,0,5713,5712,1,0,0,0,5714,5715,1,0,0,
        0,5715,5716,5,1214,0,0,5716,411,1,0,0,0,5717,5718,3,414,207,0,5718,
        5719,5,1207,0,0,5719,5720,3,414,207,0,5720,413,1,0,0,0,5721,5723,
        5,1222,0,0,5722,5721,1,0,0,0,5722,5723,1,0,0,0,5723,5724,1,0,0,0,
        5724,5725,3,768,384,0,5725,415,1,0,0,0,5726,5727,5,86,0,0,5727,5728,
        5,456,0,0,5728,5731,3,806,403,0,5729,5730,5,164,0,0,5730,5732,3,
        804,402,0,5731,5729,1,0,0,0,5731,5732,1,0,0,0,5732,5733,1,0,0,0,
        5733,5742,5,20,0,0,5734,5739,3,418,209,0,5735,5736,5,1208,0,0,5736,
        5738,3,418,209,0,5737,5735,1,0,0,0,5738,5741,1,0,0,0,5739,5737,1,
        0,0,0,5739,5740,1,0,0,0,5740,5743,1,0,0,0,5741,5739,1,0,0,0,5742,
        5734,1,0,0,0,5742,5743,1,0,0,0,5743,5745,1,0,0,0,5744,5746,5,1208,
        0,0,5745,5744,1,0,0,0,5745,5746,1,0,0,0,5746,5747,1,0,0,0,5747,5748,
        5,299,0,0,5748,5756,5,1224,0,0,5749,5757,3,596,298,0,5750,5751,5,
        1213,0,0,5751,5752,5,663,0,0,5752,5753,5,1224,0,0,5753,5754,3,768,
        384,0,5754,5755,5,1214,0,0,5755,5757,1,0,0,0,5756,5749,1,0,0,0,5756,
        5750,1,0,0,0,5757,5759,1,0,0,0,5758,5760,5,1208,0,0,5759,5758,1,
        0,0,0,5759,5760,1,0,0,0,5760,5769,1,0,0,0,5761,5766,3,418,209,0,
        5762,5763,5,1208,0,0,5763,5765,3,418,209,0,5764,5762,1,0,0,0,5765,
        5768,1,0,0,0,5766,5764,1,0,0,0,5766,5767,1,0,0,0,5767,5770,1,0,0,
        0,5768,5766,1,0,0,0,5769,5761,1,0,0,0,5769,5770,1,0,0,0,5770,417,
        1,0,0,0,5771,5772,5,393,0,0,5772,5773,5,1224,0,0,5773,5863,3,762,
        381,0,5774,5863,3,580,290,0,5775,5776,5,111,0,0,5776,5777,5,102,
        0,0,5777,5778,5,1224,0,0,5778,5863,3,804,402,0,5779,5780,5,67,0,
        0,5780,5781,5,1224,0,0,5781,5863,3,544,272,0,5782,5783,5,5,0,0,5783,
        5793,5,1224,0,0,5784,5789,3,762,381,0,5785,5786,5,1208,0,0,5786,
        5788,3,762,381,0,5787,5785,1,0,0,0,5788,5791,1,0,0,0,5789,5787,1,
        0,0,0,5789,5790,1,0,0,0,5790,5794,1,0,0,0,5791,5789,1,0,0,0,5792,
        5794,5,274,0,0,5793,5784,1,0,0,0,5793,5792,1,0,0,0,5794,5863,1,0,
        0,0,5795,5863,3,584,292,0,5796,5863,3,586,293,0,5797,5863,3,588,
        294,0,5798,5863,3,590,295,0,5799,5863,3,592,296,0,5800,5801,5,421,
        0,0,5801,5802,5,480,0,0,5802,5809,5,1224,0,0,5803,5810,5,224,0,0,
        5804,5806,7,1,0,0,5805,5804,1,0,0,0,5805,5806,1,0,0,0,5806,5807,
        1,0,0,0,5807,5810,3,762,381,0,5808,5810,5,274,0,0,5809,5803,1,0,
        0,0,5809,5805,1,0,0,0,5809,5808,1,0,0,0,5810,5863,1,0,0,0,5811,5812,
        5,105,0,0,5812,5813,5,1224,0,0,5813,5863,7,50,0,0,5814,5815,5,111,
        0,0,5815,5816,5,55,0,0,5816,5817,5,372,0,0,5817,5863,7,51,0,0,5818,
        5819,5,111,0,0,5819,5820,5,357,0,0,5820,5825,5,1224,0,0,5821,5826,
        3,808,404,0,5822,5826,5,269,0,0,5823,5826,5,274,0,0,5824,5826,5,
        13,0,0,5825,5821,1,0,0,0,5825,5822,1,0,0,0,5825,5823,1,0,0,0,5825,
        5824,1,0,0,0,5826,5863,1,0,0,0,5827,5828,5,311,0,0,5828,5831,5,1224,
        0,0,5829,5832,3,810,405,0,5830,5832,5,274,0,0,5831,5829,1,0,0,0,
        5831,5830,1,0,0,0,5832,5863,1,0,0,0,5833,5834,5,432,0,0,5834,5835,
        5,1213,0,0,5835,5840,3,420,210,0,5836,5837,5,1208,0,0,5837,5839,
        3,420,210,0,5838,5836,1,0,0,0,5839,5842,1,0,0,0,5840,5838,1,0,0,
        0,5840,5841,1,0,0,0,5841,5843,1,0,0,0,5842,5840,1,0,0,0,5843,5844,
        5,1214,0,0,5844,5863,1,0,0,0,5845,5863,5,617,0,0,5846,5847,5,74,
        0,0,5847,5848,5,1224,0,0,5848,5853,3,422,211,0,5849,5850,5,1208,
        0,0,5850,5852,3,422,211,0,5851,5849,1,0,0,0,5852,5855,1,0,0,0,5853,
        5851,1,0,0,0,5853,5854,1,0,0,0,5854,5863,1,0,0,0,5855,5853,1,0,0,
        0,5856,5857,5,665,0,0,5857,5860,5,1224,0,0,5858,5861,3,762,381,0,
        5859,5861,5,111,0,0,5860,5858,1,0,0,0,5860,5859,1,0,0,0,5861,5863,
        1,0,0,0,5862,5771,1,0,0,0,5862,5774,1,0,0,0,5862,5775,1,0,0,0,5862,
        5779,1,0,0,0,5862,5782,1,0,0,0,5862,5795,1,0,0,0,5862,5796,1,0,0,
        0,5862,5797,1,0,0,0,5862,5798,1,0,0,0,5862,5799,1,0,0,0,5862,5800,
        1,0,0,0,5862,5811,1,0,0,0,5862,5814,1,0,0,0,5862,5818,1,0,0,0,5862,
        5827,1,0,0,0,5862,5833,1,0,0,0,5862,5845,1,0,0,0,5862,5846,1,0,0,
        0,5862,5856,1,0,0,0,5863,419,1,0,0,0,5864,5865,3,692,346,0,5865,
        5866,5,1224,0,0,5866,5867,3,792,396,0,5867,421,1,0,0,0,5868,5895,
        3,792,396,0,5869,5875,5,1213,0,0,5870,5872,3,792,396,0,5871,5873,
        5,111,0,0,5872,5871,1,0,0,0,5872,5873,1,0,0,0,5873,5876,1,0,0,0,
        5874,5876,3,792,396,0,5875,5870,1,0,0,0,5875,5874,1,0,0,0,5876,5887,
        1,0,0,0,5877,5883,5,1208,0,0,5878,5880,3,792,396,0,5879,5881,5,111,
        0,0,5880,5879,1,0,0,0,5880,5881,1,0,0,0,5881,5884,1,0,0,0,5882,5884,
        3,792,396,0,5883,5878,1,0,0,0,5883,5882,1,0,0,0,5884,5886,1,0,0,
        0,5885,5877,1,0,0,0,5886,5889,1,0,0,0,5887,5885,1,0,0,0,5887,5888,
        1,0,0,0,5888,5890,1,0,0,0,5889,5887,1,0,0,0,5890,5891,5,1214,0,0,
        5891,5896,1,0,0,0,5892,5893,5,1213,0,0,5893,5894,5,274,0,0,5894,
        5896,5,1214,0,0,5895,5869,1,0,0,0,5895,5892,1,0,0,0,5896,423,1,0,
        0,0,5897,5898,5,102,0,0,5898,5899,3,804,402,0,5899,425,1,0,0,0,5900,
        5901,7,29,0,0,5901,5902,5,102,0,0,5902,5904,3,804,402,0,5903,5905,
        5,13,0,0,5904,5903,1,0,0,0,5904,5905,1,0,0,0,5905,427,1,0,0,0,5906,
        5907,7,29,0,0,5907,5908,5,456,0,0,5908,5910,3,806,403,0,5909,5911,
        5,13,0,0,5910,5909,1,0,0,0,5910,5911,1,0,0,0,5911,429,1,0,0,0,5912,
        5913,5,125,0,0,5913,5914,5,29,0,0,5914,5915,3,794,397,0,5915,431,
        1,0,0,0,5916,5917,5,125,0,0,5917,5921,5,50,0,0,5918,5919,3,804,402,
        0,5919,5920,5,1209,0,0,5920,5922,1,0,0,0,5921,5918,1,0,0,0,5921,
        5922,1,0,0,0,5922,5923,1,0,0,0,5923,5924,5,1213,0,0,5924,5925,3,
        692,346,0,5925,5926,5,20,0,0,5926,5927,3,692,346,0,5927,5928,5,1214,
        0,0,5928,433,1,0,0,0,5929,5930,5,125,0,0,5930,5931,5,74,0,0,5931,
        5932,3,794,397,0,5932,435,1,0,0,0,5933,5934,5,125,0,0,5934,5935,
        5,102,0,0,5935,5936,3,804,402,0,5936,437,1,0,0,0,5937,5938,5,125,
        0,0,5938,5939,5,137,0,0,5939,5943,5,406,0,0,5940,5941,5,159,0,0,
        5941,5944,3,796,398,0,5942,5944,3,796,398,0,5943,5940,1,0,0,0,5943,
        5942,1,0,0,0,5944,439,1,0,0,0,5945,5946,5,125,0,0,5946,5947,5,160,
        0,0,5947,5949,5,917,0,0,5948,5950,3,1076,538,0,5949,5948,1,0,0,0,
        5949,5950,1,0,0,0,5950,5951,1,0,0,0,5951,5952,3,792,396,0,5952,441,
        1,0,0,0,5953,5954,5,125,0,0,5954,5955,5,384,0,0,5955,5956,5,166,
        0,0,5956,5974,3,800,400,0,5957,5958,5,125,0,0,5958,5959,5,166,0,
        0,5959,5971,3,800,400,0,5960,5961,5,1213,0,0,5961,5966,3,692,346,
        0,5962,5963,5,1208,0,0,5963,5965,3,692,346,0,5964,5962,1,0,0,0,5965,
        5968,1,0,0,0,5966,5964,1,0,0,0,5966,5967,1,0,0,0,5967,5969,1,0,0,
        0,5968,5966,1,0,0,0,5969,5970,5,1214,0,0,5970,5972,1,0,0,0,5971,
        5960,1,0,0,0,5971,5972,1,0,0,0,5972,5974,1,0,0,0,5973,5953,1,0,0,
        0,5973,5957,1,0,0,0,5974,443,1,0,0,0,5975,5976,5,125,0,0,5976,5977,
        5,166,0,0,5977,5978,5,755,0,0,5978,5979,3,794,397,0,5979,445,1,0,
        0,0,5980,5981,5,125,0,0,5981,5994,5,192,0,0,5982,5983,5,1213,0,0,
        5983,5988,3,792,396,0,5984,5985,5,1208,0,0,5985,5987,3,792,396,0,
        5986,5984,1,0,0,0,5987,5990,1,0,0,0,5988,5986,1,0,0,0,5988,5989,
        1,0,0,0,5989,5991,1,0,0,0,5990,5988,1,0,0,0,5991,5992,5,1214,0,0,
        5992,5995,1,0,0,0,5993,5995,3,796,398,0,5994,5982,1,0,0,0,5994,5993,
        1,0,0,0,5995,5997,1,0,0,0,5996,5998,3,574,287,0,5997,5996,1,0,0,
        0,5997,5998,1,0,0,0,5998,5999,1,0,0,0,5999,6001,5,286,0,0,6000,6002,
        5,417,0,0,6001,6000,1,0,0,0,6001,6002,1,0,0,0,6002,6003,1,0,0,0,
        6003,6004,3,796,398,0,6004,447,1,0,0,0,6005,6006,5,125,0,0,6006,
        6007,5,688,0,0,6007,6008,5,372,0,0,6008,6009,3,794,397,0,6009,449,
        1,0,0,0,6010,6011,5,125,0,0,6011,6012,5,210,0,0,6012,6013,5,192,
        0,0,6013,6014,3,796,398,0,6014,451,1,0,0,0,6015,6016,5,125,0,0,6016,
        6017,5,178,0,0,6017,6018,5,192,0,0,6018,6019,3,796,398,0,6019,453,
        1,0,0,0,6020,6021,5,125,0,0,6021,6022,5,235,0,0,6022,6023,3,802,
        401,0,6023,455,1,0,0,0,6024,6025,5,125,0,0,6025,6026,5,236,0,0,6026,
        6027,3,792,396,0,6027,457,1,0,0,0,6028,6029,5,125,0,0,6029,6031,
        5,243,0,0,6030,6032,3,722,361,0,6031,6030,1,0,0,0,6031,6032,1,0,
        0,0,6032,6033,1,0,0,0,6033,6034,3,832,416,0,6034,459,1,0,0,0,6035,
        6036,5,125,0,0,6036,6037,5,292,0,0,6037,6038,5,159,0,0,6038,6039,
        3,712,356,0,6039,461,1,0,0,0,6040,6041,5,125,0,0,6041,6042,5,310,
        0,0,6042,6043,3,798,399,0,6043,463,1,0,0,0,6044,6045,5,125,0,0,6045,
        6046,5,311,0,0,6046,6047,3,810,405,0,6047,465,1,0,0,0,6048,6049,
        5,125,0,0,6049,6050,5,342,0,0,6050,6051,5,174,0,0,6051,6052,3,792,
        396,0,6052,467,1,0,0,0,6053,6054,5,125,0,0,6054,6055,5,342,0,0,6055,
        6056,5,902,0,0,6056,6057,3,792,396,0,6057,6058,5,159,0,0,6058,6059,
        3,792,396,0,6059,469,1,0,0,0,6060,6061,5,125,0,0,6061,6062,5,357,
        0,0,6062,6063,3,808,404,0,6063,471,1,0,0,0,6064,6065,5,125,0,0,6065,
        6066,3,792,396,0,6066,6068,5,905,0,0,6067,6069,3,722,361,0,6068,
        6067,1,0,0,0,6068,6069,1,0,0,0,6069,6070,1,0,0,0,6070,6071,3,792,
        396,0,6071,473,1,0,0,0,6072,6073,5,125,0,0,6073,6100,7,14,0,0,6074,
        6076,5,286,0,0,6075,6074,1,0,0,0,6075,6076,1,0,0,0,6076,6077,1,0,
        0,0,6077,6086,3,116,58,0,6078,6083,3,110,55,0,6079,6080,5,1208,0,
        0,6080,6082,3,110,55,0,6081,6079,1,0,0,0,6082,6085,1,0,0,0,6083,
        6081,1,0,0,0,6083,6084,1,0,0,0,6084,6087,1,0,0,0,6085,6083,1,0,0,
        0,6086,6078,1,0,0,0,6086,6087,1,0,0,0,6087,6101,1,0,0,0,6088,6093,
        3,110,55,0,6089,6090,5,1208,0,0,6090,6092,3,110,55,0,6091,6089,1,
        0,0,0,6092,6095,1,0,0,0,6093,6091,1,0,0,0,6093,6094,1,0,0,0,6094,
        6097,1,0,0,0,6095,6093,1,0,0,0,6096,6088,1,0,0,0,6096,6097,1,0,0,
        0,6097,6098,1,0,0,0,6098,6099,5,286,0,0,6099,6101,3,116,58,0,6100,
        6075,1,0,0,0,6100,6096,1,0,0,0,6101,475,1,0,0,0,6102,6104,5,125,
        0,0,6103,6105,5,417,0,0,6104,6103,1,0,0,0,6104,6105,1,0,0,0,6105,
        6107,1,0,0,0,6106,6108,5,160,0,0,6107,6106,1,0,0,0,6107,6108,1,0,
        0,0,6108,6109,1,0,0,0,6109,6110,5,406,0,0,6110,6112,3,796,398,0,
        6111,6113,5,13,0,0,6112,6111,1,0,0,0,6112,6113,1,0,0,0,6113,477,
        1,0,0,0,6114,6115,5,125,0,0,6115,6119,5,432,0,0,6116,6117,3,804,
        402,0,6117,6118,5,1209,0,0,6118,6120,1,0,0,0,6119,6116,1,0,0,0,6119,
        6120,1,0,0,0,6120,6123,1,0,0,0,6121,6124,3,792,396,0,6122,6124,5,
        13,0,0,6123,6121,1,0,0,0,6123,6122,1,0,0,0,6124,6125,1,0,0,0,6125,
        6126,5,159,0,0,6126,6127,3,712,356,0,6127,479,1,0,0,0,6128,6129,
        5,125,0,0,6129,6130,5,435,0,0,6130,6131,3,794,397,0,6131,481,1,0,
        0,0,6132,6133,5,125,0,0,6133,6134,5,437,0,0,6134,6135,3,712,356,
        0,6135,483,1,0,0,0,6136,6137,5,125,0,0,6137,6138,5,456,0,0,6138,
        6139,3,806,403,0,6139,485,1,0,0,0,6140,6141,5,125,0,0,6141,6142,
        5,468,0,0,6142,6143,3,796,398,0,6143,487,1,0,0,0,6144,6145,5,125,
        0,0,6145,6146,5,480,0,0,6146,6147,3,792,396,0,6147,489,1,0,0,0,6148,
        6150,5,134,0,0,6149,6151,5,587,0,0,6150,6149,1,0,0,0,6150,6151,1,
        0,0,0,6151,6152,1,0,0,0,6152,6153,5,716,0,0,6153,6154,5,223,0,0,
        6154,6155,5,159,0,0,6155,6156,5,870,0,0,6156,6159,3,762,381,0,6157,
        6158,5,297,0,0,6158,6160,5,371,0,0,6159,6157,1,0,0,0,6159,6160,1,
        0,0,0,6160,491,1,0,0,0,6161,6162,5,134,0,0,6162,6164,5,229,0,0,6163,
        6165,5,628,0,0,6164,6163,1,0,0,0,6164,6165,1,0,0,0,6165,6168,1,0,
        0,0,6166,6167,5,474,0,0,6167,6169,5,982,0,0,6168,6166,1,0,0,0,6168,
        6169,1,0,0,0,6169,6170,1,0,0,0,6170,6180,5,286,0,0,6171,6181,5,13,
        0,0,6172,6177,3,80,40,0,6173,6174,5,1208,0,0,6174,6176,3,80,40,0,
        6175,6173,1,0,0,0,6176,6179,1,0,0,0,6177,6175,1,0,0,0,6177,6178,
        1,0,0,0,6178,6181,1,0,0,0,6179,6177,1,0,0,0,6180,6171,1,0,0,0,6180,
        6172,1,0,0,0,6181,6185,1,0,0,0,6182,6183,5,159,0,0,6183,6184,5,74,
        0,0,6184,6186,3,794,397,0,6185,6182,1,0,0,0,6185,6186,1,0,0,0,6186,
        6190,1,0,0,0,6187,6188,5,159,0,0,6188,6189,5,74,0,0,6189,6191,3,
        794,397,0,6190,6187,1,0,0,0,6190,6191,1,0,0,0,6191,6201,1,0,0,0,
        6192,6193,5,42,0,0,6193,6198,3,806,403,0,6194,6195,5,1208,0,0,6195,
        6197,3,806,403,0,6196,6194,1,0,0,0,6197,6200,1,0,0,0,6198,6196,1,
        0,0,0,6198,6199,1,0,0,0,6199,6202,1,0,0,0,6200,6198,1,0,0,0,6201,
        6192,1,0,0,0,6201,6202,1,0,0,0,6202,6212,1,0,0,0,6203,6204,5,286,
        0,0,6204,6209,3,84,42,0,6205,6206,5,1208,0,0,6206,6208,3,84,42,0,
        6207,6205,1,0,0,0,6208,6211,1,0,0,0,6209,6207,1,0,0,0,6209,6210,
        1,0,0,0,6210,6213,1,0,0,0,6211,6209,1,0,0,0,6212,6203,1,0,0,0,6212,
        6213,1,0,0,0,6213,493,1,0,0,0,6214,6215,5,134,0,0,6215,6216,5,869,
        0,0,6216,6217,5,563,0,0,6217,495,1,0,0,0,6218,6219,5,134,0,0,6219,
        6220,5,869,0,0,6220,6221,5,229,0,0,6221,6222,5,286,0,0,6222,6223,
        3,498,249,0,6223,497,1,0,0,0,6224,6229,3,500,250,0,6225,6229,3,96,
        48,0,6226,6229,3,98,49,0,6227,6229,3,100,50,0,6228,6224,1,0,0,0,
        6228,6225,1,0,0,0,6228,6226,1,0,0,0,6228,6227,1,0,0,0,6229,499,1,
        0,0,0,6230,6231,5,13,0,0,6231,6232,5,901,0,0,6232,501,1,0,0,0,6233,
        6234,5,158,0,0,6234,6235,5,869,0,0,6235,6236,5,229,0,0,6236,6237,
        5,474,0,0,6237,6238,3,504,252,0,6238,503,1,0,0,0,6239,6240,7,52,
        0,0,6240,505,1,0,0,0,6241,6242,5,184,0,0,6242,6441,5,1203,0,0,6243,
        6244,5,184,0,0,6244,6250,5,69,0,0,6245,6251,3,1000,500,0,6246,6247,
        3,796,398,0,6247,6248,5,1209,0,0,6248,6249,5,1219,0,0,6249,6251,
        1,0,0,0,6250,6245,1,0,0,0,6250,6246,1,0,0,0,6251,6262,1,0,0,0,6252,
        6258,5,1208,0,0,6253,6259,3,1000,500,0,6254,6255,3,796,398,0,6255,
        6256,5,1209,0,0,6256,6257,5,1219,0,0,6257,6259,1,0,0,0,6258,6253,
        1,0,0,0,6258,6254,1,0,0,0,6259,6261,1,0,0,0,6260,6252,1,0,0,0,6261,
        6264,1,0,0,0,6262,6260,1,0,0,0,6262,6263,1,0,0,0,6263,6441,1,0,0,
        0,6264,6262,1,0,0,0,6265,6266,5,184,0,0,6266,6267,5,69,0,0,6267,
        6272,3,788,394,0,6268,6269,5,1208,0,0,6269,6271,3,788,394,0,6270,
        6268,1,0,0,0,6271,6274,1,0,0,0,6272,6270,1,0,0,0,6272,6273,1,0,0,
        0,6273,6275,1,0,0,0,6274,6272,1,0,0,0,6275,6276,5,164,0,0,6276,6281,
        3,796,398,0,6277,6278,5,1208,0,0,6278,6280,3,796,398,0,6279,6277,
        1,0,0,0,6280,6283,1,0,0,0,6281,6279,1,0,0,0,6281,6282,1,0,0,0,6282,
        6441,1,0,0,0,6283,6281,1,0,0,0,6284,6285,5,184,0,0,6285,6286,5,69,
        0,0,6286,6287,5,1219,0,0,6287,6288,5,164,0,0,6288,6293,3,796,398,
        0,6289,6290,5,1208,0,0,6290,6292,3,796,398,0,6291,6289,1,0,0,0,6292,
        6295,1,0,0,0,6293,6291,1,0,0,0,6293,6294,1,0,0,0,6294,6441,1,0,0,
        0,6295,6293,1,0,0,0,6296,6297,5,184,0,0,6297,6298,5,69,0,0,6298,
        6299,3,788,394,0,6299,6300,5,164,0,0,6300,6301,5,137,0,0,6301,6302,
        5,406,0,0,6302,6303,5,159,0,0,6303,6304,3,796,398,0,6304,6441,1,
        0,0,0,6305,6306,5,184,0,0,6306,6307,5,74,0,0,6307,6441,3,794,397,
        0,6308,6309,5,184,0,0,6309,6310,5,406,0,0,6310,6441,3,796,398,0,
        6311,6312,5,184,0,0,6312,6313,5,137,0,0,6313,6314,5,406,0,0,6314,
        6315,5,159,0,0,6315,6441,3,796,398,0,6316,6317,5,184,0,0,6317,6318,
        5,469,0,0,6318,6319,5,406,0,0,6319,6441,3,796,398,0,6320,6321,5,
        184,0,0,6321,6322,5,468,0,0,6322,6441,3,796,398,0,6323,6324,5,184,
        0,0,6324,6326,5,192,0,0,6325,6327,5,417,0,0,6326,6325,1,0,0,0,6326,
        6327,1,0,0,0,6327,6328,1,0,0,0,6328,6340,3,794,397,0,6329,6330,5,
        1213,0,0,6330,6335,3,788,394,0,6331,6332,5,1208,0,0,6332,6334,3,
        788,394,0,6333,6331,1,0,0,0,6334,6337,1,0,0,0,6335,6333,1,0,0,0,
        6335,6336,1,0,0,0,6336,6338,1,0,0,0,6337,6335,1,0,0,0,6338,6339,
        5,1214,0,0,6339,6341,1,0,0,0,6340,6329,1,0,0,0,6340,6341,1,0,0,0,
        6341,6441,1,0,0,0,6342,6343,5,184,0,0,6343,6344,5,210,0,0,6344,6345,
        5,192,0,0,6345,6441,3,794,397,0,6346,6347,5,184,0,0,6347,6348,5,
        178,0,0,6348,6349,5,192,0,0,6349,6441,3,794,397,0,6350,6351,5,184,
        0,0,6351,6352,5,310,0,0,6352,6354,3,798,399,0,6353,6355,7,53,0,0,
        6354,6353,1,0,0,0,6354,6355,1,0,0,0,6355,6441,1,0,0,0,6356,6357,
        5,184,0,0,6357,6358,5,166,0,0,6358,6371,3,800,400,0,6359,6368,5,
        1213,0,0,6360,6365,3,694,347,0,6361,6362,5,1208,0,0,6362,6364,3,
        694,347,0,6363,6361,1,0,0,0,6364,6367,1,0,0,0,6365,6363,1,0,0,0,
        6365,6366,1,0,0,0,6366,6369,1,0,0,0,6367,6365,1,0,0,0,6368,6360,
        1,0,0,0,6368,6369,1,0,0,0,6369,6370,1,0,0,0,6370,6372,5,1214,0,0,
        6371,6359,1,0,0,0,6371,6372,1,0,0,0,6372,6441,1,0,0,0,6373,6374,
        5,184,0,0,6374,6375,5,384,0,0,6375,6376,5,166,0,0,6376,6441,3,800,
        400,0,6377,6378,5,184,0,0,6378,6441,3,570,285,0,6379,6380,5,184,
        0,0,6380,6381,5,384,0,0,6381,6383,5,243,0,0,6382,6384,3,722,361,
        0,6383,6382,1,0,0,0,6383,6384,1,0,0,0,6384,6385,1,0,0,0,6385,6441,
        3,832,416,0,6386,6387,5,184,0,0,6387,6388,5,437,0,0,6388,6390,3,
        712,356,0,6389,6391,7,54,0,0,6390,6389,1,0,0,0,6390,6391,1,0,0,0,
        6391,6441,1,0,0,0,6392,6393,5,184,0,0,6393,6394,3,752,376,0,6394,
        6395,5,905,0,0,6395,6396,3,712,356,0,6396,6441,1,0,0,0,6397,6398,
        5,184,0,0,6398,6399,5,50,0,0,6399,6401,3,712,356,0,6400,6402,7,55,
        0,0,6401,6400,1,0,0,0,6401,6402,1,0,0,0,6402,6441,1,0,0,0,6403,6404,
        5,184,0,0,6404,6405,5,432,0,0,6405,6441,3,712,356,0,6406,6407,5,
        184,0,0,6407,6408,5,102,0,0,6408,6441,3,804,402,0,6409,6410,5,184,
        0,0,6410,6411,5,456,0,0,6411,6441,3,806,403,0,6412,6413,5,184,0,
        0,6413,6414,5,435,0,0,6414,6441,3,794,397,0,6415,6416,5,184,0,0,
        6416,6417,5,160,0,0,6417,6419,5,917,0,0,6418,6420,3,1076,538,0,6419,
        6418,1,0,0,0,6419,6420,1,0,0,0,6420,6421,1,0,0,0,6421,6441,3,792,
        396,0,6422,6423,5,184,0,0,6423,6424,5,160,0,0,6424,6425,5,102,0,
        0,6425,6426,3,804,402,0,6426,6427,3,892,446,0,6427,6441,1,0,0,0,
        6428,6429,5,184,0,0,6429,6430,5,160,0,0,6430,6431,5,406,0,0,6431,
        6432,3,796,398,0,6432,6433,3,892,446,0,6433,6441,1,0,0,0,6434,6435,
        5,184,0,0,6435,6436,5,160,0,0,6436,6437,5,166,0,0,6437,6438,3,800,
        400,0,6438,6439,3,892,446,0,6439,6441,1,0,0,0,6440,6241,1,0,0,0,
        6440,6243,1,0,0,0,6440,6265,1,0,0,0,6440,6284,1,0,0,0,6440,6296,
        1,0,0,0,6440,6305,1,0,0,0,6440,6308,1,0,0,0,6440,6311,1,0,0,0,6440,
        6316,1,0,0,0,6440,6320,1,0,0,0,6440,6323,1,0,0,0,6440,6342,1,0,0,
        0,6440,6346,1,0,0,0,6440,6350,1,0,0,0,6440,6356,1,0,0,0,6440,6373,
        1,0,0,0,6440,6377,1,0,0,0,6440,6379,1,0,0,0,6440,6386,1,0,0,0,6440,
        6392,1,0,0,0,6440,6397,1,0,0,0,6440,6403,1,0,0,0,6440,6406,1,0,0,
        0,6440,6409,1,0,0,0,6440,6412,1,0,0,0,6440,6415,1,0,0,0,6440,6422,
        1,0,0,0,6440,6428,1,0,0,0,6440,6434,1,0,0,0,6441,507,1,0,0,0,6442,
        6444,5,184,0,0,6443,6445,5,93,0,0,6444,6443,1,0,0,0,6444,6445,1,
        0,0,0,6445,6446,1,0,0,0,6446,6448,5,395,0,0,6447,6449,5,286,0,0,
        6448,6447,1,0,0,0,6448,6449,1,0,0,0,6449,6451,1,0,0,0,6450,6452,
        5,417,0,0,6451,6450,1,0,0,0,6451,6452,1,0,0,0,6452,6453,1,0,0,0,
        6453,6454,3,794,397,0,6454,509,1,0,0,0,6455,6457,5,184,0,0,6456,
        6458,5,93,0,0,6457,6456,1,0,0,0,6457,6458,1,0,0,0,6458,6459,1,0,
        0,0,6459,6461,5,395,0,0,6460,6462,5,286,0,0,6461,6460,1,0,0,0,6461,
        6462,1,0,0,0,6462,6463,1,0,0,0,6463,6464,3,794,397,0,6464,6465,5,
        164,0,0,6465,6469,3,804,402,0,6466,6467,5,159,0,0,6467,6468,5,869,
        0,0,6468,6470,3,768,384,0,6469,6466,1,0,0,0,6469,6470,1,0,0,0,6470,
        6473,1,0,0,0,6471,6472,5,366,0,0,6472,6474,3,768,384,0,6473,6471,
        1,0,0,0,6473,6474,1,0,0,0,6474,6477,1,0,0,0,6475,6476,5,457,0,0,
        6476,6478,5,773,0,0,6477,6475,1,0,0,0,6477,6478,1,0,0,0,6478,511,
        1,0,0,0,6479,6480,5,703,0,0,6480,6481,5,346,0,0,6481,6482,5,499,
        0,0,6482,6483,5,1041,0,0,6483,6484,5,159,0,0,6484,6489,3,794,397,
        0,6485,6486,5,1208,0,0,6486,6488,3,794,397,0,6487,6485,1,0,0,0,6488,
        6491,1,0,0,0,6489,6487,1,0,0,0,6489,6490,1,0,0,0,6490,513,1,0,0,
        0,6491,6489,1,0,0,0,6492,6493,5,229,0,0,6493,6494,5,703,0,0,6494,
        6495,5,511,0,0,6495,6496,5,283,0,0,6496,6497,5,159,0,0,6497,6502,
        3,794,397,0,6498,6499,5,1208,0,0,6499,6501,3,794,397,0,6500,6498,
        1,0,0,0,6501,6504,1,0,0,0,6502,6500,1,0,0,0,6502,6503,1,0,0,0,6503,
        515,1,0,0,0,6504,6502,1,0,0,0,6505,6506,5,229,0,0,6506,6507,5,703,
        0,0,6507,6508,5,511,0,0,6508,6509,5,286,0,0,6509,6510,5,159,0,0,
        6510,6515,3,794,397,0,6511,6512,5,1208,0,0,6512,6514,3,794,397,0,
        6513,6511,1,0,0,0,6514,6517,1,0,0,0,6515,6513,1,0,0,0,6515,6516,
        1,0,0,0,6516,6521,1,0,0,0,6517,6515,1,0,0,0,6518,6519,5,115,0,0,
        6519,6520,5,228,0,0,6520,6522,5,364,0,0,6521,6518,1,0,0,0,6521,6522,
        1,0,0,0,6522,517,1,0,0,0,6523,6524,5,254,0,0,6524,6525,5,102,0,0,
        6525,6526,3,804,402,0,6526,6527,5,20,0,0,6527,6532,3,520,260,0,6528,
        6529,5,1208,0,0,6529,6531,3,520,260,0,6530,6528,1,0,0,0,6531,6534,
        1,0,0,0,6532,6530,1,0,0,0,6532,6533,1,0,0,0,6533,519,1,0,0,0,6534,
        6532,1,0,0,0,6535,6546,3,580,290,0,6536,6537,5,5,0,0,6537,6538,5,
        1224,0,0,6538,6546,3,762,381,0,6539,6546,3,584,292,0,6540,6546,3,
        586,293,0,6541,6546,3,588,294,0,6542,6546,3,590,295,0,6543,6546,
        3,592,296,0,6544,6546,3,594,297,0,6545,6535,1,0,0,0,6545,6536,1,
        0,0,0,6545,6539,1,0,0,0,6545,6540,1,0,0,0,6545,6541,1,0,0,0,6545,
        6542,1,0,0,0,6545,6543,1,0,0,0,6545,6544,1,0,0,0,6546,521,1,0,0,
        0,6547,6548,5,254,0,0,6548,6549,5,311,0,0,6549,6550,3,810,405,0,
        6550,6551,5,20,0,0,6551,6556,3,284,142,0,6552,6553,5,1208,0,0,6553,
        6555,3,284,142,0,6554,6552,1,0,0,0,6555,6558,1,0,0,0,6556,6554,1,
        0,0,0,6556,6557,1,0,0,0,6557,523,1,0,0,0,6558,6556,1,0,0,0,6559,
        6560,5,254,0,0,6560,6561,5,456,0,0,6561,6562,3,806,403,0,6562,6563,
        5,20,0,0,6563,6568,3,526,263,0,6564,6565,5,1208,0,0,6565,6567,3,
        526,263,0,6566,6564,1,0,0,0,6567,6570,1,0,0,0,6568,6566,1,0,0,0,
        6568,6569,1,0,0,0,6569,525,1,0,0,0,6570,6568,1,0,0,0,6571,6689,3,
        580,290,0,6572,6573,5,393,0,0,6573,6576,5,1224,0,0,6574,6577,3,762,
        381,0,6575,6577,5,274,0,0,6576,6574,1,0,0,0,6576,6575,1,0,0,0,6577,
        6689,1,0,0,0,6578,6579,5,299,0,0,6579,6587,5,1224,0,0,6580,6588,
        3,596,298,0,6581,6582,5,1213,0,0,6582,6583,5,663,0,0,6583,6584,5,
        1224,0,0,6584,6585,3,768,384,0,6585,6586,5,1214,0,0,6586,6588,1,
        0,0,0,6587,6580,1,0,0,0,6587,6581,1,0,0,0,6588,6591,1,0,0,0,6589,
        6590,5,159,0,0,6590,6592,5,456,0,0,6591,6589,1,0,0,0,6591,6592,1,
        0,0,0,6592,6689,1,0,0,0,6593,6594,5,337,0,0,6594,6595,5,299,0,0,
        6595,6689,5,226,0,0,6596,6597,5,5,0,0,6597,6607,5,1224,0,0,6598,
        6603,3,762,381,0,6599,6600,5,1208,0,0,6600,6602,3,762,381,0,6601,
        6599,1,0,0,0,6602,6605,1,0,0,0,6603,6601,1,0,0,0,6603,6604,1,0,0,
        0,6604,6608,1,0,0,0,6605,6603,1,0,0,0,6606,6608,5,274,0,0,6607,6598,
        1,0,0,0,6607,6606,1,0,0,0,6608,6689,1,0,0,0,6609,6689,3,584,292,
        0,6610,6611,5,111,0,0,6611,6612,5,102,0,0,6612,6613,5,1224,0,0,6613,
        6689,3,804,402,0,6614,6615,5,67,0,0,6615,6616,5,1224,0,0,6616,6689,
        3,544,272,0,6617,6689,3,586,293,0,6618,6689,3,588,294,0,6619,6689,
        3,590,295,0,6620,6689,3,592,296,0,6621,6689,3,594,297,0,6622,6623,
        5,421,0,0,6623,6624,5,480,0,0,6624,6631,5,1224,0,0,6625,6632,5,224,
        0,0,6626,6628,7,1,0,0,6627,6626,1,0,0,0,6627,6628,1,0,0,0,6628,6629,
        1,0,0,0,6629,6632,3,762,381,0,6630,6632,5,274,0,0,6631,6625,1,0,
        0,0,6631,6627,1,0,0,0,6631,6630,1,0,0,0,6632,6689,1,0,0,0,6633,6634,
        5,105,0,0,6634,6635,5,1224,0,0,6635,6689,7,50,0,0,6636,6637,5,111,
        0,0,6637,6638,5,55,0,0,6638,6639,5,372,0,0,6639,6689,7,51,0,0,6640,
        6641,5,111,0,0,6641,6642,5,357,0,0,6642,6647,5,1224,0,0,6643,6648,
        3,808,404,0,6644,6648,5,269,0,0,6645,6648,5,274,0,0,6646,6648,5,
        13,0,0,6647,6643,1,0,0,0,6647,6644,1,0,0,0,6647,6645,1,0,0,0,6647,
        6646,1,0,0,0,6648,6689,1,0,0,0,6649,6650,5,311,0,0,6650,6653,5,1224,
        0,0,6651,6654,3,810,405,0,6652,6654,5,274,0,0,6653,6651,1,0,0,0,
        6653,6652,1,0,0,0,6654,6689,1,0,0,0,6655,6656,5,432,0,0,6656,6665,
        5,1213,0,0,6657,6662,3,420,210,0,6658,6659,5,1208,0,0,6659,6661,
        3,420,210,0,6660,6658,1,0,0,0,6661,6664,1,0,0,0,6662,6660,1,0,0,
        0,6662,6663,1,0,0,0,6663,6666,1,0,0,0,6664,6662,1,0,0,0,6665,6657,
        1,0,0,0,6665,6666,1,0,0,0,6666,6667,1,0,0,0,6667,6689,5,1214,0,0,
        6668,6670,5,272,0,0,6669,6668,1,0,0,0,6669,6670,1,0,0,0,6670,6671,
        1,0,0,0,6671,6689,5,617,0,0,6672,6673,5,665,0,0,6673,6676,5,1224,
        0,0,6674,6677,3,762,381,0,6675,6677,5,111,0,0,6676,6674,1,0,0,0,
        6676,6675,1,0,0,0,6677,6689,1,0,0,0,6678,6679,5,74,0,0,6679,6680,
        5,1224,0,0,6680,6685,3,422,211,0,6681,6682,5,1208,0,0,6682,6684,
        3,422,211,0,6683,6681,1,0,0,0,6684,6687,1,0,0,0,6685,6683,1,0,0,
        0,6685,6686,1,0,0,0,6686,6689,1,0,0,0,6687,6685,1,0,0,0,6688,6571,
        1,0,0,0,6688,6572,1,0,0,0,6688,6578,1,0,0,0,6688,6593,1,0,0,0,6688,
        6596,1,0,0,0,6688,6609,1,0,0,0,6688,6610,1,0,0,0,6688,6614,1,0,0,
        0,6688,6617,1,0,0,0,6688,6618,1,0,0,0,6688,6619,1,0,0,0,6688,6620,
        1,0,0,0,6688,6621,1,0,0,0,6688,6622,1,0,0,0,6688,6633,1,0,0,0,6688,
        6636,1,0,0,0,6688,6640,1,0,0,0,6688,6649,1,0,0,0,6688,6655,1,0,0,
        0,6688,6669,1,0,0,0,6688,6672,1,0,0,0,6688,6678,1,0,0,0,6689,527,
        1,0,0,0,6690,6715,5,338,0,0,6691,6692,5,384,0,0,6692,6693,5,166,
        0,0,6693,6694,3,800,400,0,6694,6695,7,3,0,0,6695,6696,3,800,400,
        0,6696,6716,1,0,0,0,6697,6698,5,166,0,0,6698,6710,3,800,400,0,6699,
        6700,5,1213,0,0,6700,6705,3,692,346,0,6701,6702,5,1208,0,0,6702,
        6704,3,692,346,0,6703,6701,1,0,0,0,6704,6707,1,0,0,0,6705,6703,1,
        0,0,0,6705,6706,1,0,0,0,6706,6708,1,0,0,0,6707,6705,1,0,0,0,6708,
        6709,5,1214,0,0,6709,6711,1,0,0,0,6710,6699,1,0,0,0,6710,6711,1,
        0,0,0,6711,6712,1,0,0,0,6712,6713,7,3,0,0,6713,6714,3,800,400,0,
        6714,6716,1,0,0,0,6715,6691,1,0,0,0,6715,6697,1,0,0,0,6716,529,1,
        0,0,0,6717,6718,5,338,0,0,6718,6719,5,310,0,0,6719,6720,3,798,399,
        0,6720,6721,7,3,0,0,6721,6722,3,798,399,0,6722,531,1,0,0,0,6723,
        6724,5,338,0,0,6724,6725,5,235,0,0,6725,6726,3,802,401,0,6726,6727,
        7,3,0,0,6727,6728,3,802,401,0,6728,533,1,0,0,0,6729,6730,5,338,0,
        0,6730,6731,5,406,0,0,6731,6732,3,796,398,0,6732,6733,7,3,0,0,6733,
        6734,3,796,398,0,6734,535,1,0,0,0,6735,6736,5,338,0,0,6736,6737,
        5,435,0,0,6737,6738,3,794,397,0,6738,6739,7,3,0,0,6739,6740,3,794,
        397,0,6740,537,1,0,0,0,6741,6742,5,338,0,0,6742,6743,5,468,0,0,6743,
        6744,3,796,398,0,6744,6745,7,3,0,0,6745,6746,3,796,398,0,6746,539,
        1,0,0,0,6747,6748,5,340,0,0,6748,6749,5,869,0,0,6749,6759,5,229,
        0,0,6750,6751,5,474,0,0,6751,6756,3,90,45,0,6752,6753,5,1208,0,0,
        6753,6755,3,90,45,0,6754,6752,1,0,0,0,6755,6758,1,0,0,0,6756,6754,
        1,0,0,0,6756,6757,1,0,0,0,6757,6760,1,0,0,0,6758,6756,1,0,0,0,6759,
        6750,1,0,0,0,6759,6760,1,0,0,0,6760,6764,1,0,0,0,6761,6762,5,252,
        0,0,6762,6763,5,1224,0,0,6763,6765,3,768,384,0,6764,6761,1,0,0,0,
        6764,6765,1,0,0,0,6765,6772,1,0,0,0,6766,6767,5,221,0,0,6767,6770,
        3,92,46,0,6768,6769,5,16,0,0,6769,6771,3,92,46,0,6770,6768,1,0,0,
        0,6770,6771,1,0,0,0,6771,6773,1,0,0,0,6772,6766,1,0,0,0,6772,6773,
        1,0,0,0,6773,6774,1,0,0,0,6774,6775,5,286,0,0,6775,6776,3,94,47,
        0,6776,541,1,0,0,0,6777,6778,5,372,0,0,6778,6781,5,371,0,0,6779,
        6781,5,391,0,0,6780,6777,1,0,0,0,6780,6779,1,0,0,0,6781,6782,1,0,
        0,0,6782,6783,5,5,0,0,6783,6784,5,1224,0,0,6784,6785,3,762,381,0,
        6785,6786,5,159,0,0,6786,6787,7,56,0,0,6787,6956,1,0,0,0,6788,6789,
        5,372,0,0,6789,6792,5,371,0,0,6790,6792,5,391,0,0,6791,6788,1,0,
        0,0,6791,6790,1,0,0,0,6792,6793,1,0,0,0,6793,6794,5,558,0,0,6794,
        6795,5,1224,0,0,6795,6956,3,792,396,0,6796,6797,5,372,0,0,6797,6800,
        5,371,0,0,6798,6800,5,391,0,0,6799,6796,1,0,0,0,6799,6798,1,0,0,
        0,6800,6801,1,0,0,0,6801,6802,5,55,0,0,6802,6803,5,372,0,0,6803,
        6804,5,1015,0,0,6804,6805,5,844,0,0,6805,6806,5,984,0,0,6806,6956,
        7,10,0,0,6807,6808,5,372,0,0,6808,6811,5,371,0,0,6809,6811,5,391,
        0,0,6810,6807,1,0,0,0,6810,6809,1,0,0,0,6811,6812,1,0,0,0,6812,6813,
        5,67,0,0,6813,6956,3,544,272,0,6814,6815,5,372,0,0,6815,6818,5,371,
        0,0,6816,6818,5,391,0,0,6817,6814,1,0,0,0,6817,6816,1,0,0,0,6818,
        6819,1,0,0,0,6819,6824,3,546,273,0,6820,6821,5,1208,0,0,6821,6823,
        3,546,273,0,6822,6820,1,0,0,0,6823,6826,1,0,0,0,6824,6822,1,0,0,
        0,6824,6825,1,0,0,0,6825,6956,1,0,0,0,6826,6824,1,0,0,0,6827,6828,
        5,372,0,0,6828,6831,5,371,0,0,6829,6831,5,391,0,0,6830,6827,1,0,
        0,0,6830,6829,1,0,0,0,6831,6832,1,0,0,0,6832,6833,5,102,0,0,6833,
        6956,3,804,402,0,6834,6835,5,372,0,0,6835,6838,5,371,0,0,6836,6838,
        5,391,0,0,6837,6834,1,0,0,0,6837,6836,1,0,0,0,6838,6839,1,0,0,0,
        6839,6840,5,105,0,0,6840,6841,5,1224,0,0,6841,6956,7,57,0,0,6842,
        6843,5,372,0,0,6843,6846,5,371,0,0,6844,6846,5,391,0,0,6845,6842,
        1,0,0,0,6845,6844,1,0,0,0,6846,6847,1,0,0,0,6847,6848,5,619,0,0,
        6848,6849,3,550,275,0,6849,6850,7,10,0,0,6850,6956,1,0,0,0,6851,
        6852,5,372,0,0,6852,6855,5,371,0,0,6853,6855,5,391,0,0,6854,6851,
        1,0,0,0,6854,6853,1,0,0,0,6855,6856,1,0,0,0,6856,6857,5,637,0,0,
        6857,6858,5,802,0,0,6858,6859,7,58,0,0,6859,6860,5,286,0,0,6860,
        6956,5,137,0,0,6861,6862,5,372,0,0,6862,6865,5,371,0,0,6863,6865,
        5,391,0,0,6864,6861,1,0,0,0,6864,6863,1,0,0,0,6865,6866,1,0,0,0,
        6866,6868,5,159,0,0,6867,6869,5,268,0,0,6868,6867,1,0,0,0,6868,6869,
        1,0,0,0,6869,6871,1,0,0,0,6870,6872,5,587,0,0,6871,6870,1,0,0,0,
        6871,6872,1,0,0,0,6872,6873,1,0,0,0,6873,6874,5,716,0,0,6874,6956,
        5,223,0,0,6875,6876,5,372,0,0,6876,6879,5,371,0,0,6877,6879,5,391,
        0,0,6878,6875,1,0,0,0,6878,6877,1,0,0,0,6879,6880,1,0,0,0,6880,6881,
        5,166,0,0,6881,6884,5,428,0,0,6882,6885,3,552,276,0,6883,6885,5,
        283,0,0,6884,6882,1,0,0,0,6884,6883,1,0,0,0,6885,6956,1,0,0,0,6886,
        6887,5,372,0,0,6887,6890,5,371,0,0,6888,6890,5,391,0,0,6889,6886,
        1,0,0,0,6889,6888,1,0,0,0,6890,6891,1,0,0,0,6891,6892,5,720,0,0,
        6892,6893,5,697,0,0,6893,6894,5,655,0,0,6894,6956,7,10,0,0,6895,
        6896,5,372,0,0,6896,6899,5,371,0,0,6897,6899,5,391,0,0,6898,6895,
        1,0,0,0,6898,6897,1,0,0,0,6899,6900,1,0,0,0,6900,6901,5,909,0,0,
        6901,6902,5,1224,0,0,6902,6907,3,804,402,0,6903,6904,5,1208,0,0,
        6904,6906,3,804,402,0,6905,6903,1,0,0,0,6906,6909,1,0,0,0,6907,6905,
        1,0,0,0,6907,6908,1,0,0,0,6908,6956,1,0,0,0,6909,6907,1,0,0,0,6910,
        6911,5,372,0,0,6911,6914,5,371,0,0,6912,6914,5,391,0,0,6913,6910,
        1,0,0,0,6913,6912,1,0,0,0,6914,6915,1,0,0,0,6915,6916,5,568,0,0,
        6916,6917,5,20,0,0,6917,6918,5,430,0,0,6918,6919,5,717,0,0,6919,
        6920,5,740,0,0,6920,6956,3,548,274,0,6921,6922,5,372,0,0,6922,6923,
        5,421,0,0,6923,6927,5,480,0,0,6924,6928,5,224,0,0,6925,6928,5,456,
        0,0,6926,6928,3,1000,500,0,6927,6924,1,0,0,0,6927,6925,1,0,0,0,6927,
        6926,1,0,0,0,6928,6956,1,0,0,0,6929,6930,5,372,0,0,6930,6933,5,371,
        0,0,6931,6933,5,391,0,0,6932,6929,1,0,0,0,6932,6931,1,0,0,0,6933,
        6934,1,0,0,0,6934,6935,5,1012,0,0,6935,6936,5,1224,0,0,6936,6941,
        3,804,402,0,6937,6938,5,1208,0,0,6938,6940,3,804,402,0,6939,6937,
        1,0,0,0,6940,6943,1,0,0,0,6941,6939,1,0,0,0,6941,6942,1,0,0,0,6942,
        6944,1,0,0,0,6943,6941,1,0,0,0,6944,6945,5,159,0,0,6945,6946,5,166,
        0,0,6946,6947,5,1224,0,0,6947,6952,3,796,398,0,6948,6949,5,1208,
        0,0,6949,6951,3,796,398,0,6950,6948,1,0,0,0,6951,6954,1,0,0,0,6952,
        6950,1,0,0,0,6952,6953,1,0,0,0,6953,6956,1,0,0,0,6954,6952,1,0,0,
        0,6955,6780,1,0,0,0,6955,6791,1,0,0,0,6955,6799,1,0,0,0,6955,6810,
        1,0,0,0,6955,6817,1,0,0,0,6955,6830,1,0,0,0,6955,6837,1,0,0,0,6955,
        6845,1,0,0,0,6955,6854,1,0,0,0,6955,6864,1,0,0,0,6955,6878,1,0,0,
        0,6955,6889,1,0,0,0,6955,6898,1,0,0,0,6955,6913,1,0,0,0,6955,6921,
        1,0,0,0,6955,6932,1,0,0,0,6956,543,1,0,0,0,6957,6958,7,59,0,0,6958,
        545,1,0,0,0,6959,6960,5,74,0,0,6960,6961,5,1224,0,0,6961,6962,3,
        792,396,0,6962,6973,5,1213,0,0,6963,6974,3,792,396,0,6964,6969,3,
        792,396,0,6965,6966,5,1208,0,0,6966,6968,3,792,396,0,6967,6965,1,
        0,0,0,6968,6971,1,0,0,0,6969,6967,1,0,0,0,6969,6970,1,0,0,0,6970,
        6974,1,0,0,0,6971,6969,1,0,0,0,6972,6974,5,274,0,0,6973,6963,1,0,
        0,0,6973,6964,1,0,0,0,6973,6972,1,0,0,0,6974,6975,1,0,0,0,6975,6976,
        5,1214,0,0,6976,547,1,0,0,0,6977,6978,5,877,0,0,6978,6983,5,1014,
        0,0,6979,6983,5,900,0,0,6980,6983,5,916,0,0,6981,6983,5,935,0,0,
        6982,6977,1,0,0,0,6982,6979,1,0,0,0,6982,6980,1,0,0,0,6982,6981,
        1,0,0,0,6983,549,1,0,0,0,6984,6985,5,166,0,0,6985,6994,3,800,400,
        0,6986,6987,5,310,0,0,6987,6994,3,798,399,0,6988,6990,5,243,0,0,
        6989,6991,3,722,361,0,6990,6989,1,0,0,0,6990,6991,1,0,0,0,6991,6992,
        1,0,0,0,6992,6994,3,832,416,0,6993,6984,1,0,0,0,6993,6986,1,0,0,
        0,6993,6988,1,0,0,0,6994,551,1,0,0,0,6995,6996,5,457,0,0,6996,6997,
        3,762,381,0,6997,6999,5,159,0,0,6998,7000,5,428,0,0,6999,6998,1,
        0,0,0,6999,7000,1,0,0,0,7000,7001,1,0,0,0,7001,7002,5,406,0,0,7002,
        7003,3,796,398,0,7003,553,1,0,0,0,7004,7005,5,372,0,0,7005,7011,
        5,357,0,0,7006,7012,3,808,404,0,7007,7012,5,151,0,0,7008,7012,5,
        269,0,0,7009,7012,5,274,0,0,7010,7012,5,13,0,0,7011,7006,1,0,0,0,
        7011,7007,1,0,0,0,7011,7008,1,0,0,0,7011,7009,1,0,0,0,7011,7010,
        1,0,0,0,7012,555,1,0,0,0,7013,7014,5,372,0,0,7014,7015,5,870,0,0,
        7015,7018,5,1224,0,0,7016,7019,3,762,381,0,7017,7019,5,269,0,0,7018,
        7016,1,0,0,0,7018,7017,1,0,0,0,7019,7021,1,0,0,0,7020,7022,5,453,
        0,0,7021,7020,1,0,0,0,7021,7022,1,0,0,0,7022,7023,1,0,0,0,7023,7029,
        5,159,0,0,7024,7026,5,371,0,0,7025,7027,5,469,0,0,7026,7025,1,0,
        0,0,7026,7027,1,0,0,0,7027,7030,1,0,0,0,7028,7030,5,430,0,0,7029,
        7024,1,0,0,0,7029,7028,1,0,0,0,7030,557,1,0,0,0,7031,7034,5,376,
        0,0,7032,7033,5,190,0,0,7033,7035,5,1042,0,0,7034,7032,1,0,0,0,7034,
        7035,1,0,0,0,7035,7036,1,0,0,0,7036,7037,5,178,0,0,7037,7038,5,192,
        0,0,7038,7146,3,794,397,0,7039,7042,5,376,0,0,7040,7041,5,190,0,
        0,7041,7043,5,1042,0,0,7042,7040,1,0,0,0,7042,7043,1,0,0,0,7043,
        7044,1,0,0,0,7044,7045,5,210,0,0,7045,7046,5,192,0,0,7046,7146,3,
        794,397,0,7047,7048,5,376,0,0,7048,7049,5,235,0,0,7049,7146,3,802,
        401,0,7050,7053,5,376,0,0,7051,7052,5,190,0,0,7052,7054,5,1042,0,
        0,7053,7051,1,0,0,0,7053,7054,1,0,0,0,7054,7056,1,0,0,0,7055,7057,
        5,417,0,0,7056,7055,1,0,0,0,7056,7057,1,0,0,0,7057,7058,1,0,0,0,
        7058,7059,5,406,0,0,7059,7146,3,796,398,0,7060,7061,5,376,0,0,7061,
        7062,5,137,0,0,7062,7063,5,406,0,0,7063,7064,5,159,0,0,7064,7146,
        3,796,398,0,7065,7066,5,376,0,0,7066,7067,5,435,0,0,7067,7146,3,
        794,397,0,7068,7071,5,376,0,0,7069,7070,5,190,0,0,7070,7072,5,1042,
        0,0,7071,7069,1,0,0,0,7071,7072,1,0,0,0,7072,7073,1,0,0,0,7073,7074,
        5,468,0,0,7074,7146,3,796,398,0,7075,7076,5,376,0,0,7076,7077,5,
        310,0,0,7077,7146,3,798,399,0,7078,7079,5,376,0,0,7079,7080,5,384,
        0,0,7080,7081,5,166,0,0,7081,7146,3,800,400,0,7082,7083,5,376,0,
        0,7083,7084,5,166,0,0,7084,7096,3,800,400,0,7085,7086,5,1213,0,0,
        7086,7091,3,694,347,0,7087,7088,5,1208,0,0,7088,7090,3,694,347,0,
        7089,7087,1,0,0,0,7090,7093,1,0,0,0,7091,7089,1,0,0,0,7091,7092,
        1,0,0,0,7092,7094,1,0,0,0,7093,7091,1,0,0,0,7094,7095,5,1214,0,0,
        7095,7097,1,0,0,0,7096,7085,1,0,0,0,7096,7097,1,0,0,0,7097,7146,
        1,0,0,0,7098,7099,5,376,0,0,7099,7100,5,384,0,0,7100,7102,5,243,
        0,0,7101,7103,3,722,361,0,7102,7101,1,0,0,0,7102,7103,1,0,0,0,7103,
        7104,1,0,0,0,7104,7146,3,832,416,0,7105,7106,5,376,0,0,7106,7146,
        3,570,285,0,7107,7108,5,376,0,0,7108,7109,5,50,0,0,7109,7146,3,712,
        356,0,7110,7111,5,376,0,0,7111,7112,5,437,0,0,7112,7146,3,712,356,
        0,7113,7114,5,376,0,0,7114,7116,3,752,376,0,7115,7117,3,754,377,
        0,7116,7115,1,0,0,0,7116,7117,1,0,0,0,7117,7118,1,0,0,0,7118,7119,
        5,905,0,0,7119,7120,3,712,356,0,7120,7146,1,0,0,0,7121,7122,5,376,
        0,0,7122,7123,5,668,0,0,7123,7146,3,794,397,0,7124,7125,5,376,0,
        0,7125,7126,5,74,0,0,7126,7146,3,794,397,0,7127,7128,5,376,0,0,7128,
        7129,5,29,0,0,7129,7146,3,794,397,0,7130,7131,5,376,0,0,7131,7132,
        5,688,0,0,7132,7133,5,372,0,0,7133,7146,3,794,397,0,7134,7137,5,
        376,0,0,7135,7136,5,190,0,0,7136,7138,5,1042,0,0,7137,7135,1,0,0,
        0,7137,7138,1,0,0,0,7138,7139,1,0,0,0,7139,7140,5,160,0,0,7140,7142,
        5,917,0,0,7141,7143,3,1076,538,0,7142,7141,1,0,0,0,7142,7143,1,0,
        0,0,7143,7144,1,0,0,0,7144,7146,3,792,396,0,7145,7031,1,0,0,0,7145,
        7039,1,0,0,0,7145,7047,1,0,0,0,7145,7050,1,0,0,0,7145,7060,1,0,0,
        0,7145,7065,1,0,0,0,7145,7068,1,0,0,0,7145,7075,1,0,0,0,7145,7078,
        1,0,0,0,7145,7082,1,0,0,0,7145,7098,1,0,0,0,7145,7105,1,0,0,0,7145,
        7107,1,0,0,0,7145,7110,1,0,0,0,7145,7113,1,0,0,0,7145,7121,1,0,0,
        0,7145,7124,1,0,0,0,7145,7127,1,0,0,0,7145,7130,1,0,0,0,7145,7134,
        1,0,0,0,7146,559,1,0,0,0,7147,7148,5,376,0,0,7148,7149,5,869,0,0,
        7149,7150,5,229,0,0,7150,7151,5,286,0,0,7151,7152,3,94,47,0,7152,
        561,1,0,0,0,7153,7156,5,376,0,0,7154,7155,5,190,0,0,7155,7157,5,
        1042,0,0,7156,7154,1,0,0,0,7156,7157,1,0,0,0,7157,7159,1,0,0,0,7158,
        7160,5,314,0,0,7159,7158,1,0,0,0,7159,7160,1,0,0,0,7160,7161,1,0,
        0,0,7161,7162,3,598,299,0,7162,563,1,0,0,0,7163,7166,5,376,0,0,7164,
        7165,5,190,0,0,7165,7167,5,1042,0,0,7166,7164,1,0,0,0,7166,7167,
        1,0,0,0,7167,7169,1,0,0,0,7168,7170,5,404,0,0,7169,7168,1,0,0,0,
        7169,7170,1,0,0,0,7170,7172,1,0,0,0,7171,7173,5,93,0,0,7172,7171,
        1,0,0,0,7172,7173,1,0,0,0,7173,7174,1,0,0,0,7174,7179,7,14,0,0,7175,
        7177,5,460,0,0,7176,7178,5,915,0,0,7177,7176,1,0,0,0,7177,7178,1,
        0,0,0,7178,7180,1,0,0,0,7179,7175,1,0,0,0,7179,7180,1,0,0,0,7180,
        7189,1,0,0,0,7181,7186,3,568,284,0,7182,7183,5,1208,0,0,7183,7185,
        3,568,284,0,7184,7182,1,0,0,0,7185,7188,1,0,0,0,7186,7184,1,0,0,
        0,7186,7187,1,0,0,0,7187,7190,1,0,0,0,7188,7186,1,0,0,0,7189,7181,
        1,0,0,0,7189,7190,1,0,0,0,7190,7191,1,0,0,0,7191,7195,5,286,0,0,
        7192,7193,5,417,0,0,7193,7196,3,796,398,0,7194,7196,3,796,398,0,
        7195,7192,1,0,0,0,7195,7194,1,0,0,0,7196,565,1,0,0,0,7197,7200,5,
        376,0,0,7198,7199,5,190,0,0,7199,7201,5,1042,0,0,7200,7198,1,0,0,
        0,7200,7201,1,0,0,0,7201,7202,1,0,0,0,7202,7207,7,14,0,0,7203,7205,
        5,460,0,0,7204,7206,5,915,0,0,7205,7204,1,0,0,0,7205,7206,1,0,0,
        0,7206,7208,1,0,0,0,7207,7203,1,0,0,0,7207,7208,1,0,0,0,7208,7217,
        1,0,0,0,7209,7214,3,568,284,0,7210,7211,5,1208,0,0,7211,7213,3,568,
        284,0,7212,7210,1,0,0,0,7213,7216,1,0,0,0,7214,7212,1,0,0,0,7214,
        7215,1,0,0,0,7215,7218,1,0,0,0,7216,7214,1,0,0,0,7217,7209,1,0,0,
        0,7217,7218,1,0,0,0,7218,7219,1,0,0,0,7219,7220,5,286,0,0,7220,7221,
        3,794,397,0,7221,7222,5,164,0,0,7222,7226,3,804,402,0,7223,7224,
        5,159,0,0,7224,7225,5,869,0,0,7225,7227,3,768,384,0,7226,7223,1,
        0,0,0,7226,7227,1,0,0,0,7227,7230,1,0,0,0,7228,7229,5,366,0,0,7229,
        7231,3,768,384,0,7230,7228,1,0,0,0,7230,7231,1,0,0,0,7231,7234,1,
        0,0,0,7232,7233,5,457,0,0,7233,7235,5,773,0,0,7234,7232,1,0,0,0,
        7234,7235,1,0,0,0,7235,567,1,0,0,0,7236,7238,5,448,0,0,7237,7236,
        1,0,0,0,7237,7238,1,0,0,0,7238,7239,1,0,0,0,7239,7240,5,192,0,0,
        7240,7244,3,112,56,0,7241,7242,5,69,0,0,7242,7244,3,114,57,0,7243,
        7237,1,0,0,0,7243,7241,1,0,0,0,7244,569,1,0,0,0,7245,7247,7,11,0,
        0,7246,7245,1,0,0,0,7246,7247,1,0,0,0,7247,7248,1,0,0,0,7248,7249,
        5,243,0,0,7249,7262,3,832,416,0,7250,7259,5,1213,0,0,7251,7256,3,
        828,414,0,7252,7253,5,1208,0,0,7253,7255,3,828,414,0,7254,7252,1,
        0,0,0,7255,7258,1,0,0,0,7256,7254,1,0,0,0,7256,7257,1,0,0,0,7257,
        7260,1,0,0,0,7258,7256,1,0,0,0,7259,7251,1,0,0,0,7259,7260,1,0,0,
        0,7260,7261,1,0,0,0,7261,7263,5,1214,0,0,7262,7250,1,0,0,0,7262,
        7263,1,0,0,0,7263,7264,1,0,0,0,7264,7265,5,159,0,0,7265,7266,3,828,
        414,0,7266,571,1,0,0,0,7267,7269,5,474,0,0,7268,7270,5,268,0,0,7269,
        7268,1,0,0,0,7269,7270,1,0,0,0,7270,7271,1,0,0,0,7271,7272,5,742,
        0,0,7272,7273,5,187,0,0,7273,573,1,0,0,0,7274,7275,5,291,0,0,7275,
        7276,5,42,0,0,7276,7281,7,41,0,0,7277,7278,5,1213,0,0,7278,7279,
        3,792,396,0,7279,7280,5,1214,0,0,7280,7282,1,0,0,0,7281,7277,1,0,
        0,0,7281,7282,1,0,0,0,7282,575,1,0,0,0,7283,7290,3,578,289,0,7284,
        7290,3,586,293,0,7285,7286,5,571,0,0,7286,7287,5,1224,0,0,7287,7290,
        7,5,0,0,7288,7290,3,350,175,0,7289,7283,1,0,0,0,7289,7284,1,0,0,
        0,7289,7285,1,0,0,0,7289,7288,1,0,0,0,7290,577,1,0,0,0,7291,7292,
        5,236,0,0,7292,7293,5,1224,0,0,7293,7297,3,792,396,0,7294,7295,5,
        577,0,0,7295,7296,5,457,0,0,7296,7298,3,792,396,0,7297,7294,1,0,
        0,0,7297,7298,1,0,0,0,7298,579,1,0,0,0,7299,7300,7,60,0,0,7300,7301,
        5,1224,0,0,7301,7303,3,1000,500,0,7302,7304,5,45,0,0,7303,7302,1,
        0,0,0,7303,7304,1,0,0,0,7304,7306,1,0,0,0,7305,7307,3,582,291,0,
        7306,7305,1,0,0,0,7306,7307,1,0,0,0,7307,581,1,0,0,0,7308,7309,5,
        380,0,0,7309,7312,5,1224,0,0,7310,7313,3,768,384,0,7311,7313,5,111,
        0,0,7312,7310,1,0,0,0,7312,7311,1,0,0,0,7313,7315,1,0,0,0,7314,7316,
        5,300,0,0,7315,7314,1,0,0,0,7315,7316,1,0,0,0,7316,583,1,0,0,0,7317,
        7318,5,111,0,0,7318,7319,5,236,0,0,7319,7322,5,1224,0,0,7320,7323,
        3,792,396,0,7321,7323,5,274,0,0,7322,7320,1,0,0,0,7322,7321,1,0,
        0,0,7323,7330,1,0,0,0,7324,7326,5,297,0,0,7325,7327,5,272,0,0,7326,
        7325,1,0,0,0,7326,7327,1,0,0,0,7327,7328,1,0,0,0,7328,7329,5,286,
        0,0,7329,7331,5,137,0,0,7330,7324,1,0,0,0,7330,7331,1,0,0,0,7331,
        585,1,0,0,0,7332,7334,5,268,0,0,7333,7332,1,0,0,0,7333,7334,1,0,
        0,0,7334,7335,1,0,0,0,7335,7337,5,153,0,0,7336,7338,5,312,0,0,7337,
        7336,1,0,0,0,7337,7338,1,0,0,0,7338,587,1,0,0,0,7339,7341,7,61,0,
        0,7340,7339,1,0,0,0,7340,7341,1,0,0,0,7341,7343,1,0,0,0,7342,7344,
        5,33,0,0,7343,7342,1,0,0,0,7343,7344,1,0,0,0,7344,7345,1,0,0,0,7345,
        7346,5,211,0,0,7346,589,1,0,0,0,7347,7354,5,268,0,0,7348,7354,5,
        126,0,0,7349,7351,5,272,0,0,7350,7349,1,0,0,0,7350,7351,1,0,0,0,
        7351,7352,1,0,0,0,7352,7354,5,224,0,0,7353,7347,1,0,0,0,7353,7348,
        1,0,0,0,7353,7350,1,0,0,0,7353,7354,1,0,0,0,7354,7355,1,0,0,0,7355,
        7356,5,11,0,0,7356,7357,5,211,0,0,7357,591,1,0,0,0,7358,7359,5,111,
        0,0,7359,7360,5,211,0,0,7360,7361,5,406,0,0,7361,7362,5,1224,0,0,
        7362,7363,3,796,398,0,7363,593,1,0,0,0,7364,7365,5,125,0,0,7365,
        7366,5,111,0,0,7366,7367,5,211,0,0,7367,7370,5,406,0,0,7368,7369,
        5,1224,0,0,7369,7371,3,796,398,0,7370,7368,1,0,0,0,7370,7371,1,0,
        0,0,7371,595,1,0,0,0,7372,7373,7,62,0,0,7373,597,1,0,0,0,7374,7401,
        3,600,300,0,7375,7401,3,602,301,0,7376,7401,3,604,302,0,7377,7401,
        3,608,304,0,7378,7401,3,614,307,0,7379,7401,3,624,312,0,7380,7401,
        3,630,315,0,7381,7401,3,632,316,0,7382,7401,3,636,318,0,7383,7401,
        3,638,319,0,7384,7401,3,640,320,0,7385,7401,3,646,323,0,7386,7401,
        3,648,324,0,7387,7401,3,650,325,0,7388,7401,3,652,326,0,7389,7401,
        3,656,328,0,7390,7401,3,658,329,0,7391,7401,3,660,330,0,7392,7401,
        3,662,331,0,7393,7401,3,664,332,0,7394,7401,3,666,333,0,7395,7401,
        3,668,334,0,7396,7401,3,670,335,0,7397,7401,3,672,336,0,7398,7401,
        3,674,337,0,7399,7401,3,676,338,0,7400,7374,1,0,0,0,7400,7375,1,
        0,0,0,7400,7376,1,0,0,0,7400,7377,1,0,0,0,7400,7378,1,0,0,0,7400,
        7379,1,0,0,0,7400,7380,1,0,0,0,7400,7381,1,0,0,0,7400,7382,1,0,0,
        0,7400,7383,1,0,0,0,7400,7384,1,0,0,0,7400,7385,1,0,0,0,7400,7386,
        1,0,0,0,7400,7387,1,0,0,0,7400,7388,1,0,0,0,7400,7389,1,0,0,0,7400,
        7390,1,0,0,0,7400,7391,1,0,0,0,7400,7392,1,0,0,0,7400,7393,1,0,0,
        0,7400,7394,1,0,0,0,7400,7395,1,0,0,0,7400,7396,1,0,0,0,7400,7397,
        1,0,0,0,7400,7398,1,0,0,0,7400,7399,1,0,0,0,7401,599,1,0,0,0,7402,
        7404,3,1204,602,0,7403,7402,1,0,0,0,7403,7404,1,0,0,0,7404,7405,
        1,0,0,0,7405,7406,3,838,419,0,7406,601,1,0,0,0,7407,7408,5,370,0,
        0,7408,7409,5,16,0,0,7409,7410,5,76,0,0,7410,7411,5,427,0,0,7411,
        7412,5,1194,0,0,7412,7414,3,854,427,0,7413,7415,3,858,429,0,7414,
        7413,1,0,0,0,7414,7415,1,0,0,0,7415,7416,1,0,0,0,7416,7417,5,164,
        0,0,7417,7418,3,796,398,0,7418,603,1,0,0,0,7419,7421,3,1206,603,
        0,7420,7419,1,0,0,0,7420,7421,1,0,0,0,7421,7422,1,0,0,0,7422,7424,
        7,29,0,0,7423,7425,3,680,340,0,7424,7423,1,0,0,0,7424,7425,1,0,0,
        0,7425,7446,1,0,0,0,7426,7447,3,796,398,0,7427,7428,5,164,0,0,7428,
        7433,3,606,303,0,7429,7430,5,1208,0,0,7430,7432,3,606,303,0,7431,
        7429,1,0,0,0,7432,7435,1,0,0,0,7433,7431,1,0,0,0,7433,7434,1,0,0,
        0,7434,7447,1,0,0,0,7435,7433,1,0,0,0,7436,7437,3,796,398,0,7437,
        7438,5,164,0,0,7438,7443,3,606,303,0,7439,7440,5,1208,0,0,7440,7442,
        3,606,303,0,7441,7439,1,0,0,0,7442,7445,1,0,0,0,7443,7441,1,0,0,
        0,7443,7444,1,0,0,0,7444,7447,1,0,0,0,7445,7443,1,0,0,0,7446,7426,
        1,0,0,0,7446,7427,1,0,0,0,7446,7436,1,0,0,0,7447,7450,1,0,0,0,7448,
        7451,3,956,478,0,7449,7451,5,13,0,0,7450,7448,1,0,0,0,7450,7449,
        1,0,0,0,7450,7451,1,0,0,0,7451,605,1,0,0,0,7452,7457,3,796,398,0,
        7453,7455,5,20,0,0,7454,7453,1,0,0,0,7454,7455,1,0,0,0,7455,7456,
        1,0,0,0,7456,7458,3,812,406,0,7457,7454,1,0,0,0,7457,7458,1,0,0,
        0,7458,7466,1,0,0,0,7459,7461,3,1188,594,0,7460,7462,5,20,0,0,7461,
        7460,1,0,0,0,7461,7462,1,0,0,0,7462,7463,1,0,0,0,7463,7464,3,812,
        406,0,7464,7466,1,0,0,0,7465,7452,1,0,0,0,7465,7459,1,0,0,0,7466,
        607,1,0,0,0,7467,7469,3,1206,603,0,7468,7467,1,0,0,0,7468,7469,1,
        0,0,0,7469,7470,1,0,0,0,7470,7472,7,63,0,0,7471,7473,3,680,340,0,
        7472,7471,1,0,0,0,7472,7473,1,0,0,0,7473,7475,1,0,0,0,7474,7476,
        5,206,0,0,7475,7474,1,0,0,0,7475,7476,1,0,0,0,7476,7477,1,0,0,0,
        7477,7479,3,796,398,0,7478,7480,3,892,446,0,7479,7478,1,0,0,0,7479,
        7480,1,0,0,0,7480,7525,1,0,0,0,7481,7483,5,460,0,0,7482,7481,1,0,
        0,0,7482,7483,1,0,0,0,7483,7484,1,0,0,0,7484,7486,5,1213,0,0,7485,
        7487,3,1000,500,0,7486,7485,1,0,0,0,7486,7487,1,0,0,0,7487,7494,
        1,0,0,0,7488,7490,5,1208,0,0,7489,7491,3,1000,500,0,7490,7489,1,
        0,0,0,7490,7491,1,0,0,0,7491,7493,1,0,0,0,7492,7488,1,0,0,0,7493,
        7496,1,0,0,0,7494,7492,1,0,0,0,7494,7495,1,0,0,0,7495,7497,1,0,0,
        0,7496,7494,1,0,0,0,7497,7526,5,1214,0,0,7498,7499,3,1186,593,0,
        7499,7500,5,460,0,0,7500,7501,3,1184,592,0,7501,7526,1,0,0,0,7502,
        7504,3,1186,593,0,7503,7502,1,0,0,0,7503,7504,1,0,0,0,7504,7506,
        1,0,0,0,7505,7507,3,1212,606,0,7506,7505,1,0,0,0,7506,7507,1,0,0,
        0,7507,7508,1,0,0,0,7508,7510,3,838,419,0,7509,7511,3,610,305,0,
        7510,7509,1,0,0,0,7510,7511,1,0,0,0,7511,7513,1,0,0,0,7512,7514,
        3,612,306,0,7513,7512,1,0,0,0,7513,7514,1,0,0,0,7514,7516,1,0,0,
        0,7515,7517,3,682,341,0,7516,7515,1,0,0,0,7516,7517,1,0,0,0,7517,
        7526,1,0,0,0,7518,7521,5,720,0,0,7519,7522,3,762,381,0,7520,7522,
        5,1212,0,0,7521,7519,1,0,0,0,7521,7520,1,0,0,0,7522,7526,1,0,0,0,
        7523,7524,5,111,0,0,7524,7526,5,460,0,0,7525,7482,1,0,0,0,7525,7498,
        1,0,0,0,7525,7503,1,0,0,0,7525,7518,1,0,0,0,7525,7523,1,0,0,0,7526,
        609,1,0,0,0,7527,7528,5,178,0,0,7528,7538,5,42,0,0,7529,7534,3,1000,
        500,0,7530,7531,5,1208,0,0,7531,7533,3,1000,500,0,7532,7530,1,0,
        0,0,7533,7536,1,0,0,0,7534,7532,1,0,0,0,7534,7535,1,0,0,0,7535,7539,
        1,0,0,0,7536,7534,1,0,0,0,7537,7539,5,319,0,0,7538,7529,1,0,0,0,
        7538,7537,1,0,0,0,7539,611,1,0,0,0,7540,7541,5,224,0,0,7541,7542,
        5,291,0,0,7542,7543,5,42,0,0,7543,7548,3,992,496,0,7544,7545,5,1208,
        0,0,7545,7547,3,992,496,0,7546,7544,1,0,0,0,7547,7550,1,0,0,0,7548,
        7546,1,0,0,0,7548,7549,1,0,0,0,7549,613,1,0,0,0,7550,7548,1,0,0,
        0,7551,7555,3,616,308,0,7552,7555,3,618,309,0,7553,7555,3,620,310,
        0,7554,7551,1,0,0,0,7554,7552,1,0,0,0,7554,7553,1,0,0,0,7555,615,
        1,0,0,0,7556,7558,3,1206,603,0,7557,7556,1,0,0,0,7557,7558,1,0,0,
        0,7558,7559,1,0,0,0,7559,7561,7,30,0,0,7560,7562,3,680,340,0,7561,
        7560,1,0,0,0,7561,7562,1,0,0,0,7562,7563,1,0,0,0,7563,7568,3,796,
        398,0,7564,7566,5,20,0,0,7565,7564,1,0,0,0,7565,7566,1,0,0,0,7566,
        7567,1,0,0,0,7567,7569,3,812,406,0,7568,7565,1,0,0,0,7568,7569,1,
        0,0,0,7569,7570,1,0,0,0,7570,7571,5,372,0,0,7571,7576,3,678,339,
        0,7572,7573,5,1208,0,0,7573,7575,3,678,339,0,7574,7572,1,0,0,0,7575,
        7578,1,0,0,0,7576,7574,1,0,0,0,7576,7577,1,0,0,0,7577,7581,1,0,0,
        0,7578,7576,1,0,0,0,7579,7582,3,956,478,0,7580,7582,5,13,0,0,7581,
        7579,1,0,0,0,7581,7580,1,0,0,0,7581,7582,1,0,0,0,7582,617,1,0,0,
        0,7583,7585,3,1206,603,0,7584,7583,1,0,0,0,7584,7585,1,0,0,0,7585,
        7586,1,0,0,0,7586,7588,7,30,0,0,7587,7589,3,680,340,0,7588,7587,
        1,0,0,0,7588,7589,1,0,0,0,7589,7590,1,0,0,0,7590,7591,3,796,398,
        0,7591,7592,5,164,0,0,7592,7597,3,622,311,0,7593,7594,5,1208,0,0,
        7594,7596,3,622,311,0,7595,7593,1,0,0,0,7596,7599,1,0,0,0,7597,7595,
        1,0,0,0,7597,7598,1,0,0,0,7598,7600,1,0,0,0,7599,7597,1,0,0,0,7600,
        7601,5,372,0,0,7601,7606,3,678,339,0,7602,7603,5,1208,0,0,7603,7605,
        3,678,339,0,7604,7602,1,0,0,0,7605,7608,1,0,0,0,7606,7604,1,0,0,
        0,7606,7607,1,0,0,0,7607,7611,1,0,0,0,7608,7606,1,0,0,0,7609,7612,
        3,956,478,0,7610,7612,5,13,0,0,7611,7609,1,0,0,0,7611,7610,1,0,0,
        0,7611,7612,1,0,0,0,7612,619,1,0,0,0,7613,7615,3,1206,603,0,7614,
        7613,1,0,0,0,7614,7615,1,0,0,0,7615,7616,1,0,0,0,7616,7618,7,30,
        0,0,7617,7619,3,680,340,0,7618,7617,1,0,0,0,7618,7619,1,0,0,0,7619,
        7620,1,0,0,0,7620,7622,3,796,398,0,7621,7623,5,20,0,0,7622,7621,
        1,0,0,0,7622,7623,1,0,0,0,7623,7624,1,0,0,0,7624,7625,3,812,406,
        0,7625,7626,1,0,0,0,7626,7627,5,372,0,0,7627,7632,3,678,339,0,7628,
        7629,5,1208,0,0,7629,7631,3,678,339,0,7630,7628,1,0,0,0,7631,7634,
        1,0,0,0,7632,7630,1,0,0,0,7632,7633,1,0,0,0,7633,7635,1,0,0,0,7634,
        7632,1,0,0,0,7635,7636,5,471,0,0,7636,7637,3,998,499,0,7637,7638,
        5,131,0,0,7638,7640,7,63,0,0,7639,7641,5,206,0,0,7640,7639,1,0,0,
        0,7640,7641,1,0,0,0,7641,7642,1,0,0,0,7642,7655,3,796,398,0,7643,
        7645,5,460,0,0,7644,7643,1,0,0,0,7644,7645,1,0,0,0,7645,7646,1,0,
        0,0,7646,7656,3,1184,592,0,7647,7649,3,1186,593,0,7648,7650,5,460,
        0,0,7649,7648,1,0,0,0,7649,7650,1,0,0,0,7650,7651,1,0,0,0,7651,7652,
        3,1184,592,0,7652,7656,1,0,0,0,7653,7654,5,111,0,0,7654,7656,5,460,
        0,0,7655,7644,1,0,0,0,7655,7647,1,0,0,0,7655,7653,1,0,0,0,7656,621,
        1,0,0,0,7657,7662,3,796,398,0,7658,7660,5,20,0,0,7659,7658,1,0,0,
        0,7659,7660,1,0,0,0,7660,7661,1,0,0,0,7661,7663,3,812,406,0,7662,
        7659,1,0,0,0,7662,7663,1,0,0,0,7663,7671,1,0,0,0,7664,7666,3,1188,
        594,0,7665,7667,5,20,0,0,7666,7665,1,0,0,0,7666,7667,1,0,0,0,7667,
        7668,1,0,0,0,7668,7669,3,812,406,0,7669,7671,1,0,0,0,7670,7657,1,
        0,0,0,7670,7664,1,0,0,0,7671,623,1,0,0,0,7672,7674,3,1206,603,0,
        7673,7672,1,0,0,0,7673,7674,1,0,0,0,7674,7675,1,0,0,0,7675,7677,
        5,242,0,0,7676,7678,3,680,340,0,7677,7676,1,0,0,0,7677,7678,1,0,
        0,0,7678,7680,1,0,0,0,7679,7681,5,206,0,0,7680,7679,1,0,0,0,7680,
        7681,1,0,0,0,7681,7682,1,0,0,0,7682,7687,3,796,398,0,7683,7685,5,
        20,0,0,7684,7683,1,0,0,0,7684,7685,1,0,0,0,7685,7686,1,0,0,0,7686,
        7688,3,812,406,0,7687,7684,1,0,0,0,7687,7688,1,0,0,0,7688,7689,1,
        0,0,0,7689,7694,5,457,0,0,7690,7691,5,460,0,0,7691,7695,3,1184,592,
        0,7692,7695,3,1188,594,0,7693,7695,3,796,398,0,7694,7690,1,0,0,0,
        7694,7692,1,0,0,0,7694,7693,1,0,0,0,7695,7697,1,0,0,0,7696,7698,
        5,20,0,0,7697,7696,1,0,0,0,7697,7698,1,0,0,0,7698,7699,1,0,0,0,7699,
        7701,3,812,406,0,7700,7702,3,1186,593,0,7701,7700,1,0,0,0,7701,7702,
        1,0,0,0,7702,7703,1,0,0,0,7703,7704,5,286,0,0,7704,7713,3,998,499,
        0,7705,7707,3,626,313,0,7706,7708,3,628,314,0,7707,7706,1,0,0,0,
        7707,7708,1,0,0,0,7708,7714,1,0,0,0,7709,7711,3,628,314,0,7710,7712,
        3,626,313,0,7711,7710,1,0,0,0,7711,7712,1,0,0,0,7712,7714,1,0,0,
        0,7713,7705,1,0,0,0,7713,7709,1,0,0,0,7714,7716,1,0,0,0,7715,7717,
        3,682,341,0,7716,7715,1,0,0,0,7716,7717,1,0,0,0,7717,625,1,0,0,0,
        7718,7719,5,470,0,0,7719,7720,5,756,0,0,7720,7732,5,419,0,0,7721,
        7722,7,30,0,0,7722,7723,5,372,0,0,7723,7728,3,678,339,0,7724,7725,
        5,1208,0,0,7725,7727,3,678,339,0,7726,7724,1,0,0,0,7727,7730,1,0,
        0,0,7728,7726,1,0,0,0,7728,7729,1,0,0,0,7729,7733,1,0,0,0,7730,7728,
        1,0,0,0,7731,7733,5,115,0,0,7732,7721,1,0,0,0,7732,7731,1,0,0,0,
        7733,627,1,0,0,0,7734,7735,5,470,0,0,7735,7736,5,272,0,0,7736,7737,
        5,756,0,0,7737,7738,5,419,0,0,7738,7743,7,63,0,0,7739,7744,5,460,
        0,0,7740,7741,3,1186,593,0,7741,7742,5,460,0,0,7742,7744,1,0,0,0,
        7743,7739,1,0,0,0,7743,7740,1,0,0,0,7743,7744,1,0,0,0,7744,7745,
        1,0,0,0,7745,7746,3,1184,592,0,7746,629,1,0,0,0,7747,7748,5,68,0,
        0,7748,7749,5,627,0,0,7749,7762,5,159,0,0,7750,7763,3,796,398,0,
        7751,7752,5,1213,0,0,7752,7757,3,796,398,0,7753,7754,5,1208,0,0,
        7754,7756,3,796,398,0,7755,7753,1,0,0,0,7756,7759,1,0,0,0,7757,7755,
        1,0,0,0,7757,7758,1,0,0,0,7758,7760,1,0,0,0,7759,7757,1,0,0,0,7760,
        7761,5,1214,0,0,7761,7763,1,0,0,0,7762,7750,1,0,0,0,7762,7751,1,
        0,0,0,7763,7764,1,0,0,0,7764,7765,5,206,0,0,7765,7770,3,804,402,
        0,7766,7771,5,13,0,0,7767,7768,5,474,0,0,7768,7769,5,268,0,0,7769,
        7771,5,192,0,0,7770,7766,1,0,0,0,7770,7767,1,0,0,0,7770,7771,1,0,
        0,0,7771,631,1,0,0,0,7772,7773,5,68,0,0,7773,7774,7,14,0,0,7774,
        7775,5,159,0,0,7775,7776,5,365,0,0,7776,7778,3,768,384,0,7777,7779,
        5,300,0,0,7778,7777,1,0,0,0,7778,7779,1,0,0,0,7779,7780,1,0,0,0,
        7780,7781,5,206,0,0,7781,7785,3,804,402,0,7782,7783,5,372,0,0,7783,
        7784,5,869,0,0,7784,7786,3,768,384,0,7785,7782,1,0,0,0,7785,7786,
        1,0,0,0,7786,7789,1,0,0,0,7787,7788,5,366,0,0,7788,7790,3,768,384,
        0,7789,7787,1,0,0,0,7789,7790,1,0,0,0,7790,7793,1,0,0,0,7791,7792,
        5,453,0,0,7792,7794,5,773,0,0,7793,7791,1,0,0,0,7793,7794,1,0,0,
        0,7794,7796,1,0,0,0,7795,7797,5,286,0,0,7796,7795,1,0,0,0,7796,7797,
        1,0,0,0,7797,7798,1,0,0,0,7798,7799,3,796,398,0,7799,7800,3,634,
        317,0,7800,633,1,0,0,0,7801,7820,5,69,0,0,7802,7821,3,788,394,0,
        7803,7821,5,840,0,0,7804,7807,5,1213,0,0,7805,7808,3,788,394,0,7806,
        7808,5,840,0,0,7807,7805,1,0,0,0,7807,7806,1,0,0,0,7808,7816,1,0,
        0,0,7809,7812,5,1208,0,0,7810,7813,3,788,394,0,7811,7813,5,840,0,
        0,7812,7810,1,0,0,0,7812,7811,1,0,0,0,7813,7815,1,0,0,0,7814,7809,
        1,0,0,0,7815,7818,1,0,0,0,7816,7814,1,0,0,0,7816,7817,1,0,0,0,7817,
        7819,1,0,0,0,7818,7816,1,0,0,0,7819,7821,5,1214,0,0,7820,7802,1,
        0,0,0,7820,7803,1,0,0,0,7820,7804,1,0,0,0,7821,7838,1,0,0,0,7822,
        7835,5,192,0,0,7823,7836,3,792,396,0,7824,7825,5,1213,0,0,7825,7830,
        3,788,394,0,7826,7827,5,1208,0,0,7827,7829,3,788,394,0,7828,7826,
        1,0,0,0,7829,7832,1,0,0,0,7830,7828,1,0,0,0,7830,7831,1,0,0,0,7831,
        7833,1,0,0,0,7832,7830,1,0,0,0,7833,7834,5,1214,0,0,7834,7836,1,
        0,0,0,7835,7823,1,0,0,0,7835,7824,1,0,0,0,7836,7838,1,0,0,0,7837,
        7801,1,0,0,0,7837,7822,1,0,0,0,7838,635,1,0,0,0,7839,7840,5,125,
        0,0,7840,7841,7,14,0,0,7841,7842,5,164,0,0,7842,7844,3,804,402,0,
        7843,7845,5,286,0,0,7844,7843,1,0,0,0,7844,7845,1,0,0,0,7845,7846,
        1,0,0,0,7846,7848,3,796,398,0,7847,7849,3,634,317,0,7848,7847,1,
        0,0,0,7848,7849,1,0,0,0,7849,637,1,0,0,0,7850,7851,5,127,0,0,7851,
        7852,5,150,0,0,7852,7853,5,206,0,0,7853,7856,3,804,402,0,7854,7855,
        5,20,0,0,7855,7857,3,792,396,0,7856,7854,1,0,0,0,7856,7857,1,0,0,
        0,7857,7859,1,0,0,0,7858,7860,3,688,344,0,7859,7858,1,0,0,0,7859,
        7860,1,0,0,0,7860,7863,1,0,0,0,7861,7862,5,59,0,0,7862,7864,5,395,
        0,0,7863,7861,1,0,0,0,7863,7864,1,0,0,0,7864,7865,1,0,0,0,7865,7866,
        3,686,343,0,7866,639,1,0,0,0,7867,7868,5,193,0,0,7868,7869,5,192,
        0,0,7869,7879,5,504,0,0,7870,7871,5,286,0,0,7871,7876,3,796,398,
        0,7872,7873,5,1208,0,0,7873,7875,3,796,398,0,7874,7872,1,0,0,0,7875,
        7878,1,0,0,0,7876,7874,1,0,0,0,7876,7877,1,0,0,0,7877,7880,1,0,0,
        0,7878,7876,1,0,0,0,7879,7870,1,0,0,0,7879,7880,1,0,0,0,7880,7881,
        1,0,0,0,7881,7882,5,159,0,0,7882,7883,3,792,396,0,7883,7884,5,190,
        0,0,7884,7885,3,804,402,0,7885,7886,5,20,0,0,7886,7896,3,812,406,
        0,7887,7888,5,372,0,0,7888,7893,3,642,321,0,7889,7890,5,1208,0,0,
        7890,7892,3,642,321,0,7891,7889,1,0,0,0,7892,7895,1,0,0,0,7893,7891,
        1,0,0,0,7893,7894,1,0,0,0,7894,7897,1,0,0,0,7895,7893,1,0,0,0,7896,
        7887,1,0,0,0,7896,7897,1,0,0,0,7897,7900,1,0,0,0,7898,7899,5,728,
        0,0,7899,7901,5,192,0,0,7900,7898,1,0,0,0,7900,7901,1,0,0,0,7901,
        7905,1,0,0,0,7902,7903,5,1018,0,0,7903,7904,5,773,0,0,7904,7906,
        7,14,0,0,7905,7902,1,0,0,0,7905,7906,1,0,0,0,7906,7921,1,0,0,0,7907,
        7909,5,474,0,0,7908,7910,5,268,0,0,7909,7908,1,0,0,0,7909,7910,1,
        0,0,0,7910,7911,1,0,0,0,7911,7912,5,192,0,0,7912,7913,5,437,0,0,
        7913,7918,3,768,384,0,7914,7915,5,1208,0,0,7915,7917,3,768,384,0,
        7916,7914,1,0,0,0,7917,7920,1,0,0,0,7918,7916,1,0,0,0,7918,7919,
        1,0,0,0,7919,7922,1,0,0,0,7920,7918,1,0,0,0,7921,7907,1,0,0,0,7921,
        7922,1,0,0,0,7922,7925,1,0,0,0,7923,7924,5,60,0,0,7924,7926,3,768,
        384,0,7925,7923,1,0,0,0,7925,7926,1,0,0,0,7926,7928,1,0,0,0,7927,
        7929,3,690,345,0,7928,7927,1,0,0,0,7928,7929,1,0,0,0,7929,641,1,
        0,0,0,7930,7931,3,644,322,0,7931,7932,5,1224,0,0,7932,7933,3,768,
        384,0,7933,643,1,0,0,0,7934,7935,7,64,0,0,7935,645,1,0,0,0,7936,
        7937,5,193,0,0,7937,7938,5,840,0,0,7938,7948,5,504,0,0,7939,7940,
        5,286,0,0,7940,7945,3,796,398,0,7941,7942,5,1208,0,0,7942,7944,3,
        796,398,0,7943,7941,1,0,0,0,7944,7947,1,0,0,0,7945,7943,1,0,0,0,
        7945,7946,1,0,0,0,7946,7949,1,0,0,0,7947,7945,1,0,0,0,7948,7939,
        1,0,0,0,7948,7949,1,0,0,0,7949,7950,1,0,0,0,7950,7951,5,159,0,0,
        7951,7952,3,792,396,0,7952,7953,5,190,0,0,7953,7954,3,804,402,0,
        7954,7955,5,20,0,0,7955,7957,3,812,406,0,7956,7958,3,690,345,0,7957,
        7956,1,0,0,0,7957,7958,1,0,0,0,7958,647,1,0,0,0,7959,7960,5,198,
        0,0,7960,7974,5,150,0,0,7961,7963,5,474,0,0,7962,7964,5,268,0,0,
        7963,7962,1,0,0,0,7963,7964,1,0,0,0,7964,7965,1,0,0,0,7965,7972,
        5,395,0,0,7966,7967,5,457,0,0,7967,7968,5,365,0,0,7968,7970,3,768,
        384,0,7969,7971,5,300,0,0,7970,7969,1,0,0,0,7970,7971,1,0,0,0,7971,
        7973,1,0,0,0,7972,7966,1,0,0,0,7972,7973,1,0,0,0,7973,7975,1,0,0,
        0,7974,7961,1,0,0,0,7974,7975,1,0,0,0,7975,7978,1,0,0,0,7976,7977,
        5,16,0,0,7977,7979,5,627,0,0,7978,7976,1,0,0,0,7978,7979,1,0,0,0,
        7979,7989,1,0,0,0,7980,7981,5,159,0,0,7981,7986,3,796,398,0,7982,
        7983,5,1208,0,0,7983,7985,3,796,398,0,7984,7982,1,0,0,0,7985,7988,
        1,0,0,0,7986,7984,1,0,0,0,7986,7987,1,0,0,0,7987,7990,1,0,0,0,7988,
        7986,1,0,0,0,7989,7980,1,0,0,0,7989,7990,1,0,0,0,7990,7991,1,0,0,
        0,7991,7992,5,206,0,0,7992,7995,3,804,402,0,7993,7994,5,20,0,0,7994,
        7996,3,792,396,0,7995,7993,1,0,0,0,7995,7996,1,0,0,0,7996,7998,1,
        0,0,0,7997,7999,3,688,344,0,7998,7997,1,0,0,0,7998,7999,1,0,0,0,
        7999,8002,1,0,0,0,8000,8001,5,159,0,0,8001,8003,3,768,384,0,8002,
        8000,1,0,0,0,8002,8003,1,0,0,0,8003,8006,1,0,0,0,8004,8005,5,59,
        0,0,8005,8007,5,395,0,0,8006,8004,1,0,0,0,8006,8007,1,0,0,0,8007,
        8013,1,0,0,0,8008,8009,5,190,0,0,8009,8011,5,1042,0,0,8010,8012,
        5,795,0,0,8011,8010,1,0,0,0,8011,8012,1,0,0,0,8012,8014,1,0,0,0,
        8013,8008,1,0,0,0,8013,8014,1,0,0,0,8014,8015,1,0,0,0,8015,8016,
        3,686,343,0,8016,649,1,0,0,0,8017,8018,5,345,0,0,8018,8019,5,192,
        0,0,8019,8020,5,504,0,0,8020,8021,5,159,0,0,8021,8022,3,792,396,
        0,8022,8023,5,190,0,0,8023,8024,3,804,402,0,8024,8025,5,20,0,0,8025,
        8028,3,812,406,0,8026,8027,5,60,0,0,8027,8029,3,768,384,0,8028,8026,
        1,0,0,0,8028,8029,1,0,0,0,8029,8031,1,0,0,0,8030,8032,3,690,345,
        0,8031,8030,1,0,0,0,8031,8032,1,0,0,0,8032,651,1,0,0,0,8033,8034,
        5,46,0,0,8034,8035,3,798,399,0,8035,8044,5,1213,0,0,8036,8041,3,
        654,327,0,8037,8038,5,1208,0,0,8038,8040,3,654,327,0,8039,8037,1,
        0,0,0,8040,8043,1,0,0,0,8041,8039,1,0,0,0,8041,8042,1,0,0,0,8042,
        8045,1,0,0,0,8043,8041,1,0,0,0,8044,8036,1,0,0,0,8044,8045,1,0,0,
        0,8045,8046,1,0,0,0,8046,8047,5,1214,0,0,8047,653,1,0,0,0,8048,8050,
        3,1000,500,0,8049,8051,3,1082,541,0,8050,8049,1,0,0,0,8050,8051,
        1,0,0,0,8051,8054,1,0,0,0,8052,8054,5,1212,0,0,8053,8048,1,0,0,0,
        8053,8052,1,0,0,0,8054,655,1,0,0,0,8055,8056,7,65,0,0,8056,8083,
        3,802,401,0,8057,8079,5,1213,0,0,8058,8063,3,1000,500,0,8059,8060,
        5,1208,0,0,8060,8062,3,1000,500,0,8061,8059,1,0,0,0,8062,8065,1,
        0,0,0,8063,8061,1,0,0,0,8063,8064,1,0,0,0,8064,8080,1,0,0,0,8065,
        8063,1,0,0,0,8066,8067,3,816,408,0,8067,8068,5,1224,0,0,8068,8076,
        3,1000,500,0,8069,8070,5,1208,0,0,8070,8071,3,816,408,0,8071,8072,
        5,1224,0,0,8072,8073,3,1000,500,0,8073,8075,1,0,0,0,8074,8069,1,
        0,0,0,8075,8078,1,0,0,0,8076,8074,1,0,0,0,8076,8077,1,0,0,0,8077,
        8080,1,0,0,0,8078,8076,1,0,0,0,8079,8058,1,0,0,0,8079,8066,1,0,0,
        0,8080,8081,1,0,0,0,8081,8082,5,1214,0,0,8082,8084,1,0,0,0,8083,
        8057,1,0,0,0,8083,8084,1,0,0,0,8084,657,1,0,0,0,8085,8090,5,71,0,
        0,8086,8088,5,476,0,0,8087,8089,5,337,0,0,8088,8087,1,0,0,0,8088,
        8089,1,0,0,0,8089,8091,1,0,0,0,8090,8086,1,0,0,0,8090,8091,1,0,0,
        0,8091,659,1,0,0,0,8092,8094,5,358,0,0,8093,8095,5,476,0,0,8094,
        8093,1,0,0,0,8094,8095,1,0,0,0,8095,8097,1,0,0,0,8096,8098,3,762,
        381,0,8097,8096,1,0,0,0,8097,8098,1,0,0,0,8098,8100,1,0,0,0,8099,
        8101,3,860,430,0,8100,8099,1,0,0,0,8100,8101,1,0,0,0,8101,8103,1,
        0,0,0,8102,8104,3,956,478,0,8103,8102,1,0,0,0,8103,8104,1,0,0,0,
        8104,661,1,0,0,0,8105,8107,5,1,0,0,8106,8108,3,762,381,0,8107,8106,
        1,0,0,0,8107,8108,1,0,0,0,8108,8110,1,0,0,0,8109,8111,3,860,430,
        0,8110,8109,1,0,0,0,8110,8111,1,0,0,0,8111,8113,1,0,0,0,8112,8114,
        3,956,478,0,8113,8112,1,0,0,0,8113,8114,1,0,0,0,8114,663,1,0,0,0,
        8115,8116,5,34,0,0,8116,8119,5,430,0,0,8117,8119,5,40,0,0,8118,8115,
        1,0,0,0,8118,8117,1,0,0,0,8119,665,1,0,0,0,8120,8121,5,134,0,0,8121,
        8124,5,430,0,0,8122,8124,5,141,0,0,8123,8120,1,0,0,0,8123,8122,1,
        0,0,0,8124,667,1,0,0,0,8125,8126,3,1206,603,0,8126,669,1,0,0,0,8127,
        8129,5,70,0,0,8128,8130,5,286,0,0,8129,8128,1,0,0,0,8129,8130,1,
        0,0,0,8130,8138,1,0,0,0,8131,8133,3,684,342,0,8132,8131,1,0,0,0,
        8132,8133,1,0,0,0,8133,8134,1,0,0,0,8134,8139,3,794,397,0,8135,8136,
        5,69,0,0,8136,8139,3,788,394,0,8137,8139,3,788,394,0,8138,8132,1,
        0,0,0,8138,8135,1,0,0,0,8138,8137,1,0,0,0,8139,671,1,0,0,0,8140,
        8141,5,60,0,0,8141,8145,3,796,398,0,8142,8143,5,1208,0,0,8143,8144,
        5,262,0,0,8144,8146,3,814,407,0,8145,8142,1,0,0,0,8145,8146,1,0,
        0,0,8146,673,1,0,0,0,8147,8149,5,130,0,0,8148,8150,3,762,381,0,8149,
        8148,1,0,0,0,8149,8150,1,0,0,0,8150,675,1,0,0,0,8151,8152,5,1206,
        0,0,8152,677,1,0,0,0,8153,8154,3,788,394,0,8154,8155,5,1224,0,0,
        8155,8156,3,1000,500,0,8156,679,1,0,0,0,8157,8159,5,474,0,0,8158,
        8160,5,268,0,0,8159,8158,1,0,0,0,8159,8160,1,0,0,0,8160,8162,1,0,
        0,0,8161,8163,5,587,0,0,8162,8161,1,0,0,0,8162,8163,1,0,0,0,8163,
        8164,1,0,0,0,8164,8165,5,716,0,0,8165,8166,5,223,0,0,8166,681,1,
        0,0,0,8167,8169,5,229,0,0,8168,8170,5,13,0,0,8169,8168,1,0,0,0,8169,
        8170,1,0,0,0,8170,8171,1,0,0,0,8171,8180,5,655,0,0,8172,8178,5,474,
        0,0,8173,8174,5,268,0,0,8174,8179,5,221,0,0,8175,8176,5,221,0,0,
        8176,8177,5,282,0,0,8177,8179,3,768,384,0,8178,8173,1,0,0,0,8178,
        8175,1,0,0,0,8179,8181,1,0,0,0,8180,8172,1,0,0,0,8180,8181,1,0,0,
        0,8181,683,1,0,0,0,8182,8199,5,166,0,0,8183,8184,5,688,0,0,8184,
        8199,5,372,0,0,8185,8199,5,174,0,0,8186,8199,5,235,0,0,8187,8199,
        5,243,0,0,8188,8199,5,310,0,0,8189,8199,5,311,0,0,8190,8199,5,357,
        0,0,8191,8199,5,435,0,0,8192,8199,5,437,0,0,8193,8199,5,468,0,0,
        8194,8199,5,102,0,0,8195,8199,5,406,0,0,8196,8199,5,456,0,0,8197,
        8199,5,668,0,0,8198,8182,1,0,0,0,8198,8183,1,0,0,0,8198,8185,1,0,
        0,0,8198,8186,1,0,0,0,8198,8187,1,0,0,0,8198,8188,1,0,0,0,8198,8189,
        1,0,0,0,8198,8190,1,0,0,0,8198,8191,1,0,0,0,8198,8192,1,0,0,0,8198,
        8193,1,0,0,0,8198,8194,1,0,0,0,8198,8195,1,0,0,0,8198,8196,1,0,0,
        0,8198,8197,1,0,0,0,8199,685,1,0,0,0,8200,8207,3,604,302,0,8201,
        8207,3,656,328,0,8202,8207,3,608,304,0,8203,8207,3,624,312,0,8204,
        8207,3,600,300,0,8205,8207,3,614,307,0,8206,8200,1,0,0,0,8206,8201,
        1,0,0,0,8206,8202,1,0,0,0,8206,8203,1,0,0,0,8206,8204,1,0,0,0,8206,
        8205,1,0,0,0,8207,687,1,0,0,0,8208,8214,5,221,0,0,8209,8212,5,386,
        0,0,8210,8211,5,1224,0,0,8211,8213,3,768,384,0,8212,8210,1,0,0,0,
        8212,8213,1,0,0,0,8213,8215,1,0,0,0,8214,8209,1,0,0,0,8214,8215,
        1,0,0,0,8215,689,1,0,0,0,8216,8217,5,421,0,0,8217,8218,5,221,0,0,
        8218,8219,5,1224,0,0,8219,8220,3,768,384,0,8220,691,1,0,0,0,8221,
        8228,3,698,349,0,8222,8228,3,700,350,0,8223,8228,3,706,353,0,8224,
        8228,3,708,354,0,8225,8228,3,710,355,0,8226,8228,3,712,356,0,8227,
        8221,1,0,0,0,8227,8222,1,0,0,0,8227,8223,1,0,0,0,8227,8224,1,0,0,
        0,8227,8225,1,0,0,0,8227,8226,1,0,0,0,8228,693,1,0,0,0,8229,8237,
        3,698,349,0,8230,8237,3,700,350,0,8231,8237,3,702,351,0,8232,8237,
        3,706,353,0,8233,8237,3,708,354,0,8234,8237,3,710,355,0,8235,8237,
        3,712,356,0,8236,8229,1,0,0,0,8236,8230,1,0,0,0,8236,8231,1,0,0,
        0,8236,8232,1,0,0,0,8236,8233,1,0,0,0,8236,8234,1,0,0,0,8236,8235,
        1,0,0,0,8237,695,1,0,0,0,8238,8249,3,698,349,0,8239,8249,3,700,350,
        0,8240,8249,3,702,351,0,8241,8249,3,704,352,0,8242,8249,3,706,353,
        0,8243,8249,3,708,354,0,8244,8249,3,710,355,0,8245,8249,3,712,356,
        0,8246,8249,5,410,0,0,8247,8249,5,466,0,0,8248,8238,1,0,0,0,8248,
        8239,1,0,0,0,8248,8240,1,0,0,0,8248,8241,1,0,0,0,8248,8242,1,0,0,
        0,8248,8243,1,0,0,0,8248,8244,1,0,0,0,8248,8245,1,0,0,0,8248,8246,
        1,0,0,0,8248,8247,1,0,0,0,8249,697,1,0,0,0,8250,8293,5,44,0,0,8251,
        8293,5,381,0,0,8252,8293,5,202,0,0,8253,8293,5,201,0,0,8254,8293,
        5,36,0,0,8255,8265,7,66,0,0,8256,8258,5,1213,0,0,8257,8259,3,768,
        384,0,8258,8257,1,0,0,0,8258,8259,1,0,0,0,8259,8262,1,0,0,0,8260,
        8261,5,1208,0,0,8261,8263,3,768,384,0,8262,8260,1,0,0,0,8262,8263,
        1,0,0,0,8263,8264,1,0,0,0,8264,8266,5,1214,0,0,8265,8256,1,0,0,0,
        8265,8266,1,0,0,0,8266,8293,1,0,0,0,8267,8272,5,157,0,0,8268,8269,
        5,1213,0,0,8269,8270,3,768,384,0,8270,8271,5,1214,0,0,8271,8273,
        1,0,0,0,8272,8268,1,0,0,0,8272,8273,1,0,0,0,8273,8278,1,0,0,0,8274,
        8278,5,323,0,0,8275,8276,5,124,0,0,8276,8278,5,305,0,0,8277,8267,
        1,0,0,0,8277,8274,1,0,0,0,8277,8275,1,0,0,0,8278,8293,1,0,0,0,8279,
        8290,5,277,0,0,8280,8283,5,1213,0,0,8281,8284,3,768,384,0,8282,8284,
        5,1219,0,0,8283,8281,1,0,0,0,8283,8282,1,0,0,0,8284,8287,1,0,0,0,
        8285,8286,5,1208,0,0,8286,8288,3,768,384,0,8287,8285,1,0,0,0,8287,
        8288,1,0,0,0,8288,8289,1,0,0,0,8289,8291,5,1214,0,0,8290,8280,1,
        0,0,0,8290,8291,1,0,0,0,8291,8293,1,0,0,0,8292,8250,1,0,0,0,8292,
        8251,1,0,0,0,8292,8252,1,0,0,0,8292,8253,1,0,0,0,8292,8254,1,0,0,
        0,8292,8255,1,0,0,0,8292,8277,1,0,0,0,8292,8279,1,0,0,0,8293,699,
        1,0,0,0,8294,8296,7,67,0,0,8295,8297,3,726,363,0,8296,8295,1,0,0,
        0,8296,8297,1,0,0,0,8297,8299,1,0,0,0,8298,8300,3,732,366,0,8299,
        8298,1,0,0,0,8299,8300,1,0,0,0,8300,8335,1,0,0,0,8301,8303,5,173,
        0,0,8302,8304,3,726,363,0,8303,8302,1,0,0,0,8303,8304,1,0,0,0,8304,
        8335,1,0,0,0,8305,8311,5,464,0,0,8306,8307,5,55,0,0,8307,8311,5,
        467,0,0,8308,8309,5,52,0,0,8309,8311,5,467,0,0,8310,8305,1,0,0,0,
        8310,8306,1,0,0,0,8310,8308,1,0,0,0,8311,8312,1,0,0,0,8312,8314,
        3,726,363,0,8313,8315,3,732,366,0,8314,8313,1,0,0,0,8314,8315,1,
        0,0,0,8315,8335,1,0,0,0,8316,8317,5,231,0,0,8317,8335,5,464,0,0,
        8318,8319,5,465,0,0,8319,8335,3,726,363,0,8320,8321,5,231,0,0,8321,
        8335,5,465,0,0,8322,8327,5,62,0,0,8323,8324,5,55,0,0,8324,8325,5,
        215,0,0,8325,8327,5,279,0,0,8326,8322,1,0,0,0,8326,8323,1,0,0,0,
        8327,8329,1,0,0,0,8328,8330,3,728,364,0,8329,8328,1,0,0,0,8329,8330,
        1,0,0,0,8330,8332,1,0,0,0,8331,8333,3,744,372,0,8332,8331,1,0,0,
        0,8332,8333,1,0,0,0,8333,8335,1,0,0,0,8334,8294,1,0,0,0,8334,8301,
        1,0,0,0,8334,8310,1,0,0,0,8334,8316,1,0,0,0,8334,8318,1,0,0,0,8334,
        8320,1,0,0,0,8334,8326,1,0,0,0,8335,701,1,0,0,0,8336,8338,5,464,
        0,0,8337,8339,3,732,366,0,8338,8337,1,0,0,0,8338,8339,1,0,0,0,8339,
        8345,1,0,0,0,8340,8342,5,465,0,0,8341,8343,3,732,366,0,8342,8341,
        1,0,0,0,8342,8343,1,0,0,0,8343,8345,1,0,0,0,8344,8336,1,0,0,0,8344,
        8340,1,0,0,0,8345,703,1,0,0,0,8346,8351,5,62,0,0,8347,8348,5,55,
        0,0,8348,8349,5,215,0,0,8349,8351,5,279,0,0,8350,8346,1,0,0,0,8350,
        8347,1,0,0,0,8351,8352,1,0,0,0,8352,8353,5,20,0,0,8353,8363,5,225,
        0,0,8354,8359,5,38,0,0,8355,8356,5,37,0,0,8356,8357,5,215,0,0,8357,
        8359,5,279,0,0,8358,8354,1,0,0,0,8358,8355,1,0,0,0,8359,8360,1,0,
        0,0,8360,8361,5,20,0,0,8361,8363,5,225,0,0,8362,8350,1,0,0,0,8362,
        8358,1,0,0,0,8363,705,1,0,0,0,8364,8366,5,43,0,0,8365,8367,3,726,
        363,0,8366,8365,1,0,0,0,8366,8367,1,0,0,0,8367,8380,1,0,0,0,8368,
        8369,5,463,0,0,8369,8380,3,726,363,0,8370,8375,5,38,0,0,8371,8372,
        5,37,0,0,8372,8373,5,215,0,0,8373,8375,5,279,0,0,8374,8370,1,0,0,
        0,8374,8371,1,0,0,0,8375,8377,1,0,0,0,8376,8378,3,728,364,0,8377,
        8376,1,0,0,0,8377,8378,1,0,0,0,8378,8380,1,0,0,0,8379,8364,1,0,0,
        0,8379,8368,1,0,0,0,8379,8374,1,0,0,0,8380,707,1,0,0,0,8381,8399,
        5,104,0,0,8382,8384,5,421,0,0,8383,8385,3,726,363,0,8384,8383,1,
        0,0,0,8384,8385,1,0,0,0,8385,8387,1,0,0,0,8386,8388,3,756,378,0,
        8387,8386,1,0,0,0,8387,8388,1,0,0,0,8388,8399,1,0,0,0,8389,8391,
        5,422,0,0,8390,8392,3,726,363,0,8391,8390,1,0,0,0,8391,8392,1,0,
        0,0,8392,8394,1,0,0,0,8393,8395,3,756,378,0,8394,8393,1,0,0,0,8394,
        8395,1,0,0,0,8395,8399,1,0,0,0,8396,8397,5,205,0,0,8397,8399,3,724,
        362,0,8398,8381,1,0,0,0,8398,8382,1,0,0,0,8398,8389,1,0,0,0,8398,
        8396,1,0,0,0,8399,709,1,0,0,0,8400,8401,5,853,0,0,8401,8402,5,1213,
        0,0,8402,8403,5,104,0,0,8403,8425,5,1214,0,0,8404,8405,5,853,0,0,
        8405,8406,5,1213,0,0,8406,8408,5,421,0,0,8407,8409,3,726,363,0,8408,
        8407,1,0,0,0,8408,8409,1,0,0,0,8409,8411,1,0,0,0,8410,8412,3,756,
        378,0,8411,8410,1,0,0,0,8411,8412,1,0,0,0,8412,8413,1,0,0,0,8413,
        8425,5,1214,0,0,8414,8415,5,853,0,0,8415,8416,5,1213,0,0,8416,8418,
        5,422,0,0,8417,8419,3,726,363,0,8418,8417,1,0,0,0,8418,8419,1,0,
        0,0,8419,8421,1,0,0,0,8420,8422,3,756,378,0,8421,8420,1,0,0,0,8421,
        8422,1,0,0,0,8422,8423,1,0,0,0,8423,8425,5,1214,0,0,8424,8400,1,
        0,0,0,8424,8404,1,0,0,0,8424,8414,1,0,0,0,8425,711,1,0,0,0,8426,
        8428,3,722,361,0,8427,8426,1,0,0,0,8427,8428,1,0,0,0,8428,8429,1,
        0,0,0,8429,8431,7,68,0,0,8430,8432,3,728,364,0,8431,8430,1,0,0,0,
        8431,8432,1,0,0,0,8432,8434,1,0,0,0,8433,8435,3,746,373,0,8434,8433,
        1,0,0,0,8434,8435,1,0,0,0,8435,8476,1,0,0,0,8436,8438,3,722,361,
        0,8437,8436,1,0,0,0,8437,8438,1,0,0,0,8438,8439,1,0,0,0,8439,8441,
        5,720,0,0,8440,8442,3,730,365,0,8441,8440,1,0,0,0,8441,8442,1,0,
        0,0,8442,8444,1,0,0,0,8443,8445,3,746,373,0,8444,8443,1,0,0,0,8444,
        8445,1,0,0,0,8445,8448,1,0,0,0,8446,8449,3,744,372,0,8447,8449,3,
        748,374,0,8448,8446,1,0,0,0,8448,8447,1,0,0,0,8448,8449,1,0,0,0,
        8449,8476,1,0,0,0,8450,8452,3,722,361,0,8451,8450,1,0,0,0,8451,8452,
        1,0,0,0,8452,8453,1,0,0,0,8453,8455,5,936,0,0,8454,8456,3,730,365,
        0,8455,8454,1,0,0,0,8455,8456,1,0,0,0,8456,8458,1,0,0,0,8457,8459,
        3,746,373,0,8458,8457,1,0,0,0,8458,8459,1,0,0,0,8459,8476,1,0,0,
        0,8460,8462,3,722,361,0,8461,8460,1,0,0,0,8461,8462,1,0,0,0,8462,
        8463,1,0,0,0,8463,8465,5,607,0,0,8464,8466,3,730,365,0,8465,8464,
        1,0,0,0,8465,8466,1,0,0,0,8466,8468,1,0,0,0,8467,8469,3,746,373,
        0,8468,8467,1,0,0,0,8468,8469,1,0,0,0,8469,8470,1,0,0,0,8470,8476,
        3,750,375,0,8471,8473,3,722,361,0,8472,8471,1,0,0,0,8472,8473,1,
        0,0,0,8473,8474,1,0,0,0,8474,8476,3,792,396,0,8475,8427,1,0,0,0,
        8475,8437,1,0,0,0,8475,8451,1,0,0,0,8475,8461,1,0,0,0,8475,8472,
        1,0,0,0,8476,713,1,0,0,0,8477,8486,3,734,367,0,8478,8486,3,736,368,
        0,8479,8486,3,738,369,0,8480,8486,3,720,360,0,8481,8486,3,756,378,
        0,8482,8486,3,1178,589,0,8483,8486,3,732,366,0,8484,8486,3,716,358,
        0,8485,8477,1,0,0,0,8485,8478,1,0,0,0,8485,8479,1,0,0,0,8485,8480,
        1,0,0,0,8485,8481,1,0,0,0,8485,8482,1,0,0,0,8485,8483,1,0,0,0,8485,
        8484,1,0,0,0,8486,715,1,0,0,0,8487,8489,5,272,0,0,8488,8487,1,0,
        0,0,8488,8489,1,0,0,0,8489,8490,1,0,0,0,8490,8496,5,274,0,0,8491,
        8492,5,111,0,0,8492,8496,3,718,359,0,8493,8494,5,474,0,0,8494,8496,
        5,111,0,0,8495,8488,1,0,0,0,8495,8491,1,0,0,0,8495,8493,1,0,0,0,
        8496,717,1,0,0,0,8497,8498,7,1,0,0,8498,8504,3,772,386,0,8499,8500,
        7,1,0,0,8500,8504,3,768,384,0,8501,8504,3,758,379,0,8502,8504,3,
        1036,518,0,8503,8497,1,0,0,0,8503,8499,1,0,0,0,8503,8501,1,0,0,0,
        8503,8502,1,0,0,0,8504,719,1,0,0,0,8505,8508,3,742,371,0,8506,8508,
        3,740,370,0,8507,8505,1,0,0,0,8507,8506,1,0,0,0,8508,721,1,0,0,0,
        8509,8510,5,1089,0,0,8510,8511,5,1209,0,0,8511,723,1,0,0,0,8512,
        8514,5,478,0,0,8513,8515,3,726,363,0,8514,8513,1,0,0,0,8514,8515,
        1,0,0,0,8515,8518,1,0,0,0,8516,8517,5,426,0,0,8517,8519,5,258,0,
        0,8518,8516,1,0,0,0,8518,8519,1,0,0,0,8519,8575,1,0,0,0,8520,8522,
        5,258,0,0,8521,8523,3,726,363,0,8522,8521,1,0,0,0,8522,8523,1,0,
        0,0,8523,8575,1,0,0,0,8524,8526,5,106,0,0,8525,8527,3,726,363,0,
        8526,8525,1,0,0,0,8526,8527,1,0,0,0,8527,8537,1,0,0,0,8528,8529,
        5,426,0,0,8529,8538,5,185,0,0,8530,8531,5,426,0,0,8531,8538,5,248,
        0,0,8532,8533,5,426,0,0,8533,8535,5,368,0,0,8534,8536,3,726,363,
        0,8535,8534,1,0,0,0,8535,8536,1,0,0,0,8536,8538,1,0,0,0,8537,8528,
        1,0,0,0,8537,8530,1,0,0,0,8537,8532,1,0,0,0,8537,8538,1,0,0,0,8538,
        8575,1,0,0,0,8539,8541,5,185,0,0,8540,8542,3,726,363,0,8541,8540,
        1,0,0,0,8541,8542,1,0,0,0,8542,8550,1,0,0,0,8543,8544,5,426,0,0,
        8544,8551,5,248,0,0,8545,8546,5,426,0,0,8546,8548,5,368,0,0,8547,
        8549,3,726,363,0,8548,8547,1,0,0,0,8548,8549,1,0,0,0,8549,8551,1,
        0,0,0,8550,8543,1,0,0,0,8550,8545,1,0,0,0,8550,8551,1,0,0,0,8551,
        8575,1,0,0,0,8552,8554,5,248,0,0,8553,8555,3,726,363,0,8554,8553,
        1,0,0,0,8554,8555,1,0,0,0,8555,8561,1,0,0,0,8556,8557,5,426,0,0,
        8557,8559,5,368,0,0,8558,8560,3,726,363,0,8559,8558,1,0,0,0,8559,
        8560,1,0,0,0,8560,8562,1,0,0,0,8561,8556,1,0,0,0,8561,8562,1,0,0,
        0,8562,8575,1,0,0,0,8563,8572,5,368,0,0,8564,8565,5,1213,0,0,8565,
        8568,3,768,384,0,8566,8567,5,1208,0,0,8567,8569,3,768,384,0,8568,
        8566,1,0,0,0,8568,8569,1,0,0,0,8569,8570,1,0,0,0,8570,8571,5,1214,
        0,0,8571,8573,1,0,0,0,8572,8564,1,0,0,0,8572,8573,1,0,0,0,8573,8575,
        1,0,0,0,8574,8512,1,0,0,0,8574,8520,1,0,0,0,8574,8524,1,0,0,0,8574,
        8539,1,0,0,0,8574,8552,1,0,0,0,8574,8563,1,0,0,0,8575,725,1,0,0,
        0,8576,8577,5,1213,0,0,8577,8578,3,768,384,0,8578,8579,5,1214,0,
        0,8579,727,1,0,0,0,8580,8581,5,1213,0,0,8581,8583,3,768,384,0,8582,
        8584,7,69,0,0,8583,8582,1,0,0,0,8583,8584,1,0,0,0,8584,8585,1,0,
        0,0,8585,8586,5,1214,0,0,8586,729,1,0,0,0,8587,8588,5,1213,0,0,8588,
        8590,3,768,384,0,8589,8591,7,70,0,0,8590,8589,1,0,0,0,8590,8591,
        1,0,0,0,8591,8592,1,0,0,0,8592,8593,5,1214,0,0,8593,731,1,0,0,0,
        8594,8595,7,67,0,0,8595,8596,5,372,0,0,8596,8597,7,71,0,0,8597,733,
        1,0,0,0,8598,8599,7,72,0,0,8599,735,1,0,0,0,8600,8602,7,73,0,0,8601,
        8600,1,0,0,0,8601,8602,1,0,0,0,8602,8603,1,0,0,0,8603,8604,7,74,
        0,0,8604,737,1,0,0,0,8605,8609,5,161,0,0,8606,8610,3,762,381,0,8607,
        8610,5,1198,0,0,8608,8610,5,1199,0,0,8609,8606,1,0,0,0,8609,8607,
        1,0,0,0,8609,8608,1,0,0,0,8610,739,1,0,0,0,8611,8612,5,425,0,0,8612,
        8613,3,762,381,0,8613,741,1,0,0,0,8614,8615,5,262,0,0,8615,8616,
        3,812,406,0,8616,743,1,0,0,0,8617,8618,7,67,0,0,8618,8619,5,372,
        0,0,8619,8620,7,43,0,0,8620,745,1,0,0,0,8621,8622,5,709,0,0,8622,
        8623,5,739,0,0,8623,8624,3,768,384,0,8624,747,1,0,0,0,8625,8626,
        5,941,0,0,8626,8627,5,161,0,0,8627,8628,7,75,0,0,8628,749,1,0,0,
        0,8629,8630,5,941,0,0,8630,8631,5,161,0,0,8631,8633,3,752,376,0,
        8632,8634,3,754,377,0,8633,8632,1,0,0,0,8633,8634,1,0,0,0,8634,751,
        1,0,0,0,8635,8641,5,545,0,0,8636,8638,5,1073,0,0,8637,8639,3,744,
        372,0,8638,8637,1,0,0,0,8638,8639,1,0,0,0,8639,8641,1,0,0,0,8640,
        8635,1,0,0,0,8640,8636,1,0,0,0,8641,753,1,0,0,0,8642,8643,5,474,
        0,0,8643,8644,5,905,0,0,8644,8645,3,796,398,0,8645,755,1,0,0,0,8646,
        8647,5,474,0,0,8647,8648,5,421,0,0,8648,8649,5,480,0,0,8649,757,
        1,0,0,0,8650,8664,3,760,380,0,8651,8664,3,762,381,0,8652,8664,3,
        764,382,0,8653,8664,3,766,383,0,8654,8664,3,768,384,0,8655,8664,
        3,770,385,0,8656,8664,3,772,386,0,8657,8664,3,776,388,0,8658,8664,
        3,778,389,0,8659,8664,3,780,390,0,8660,8664,3,782,391,0,8661,8664,
        3,786,393,0,8662,8664,5,274,0,0,8663,8650,1,0,0,0,8663,8651,1,0,
        0,0,8663,8652,1,0,0,0,8663,8653,1,0,0,0,8663,8654,1,0,0,0,8663,8655,
        1,0,0,0,8663,8656,1,0,0,0,8663,8657,1,0,0,0,8663,8658,1,0,0,0,8663,
        8659,1,0,0,0,8663,8660,1,0,0,0,8663,8661,1,0,0,0,8663,8662,1,0,0,
        0,8664,759,1,0,0,0,8665,8666,5,1195,0,0,8666,761,1,0,0,0,8667,8669,
        3,774,387,0,8668,8667,1,0,0,0,8668,8669,1,0,0,0,8669,8671,1,0,0,
        0,8670,8672,5,1203,0,0,8671,8670,1,0,0,0,8672,8673,1,0,0,0,8673,
        8671,1,0,0,0,8673,8674,1,0,0,0,8674,763,1,0,0,0,8675,8677,3,774,
        387,0,8676,8675,1,0,0,0,8676,8677,1,0,0,0,8677,8678,1,0,0,0,8678,
        8682,5,1202,0,0,8679,8681,5,1203,0,0,8680,8679,1,0,0,0,8681,8684,
        1,0,0,0,8682,8680,1,0,0,0,8682,8683,1,0,0,0,8683,8685,1,0,0,0,8684,
        8682,1,0,0,0,8685,8686,5,444,0,0,8686,8687,5,1203,0,0,8687,765,1,
        0,0,0,8688,8690,3,774,387,0,8689,8688,1,0,0,0,8689,8690,1,0,0,0,
        8690,8691,1,0,0,0,8691,8692,5,1204,0,0,8692,767,1,0,0,0,8693,8694,
        5,1194,0,0,8694,769,1,0,0,0,8695,8696,5,1196,0,0,8696,771,1,0,0,
        0,8697,8698,5,1197,0,0,8698,773,1,0,0,0,8699,8700,7,76,0,0,8700,
        775,1,0,0,0,8701,8703,5,104,0,0,8702,8701,1,0,0,0,8702,8703,1,0,
        0,0,8703,8704,1,0,0,0,8704,8705,5,1198,0,0,8705,777,1,0,0,0,8706,
        8708,5,421,0,0,8707,8706,1,0,0,0,8707,8708,1,0,0,0,8708,8709,1,0,
        0,0,8709,8710,5,1199,0,0,8710,779,1,0,0,0,8711,8713,5,422,0,0,8712,
        8711,1,0,0,0,8712,8713,1,0,0,0,8713,8714,1,0,0,0,8714,8715,5,1200,
        0,0,8715,781,1,0,0,0,8716,8718,5,205,0,0,8717,8719,5,1222,0,0,8718,
        8717,1,0,0,0,8718,8719,1,0,0,0,8719,8720,1,0,0,0,8720,8721,7,77,
        0,0,8721,8722,3,784,392,0,8722,783,1,0,0,0,8723,8751,5,478,0,0,8724,
        8725,5,478,0,0,8725,8726,5,426,0,0,8726,8751,5,258,0,0,8727,8751,
        5,258,0,0,8728,8751,5,106,0,0,8729,8730,5,106,0,0,8730,8731,5,426,
        0,0,8731,8751,5,185,0,0,8732,8733,5,106,0,0,8733,8734,5,426,0,0,
        8734,8751,5,248,0,0,8735,8736,5,106,0,0,8736,8737,5,426,0,0,8737,
        8751,5,368,0,0,8738,8751,5,185,0,0,8739,8740,5,185,0,0,8740,8741,
        5,426,0,0,8741,8751,5,248,0,0,8742,8743,5,185,0,0,8743,8744,5,426,
        0,0,8744,8751,5,368,0,0,8745,8751,5,248,0,0,8746,8747,5,248,0,0,
        8747,8748,5,426,0,0,8748,8751,5,368,0,0,8749,8751,5,368,0,0,8750,
        8723,1,0,0,0,8750,8724,1,0,0,0,8750,8727,1,0,0,0,8750,8728,1,0,0,
        0,8750,8729,1,0,0,0,8750,8732,1,0,0,0,8750,8735,1,0,0,0,8750,8738,
        1,0,0,0,8750,8739,1,0,0,0,8750,8742,1,0,0,0,8750,8745,1,0,0,0,8750,
        8746,1,0,0,0,8750,8749,1,0,0,0,8751,785,1,0,0,0,8752,8753,5,853,
        0,0,8753,8754,5,1201,0,0,8754,787,1,0,0,0,8755,8756,3,804,402,0,
        8756,8757,5,1209,0,0,8757,8758,3,792,396,0,8758,8759,5,1209,0,0,
        8759,8760,3,790,395,0,8760,8767,1,0,0,0,8761,8762,3,792,396,0,8762,
        8763,5,1209,0,0,8763,8764,3,790,395,0,8764,8767,1,0,0,0,8765,8767,
        3,790,395,0,8766,8755,1,0,0,0,8766,8761,1,0,0,0,8766,8765,1,0,0,
        0,8767,789,1,0,0,0,8768,8773,5,1193,0,0,8769,8773,3,836,418,0,8770,
        8773,5,366,0,0,8771,8773,5,363,0,0,8772,8768,1,0,0,0,8772,8769,1,
        0,0,0,8772,8770,1,0,0,0,8772,8771,1,0,0,0,8773,791,1,0,0,0,8774,
        8777,5,1193,0,0,8775,8777,3,836,418,0,8776,8774,1,0,0,0,8776,8775,
        1,0,0,0,8777,793,1,0,0,0,8778,8779,3,804,402,0,8779,8780,5,1209,
        0,0,8780,8782,1,0,0,0,8781,8778,1,0,0,0,8781,8782,1,0,0,0,8782,8785,
        1,0,0,0,8783,8786,5,1193,0,0,8784,8786,3,836,418,0,8785,8783,1,0,
        0,0,8785,8784,1,0,0,0,8786,795,1,0,0,0,8787,8788,3,804,402,0,8788,
        8789,5,1209,0,0,8789,8791,1,0,0,0,8790,8787,1,0,0,0,8790,8791,1,
        0,0,0,8791,8794,1,0,0,0,8792,8795,5,1193,0,0,8793,8795,3,836,418,
        0,8794,8792,1,0,0,0,8794,8793,1,0,0,0,8795,797,1,0,0,0,8796,8797,
        3,804,402,0,8797,8798,5,1209,0,0,8798,8800,1,0,0,0,8799,8796,1,0,
        0,0,8799,8800,1,0,0,0,8800,8803,1,0,0,0,8801,8804,5,1193,0,0,8802,
        8804,3,836,418,0,8803,8801,1,0,0,0,8803,8802,1,0,0,0,8804,799,1,
        0,0,0,8805,8806,3,804,402,0,8806,8807,5,1209,0,0,8807,8809,1,0,0,
        0,8808,8805,1,0,0,0,8808,8809,1,0,0,0,8809,8812,1,0,0,0,8810,8813,
        5,1193,0,0,8811,8813,3,836,418,0,8812,8810,1,0,0,0,8812,8811,1,0,
        0,0,8813,801,1,0,0,0,8814,8815,3,804,402,0,8815,8816,5,1209,0,0,
        8816,8818,1,0,0,0,8817,8814,1,0,0,0,8817,8818,1,0,0,0,8818,8821,
        1,0,0,0,8819,8822,5,1193,0,0,8820,8822,3,836,418,0,8821,8819,1,0,
        0,0,8821,8820,1,0,0,0,8822,803,1,0,0,0,8823,8826,5,1193,0,0,8824,
        8826,3,836,418,0,8825,8823,1,0,0,0,8825,8824,1,0,0,0,8826,805,1,
        0,0,0,8827,8830,5,1193,0,0,8828,8830,3,836,418,0,8829,8827,1,0,0,
        0,8829,8828,1,0,0,0,8830,807,1,0,0,0,8831,8835,5,1193,0,0,8832,8835,
        5,10,0,0,8833,8835,3,836,418,0,8834,8831,1,0,0,0,8834,8832,1,0,0,
        0,8834,8833,1,0,0,0,8835,809,1,0,0,0,8836,8839,5,1193,0,0,8837,8839,
        3,836,418,0,8838,8836,1,0,0,0,8838,8837,1,0,0,0,8839,811,1,0,0,0,
        8840,8843,5,1193,0,0,8841,8843,3,836,418,0,8842,8840,1,0,0,0,8842,
        8841,1,0,0,0,8843,813,1,0,0,0,8844,8847,5,1193,0,0,8845,8847,3,836,
        418,0,8846,8844,1,0,0,0,8846,8845,1,0,0,0,8847,815,1,0,0,0,8848,
        8851,5,1193,0,0,8849,8851,3,836,418,0,8850,8848,1,0,0,0,8850,8849,
        1,0,0,0,8851,817,1,0,0,0,8852,8855,5,1193,0,0,8853,8855,3,836,418,
        0,8854,8852,1,0,0,0,8854,8853,1,0,0,0,8855,819,1,0,0,0,8856,8859,
        5,1193,0,0,8857,8859,3,836,418,0,8858,8856,1,0,0,0,8858,8857,1,0,
        0,0,8859,821,1,0,0,0,8860,8863,5,1193,0,0,8861,8863,3,836,418,0,
        8862,8860,1,0,0,0,8862,8861,1,0,0,0,8863,823,1,0,0,0,8864,8867,5,
        1193,0,0,8865,8867,3,836,418,0,8866,8864,1,0,0,0,8866,8865,1,0,0,
        0,8867,825,1,0,0,0,8868,8871,5,1193,0,0,8869,8871,3,836,418,0,8870,
        8868,1,0,0,0,8870,8869,1,0,0,0,8871,827,1,0,0,0,8872,8875,5,1193,
        0,0,8873,8875,3,836,418,0,8874,8872,1,0,0,0,8874,8873,1,0,0,0,8875,
        829,1,0,0,0,8876,8879,5,1193,0,0,8877,8879,3,836,418,0,8878,8876,
        1,0,0,0,8878,8877,1,0,0,0,8879,831,1,0,0,0,8880,8883,5,1193,0,0,
        8881,8883,3,836,418,0,8882,8880,1,0,0,0,8882,8881,1,0,0,0,8883,833,
        1,0,0,0,8884,8885,7,78,0,0,8885,835,1,0,0,0,8886,8887,7,79,0,0,8887,
        837,1,0,0,0,8888,8889,6,419,-1,0,8889,8895,3,840,420,0,8890,8891,
        5,1213,0,0,8891,8892,3,838,419,0,8892,8893,5,1214,0,0,8893,8895,
        1,0,0,0,8894,8888,1,0,0,0,8894,8890,1,0,0,0,8895,8904,1,0,0,0,8896,
        8897,10,2,0,0,8897,8899,7,80,0,0,8898,8900,5,13,0,0,8899,8898,1,
        0,0,0,8899,8900,1,0,0,0,8900,8901,1,0,0,0,8901,8903,3,838,419,3,
        8902,8896,1,0,0,0,8903,8906,1,0,0,0,8904,8902,1,0,0,0,8904,8905,
        1,0,0,0,8905,839,1,0,0,0,8906,8904,1,0,0,0,8907,8909,7,34,0,0,8908,
        8910,3,842,421,0,8909,8908,1,0,0,0,8909,8910,1,0,0,0,8910,8912,1,
        0,0,0,8911,8913,3,844,422,0,8912,8911,1,0,0,0,8912,8913,1,0,0,0,
        8913,8914,1,0,0,0,8914,8946,3,846,423,0,8915,8919,3,860,430,0,8916,
        8918,3,950,475,0,8917,8916,1,0,0,0,8918,8921,1,0,0,0,8919,8917,1,
        0,0,0,8919,8920,1,0,0,0,8920,8945,1,0,0,0,8921,8919,1,0,0,0,8922,
        8945,3,858,429,0,8923,8945,3,956,478,0,8924,8945,3,958,479,0,8925,
        8928,3,976,488,0,8926,8928,3,978,489,0,8927,8925,1,0,0,0,8927,8926,
        1,0,0,0,8928,8945,1,0,0,0,8929,8945,3,980,490,0,8930,8932,3,950,
        475,0,8931,8930,1,0,0,0,8932,8935,1,0,0,0,8933,8931,1,0,0,0,8933,
        8934,1,0,0,0,8934,8936,1,0,0,0,8935,8933,1,0,0,0,8936,8940,3,990,
        495,0,8937,8939,3,950,475,0,8938,8937,1,0,0,0,8939,8942,1,0,0,0,
        8940,8938,1,0,0,0,8940,8941,1,0,0,0,8941,8945,1,0,0,0,8942,8940,
        1,0,0,0,8943,8945,3,996,498,0,8944,8915,1,0,0,0,8944,8922,1,0,0,
        0,8944,8923,1,0,0,0,8944,8924,1,0,0,0,8944,8927,1,0,0,0,8944,8929,
        1,0,0,0,8944,8933,1,0,0,0,8944,8943,1,0,0,0,8945,8948,1,0,0,0,8946,
        8944,1,0,0,0,8946,8947,1,0,0,0,8947,8950,1,0,0,0,8948,8946,1,0,0,
        0,8949,8951,3,988,494,0,8950,8949,1,0,0,0,8950,8951,1,0,0,0,8951,
        841,1,0,0,0,8952,8953,5,474,0,0,8953,8954,5,1079,0,0,8954,8955,5,
        364,0,0,8955,843,1,0,0,0,8956,8957,5,20,0,0,8957,8958,5,720,0,0,
        8958,845,1,0,0,0,8959,8964,5,121,0,0,8960,8964,5,448,0,0,8961,8964,
        5,13,0,0,8962,8964,3,850,425,0,8963,8959,1,0,0,0,8963,8960,1,0,0,
        0,8963,8961,1,0,0,0,8963,8962,1,0,0,0,8964,8967,1,0,0,0,8965,8967,
        3,848,424,0,8966,8963,1,0,0,0,8966,8965,1,0,0,0,8966,8967,1,0,0,
        0,8967,8968,1,0,0,0,8968,8971,3,854,427,0,8969,8971,3,852,426,0,
        8970,8966,1,0,0,0,8970,8969,1,0,0,0,8971,847,1,0,0,0,8972,8976,5,
        427,0,0,8973,8977,3,768,384,0,8974,8977,3,772,386,0,8975,8977,3,
        1196,598,0,8976,8973,1,0,0,0,8976,8974,1,0,0,0,8976,8975,1,0,0,0,
        8977,8979,1,0,0,0,8978,8980,5,300,0,0,8979,8978,1,0,0,0,8979,8980,
        1,0,0,0,8980,8983,1,0,0,0,8981,8982,5,474,0,0,8982,8984,5,986,0,
        0,8983,8981,1,0,0,0,8983,8984,1,0,0,0,8984,849,1,0,0,0,8985,8996,
        5,271,0,0,8986,8987,5,286,0,0,8987,8988,5,765,0,0,8988,8989,5,290,
        0,0,8989,8997,5,296,0,0,8990,8991,5,286,0,0,8991,8994,5,296,0,0,
        8992,8993,5,290,0,0,8993,8995,5,765,0,0,8994,8992,1,0,0,0,8994,8995,
        1,0,0,0,8995,8997,1,0,0,0,8996,8986,1,0,0,0,8996,8990,1,0,0,0,8996,
        8997,1,0,0,0,8997,851,1,0,0,0,8998,9005,5,1219,0,0,8999,9000,3,796,
        398,0,9000,9001,5,1209,0,0,9001,9002,5,1219,0,0,9002,9005,1,0,0,
        0,9003,9005,3,788,394,0,9004,8998,1,0,0,0,9004,8999,1,0,0,0,9004,
        9003,1,0,0,0,9005,9006,1,0,0,0,9006,9007,5,1209,0,0,9007,9008,5,
        13,0,0,9008,853,1,0,0,0,9009,9019,5,1219,0,0,9010,9015,3,856,428,
        0,9011,9012,5,1208,0,0,9012,9014,3,856,428,0,9013,9011,1,0,0,0,9014,
        9017,1,0,0,0,9015,9013,1,0,0,0,9015,9016,1,0,0,0,9016,9019,1,0,0,
        0,9017,9015,1,0,0,0,9018,9009,1,0,0,0,9018,9010,1,0,0,0,9019,855,
        1,0,0,0,9020,9025,3,1000,500,0,9021,9023,5,20,0,0,9022,9021,1,0,
        0,0,9022,9023,1,0,0,0,9023,9024,1,0,0,0,9024,9026,3,812,406,0,9025,
        9022,1,0,0,0,9025,9026,1,0,0,0,9026,9032,1,0,0,0,9027,9028,3,796,
        398,0,9028,9029,5,1209,0,0,9029,9030,5,1219,0,0,9030,9032,1,0,0,
        0,9031,9020,1,0,0,0,9031,9027,1,0,0,0,9032,857,1,0,0,0,9033,9036,
        5,206,0,0,9034,9037,3,814,407,0,9035,9037,3,1192,596,0,9036,9034,
        1,0,0,0,9036,9035,1,0,0,0,9037,9045,1,0,0,0,9038,9041,5,1208,0,0,
        9039,9042,3,814,407,0,9040,9042,3,1192,596,0,9041,9039,1,0,0,0,9041,
        9040,1,0,0,0,9042,9044,1,0,0,0,9043,9038,1,0,0,0,9044,9047,1,0,0,
        0,9045,9043,1,0,0,0,9045,9046,1,0,0,0,9046,859,1,0,0,0,9047,9045,
        1,0,0,0,9048,9049,5,164,0,0,9049,9050,3,862,431,0,9050,861,1,0,0,
        0,9051,9055,3,864,432,0,9052,9054,3,866,433,0,9053,9052,1,0,0,0,
        9054,9057,1,0,0,0,9055,9053,1,0,0,0,9055,9056,1,0,0,0,9056,9082,
        1,0,0,0,9057,9055,1,0,0,0,9058,9062,3,868,434,0,9059,9061,3,866,
        433,0,9060,9059,1,0,0,0,9061,9064,1,0,0,0,9062,9060,1,0,0,0,9062,
        9063,1,0,0,0,9063,9082,1,0,0,0,9064,9062,1,0,0,0,9065,9069,3,870,
        435,0,9066,9068,3,866,433,0,9067,9066,1,0,0,0,9068,9071,1,0,0,0,
        9069,9067,1,0,0,0,9069,9070,1,0,0,0,9070,9082,1,0,0,0,9071,9069,
        1,0,0,0,9072,9073,5,1213,0,0,9073,9074,3,862,431,0,9074,9078,5,1214,
        0,0,9075,9077,3,866,433,0,9076,9075,1,0,0,0,9077,9080,1,0,0,0,9078,
        9076,1,0,0,0,9078,9079,1,0,0,0,9079,9082,1,0,0,0,9080,9078,1,0,0,
        0,9081,9051,1,0,0,0,9081,9058,1,0,0,0,9081,9065,1,0,0,0,9081,9072,
        1,0,0,0,9082,863,1,0,0,0,9083,9090,3,872,436,0,9084,9090,3,942,471,
        0,9085,9090,3,878,439,0,9086,9090,3,894,447,0,9087,9090,3,880,440,
        0,9088,9090,3,906,453,0,9089,9083,1,0,0,0,9089,9084,1,0,0,0,9089,
        9085,1,0,0,0,9089,9086,1,0,0,0,9089,9087,1,0,0,0,9089,9088,1,0,0,
        0,9090,865,1,0,0,0,9091,9092,5,1208,0,0,9092,9101,3,872,436,0,9093,
        9094,5,1208,0,0,9094,9101,3,942,471,0,9095,9096,5,1208,0,0,9096,
        9101,3,894,447,0,9097,9098,5,1208,0,0,9098,9101,3,906,453,0,9099,
        9101,3,874,437,0,9100,9091,1,0,0,0,9100,9093,1,0,0,0,9100,9095,1,
        0,0,0,9100,9097,1,0,0,0,9100,9099,1,0,0,0,9101,867,1,0,0,0,9102,
        9105,3,872,436,0,9103,9105,3,942,471,0,9104,9102,1,0,0,0,9104,9103,
        1,0,0,0,9105,9106,1,0,0,0,9106,9107,3,1154,577,0,9107,869,1,0,0,
        0,9108,9111,3,872,436,0,9109,9111,3,942,471,0,9110,9108,1,0,0,0,
        9110,9109,1,0,0,0,9111,9112,1,0,0,0,9112,9113,3,1170,585,0,9113,
        871,1,0,0,0,9114,9119,3,796,398,0,9115,9117,3,892,446,0,9116,9118,
        3,890,445,0,9117,9116,1,0,0,0,9117,9118,1,0,0,0,9118,9120,1,0,0,
        0,9119,9115,1,0,0,0,9119,9120,1,0,0,0,9120,9125,1,0,0,0,9121,9123,
        5,20,0,0,9122,9121,1,0,0,0,9122,9123,1,0,0,0,9123,9124,1,0,0,0,9124,
        9126,3,812,406,0,9125,9122,1,0,0,0,9125,9126,1,0,0,0,9126,873,1,
        0,0,0,9127,9133,5,194,0,0,9128,9130,7,81,0,0,9129,9131,5,294,0,0,
        9130,9129,1,0,0,0,9130,9131,1,0,0,0,9131,9133,1,0,0,0,9132,9127,
        1,0,0,0,9132,9128,1,0,0,0,9132,9133,1,0,0,0,9133,9134,1,0,0,0,9134,
        9135,5,210,0,0,9135,9139,3,864,432,0,9136,9138,3,876,438,0,9137,
        9136,1,0,0,0,9138,9141,1,0,0,0,9139,9137,1,0,0,0,9139,9140,1,0,0,
        0,9140,9180,1,0,0,0,9141,9139,1,0,0,0,9142,9148,5,194,0,0,9143,9145,
        7,81,0,0,9144,9146,5,294,0,0,9145,9144,1,0,0,0,9145,9146,1,0,0,0,
        9146,9148,1,0,0,0,9147,9142,1,0,0,0,9147,9143,1,0,0,0,9147,9148,
        1,0,0,0,9148,9149,1,0,0,0,9149,9150,5,210,0,0,9150,9151,5,1213,0,
        0,9151,9152,3,862,431,0,9152,9156,5,1214,0,0,9153,9155,3,876,438,
        0,9154,9153,1,0,0,0,9155,9158,1,0,0,0,9156,9154,1,0,0,0,9156,9157,
        1,0,0,0,9157,9180,1,0,0,0,9158,9156,1,0,0,0,9159,9160,5,87,0,0,9160,
        9161,5,210,0,0,9161,9165,3,864,432,0,9162,9164,3,876,438,0,9163,
        9162,1,0,0,0,9164,9167,1,0,0,0,9165,9163,1,0,0,0,9165,9166,1,0,0,
        0,9166,9180,1,0,0,0,9167,9165,1,0,0,0,9168,9169,5,87,0,0,9169,9170,
        5,210,0,0,9170,9171,5,1213,0,0,9171,9172,3,862,431,0,9172,9176,5,
        1214,0,0,9173,9175,3,876,438,0,9174,9173,1,0,0,0,9175,9178,1,0,0,
        0,9176,9174,1,0,0,0,9176,9177,1,0,0,0,9177,9180,1,0,0,0,9178,9176,
        1,0,0,0,9179,9132,1,0,0,0,9179,9147,1,0,0,0,9179,9159,1,0,0,0,9179,
        9168,1,0,0,0,9180,875,1,0,0,0,9181,9182,5,286,0,0,9182,9183,3,998,
        499,0,9183,877,1,0,0,0,9184,9185,5,160,0,0,9185,9186,5,406,0,0,9186,
        9193,5,1213,0,0,9187,9194,3,840,420,0,9188,9190,9,0,0,0,9189,9188,
        1,0,0,0,9190,9191,1,0,0,0,9191,9192,1,0,0,0,9191,9189,1,0,0,0,9192,
        9194,1,0,0,0,9193,9187,1,0,0,0,9193,9189,1,0,0,0,9194,9195,1,0,0,
        0,9195,9196,5,1214,0,0,9196,9209,3,892,446,0,9197,9198,5,664,0,0,
        9198,9199,5,1213,0,0,9199,9204,3,884,442,0,9200,9201,5,1208,0,0,
        9201,9203,3,884,442,0,9202,9200,1,0,0,0,9203,9206,1,0,0,0,9204,9202,
        1,0,0,0,9204,9205,1,0,0,0,9205,9207,1,0,0,0,9206,9204,1,0,0,0,9207,
        9208,5,1214,0,0,9208,9210,1,0,0,0,9209,9197,1,0,0,0,9209,9210,1,
        0,0,0,9210,9212,1,0,0,0,9211,9213,5,20,0,0,9212,9211,1,0,0,0,9212,
        9213,1,0,0,0,9213,9214,1,0,0,0,9214,9215,3,812,406,0,9215,879,1,
        0,0,0,9216,9217,3,800,400,0,9217,9218,3,892,446,0,9218,9220,5,1213,
        0,0,9219,9221,3,882,441,0,9220,9219,1,0,0,0,9221,9222,1,0,0,0,9222,
        9220,1,0,0,0,9222,9223,1,0,0,0,9223,9224,1,0,0,0,9224,9226,5,1214,
        0,0,9225,9227,5,20,0,0,9226,9225,1,0,0,0,9226,9227,1,0,0,0,9227,
        9228,1,0,0,0,9228,9229,3,812,406,0,9229,881,1,0,0,0,9230,9231,5,
        286,0,0,9231,9232,5,1213,0,0,9232,9237,3,1000,500,0,9233,9234,5,
        1208,0,0,9234,9236,3,1000,500,0,9235,9233,1,0,0,0,9236,9239,1,0,
        0,0,9237,9235,1,0,0,0,9237,9238,1,0,0,0,9238,9240,1,0,0,0,9239,9237,
        1,0,0,0,9240,9244,5,1214,0,0,9241,9243,3,940,470,0,9242,9241,1,0,
        0,0,9243,9246,1,0,0,0,9244,9242,1,0,0,0,9244,9245,1,0,0,0,9245,9251,
        1,0,0,0,9246,9244,1,0,0,0,9247,9249,5,224,0,0,9248,9247,1,0,0,0,
        9248,9249,1,0,0,0,9249,9250,1,0,0,0,9250,9252,3,990,495,0,9251,9248,
        1,0,0,0,9251,9252,1,0,0,0,9252,9253,1,0,0,0,9253,9254,3,886,443,
        0,9254,883,1,0,0,0,9255,9263,3,942,471,0,9256,9258,3,796,398,0,9257,
        9259,5,20,0,0,9258,9257,1,0,0,0,9258,9259,1,0,0,0,9259,9260,1,0,
        0,0,9260,9261,3,812,406,0,9261,9263,1,0,0,0,9262,9255,1,0,0,0,9262,
        9256,1,0,0,0,9263,885,1,0,0,0,9264,9266,5,457,0,0,9265,9267,3,888,
        444,0,9266,9265,1,0,0,0,9267,9268,1,0,0,0,9268,9266,1,0,0,0,9268,
        9269,1,0,0,0,9269,887,1,0,0,0,9270,9271,3,792,396,0,9271,9272,5,
        1213,0,0,9272,9273,3,1000,500,0,9273,9274,5,1214,0,0,9274,889,1,
        0,0,0,9275,9276,5,352,0,0,9276,9277,5,1213,0,0,9277,9282,3,1190,
        595,0,9278,9279,5,1208,0,0,9279,9281,3,1190,595,0,9280,9278,1,0,
        0,0,9281,9284,1,0,0,0,9282,9280,1,0,0,0,9282,9283,1,0,0,0,9283,9285,
        1,0,0,0,9284,9282,1,0,0,0,9285,9286,5,1214,0,0,9286,891,1,0,0,0,
        9287,9288,5,1210,0,0,9288,9289,3,812,406,0,9289,893,1,0,0,0,9290,
        9291,5,406,0,0,9291,9294,5,1213,0,0,9292,9295,3,896,448,0,9293,9295,
        3,898,449,0,9294,9292,1,0,0,0,9294,9293,1,0,0,0,9295,9296,1,0,0,
        0,9296,9298,5,1214,0,0,9297,9299,5,20,0,0,9298,9297,1,0,0,0,9298,
        9299,1,0,0,0,9299,9300,1,0,0,0,9300,9302,3,812,406,0,9301,9303,3,
        1186,593,0,9302,9301,1,0,0,0,9302,9303,1,0,0,0,9303,895,1,0,0,0,
        9304,9308,3,800,400,0,9305,9306,5,1213,0,0,9306,9309,5,1214,0,0,
        9307,9309,3,1184,592,0,9308,9305,1,0,0,0,9308,9307,1,0,0,0,9309,
        9311,1,0,0,0,9310,9312,3,900,450,0,9311,9310,1,0,0,0,9311,9312,1,
        0,0,0,9312,9317,1,0,0,0,9313,9316,3,902,451,0,9314,9316,3,904,452,
        0,9315,9313,1,0,0,0,9315,9314,1,0,0,0,9316,9319,1,0,0,0,9317,9315,
        1,0,0,0,9317,9318,1,0,0,0,9318,897,1,0,0,0,9319,9317,1,0,0,0,9320,
        9322,3,1070,535,0,9321,9320,1,0,0,0,9321,9322,1,0,0,0,9322,9323,
        1,0,0,0,9323,9324,5,1148,0,0,9324,9328,5,1213,0,0,9325,9326,3,1000,
        500,0,9326,9327,5,1208,0,0,9327,9329,1,0,0,0,9328,9325,1,0,0,0,9328,
        9329,1,0,0,0,9329,9330,1,0,0,0,9330,9331,3,1000,500,0,9331,9334,
        5,1214,0,0,9332,9333,5,474,0,0,9333,9335,5,829,0,0,9334,9332,1,0,
        0,0,9334,9335,1,0,0,0,9335,899,1,0,0,0,9336,9349,5,352,0,0,9337,
        9350,3,796,398,0,9338,9339,5,1213,0,0,9339,9344,3,1190,595,0,9340,
        9341,5,1208,0,0,9341,9343,3,1190,595,0,9342,9340,1,0,0,0,9343,9346,
        1,0,0,0,9344,9342,1,0,0,0,9344,9345,1,0,0,0,9345,9347,1,0,0,0,9346,
        9344,1,0,0,0,9347,9348,5,1214,0,0,9348,9350,1,0,0,0,9349,9337,1,
        0,0,0,9349,9338,1,0,0,0,9349,9350,1,0,0,0,9350,901,1,0,0,0,9351,
        9352,5,224,0,0,9352,9353,5,291,0,0,9353,9354,5,42,0,0,9354,9359,
        3,992,496,0,9355,9356,5,1208,0,0,9356,9358,3,992,496,0,9357,9355,
        1,0,0,0,9358,9361,1,0,0,0,9359,9357,1,0,0,0,9359,9360,1,0,0,0,9360,
        903,1,0,0,0,9361,9359,1,0,0,0,9362,9363,5,178,0,0,9363,9364,5,42,
        0,0,9364,9369,3,788,394,0,9365,9366,5,1208,0,0,9366,9368,3,788,394,
        0,9367,9365,1,0,0,0,9368,9371,1,0,0,0,9369,9367,1,0,0,0,9369,9370,
        1,0,0,0,9370,905,1,0,0,0,9371,9369,1,0,0,0,9372,9383,3,908,454,0,
        9373,9383,3,910,455,0,9374,9383,3,912,456,0,9375,9383,3,914,457,
        0,9376,9383,3,916,458,0,9377,9383,3,918,459,0,9378,9383,3,922,461,
        0,9379,9383,3,920,460,0,9380,9383,3,924,462,0,9381,9383,3,926,463,
        0,9382,9372,1,0,0,0,9382,9373,1,0,0,0,9382,9374,1,0,0,0,9382,9375,
        1,0,0,0,9382,9376,1,0,0,0,9382,9377,1,0,0,0,9382,9378,1,0,0,0,9382,
        9379,1,0,0,0,9382,9380,1,0,0,0,9382,9381,1,0,0,0,9383,9385,1,0,0,
        0,9384,9386,5,20,0,0,9385,9384,1,0,0,0,9385,9386,1,0,0,0,9386,9387,
        1,0,0,0,9387,9389,3,812,406,0,9388,9390,3,1186,593,0,9389,9388,1,
        0,0,0,9389,9390,1,0,0,0,9390,907,1,0,0,0,9391,9392,5,1057,0,0,9392,
        9394,5,1213,0,0,9393,9395,3,1132,566,0,9394,9393,1,0,0,0,9394,9395,
        1,0,0,0,9395,9396,1,0,0,0,9396,9398,3,1000,500,0,9397,9399,3,1120,
        560,0,9398,9397,1,0,0,0,9398,9399,1,0,0,0,9399,9401,1,0,0,0,9400,
        9402,3,1136,568,0,9401,9400,1,0,0,0,9401,9402,1,0,0,0,9402,9403,
        1,0,0,0,9403,9404,5,1214,0,0,9404,909,1,0,0,0,9405,9407,3,1070,535,
        0,9406,9405,1,0,0,0,9406,9407,1,0,0,0,9407,9408,1,0,0,0,9408,9409,
        5,1149,0,0,9409,9410,5,1213,0,0,9410,9413,5,286,0,0,9411,9414,3,
        796,398,0,9412,9414,3,1188,594,0,9413,9411,1,0,0,0,9413,9412,1,0,
        0,0,9414,9425,1,0,0,0,9415,9416,5,178,0,0,9416,9417,5,42,0,0,9417,
        9422,3,1000,500,0,9418,9419,5,1208,0,0,9419,9421,3,1000,500,0,9420,
        9418,1,0,0,0,9421,9424,1,0,0,0,9422,9420,1,0,0,0,9422,9423,1,0,0,
        0,9423,9426,1,0,0,0,9424,9422,1,0,0,0,9425,9415,1,0,0,0,9425,9426,
        1,0,0,0,9426,9438,1,0,0,0,9427,9428,5,224,0,0,9428,9429,5,291,0,
        0,9429,9430,5,42,0,0,9430,9435,3,1000,500,0,9431,9432,5,1208,0,0,
        9432,9434,3,1000,500,0,9433,9431,1,0,0,0,9434,9437,1,0,0,0,9435,
        9433,1,0,0,0,9435,9436,1,0,0,0,9436,9439,1,0,0,0,9437,9435,1,0,0,
        0,9438,9427,1,0,0,0,9438,9439,1,0,0,0,9439,9440,1,0,0,0,9440,9441,
        5,457,0,0,9441,9442,5,1150,0,0,9442,9443,5,1213,0,0,9443,9444,3,
        762,381,0,9444,9450,5,1214,0,0,9445,9446,5,1151,0,0,9446,9447,5,
        1213,0,0,9447,9448,3,762,381,0,9448,9449,5,1214,0,0,9449,9451,1,
        0,0,0,9450,9445,1,0,0,0,9450,9451,1,0,0,0,9451,9457,1,0,0,0,9452,
        9453,5,1152,0,0,9453,9454,5,1213,0,0,9454,9455,3,762,381,0,9455,
        9456,5,1214,0,0,9456,9458,1,0,0,0,9457,9452,1,0,0,0,9457,9458,1,
        0,0,0,9458,9464,1,0,0,0,9459,9460,5,1153,0,0,9460,9461,5,1213,0,
        0,9461,9462,3,762,381,0,9462,9463,5,1214,0,0,9463,9465,1,0,0,0,9464,
        9459,1,0,0,0,9464,9465,1,0,0,0,9465,911,1,0,0,0,9466,9467,5,1154,
        0,0,9467,9468,5,1213,0,0,9468,9471,5,286,0,0,9469,9472,3,796,398,
        0,9470,9472,3,1188,594,0,9471,9469,1,0,0,0,9471,9470,1,0,0,0,9472,
        9473,1,0,0,0,9473,9474,5,457,0,0,9474,9475,5,1213,0,0,9475,9479,
        3,944,472,0,9476,9478,3,946,473,0,9477,9476,1,0,0,0,9478,9481,1,
        0,0,0,9479,9477,1,0,0,0,9479,9480,1,0,0,0,9480,9482,1,0,0,0,9481,
        9479,1,0,0,0,9482,9483,5,1214,0,0,9483,9484,5,1214,0,0,9484,913,
        1,0,0,0,9485,9486,5,906,0,0,9486,9487,5,1213,0,0,9487,9502,3,928,
        464,0,9488,9489,5,352,0,0,9489,9499,5,1213,0,0,9490,9500,5,1219,
        0,0,9491,9496,3,762,381,0,9492,9493,5,1208,0,0,9493,9495,3,762,381,
        0,9494,9492,1,0,0,0,9495,9498,1,0,0,0,9496,9494,1,0,0,0,9496,9497,
        1,0,0,0,9497,9500,1,0,0,0,9498,9496,1,0,0,0,9499,9490,1,0,0,0,9499,
        9491,1,0,0,0,9500,9501,1,0,0,0,9501,9503,5,1214,0,0,9502,9488,1,
        0,0,0,9502,9503,1,0,0,0,9503,9509,1,0,0,0,9504,9505,5,625,0,0,9505,
        9506,5,1213,0,0,9506,9507,3,762,381,0,9507,9508,5,1214,0,0,9508,
        9510,1,0,0,0,9509,9504,1,0,0,0,9509,9510,1,0,0,0,9510,9516,1,0,0,
        0,9511,9512,5,569,0,0,9512,9513,5,1213,0,0,9513,9514,3,762,381,0,
        9514,9515,5,1214,0,0,9515,9517,1,0,0,0,9516,9511,1,0,0,0,9516,9517,
        1,0,0,0,9517,9523,1,0,0,0,9518,9519,5,871,0,0,9519,9520,5,1213,0,
        0,9520,9521,3,762,381,0,9521,9522,5,1214,0,0,9522,9524,1,0,0,0,9523,
        9518,1,0,0,0,9523,9524,1,0,0,0,9524,9530,1,0,0,0,9525,9526,5,542,
        0,0,9526,9527,5,1213,0,0,9527,9528,3,794,397,0,9528,9529,5,1214,
        0,0,9529,9531,1,0,0,0,9530,9525,1,0,0,0,9530,9531,1,0,0,0,9531,9532,
        1,0,0,0,9532,9533,5,1214,0,0,9533,915,1,0,0,0,9534,9536,3,1070,535,
        0,9535,9534,1,0,0,0,9535,9536,1,0,0,0,9536,9537,1,0,0,0,9537,9538,
        5,1159,0,0,9538,9539,5,1213,0,0,9539,9542,5,286,0,0,9540,9543,3,
        796,398,0,9541,9543,3,1188,594,0,9542,9540,1,0,0,0,9542,9541,1,0,
        0,0,9543,9544,1,0,0,0,9544,9545,5,457,0,0,9545,9546,5,1160,0,0,9546,
        9547,5,1213,0,0,9547,9552,3,762,381,0,9548,9549,5,1208,0,0,9549,
        9551,3,762,381,0,9550,9548,1,0,0,0,9551,9554,1,0,0,0,9552,9550,1,
        0,0,0,9552,9553,1,0,0,0,9553,9555,1,0,0,0,9554,9552,1,0,0,0,9555,
        9556,5,1214,0,0,9556,9557,5,1161,0,0,9557,9558,5,1213,0,0,9558,9559,
        3,762,381,0,9559,9560,5,1214,0,0,9560,9561,5,1162,0,0,9561,9562,
        5,1213,0,0,9562,9567,3,762,381,0,9563,9564,5,1208,0,0,9564,9566,
        3,762,381,0,9565,9563,1,0,0,0,9566,9569,1,0,0,0,9567,9565,1,0,0,
        0,9567,9568,1,0,0,0,9568,9570,1,0,0,0,9569,9567,1,0,0,0,9570,9587,
        5,1214,0,0,9571,9572,5,1163,0,0,9572,9573,5,1213,0,0,9573,9578,3,
        762,381,0,9574,9575,5,1208,0,0,9575,9577,3,762,381,0,9576,9574,1,
        0,0,0,9577,9580,1,0,0,0,9578,9576,1,0,0,0,9578,9579,1,0,0,0,9579,
        9581,1,0,0,0,9580,9578,1,0,0,0,9581,9582,5,1214,0,0,9582,9583,5,
        1164,0,0,9583,9584,5,1213,0,0,9584,9585,3,762,381,0,9585,9586,5,
        1214,0,0,9586,9588,1,0,0,0,9587,9571,1,0,0,0,9587,9588,1,0,0,0,9588,
        917,1,0,0,0,9589,9590,5,1165,0,0,9590,9591,5,1213,0,0,9591,9592,
        3,928,464,0,9592,9593,5,457,0,0,9593,9594,5,1213,0,0,9594,9598,3,
        944,472,0,9595,9597,3,948,474,0,9596,9595,1,0,0,0,9597,9600,1,0,
        0,0,9598,9596,1,0,0,0,9598,9599,1,0,0,0,9599,9601,1,0,0,0,9600,9598,
        1,0,0,0,9601,9602,5,1214,0,0,9602,9603,5,1214,0,0,9603,919,1,0,0,
        0,9604,9606,3,1070,535,0,9605,9604,1,0,0,0,9605,9606,1,0,0,0,9606,
        9607,1,0,0,0,9607,9608,5,1184,0,0,9608,9609,5,1213,0,0,9609,9610,
        5,286,0,0,9610,9611,3,1188,594,0,9611,9612,5,457,0,0,9612,9613,5,
        1187,0,0,9613,9614,5,1213,0,0,9614,9615,3,762,381,0,9615,9616,5,
        1214,0,0,9616,9617,5,1188,0,0,9617,9618,5,1213,0,0,9618,9619,3,762,
        381,0,9619,9620,5,1214,0,0,9620,9621,5,1214,0,0,9621,921,1,0,0,0,
        9622,9624,3,1070,535,0,9623,9622,1,0,0,0,9623,9624,1,0,0,0,9624,
        9625,1,0,0,0,9625,9626,5,1183,0,0,9626,9627,5,1213,0,0,9627,9628,
        5,286,0,0,9628,9635,3,1188,594,0,9629,9631,5,457,0,0,9630,9632,3,
        938,469,0,9631,9630,1,0,0,0,9632,9633,1,0,0,0,9633,9631,1,0,0,0,
        9633,9634,1,0,0,0,9634,9636,1,0,0,0,9635,9629,1,0,0,0,9635,9636,
        1,0,0,0,9636,9637,1,0,0,0,9637,9638,5,1214,0,0,9638,923,1,0,0,0,
        9639,9641,3,1070,535,0,9640,9639,1,0,0,0,9640,9641,1,0,0,0,9641,
        9642,1,0,0,0,9642,9643,5,1182,0,0,9643,9644,5,1213,0,0,9644,9645,
        5,286,0,0,9645,9646,3,1188,594,0,9646,9647,5,457,0,0,9647,9648,5,
        1187,0,0,9648,9649,5,1213,0,0,9649,9650,3,762,381,0,9650,9651,5,
        1214,0,0,9651,9652,5,1188,0,0,9652,9653,5,1213,0,0,9653,9658,3,762,
        381,0,9654,9655,5,1208,0,0,9655,9657,3,762,381,0,9656,9654,1,0,0,
        0,9657,9660,1,0,0,0,9658,9656,1,0,0,0,9658,9659,1,0,0,0,9659,9661,
        1,0,0,0,9660,9658,1,0,0,0,9661,9662,5,1214,0,0,9662,9663,5,1189,
        0,0,9663,9664,5,1213,0,0,9664,9669,3,762,381,0,9665,9666,5,1208,
        0,0,9666,9668,3,762,381,0,9667,9665,1,0,0,0,9668,9671,1,0,0,0,9669,
        9667,1,0,0,0,9669,9670,1,0,0,0,9670,9672,1,0,0,0,9671,9669,1,0,0,
        0,9672,9678,5,1214,0,0,9673,9674,5,1190,0,0,9674,9675,5,1213,0,0,
        9675,9676,3,768,384,0,9676,9677,5,1214,0,0,9677,9679,1,0,0,0,9678,
        9673,1,0,0,0,9678,9679,1,0,0,0,9679,9685,1,0,0,0,9680,9681,5,1191,
        0,0,9681,9682,5,1213,0,0,9682,9683,3,768,384,0,9683,9684,5,1214,
        0,0,9684,9686,1,0,0,0,9685,9680,1,0,0,0,9685,9686,1,0,0,0,9686,9687,
        1,0,0,0,9687,9688,5,1214,0,0,9688,925,1,0,0,0,9689,9690,3,796,398,
        0,9690,9694,5,1213,0,0,9691,9693,3,928,464,0,9692,9691,1,0,0,0,9693,
        9696,1,0,0,0,9694,9692,1,0,0,0,9694,9695,1,0,0,0,9695,9698,1,0,0,
        0,9696,9694,1,0,0,0,9697,9699,3,930,465,0,9698,9697,1,0,0,0,9698,
        9699,1,0,0,0,9699,9703,1,0,0,0,9700,9702,3,932,466,0,9701,9700,1,
        0,0,0,9702,9705,1,0,0,0,9703,9701,1,0,0,0,9703,9704,1,0,0,0,9704,
        9707,1,0,0,0,9705,9703,1,0,0,0,9706,9708,3,934,467,0,9707,9706,1,
        0,0,0,9707,9708,1,0,0,0,9708,9709,1,0,0,0,9709,9710,5,1214,0,0,9710,
        927,1,0,0,0,9711,9714,5,286,0,0,9712,9715,3,796,398,0,9713,9715,
        3,1188,594,0,9714,9712,1,0,0,0,9714,9713,1,0,0,0,9715,9718,1,0,0,
        0,9716,9717,5,20,0,0,9717,9719,3,812,406,0,9718,9716,1,0,0,0,9718,
        9719,1,0,0,0,9719,9722,1,0,0,0,9720,9723,3,940,470,0,9721,9723,5,
        635,0,0,9722,9720,1,0,0,0,9722,9721,1,0,0,0,9722,9723,1,0,0,0,9723,
        9737,1,0,0,0,9724,9726,5,224,0,0,9725,9724,1,0,0,0,9725,9726,1,0,
        0,0,9726,9727,1,0,0,0,9727,9728,5,291,0,0,9728,9729,5,42,0,0,9729,
        9734,3,992,496,0,9730,9731,5,1208,0,0,9731,9733,3,992,496,0,9732,
        9730,1,0,0,0,9733,9736,1,0,0,0,9734,9732,1,0,0,0,9734,9735,1,0,0,
        0,9735,9738,1,0,0,0,9736,9734,1,0,0,0,9737,9725,1,0,0,0,9737,9738,
        1,0,0,0,9738,929,1,0,0,0,9739,9740,5,144,0,0,9740,9741,5,236,0,0,
        9741,9742,5,1224,0,0,9742,9747,3,762,381,0,9743,9744,5,577,0,0,9744,
        9745,5,457,0,0,9745,9746,5,1224,0,0,9746,9748,3,762,381,0,9747,9743,
        1,0,0,0,9747,9748,1,0,0,0,9748,931,1,0,0,0,9749,9750,5,293,0,0,9750,
        9751,5,406,0,0,9751,9752,3,792,396,0,9752,9753,5,1213,0,0,9753,9754,
        3,796,398,0,9754,9755,5,1214,0,0,9755,933,1,0,0,0,9756,9758,5,457,
        0,0,9757,9759,3,936,468,0,9758,9757,1,0,0,0,9759,9760,1,0,0,0,9760,
        9758,1,0,0,0,9760,9761,1,0,0,0,9761,935,1,0,0,0,9762,9765,3,792,
        396,0,9763,9766,3,1184,592,0,9764,9766,3,1188,594,0,9765,9763,1,
        0,0,0,9765,9764,1,0,0,0,9766,937,1,0,0,0,9767,9768,7,82,0,0,9768,
        9769,5,1213,0,0,9769,9770,3,1000,500,0,9770,9771,5,1214,0,0,9771,
        939,1,0,0,0,9772,9773,7,83,0,0,9773,9774,5,42,0,0,9774,9779,3,1000,
        500,0,9775,9776,5,1208,0,0,9776,9778,3,1000,500,0,9777,9775,1,0,
        0,0,9778,9781,1,0,0,0,9779,9777,1,0,0,0,9779,9780,1,0,0,0,9780,9786,
        1,0,0,0,9781,9779,1,0,0,0,9782,9783,5,840,0,0,9783,9784,5,42,0,0,
        9784,9786,5,18,0,0,9785,9772,1,0,0,0,9785,9782,1,0,0,0,9786,941,
        1,0,0,0,9787,9789,3,1188,594,0,9788,9790,5,20,0,0,9789,9788,1,0,
        0,0,9789,9790,1,0,0,0,9790,9791,1,0,0,0,9791,9793,3,812,406,0,9792,
        9794,3,1186,593,0,9793,9792,1,0,0,0,9793,9794,1,0,0,0,9794,943,1,
        0,0,0,9795,9796,5,1128,0,0,9796,9797,5,1213,0,0,9797,9798,5,1203,
        0,0,9798,9799,5,1214,0,0,9799,945,1,0,0,0,9800,9801,5,29,0,0,9801,
        9804,5,1213,0,0,9802,9805,3,794,397,0,9803,9805,3,762,381,0,9804,
        9802,1,0,0,0,9804,9803,1,0,0,0,9805,9806,1,0,0,0,9806,9807,5,1214,
        0,0,9807,9849,1,0,0,0,9808,9809,5,1155,0,0,9809,9810,5,1213,0,0,
        9810,9811,3,762,381,0,9811,9812,5,1214,0,0,9812,9849,1,0,0,0,9813,
        9814,5,1156,0,0,9814,9815,5,1213,0,0,9815,9816,3,762,381,0,9816,
        9817,5,1214,0,0,9817,9849,1,0,0,0,9818,9819,5,1157,0,0,9819,9820,
        5,1213,0,0,9820,9821,3,762,381,0,9821,9822,5,1214,0,0,9822,9849,
        1,0,0,0,9823,9824,5,1134,0,0,9824,9825,5,1213,0,0,9825,9826,3,762,
        381,0,9826,9827,5,1214,0,0,9827,9849,1,0,0,0,9828,9829,5,1158,0,
        0,9829,9830,5,1213,0,0,9830,9831,3,762,381,0,9831,9832,5,1214,0,
        0,9832,9849,1,0,0,0,9833,9834,5,1132,0,0,9834,9835,5,1213,0,0,9835,
        9836,3,762,381,0,9836,9837,5,1214,0,0,9837,9849,1,0,0,0,9838,9839,
        5,1133,0,0,9839,9840,5,1213,0,0,9840,9841,3,762,381,0,9841,9842,
        5,1214,0,0,9842,9849,1,0,0,0,9843,9844,5,1135,0,0,9844,9845,5,1213,
        0,0,9845,9846,3,762,381,0,9846,9847,5,1214,0,0,9847,9849,1,0,0,0,
        9848,9800,1,0,0,0,9848,9808,1,0,0,0,9848,9813,1,0,0,0,9848,9818,
        1,0,0,0,9848,9823,1,0,0,0,9848,9828,1,0,0,0,9848,9833,1,0,0,0,9848,
        9838,1,0,0,0,9848,9843,1,0,0,0,9849,947,1,0,0,0,9850,9851,5,29,0,
        0,9851,9854,5,1213,0,0,9852,9855,3,794,397,0,9853,9855,3,762,381,
        0,9854,9852,1,0,0,0,9854,9853,1,0,0,0,9855,9856,1,0,0,0,9856,9857,
        5,1214,0,0,9857,9904,1,0,0,0,9858,9859,5,1134,0,0,9859,9860,5,1213,
        0,0,9860,9861,3,762,381,0,9861,9862,5,1214,0,0,9862,9904,1,0,0,0,
        9863,9864,5,1166,0,0,9864,9865,5,1213,0,0,9865,9866,3,762,381,0,
        9866,9867,5,1214,0,0,9867,9904,1,0,0,0,9868,9869,5,1167,0,0,9869,
        9870,5,1213,0,0,9870,9871,3,762,381,0,9871,9872,5,1214,0,0,9872,
        9904,1,0,0,0,9873,9874,5,1168,0,0,9874,9875,5,1213,0,0,9875,9876,
        3,762,381,0,9876,9877,5,1214,0,0,9877,9904,1,0,0,0,9878,9879,5,1169,
        0,0,9879,9880,5,1213,0,0,9880,9881,3,762,381,0,9881,9882,5,1214,
        0,0,9882,9904,1,0,0,0,9883,9884,5,1170,0,0,9884,9885,5,1213,0,0,
        9885,9886,3,762,381,0,9886,9887,5,1214,0,0,9887,9904,1,0,0,0,9888,
        9889,5,1171,0,0,9889,9890,5,1213,0,0,9890,9891,3,762,381,0,9891,
        9892,5,1214,0,0,9892,9904,1,0,0,0,9893,9894,5,1172,0,0,9894,9895,
        5,1213,0,0,9895,9896,3,762,381,0,9896,9897,5,1214,0,0,9897,9904,
        1,0,0,0,9898,9899,5,1173,0,0,9899,9900,5,1213,0,0,9900,9901,3,762,
        381,0,9901,9902,5,1214,0,0,9902,9904,1,0,0,0,9903,9850,1,0,0,0,9903,
        9858,1,0,0,0,9903,9863,1,0,0,0,9903,9868,1,0,0,0,9903,9873,1,0,0,
        0,9903,9878,1,0,0,0,9903,9883,1,0,0,0,9903,9888,1,0,0,0,9903,9893,
        1,0,0,0,9903,9898,1,0,0,0,9904,949,1,0,0,0,9905,9906,5,474,0,0,9906,
        9908,3,1000,500,0,9907,9909,3,954,477,0,9908,9907,1,0,0,0,9908,9909,
        1,0,0,0,9909,9917,1,0,0,0,9910,9911,5,1208,0,0,9911,9913,3,1000,
        500,0,9912,9914,3,954,477,0,9913,9912,1,0,0,0,9913,9914,1,0,0,0,
        9914,9916,1,0,0,0,9915,9910,1,0,0,0,9916,9919,1,0,0,0,9917,9915,
        1,0,0,0,9917,9918,1,0,0,0,9918,9921,1,0,0,0,9919,9917,1,0,0,0,9920,
        9922,3,952,476,0,9921,9920,1,0,0,0,9921,9922,1,0,0,0,9922,951,1,
        0,0,0,9923,9924,5,42,0,0,9924,9929,3,994,497,0,9925,9926,5,1208,
        0,0,9926,9928,3,994,497,0,9927,9925,1,0,0,0,9928,9931,1,0,0,0,9929,
        9927,1,0,0,0,9929,9930,1,0,0,0,9930,953,1,0,0,0,9931,9929,1,0,0,
        0,9932,9933,5,1213,0,0,9933,9934,5,425,0,0,9934,9935,3,762,381,0,
        9935,9936,5,1214,0,0,9936,955,1,0,0,0,9937,9938,5,471,0,0,9938,9939,
        3,998,499,0,9939,957,1,0,0,0,9940,9941,5,174,0,0,9941,9942,5,42,
        0,0,9942,9953,3,960,480,0,9943,9944,5,174,0,0,9944,9945,5,42,0,0,
        9945,9948,3,960,480,0,9946,9947,5,1208,0,0,9947,9949,3,960,480,0,
        9948,9946,1,0,0,0,9949,9950,1,0,0,0,9950,9948,1,0,0,0,9950,9951,
        1,0,0,0,9951,9953,1,0,0,0,9952,9940,1,0,0,0,9952,9943,1,0,0,0,9953,
        959,1,0,0,0,9954,9959,3,962,481,0,9955,9959,3,968,484,0,9956,9959,
        3,970,485,0,9957,9959,3,972,486,0,9958,9954,1,0,0,0,9958,9955,1,
        0,0,0,9958,9956,1,0,0,0,9958,9957,1,0,0,0,9959,961,1,0,0,0,9960,
        9963,3,1000,500,0,9961,9963,3,964,482,0,9962,9960,1,0,0,0,9962,9961,
        1,0,0,0,9963,9971,1,0,0,0,9964,9967,5,1208,0,0,9965,9968,3,1000,
        500,0,9966,9968,3,964,482,0,9967,9965,1,0,0,0,9967,9966,1,0,0,0,
        9968,9970,1,0,0,0,9969,9964,1,0,0,0,9970,9973,1,0,0,0,9971,9969,
        1,0,0,0,9971,9972,1,0,0,0,9972,963,1,0,0,0,9973,9971,1,0,0,0,9974,
        9975,5,1213,0,0,9975,9978,3,1000,500,0,9976,9977,5,1208,0,0,9977,
        9979,3,1000,500,0,9978,9976,1,0,0,0,9979,9980,1,0,0,0,9980,9978,
        1,0,0,0,9980,9981,1,0,0,0,9981,9982,1,0,0,0,9982,9983,5,1214,0,0,
        9983,965,1,0,0,0,9984,9985,5,1213,0,0,9985,9986,5,1214,0,0,9986,
        967,1,0,0,0,9987,9988,5,360,0,0,9988,9989,5,1213,0,0,9989,9990,3,
        962,481,0,9990,9991,5,1214,0,0,9991,969,1,0,0,0,9992,9993,5,92,0,
        0,9993,9994,5,1213,0,0,9994,9995,3,962,481,0,9995,9996,5,1214,0,
        0,9996,971,1,0,0,0,9997,9998,5,175,0,0,9998,9999,5,374,0,0,9999,
        10000,5,1213,0,0,10000,10005,3,974,487,0,10001,10002,5,1208,0,0,
        10002,10004,3,974,487,0,10003,10001,1,0,0,0,10004,10007,1,0,0,0,
        10005,10003,1,0,0,0,10005,10006,1,0,0,0,10006,10008,1,0,0,0,10007,
        10005,1,0,0,0,10008,10009,5,1214,0,0,10009,973,1,0,0,0,10010,10016,
        3,962,481,0,10011,10016,3,966,483,0,10012,10016,3,968,484,0,10013,
        10016,3,970,485,0,10014,10016,3,972,486,0,10015,10010,1,0,0,0,10015,
        10011,1,0,0,0,10015,10012,1,0,0,0,10015,10013,1,0,0,0,10015,10014,
        1,0,0,0,10016,975,1,0,0,0,10017,10018,5,183,0,0,10018,10019,3,998,
        499,0,10019,977,1,0,0,0,10020,10021,5,315,0,0,10021,10022,3,998,
        499,0,10022,979,1,0,0,0,10023,10026,5,365,0,0,10024,10025,5,474,
        0,0,10025,10027,5,883,0,0,10026,10024,1,0,0,0,10026,10027,1,0,0,
        0,10027,10030,1,0,0,0,10028,10029,5,872,0,0,10029,10031,5,498,0,
        0,10030,10028,1,0,0,0,10030,10031,1,0,0,0,10031,10035,1,0,0,0,10032,
        10036,3,982,491,0,10033,10036,3,984,492,0,10034,10036,3,986,493,
        0,10035,10032,1,0,0,0,10035,10033,1,0,0,0,10035,10034,1,0,0,0,10036,
        981,1,0,0,0,10037,10042,3,772,386,0,10038,10039,5,1208,0,0,10039,
        10041,3,772,386,0,10040,10038,1,0,0,0,10041,10044,1,0,0,0,10042,
        10040,1,0,0,0,10042,10043,1,0,0,0,10043,983,1,0,0,0,10044,10042,
        1,0,0,0,10045,10050,3,768,384,0,10046,10047,5,1208,0,0,10047,10049,
        3,768,384,0,10048,10046,1,0,0,0,10049,10052,1,0,0,0,10050,10048,
        1,0,0,0,10050,10051,1,0,0,0,10051,985,1,0,0,0,10052,10050,1,0,0,
        0,10053,10054,5,470,0,0,10054,10055,3,998,499,0,10055,10058,5,419,
        0,0,10056,10059,3,982,491,0,10057,10059,3,984,492,0,10058,10056,
        1,0,0,0,10058,10057,1,0,0,0,10059,10061,1,0,0,0,10060,10053,1,0,
        0,0,10061,10062,1,0,0,0,10062,10060,1,0,0,0,10062,10063,1,0,0,0,
        10063,10069,1,0,0,0,10064,10067,5,131,0,0,10065,10068,3,982,491,
        0,10066,10068,3,984,492,0,10067,10065,1,0,0,0,10067,10066,1,0,0,
        0,10068,10070,1,0,0,0,10069,10064,1,0,0,0,10069,10070,1,0,0,0,10070,
        10071,1,0,0,0,10071,10072,5,134,0,0,10072,987,1,0,0,0,10073,10074,
        5,148,0,0,10074,10075,5,286,0,0,10075,10077,3,1000,500,0,10076,10078,
        5,20,0,0,10077,10076,1,0,0,0,10077,10078,1,0,0,0,10078,10079,1,0,
        0,0,10079,10093,3,812,406,0,10080,10091,5,42,0,0,10081,10092,3,782,
        391,0,10082,10084,5,505,0,0,10083,10085,5,853,0,0,10084,10083,1,
        0,0,0,10084,10085,1,0,0,0,10085,10086,1,0,0,0,10086,10089,3,834,
        417,0,10087,10088,5,24,0,0,10088,10090,3,778,389,0,10089,10087,1,
        0,0,0,10089,10090,1,0,0,0,10090,10092,1,0,0,0,10091,10081,1,0,0,
        0,10091,10082,1,0,0,0,10092,10094,1,0,0,0,10093,10080,1,0,0,0,10093,
        10094,1,0,0,0,10094,10097,1,0,0,0,10095,10096,5,159,0,0,10096,10098,
        3,1000,500,0,10097,10095,1,0,0,0,10097,10098,1,0,0,0,10098,989,1,
        0,0,0,10099,10100,5,291,0,0,10100,10101,5,42,0,0,10101,10106,3,992,
        496,0,10102,10103,5,1208,0,0,10103,10105,3,992,496,0,10104,10102,
        1,0,0,0,10105,10108,1,0,0,0,10106,10104,1,0,0,0,10106,10107,1,0,
        0,0,10107,991,1,0,0,0,10108,10106,1,0,0,0,10109,10111,3,1000,500,
        0,10110,10112,7,84,0,0,10111,10110,1,0,0,0,10111,10112,1,0,0,0,10112,
        10115,1,0,0,0,10113,10114,5,806,0,0,10114,10116,7,85,0,0,10115,10113,
        1,0,0,0,10115,10116,1,0,0,0,10116,993,1,0,0,0,10117,10119,3,1000,
        500,0,10118,10120,7,84,0,0,10119,10118,1,0,0,0,10119,10120,1,0,0,
        0,10120,995,1,0,0,0,10121,10122,5,474,0,0,10122,10123,5,59,0,0,10123,
        10124,5,289,0,0,10124,997,1,0,0,0,10125,10126,6,499,-1,0,10126,10127,
        3,1000,500,0,10127,10128,3,1200,600,0,10128,10129,3,1000,500,0,10129,
        10372,1,0,0,0,10130,10131,3,1000,500,0,10131,10132,3,1200,600,0,
        10132,10133,3,1202,601,0,10133,10137,3,1180,590,0,10134,10136,3,
        1080,540,0,10135,10134,1,0,0,0,10136,10139,1,0,0,0,10137,10135,1,
        0,0,0,10137,10138,1,0,0,0,10138,10372,1,0,0,0,10139,10137,1,0,0,
        0,10140,10141,3,1002,501,0,10141,10142,3,1200,600,0,10142,10143,
        3,1202,601,0,10143,10147,3,1180,590,0,10144,10146,3,1080,540,0,10145,
        10144,1,0,0,0,10146,10149,1,0,0,0,10147,10145,1,0,0,0,10147,10148,
        1,0,0,0,10148,10372,1,0,0,0,10149,10147,1,0,0,0,10150,10152,3,1000,
        500,0,10151,10153,7,73,0,0,10152,10151,1,0,0,0,10152,10153,1,0,0,
        0,10153,10154,1,0,0,0,10154,10155,5,35,0,0,10155,10156,3,1000,500,
        0,10156,10157,5,16,0,0,10157,10158,3,1000,500,0,10158,10372,1,0,
        0,0,10159,10161,3,1000,500,0,10160,10162,5,207,0,0,10161,10160,1,
        0,0,0,10161,10162,1,0,0,0,10162,10164,1,0,0,0,10163,10165,7,73,0,
        0,10164,10163,1,0,0,0,10164,10165,1,0,0,0,10165,10166,1,0,0,0,10166,
        10168,5,190,0,0,10167,10169,3,1202,601,0,10168,10167,1,0,0,0,10168,
        10169,1,0,0,0,10169,10170,1,0,0,0,10170,10174,3,1182,591,0,10171,
        10173,3,1080,540,0,10172,10171,1,0,0,0,10173,10176,1,0,0,0,10174,
        10172,1,0,0,0,10174,10175,1,0,0,0,10175,10372,1,0,0,0,10176,10174,
        1,0,0,0,10177,10179,3,1000,500,0,10178,10180,5,207,0,0,10179,10178,
        1,0,0,0,10179,10180,1,0,0,0,10180,10182,1,0,0,0,10181,10183,7,73,
        0,0,10182,10181,1,0,0,0,10182,10183,1,0,0,0,10183,10184,1,0,0,0,
        10184,10186,5,190,0,0,10185,10187,3,1202,601,0,10186,10185,1,0,0,
        0,10186,10187,1,0,0,0,10187,10188,1,0,0,0,10188,10192,3,1188,594,
        0,10189,10191,3,1080,540,0,10190,10189,1,0,0,0,10191,10194,1,0,0,
        0,10192,10190,1,0,0,0,10192,10193,1,0,0,0,10193,10372,1,0,0,0,10194,
        10192,1,0,0,0,10195,10197,3,1000,500,0,10196,10198,5,207,0,0,10197,
        10196,1,0,0,0,10197,10198,1,0,0,0,10198,10200,1,0,0,0,10199,10201,
        7,73,0,0,10200,10199,1,0,0,0,10200,10201,1,0,0,0,10201,10202,1,0,
        0,0,10202,10204,5,190,0,0,10203,10205,3,1202,601,0,10204,10203,1,
        0,0,0,10204,10205,1,0,0,0,10205,10206,1,0,0,0,10206,10210,3,1000,
        500,0,10207,10209,3,1080,540,0,10208,10207,1,0,0,0,10209,10212,1,
        0,0,0,10210,10208,1,0,0,0,10210,10211,1,0,0,0,10211,10372,1,0,0,
        0,10212,10210,1,0,0,0,10213,10215,3,1002,501,0,10214,10216,5,207,
        0,0,10215,10214,1,0,0,0,10215,10216,1,0,0,0,10216,10218,1,0,0,0,
        10217,10219,7,73,0,0,10218,10217,1,0,0,0,10218,10219,1,0,0,0,10219,
        10220,1,0,0,0,10220,10222,5,190,0,0,10221,10223,3,1202,601,0,10222,
        10221,1,0,0,0,10222,10223,1,0,0,0,10223,10224,1,0,0,0,10224,10228,
        3,1188,594,0,10225,10227,3,1080,540,0,10226,10225,1,0,0,0,10227,
        10230,1,0,0,0,10228,10226,1,0,0,0,10228,10229,1,0,0,0,10229,10372,
        1,0,0,0,10230,10228,1,0,0,0,10231,10233,3,1000,500,0,10232,10234,
        7,73,0,0,10233,10232,1,0,0,0,10233,10234,1,0,0,0,10234,10235,1,0,
        0,0,10235,10236,5,220,0,0,10236,10239,3,1000,500,0,10237,10238,5,
        140,0,0,10238,10240,3,1000,500,0,10239,10237,1,0,0,0,10239,10240,
        1,0,0,0,10240,10372,1,0,0,0,10241,10243,3,1000,500,0,10242,10244,
        7,73,0,0,10243,10242,1,0,0,0,10243,10244,1,0,0,0,10244,10245,1,0,
        0,0,10245,10246,5,220,0,0,10246,10247,3,1202,601,0,10247,10251,3,
        1180,590,0,10248,10250,3,1080,540,0,10249,10248,1,0,0,0,10250,10253,
        1,0,0,0,10251,10249,1,0,0,0,10251,10252,1,0,0,0,10252,10256,1,0,
        0,0,10253,10251,1,0,0,0,10254,10255,5,140,0,0,10255,10257,3,1000,
        500,0,10256,10254,1,0,0,0,10256,10257,1,0,0,0,10257,10261,1,0,0,
        0,10258,10260,3,1080,540,0,10259,10258,1,0,0,0,10260,10263,1,0,0,
        0,10261,10259,1,0,0,0,10261,10262,1,0,0,0,10262,10372,1,0,0,0,10263,
        10261,1,0,0,0,10264,10266,3,1002,501,0,10265,10267,7,73,0,0,10266,
        10265,1,0,0,0,10266,10267,1,0,0,0,10267,10268,1,0,0,0,10268,10269,
        5,220,0,0,10269,10270,3,1202,601,0,10270,10274,3,1180,590,0,10271,
        10273,3,1080,540,0,10272,10271,1,0,0,0,10273,10276,1,0,0,0,10274,
        10272,1,0,0,0,10274,10275,1,0,0,0,10275,10279,1,0,0,0,10276,10274,
        1,0,0,0,10277,10278,5,140,0,0,10278,10280,3,1000,500,0,10279,10277,
        1,0,0,0,10279,10280,1,0,0,0,10280,10284,1,0,0,0,10281,10283,3,1080,
        540,0,10282,10281,1,0,0,0,10283,10286,1,0,0,0,10284,10282,1,0,0,
        0,10284,10285,1,0,0,0,10285,10372,1,0,0,0,10286,10284,1,0,0,0,10287,
        10289,7,73,0,0,10288,10287,1,0,0,0,10288,10289,1,0,0,0,10289,10290,
        1,0,0,0,10290,10291,5,145,0,0,10291,10372,3,1188,594,0,10292,10293,
        7,73,0,0,10293,10372,3,998,499,13,10294,10295,3,1000,500,0,10295,
        10297,5,207,0,0,10296,10298,7,73,0,0,10297,10296,1,0,0,0,10297,10298,
        1,0,0,0,10298,10299,1,0,0,0,10299,10300,5,274,0,0,10300,10372,1,
        0,0,0,10301,10303,3,1000,500,0,10302,10304,7,73,0,0,10303,10302,
        1,0,0,0,10303,10304,1,0,0,0,10304,10305,1,0,0,0,10305,10306,5,77,
        0,0,10306,10307,3,1000,500,0,10307,10372,1,0,0,0,10308,10310,3,1000,
        500,0,10309,10311,7,73,0,0,10310,10309,1,0,0,0,10310,10311,1,0,0,
        0,10311,10312,1,0,0,0,10312,10313,5,136,0,0,10313,10314,3,1000,500,
        0,10314,10372,1,0,0,0,10315,10317,3,1000,500,0,10316,10318,7,73,
        0,0,10317,10316,1,0,0,0,10317,10318,1,0,0,0,10318,10319,1,0,0,0,
        10319,10320,5,765,0,0,10320,10321,3,1000,500,0,10321,10372,1,0,0,
        0,10322,10324,3,1000,500,0,10323,10325,7,73,0,0,10324,10323,1,0,
        0,0,10324,10325,1,0,0,0,10325,10326,1,0,0,0,10326,10327,5,857,0,
        0,10327,10328,3,1000,500,0,10328,10372,1,0,0,0,10329,10331,3,1000,
        500,0,10330,10332,7,73,0,0,10331,10330,1,0,0,0,10331,10332,1,0,0,
        0,10332,10333,1,0,0,0,10333,10334,5,947,0,0,10334,10335,3,1000,500,
        0,10335,10372,1,0,0,0,10336,10337,3,1000,500,0,10337,10338,5,698,
        0,0,10338,10339,5,857,0,0,10339,10340,3,1000,500,0,10340,10372,1,
        0,0,0,10341,10342,3,1000,500,0,10342,10343,5,698,0,0,10343,10344,
        5,947,0,0,10344,10345,3,1000,500,0,10345,10372,1,0,0,0,10346,10355,
        3,1000,500,0,10347,10348,5,1213,0,0,10348,10349,3,1000,500,0,10349,
        10350,5,1208,0,0,10350,10351,3,1000,500,0,10351,10352,5,1214,0,0,
        10352,10355,1,0,0,0,10353,10355,3,1188,594,0,10354,10346,1,0,0,0,
        10354,10347,1,0,0,0,10354,10353,1,0,0,0,10355,10356,1,0,0,0,10356,
        10365,5,296,0,0,10357,10366,3,1000,500,0,10358,10359,5,1213,0,0,
        10359,10360,3,1000,500,0,10360,10361,5,1208,0,0,10361,10362,3,1000,
        500,0,10362,10363,5,1214,0,0,10363,10366,1,0,0,0,10364,10366,3,1188,
        594,0,10365,10357,1,0,0,0,10365,10358,1,0,0,0,10365,10364,1,0,0,
        0,10366,10372,1,0,0,0,10367,10368,5,1213,0,0,10368,10369,3,998,499,
        0,10369,10370,5,1214,0,0,10370,10372,1,0,0,0,10371,10125,1,0,0,0,
        10371,10130,1,0,0,0,10371,10140,1,0,0,0,10371,10150,1,0,0,0,10371,
        10159,1,0,0,0,10371,10177,1,0,0,0,10371,10195,1,0,0,0,10371,10213,
        1,0,0,0,10371,10231,1,0,0,0,10371,10241,1,0,0,0,10371,10264,1,0,
        0,0,10371,10288,1,0,0,0,10371,10292,1,0,0,0,10371,10294,1,0,0,0,
        10371,10301,1,0,0,0,10371,10308,1,0,0,0,10371,10315,1,0,0,0,10371,
        10322,1,0,0,0,10371,10329,1,0,0,0,10371,10336,1,0,0,0,10371,10341,
        1,0,0,0,10371,10354,1,0,0,0,10371,10367,1,0,0,0,10372,10381,1,0,
        0,0,10373,10374,10,12,0,0,10374,10375,5,16,0,0,10375,10380,3,998,
        499,13,10376,10377,10,11,0,0,10377,10378,5,290,0,0,10378,10380,3,
        998,499,12,10379,10373,1,0,0,0,10379,10376,1,0,0,0,10380,10383,1,
        0,0,0,10381,10379,1,0,0,0,10381,10382,1,0,0,0,10382,999,1,0,0,0,
        10383,10381,1,0,0,0,10384,10385,6,500,-1,0,10385,10461,3,758,379,
        0,10386,10387,7,1,0,0,10387,10461,3,1000,500,70,10388,10461,3,1006,
        503,0,10389,10461,3,1068,534,0,10390,10461,3,788,394,0,10391,10461,
        3,1018,509,0,10392,10461,3,1192,596,0,10393,10461,3,1194,597,0,10394,
        10461,3,1196,598,0,10395,10397,5,265,0,0,10396,10398,3,722,361,0,
        10397,10396,1,0,0,0,10397,10398,1,0,0,0,10398,10399,1,0,0,0,10399,
        10400,3,828,414,0,10400,10409,5,1213,0,0,10401,10406,3,1000,500,
        0,10402,10403,5,1208,0,0,10403,10405,3,1000,500,0,10404,10402,1,
        0,0,0,10405,10408,1,0,0,0,10406,10404,1,0,0,0,10406,10407,1,0,0,
        0,10407,10410,1,0,0,0,10408,10406,1,0,0,0,10409,10401,1,0,0,0,10409,
        10410,1,0,0,0,10410,10411,1,0,0,0,10411,10412,5,1214,0,0,10412,10461,
        1,0,0,0,10413,10414,5,265,0,0,10414,10415,5,720,0,0,10415,10416,
        5,1213,0,0,10416,10419,3,1000,500,0,10417,10418,5,1208,0,0,10418,
        10420,7,86,0,0,10419,10417,1,0,0,0,10419,10420,1,0,0,0,10420,10421,
        1,0,0,0,10421,10422,5,1214,0,0,10422,10461,1,0,0,0,10423,10424,5,
        265,0,0,10424,10425,5,466,0,0,10425,10426,5,1213,0,0,10426,10431,
        3,1000,500,0,10427,10429,5,20,0,0,10428,10427,1,0,0,0,10428,10429,
        1,0,0,0,10429,10430,1,0,0,0,10430,10432,3,812,406,0,10431,10428,
        1,0,0,0,10431,10432,1,0,0,0,10432,10443,1,0,0,0,10433,10434,5,1208,
        0,0,10434,10439,3,1000,500,0,10435,10437,5,20,0,0,10436,10435,1,
        0,0,0,10436,10437,1,0,0,0,10437,10438,1,0,0,0,10438,10440,3,812,
        406,0,10439,10436,1,0,0,0,10439,10440,1,0,0,0,10440,10442,1,0,0,
        0,10441,10433,1,0,0,0,10442,10445,1,0,0,0,10443,10441,1,0,0,0,10443,
        10444,1,0,0,0,10444,10446,1,0,0,0,10445,10443,1,0,0,0,10446,10447,
        5,1214,0,0,10447,10461,1,0,0,0,10448,10449,5,265,0,0,10449,10450,
        5,1042,0,0,10450,10451,5,1213,0,0,10451,10452,3,1000,500,0,10452,
        10453,5,1214,0,0,10453,10461,1,0,0,0,10454,10461,3,1022,511,0,10455,
        10456,5,1213,0,0,10456,10457,3,1000,500,0,10457,10458,5,1214,0,0,
        10458,10461,1,0,0,0,10459,10461,3,1188,594,0,10460,10384,1,0,0,0,
        10460,10386,1,0,0,0,10460,10388,1,0,0,0,10460,10389,1,0,0,0,10460,
        10390,1,0,0,0,10460,10391,1,0,0,0,10460,10392,1,0,0,0,10460,10393,
        1,0,0,0,10460,10394,1,0,0,0,10460,10395,1,0,0,0,10460,10413,1,0,
        0,0,10460,10423,1,0,0,0,10460,10448,1,0,0,0,10460,10454,1,0,0,0,
        10460,10455,1,0,0,0,10460,10459,1,0,0,0,10461,10867,1,0,0,0,10462,
        10463,10,69,0,0,10463,10464,5,1223,0,0,10464,10866,3,1000,500,69,
        10465,10466,10,68,0,0,10466,10467,7,87,0,0,10467,10866,3,1000,500,
        69,10468,10469,10,67,0,0,10469,10470,5,251,0,0,10470,10866,3,1000,
        500,67,10471,10472,10,66,0,0,10472,10473,7,1,0,0,10473,10866,3,1000,
        500,67,10474,10475,10,65,0,0,10475,10476,7,88,0,0,10476,10866,3,
        1000,500,66,10477,10478,10,57,0,0,10478,10479,5,835,0,0,10479,10866,
        3,1000,500,58,10480,10481,10,56,0,0,10481,10482,7,89,0,0,10482,10866,
        3,1000,500,57,10483,10484,10,61,0,0,10484,10866,3,1178,589,0,10485,
        10486,10,60,0,0,10486,10487,5,1222,0,0,10487,10488,3,1000,500,0,
        10488,10489,3,1020,510,0,10489,10866,1,0,0,0,10490,10492,10,58,0,
        0,10491,10493,3,1080,540,0,10492,10491,1,0,0,0,10493,10494,1,0,0,
        0,10494,10492,1,0,0,0,10494,10495,1,0,0,0,10495,10866,1,0,0,0,10496,
        10497,10,52,0,0,10497,10498,5,1209,0,0,10498,10866,3,792,396,0,10499,
        10500,10,51,0,0,10500,10501,5,1209,0,0,10501,10866,5,1219,0,0,10502,
        10503,10,50,0,0,10503,10504,5,1215,0,0,10504,10505,5,1219,0,0,10505,
        10866,5,1216,0,0,10506,10507,10,49,0,0,10507,10508,5,1215,0,0,10508,
        10509,3,768,384,0,10509,10510,5,1207,0,0,10510,10513,3,768,384,0,
        10511,10512,5,1207,0,0,10512,10514,3,768,384,0,10513,10511,1,0,0,
        0,10513,10514,1,0,0,0,10514,10515,1,0,0,0,10515,10516,5,1216,0,0,
        10516,10866,1,0,0,0,10517,10518,10,48,0,0,10518,10519,5,1209,0,0,
        10519,10520,5,1209,0,0,10520,10866,3,792,396,0,10521,10522,10,47,
        0,0,10522,10523,5,1209,0,0,10523,10524,5,1209,0,0,10524,10866,5,
        1219,0,0,10525,10526,10,46,0,0,10526,10527,5,1209,0,0,10527,10528,
        5,1209,0,0,10528,10529,5,1215,0,0,10529,10530,3,768,384,0,10530,
        10531,5,1216,0,0,10531,10866,1,0,0,0,10532,10533,10,45,0,0,10533,
        10534,5,1209,0,0,10534,10535,5,1209,0,0,10535,10536,5,1215,0,0,10536,
        10537,5,1219,0,0,10537,10866,5,1216,0,0,10538,10539,10,44,0,0,10539,
        10540,5,1209,0,0,10540,10541,5,1209,0,0,10541,10542,5,1215,0,0,10542,
        10543,3,768,384,0,10543,10544,5,1207,0,0,10544,10547,3,768,384,0,
        10545,10546,5,1207,0,0,10546,10548,3,768,384,0,10547,10545,1,0,0,
        0,10547,10548,1,0,0,0,10548,10549,1,0,0,0,10549,10550,5,1216,0,0,
        10550,10866,1,0,0,0,10551,10552,10,43,0,0,10552,10553,5,1209,0,0,
        10553,10554,5,1108,0,0,10554,10556,5,1213,0,0,10555,10557,3,762,
        381,0,10556,10555,1,0,0,0,10556,10557,1,0,0,0,10557,10558,1,0,0,
        0,10558,10866,5,1214,0,0,10559,10560,10,42,0,0,10560,10561,5,1209,
        0,0,10561,10562,5,1109,0,0,10562,10563,5,1213,0,0,10563,10866,5,
        1214,0,0,10564,10565,10,41,0,0,10565,10566,5,1209,0,0,10566,10567,
        5,1110,0,0,10567,10568,5,1213,0,0,10568,10571,3,1000,500,0,10569,
        10570,5,1208,0,0,10570,10572,3,762,381,0,10571,10569,1,0,0,0,10571,
        10572,1,0,0,0,10572,10573,1,0,0,0,10573,10574,5,1214,0,0,10574,10866,
        1,0,0,0,10575,10576,10,40,0,0,10576,10577,5,1209,0,0,10577,10578,
        5,1111,0,0,10578,10579,5,1213,0,0,10579,10580,3,1000,500,0,10580,
        10581,5,1214,0,0,10581,10866,1,0,0,0,10582,10583,10,39,0,0,10583,
        10584,5,1209,0,0,10584,10585,5,1112,0,0,10585,10586,5,1213,0,0,10586,
        10587,3,1000,500,0,10587,10588,5,1214,0,0,10588,10866,1,0,0,0,10589,
        10590,10,38,0,0,10590,10591,5,1209,0,0,10591,10592,5,1113,0,0,10592,
        10593,5,1213,0,0,10593,10594,3,1000,500,0,10594,10595,5,1214,0,0,
        10595,10866,1,0,0,0,10596,10597,10,37,0,0,10597,10598,5,1209,0,0,
        10598,10599,5,1114,0,0,10599,10600,5,1213,0,0,10600,10601,3,1000,
        500,0,10601,10602,5,1214,0,0,10602,10866,1,0,0,0,10603,10604,10,
        36,0,0,10604,10605,5,1209,0,0,10605,10606,5,1115,0,0,10606,10607,
        5,1213,0,0,10607,10608,3,768,384,0,10608,10609,5,1214,0,0,10609,
        10866,1,0,0,0,10610,10611,10,35,0,0,10611,10612,5,1209,0,0,10612,
        10613,5,1116,0,0,10613,10614,5,1213,0,0,10614,10866,5,1214,0,0,10615,
        10616,10,34,0,0,10616,10617,5,1209,0,0,10617,10618,5,1117,0,0,10618,
        10619,5,1213,0,0,10619,10620,3,762,381,0,10620,10621,5,1214,0,0,
        10621,10866,1,0,0,0,10622,10623,10,33,0,0,10623,10624,5,1209,0,0,
        10624,10625,5,1118,0,0,10625,10626,5,1213,0,0,10626,10627,3,1000,
        500,0,10627,10628,5,1214,0,0,10628,10866,1,0,0,0,10629,10630,10,
        32,0,0,10630,10631,5,1209,0,0,10631,10632,5,1119,0,0,10632,10633,
        5,1213,0,0,10633,10866,5,1214,0,0,10634,10635,10,31,0,0,10635,10636,
        5,1209,0,0,10636,10637,5,1120,0,0,10637,10641,5,1213,0,0,10638,10639,
        3,1000,500,0,10639,10640,5,1208,0,0,10640,10642,1,0,0,0,10641,10638,
        1,0,0,0,10641,10642,1,0,0,0,10642,10643,1,0,0,0,10643,10644,3,1000,
        500,0,10644,10645,5,1208,0,0,10645,10646,3,1000,500,0,10646,10647,
        5,1214,0,0,10647,10866,1,0,0,0,10648,10649,10,30,0,0,10649,10650,
        5,1209,0,0,10650,10651,5,1121,0,0,10651,10652,5,1213,0,0,10652,10866,
        5,1214,0,0,10653,10654,10,29,0,0,10654,10655,5,1209,0,0,10655,10656,
        5,1122,0,0,10656,10657,5,1213,0,0,10657,10866,5,1214,0,0,10658,10659,
        10,28,0,0,10659,10660,5,1209,0,0,10660,10661,5,1123,0,0,10661,10662,
        5,1213,0,0,10662,10663,3,1000,500,0,10663,10664,5,1208,0,0,10664,
        10665,3,1000,500,0,10665,10666,5,1208,0,0,10666,10667,3,1000,500,
        0,10667,10668,5,1214,0,0,10668,10866,1,0,0,0,10669,10670,10,27,0,
        0,10670,10671,5,1209,0,0,10671,10672,5,1124,0,0,10672,10673,5,1213,
        0,0,10673,10866,5,1214,0,0,10674,10675,10,26,0,0,10675,10676,5,1209,
        0,0,10676,10677,5,1125,0,0,10677,10681,5,1213,0,0,10678,10679,3,
        1000,500,0,10679,10680,5,1208,0,0,10680,10682,1,0,0,0,10681,10678,
        1,0,0,0,10681,10682,1,0,0,0,10682,10683,1,0,0,0,10683,10684,3,1000,
        500,0,10684,10685,5,1208,0,0,10685,10686,3,1000,500,0,10686,10687,
        5,1214,0,0,10687,10866,1,0,0,0,10688,10689,10,25,0,0,10689,10690,
        5,1209,0,0,10690,10691,5,1126,0,0,10691,10692,5,1213,0,0,10692,10693,
        3,1000,500,0,10693,10694,5,1208,0,0,10694,10695,3,1000,500,0,10695,
        10696,5,1214,0,0,10696,10866,1,0,0,0,10697,10698,10,20,0,0,10698,
        10699,5,1215,0,0,10699,10704,3,768,384,0,10700,10701,5,1208,0,0,
        10701,10703,3,768,384,0,10702,10700,1,0,0,0,10703,10706,1,0,0,0,
        10704,10702,1,0,0,0,10704,10705,1,0,0,0,10705,10707,1,0,0,0,10706,
        10704,1,0,0,0,10707,10708,5,1216,0,0,10708,10866,1,0,0,0,10709,10710,
        10,19,0,0,10710,10711,5,1209,0,0,10711,10712,5,564,0,0,10712,10714,
        5,1213,0,0,10713,10715,3,1198,599,0,10714,10713,1,0,0,0,10714,10715,
        1,0,0,0,10715,10716,1,0,0,0,10716,10866,5,1214,0,0,10717,10718,10,
        18,0,0,10718,10719,5,1209,0,0,10719,10720,5,517,0,0,10720,10721,
        5,1213,0,0,10721,10724,3,1000,500,0,10722,10723,5,1208,0,0,10723,
        10725,3,1198,599,0,10724,10722,1,0,0,0,10724,10725,1,0,0,0,10725,
        10726,1,0,0,0,10726,10727,5,1214,0,0,10727,10866,1,0,0,0,10728,10729,
        10,17,0,0,10729,10730,5,1209,0,0,10730,10731,7,90,0,0,10731,10732,
        5,1213,0,0,10732,10735,3,1000,500,0,10733,10734,5,1208,0,0,10734,
        10736,3,1198,599,0,10735,10733,1,0,0,0,10735,10736,1,0,0,0,10736,
        10737,1,0,0,0,10737,10738,5,1214,0,0,10738,10866,1,0,0,0,10739,10740,
        10,16,0,0,10740,10741,5,1209,0,0,10741,10742,7,91,0,0,10742,10743,
        5,1213,0,0,10743,10746,3,1000,500,0,10744,10745,5,1208,0,0,10745,
        10747,3,1198,599,0,10746,10744,1,0,0,0,10746,10747,1,0,0,0,10747,
        10748,1,0,0,0,10748,10749,5,1214,0,0,10749,10866,1,0,0,0,10750,10751,
        10,15,0,0,10751,10752,5,1209,0,0,10752,10753,7,92,0,0,10753,10755,
        5,1213,0,0,10754,10756,3,1198,599,0,10755,10754,1,0,0,0,10755,10756,
        1,0,0,0,10756,10757,1,0,0,0,10757,10866,5,1214,0,0,10758,10759,10,
        14,0,0,10759,10760,5,1209,0,0,10760,10761,5,518,0,0,10761,10767,
        5,1213,0,0,10762,10765,3,1198,599,0,10763,10764,5,1208,0,0,10764,
        10766,3,1000,500,0,10765,10763,1,0,0,0,10765,10766,1,0,0,0,10766,
        10768,1,0,0,0,10767,10762,1,0,0,0,10767,10768,1,0,0,0,10768,10769,
        1,0,0,0,10769,10866,5,1214,0,0,10770,10771,10,13,0,0,10771,10772,
        5,1209,0,0,10772,10773,5,522,0,0,10773,10774,5,1213,0,0,10774,10775,
        3,1000,500,0,10775,10776,5,1214,0,0,10776,10866,1,0,0,0,10777,10778,
        10,12,0,0,10778,10779,5,1209,0,0,10779,10780,5,516,0,0,10780,10781,
        5,1213,0,0,10781,10788,3,1000,500,0,10782,10783,5,1208,0,0,10783,
        10786,3,1198,599,0,10784,10785,5,1208,0,0,10785,10787,3,768,384,
        0,10786,10784,1,0,0,0,10786,10787,1,0,0,0,10787,10789,1,0,0,0,10788,
        10782,1,0,0,0,10788,10789,1,0,0,0,10789,10790,1,0,0,0,10790,10791,
        5,1214,0,0,10791,10866,1,0,0,0,10792,10793,10,11,0,0,10793,10794,
        5,1209,0,0,10794,10795,5,533,0,0,10795,10796,5,1213,0,0,10796,10802,
        3,1000,500,0,10797,10800,5,1208,0,0,10798,10801,3,1198,599,0,10799,
        10801,3,768,384,0,10800,10798,1,0,0,0,10800,10799,1,0,0,0,10801,
        10803,1,0,0,0,10802,10797,1,0,0,0,10802,10803,1,0,0,0,10803,10804,
        1,0,0,0,10804,10805,5,1214,0,0,10805,10866,1,0,0,0,10806,10807,10,
        10,0,0,10807,10808,5,1209,0,0,10808,10809,5,534,0,0,10809,10810,
        5,1213,0,0,10810,10811,3,1000,500,0,10811,10812,5,1208,0,0,10812,
        10818,3,768,384,0,10813,10816,5,1208,0,0,10814,10817,3,1198,599,
        0,10815,10817,3,768,384,0,10816,10814,1,0,0,0,10816,10815,1,0,0,
        0,10817,10819,1,0,0,0,10818,10813,1,0,0,0,10818,10819,1,0,0,0,10819,
        10820,1,0,0,0,10820,10821,5,1214,0,0,10821,10866,1,0,0,0,10822,10823,
        10,9,0,0,10823,10824,5,1209,0,0,10824,10825,7,93,0,0,10825,10826,
        5,1213,0,0,10826,10827,3,1000,500,0,10827,10828,5,1214,0,0,10828,
        10866,1,0,0,0,10829,10830,10,8,0,0,10830,10831,5,1209,0,0,10831,
        10832,7,94,0,0,10832,10833,5,1213,0,0,10833,10866,5,1214,0,0,10834,
        10835,10,7,0,0,10835,10836,5,1209,0,0,10836,10837,5,818,0,0,10837,
        10838,5,1213,0,0,10838,10866,5,1214,0,0,10839,10840,10,6,0,0,10840,
        10841,5,1209,0,0,10841,10842,5,832,0,0,10842,10844,5,1213,0,0,10843,
        10845,3,768,384,0,10844,10843,1,0,0,0,10844,10845,1,0,0,0,10845,
        10846,1,0,0,0,10846,10866,5,1214,0,0,10847,10848,10,5,0,0,10848,
        10849,5,1209,0,0,10849,10850,3,832,416,0,10850,10859,5,1213,0,0,
        10851,10856,3,1000,500,0,10852,10853,5,1208,0,0,10853,10855,3,1000,
        500,0,10854,10852,1,0,0,0,10855,10858,1,0,0,0,10856,10854,1,0,0,
        0,10856,10857,1,0,0,0,10857,10860,1,0,0,0,10858,10856,1,0,0,0,10859,
        10851,1,0,0,0,10859,10860,1,0,0,0,10860,10861,1,0,0,0,10861,10862,
        5,1214,0,0,10862,10866,1,0,0,0,10863,10864,10,4,0,0,10864,10866,
        3,1086,543,0,10865,10462,1,0,0,0,10865,10465,1,0,0,0,10865,10468,
        1,0,0,0,10865,10471,1,0,0,0,10865,10474,1,0,0,0,10865,10477,1,0,
        0,0,10865,10480,1,0,0,0,10865,10483,1,0,0,0,10865,10485,1,0,0,0,
        10865,10490,1,0,0,0,10865,10496,1,0,0,0,10865,10499,1,0,0,0,10865,
        10502,1,0,0,0,10865,10506,1,0,0,0,10865,10517,1,0,0,0,10865,10521,
        1,0,0,0,10865,10525,1,0,0,0,10865,10532,1,0,0,0,10865,10538,1,0,
        0,0,10865,10551,1,0,0,0,10865,10559,1,0,0,0,10865,10564,1,0,0,0,
        10865,10575,1,0,0,0,10865,10582,1,0,0,0,10865,10589,1,0,0,0,10865,
        10596,1,0,0,0,10865,10603,1,0,0,0,10865,10610,1,0,0,0,10865,10615,
        1,0,0,0,10865,10622,1,0,0,0,10865,10629,1,0,0,0,10865,10634,1,0,
        0,0,10865,10648,1,0,0,0,10865,10653,1,0,0,0,10865,10658,1,0,0,0,
        10865,10669,1,0,0,0,10865,10674,1,0,0,0,10865,10688,1,0,0,0,10865,
        10697,1,0,0,0,10865,10709,1,0,0,0,10865,10717,1,0,0,0,10865,10728,
        1,0,0,0,10865,10739,1,0,0,0,10865,10750,1,0,0,0,10865,10758,1,0,
        0,0,10865,10770,1,0,0,0,10865,10777,1,0,0,0,10865,10792,1,0,0,0,
        10865,10806,1,0,0,0,10865,10822,1,0,0,0,10865,10829,1,0,0,0,10865,
        10834,1,0,0,0,10865,10839,1,0,0,0,10865,10847,1,0,0,0,10865,10863,
        1,0,0,0,10866,10869,1,0,0,0,10867,10865,1,0,0,0,10867,10868,1,0,
        0,0,10868,1001,1,0,0,0,10869,10867,1,0,0,0,10870,10871,5,1213,0,
        0,10871,10874,3,1004,502,0,10872,10873,5,1208,0,0,10873,10875,3,
        1004,502,0,10874,10872,1,0,0,0,10875,10876,1,0,0,0,10876,10874,1,
        0,0,0,10876,10877,1,0,0,0,10877,10878,1,0,0,0,10878,10879,5,1214,
        0,0,10879,1003,1,0,0,0,10880,10885,3,1000,500,0,10881,10883,5,20,
        0,0,10882,10881,1,0,0,0,10882,10883,1,0,0,0,10883,10884,1,0,0,0,
        10884,10886,3,812,406,0,10885,10882,1,0,0,0,10885,10886,1,0,0,0,
        10886,10896,1,0,0,0,10887,10888,5,1213,0,0,10888,10890,3,1000,500,
        0,10889,10891,5,20,0,0,10890,10889,1,0,0,0,10890,10891,1,0,0,0,10891,
        10892,1,0,0,0,10892,10893,3,812,406,0,10893,10894,5,1214,0,0,10894,
        10896,1,0,0,0,10895,10880,1,0,0,0,10895,10887,1,0,0,0,10896,1005,
        1,0,0,0,10897,10902,3,1008,504,0,10898,10902,3,1010,505,0,10899,
        10902,3,1012,506,0,10900,10902,3,1014,507,0,10901,10897,1,0,0,0,
        10901,10898,1,0,0,0,10901,10899,1,0,0,0,10901,10900,1,0,0,0,10902,
        1007,1,0,0,0,10903,10904,5,47,0,0,10904,10910,3,1000,500,0,10905,
        10906,5,470,0,0,10906,10907,3,1000,500,0,10907,10908,5,419,0,0,10908,
        10909,3,1000,500,0,10909,10911,1,0,0,0,10910,10905,1,0,0,0,10911,
        10912,1,0,0,0,10912,10910,1,0,0,0,10912,10913,1,0,0,0,10913,10916,
        1,0,0,0,10914,10915,5,131,0,0,10915,10917,3,1000,500,0,10916,10914,
        1,0,0,0,10916,10917,1,0,0,0,10917,10918,1,0,0,0,10918,10919,5,134,
        0,0,10919,1009,1,0,0,0,10920,10926,5,47,0,0,10921,10922,5,470,0,
        0,10922,10923,3,998,499,0,10923,10924,5,419,0,0,10924,10925,3,1000,
        500,0,10925,10927,1,0,0,0,10926,10921,1,0,0,0,10927,10928,1,0,0,
        0,10928,10926,1,0,0,0,10928,10929,1,0,0,0,10929,10932,1,0,0,0,10930,
        10931,5,131,0,0,10931,10933,3,1000,500,0,10932,10930,1,0,0,0,10932,
        10933,1,0,0,0,10933,10934,1,0,0,0,10934,10935,5,134,0,0,10935,1011,
        1,0,0,0,10936,10937,5,66,0,0,10937,10938,3,1184,592,0,10938,1013,
        1,0,0,0,10939,10940,5,275,0,0,10940,10941,5,1213,0,0,10941,10942,
        3,1000,500,0,10942,10943,5,1208,0,0,10943,10944,3,1000,500,0,10944,
        10945,5,1214,0,0,10945,1015,1,0,0,0,10946,10947,3,1000,500,0,10947,
        10948,5,1222,0,0,10948,10949,3,1000,500,0,10949,10957,1,0,0,0,10950,
        10951,5,1213,0,0,10951,10952,3,1000,500,0,10952,10953,5,1222,0,0,
        10953,10954,3,1000,500,0,10954,10955,5,1214,0,0,10955,10957,1,0,
        0,0,10956,10946,1,0,0,0,10956,10950,1,0,0,0,10957,1017,1,0,0,0,10958,
        10959,5,1213,0,0,10959,10960,3,1016,508,0,10960,10961,5,1214,0,0,
        10961,10962,3,1020,510,0,10962,1019,1,0,0,0,10963,10972,7,95,0,0,
        10964,10965,5,1213,0,0,10965,10968,3,768,384,0,10966,10967,5,1208,
        0,0,10967,10969,3,768,384,0,10968,10966,1,0,0,0,10968,10969,1,0,
        0,0,10969,10970,1,0,0,0,10970,10971,5,1214,0,0,10971,10973,1,0,0,
        0,10972,10964,1,0,0,0,10972,10973,1,0,0,0,10973,10982,1,0,0,0,10974,
        10975,5,426,0,0,10975,10980,7,96,0,0,10976,10977,5,1213,0,0,10977,
        10978,3,768,384,0,10978,10979,5,1214,0,0,10979,10981,1,0,0,0,10980,
        10976,1,0,0,0,10980,10981,1,0,0,0,10981,10983,1,0,0,0,10982,10974,
        1,0,0,0,10982,10983,1,0,0,0,10983,1021,1,0,0,0,10984,11007,3,1024,
        512,0,10985,11007,3,1026,513,0,10986,11007,3,1028,514,0,10987,11007,
        3,1030,515,0,10988,11007,3,1032,516,0,10989,11007,3,1034,517,0,10990,
        11007,3,1036,518,0,10991,11007,3,1038,519,0,10992,11007,3,1040,520,
        0,10993,11007,3,1042,521,0,10994,11007,3,1044,522,0,10995,11007,
        3,1046,523,0,10996,11007,3,1048,524,0,10997,11007,3,1050,525,0,10998,
        11007,3,1052,526,0,10999,11007,3,1054,527,0,11000,11007,3,1056,528,
        0,11001,11007,3,1058,529,0,11002,11007,3,1060,530,0,11003,11007,
        3,1062,531,0,11004,11007,3,1064,532,0,11005,11007,3,1066,533,0,11006,
        10984,1,0,0,0,11006,10985,1,0,0,0,11006,10986,1,0,0,0,11006,10987,
        1,0,0,0,11006,10988,1,0,0,0,11006,10989,1,0,0,0,11006,10990,1,0,
        0,0,11006,10991,1,0,0,0,11006,10992,1,0,0,0,11006,10993,1,0,0,0,
        11006,10994,1,0,0,0,11006,10995,1,0,0,0,11006,10996,1,0,0,0,11006,
        10997,1,0,0,0,11006,10998,1,0,0,0,11006,10999,1,0,0,0,11006,11000,
        1,0,0,0,11006,11001,1,0,0,0,11006,11002,1,0,0,0,11006,11003,1,0,
        0,0,11006,11004,1,0,0,0,11006,11005,1,0,0,0,11007,1023,1,0,0,0,11008,
        11009,7,97,0,0,11009,11011,5,1213,0,0,11010,11012,7,98,0,0,11011,
        11010,1,0,0,0,11011,11012,1,0,0,0,11012,11013,1,0,0,0,11013,11014,
        3,1000,500,0,11014,11015,5,1214,0,0,11015,11044,1,0,0,0,11016,11017,
        7,99,0,0,11017,11018,5,1213,0,0,11018,11019,3,1000,500,0,11019,11020,
        5,1208,0,0,11020,11021,3,1000,500,0,11021,11022,5,1214,0,0,11022,
        11044,1,0,0,0,11023,11024,5,83,0,0,11024,11030,5,1213,0,0,11025,
        11031,5,1219,0,0,11026,11028,7,100,0,0,11027,11026,1,0,0,0,11027,
        11028,1,0,0,0,11028,11029,1,0,0,0,11029,11031,3,1000,500,0,11030,
        11025,1,0,0,0,11030,11027,1,0,0,0,11031,11032,1,0,0,0,11032,11044,
        5,1214,0,0,11033,11034,5,175,0,0,11034,11035,5,1213,0,0,11035,11036,
        3,1000,500,0,11036,11037,5,1214,0,0,11037,11044,1,0,0,0,11038,11039,
        5,1081,0,0,11039,11040,5,1213,0,0,11040,11041,3,1000,500,0,11041,
        11042,5,1214,0,0,11042,11044,1,0,0,0,11043,11008,1,0,0,0,11043,11016,
        1,0,0,0,11043,11023,1,0,0,0,11043,11033,1,0,0,0,11043,11038,1,0,
        0,0,11044,1025,1,0,0,0,11045,11046,7,101,0,0,11046,11047,5,1213,
        0,0,11047,11048,3,1000,500,0,11048,11049,5,1214,0,0,11049,11050,
        3,1106,553,0,11050,11195,1,0,0,0,11051,11052,7,99,0,0,11052,11053,
        5,1213,0,0,11053,11054,3,1000,500,0,11054,11055,5,1208,0,0,11055,
        11056,3,1000,500,0,11056,11057,5,1214,0,0,11057,11058,3,1106,553,
        0,11058,11195,1,0,0,0,11059,11060,5,83,0,0,11060,11063,5,1213,0,
        0,11061,11064,5,1219,0,0,11062,11064,3,1000,500,0,11063,11061,1,
        0,0,0,11063,11062,1,0,0,0,11064,11065,1,0,0,0,11065,11066,5,1214,
        0,0,11066,11195,3,1106,553,0,11067,11068,5,89,0,0,11068,11069,5,
        1213,0,0,11069,11072,3,1000,500,0,11070,11071,5,1208,0,0,11071,11073,
        3,994,497,0,11072,11070,1,0,0,0,11073,11074,1,0,0,0,11074,11072,
        1,0,0,0,11074,11075,1,0,0,0,11075,11076,1,0,0,0,11076,11077,5,1214,
        0,0,11077,11195,1,0,0,0,11078,11079,7,102,0,0,11079,11080,5,1213,
        0,0,11080,11081,5,1214,0,0,11081,11195,3,1108,554,0,11082,11083,
        7,103,0,0,11083,11084,5,1213,0,0,11084,11086,3,1000,500,0,11085,
        11087,3,1148,574,0,11086,11085,1,0,0,0,11086,11087,1,0,0,0,11087,
        11088,1,0,0,0,11088,11089,5,1214,0,0,11089,11090,3,1106,553,0,11090,
        11195,1,0,0,0,11091,11092,7,104,0,0,11092,11093,5,1213,0,0,11093,
        11095,3,1000,500,0,11094,11096,3,1148,574,0,11095,11094,1,0,0,0,
        11095,11096,1,0,0,0,11096,11103,1,0,0,0,11097,11098,5,1208,0,0,11098,
        11101,3,1000,500,0,11099,11100,5,1208,0,0,11100,11102,3,1000,500,
        0,11101,11099,1,0,0,0,11101,11102,1,0,0,0,11102,11104,1,0,0,0,11103,
        11097,1,0,0,0,11103,11104,1,0,0,0,11104,11105,1,0,0,0,11105,11107,
        5,1214,0,0,11106,11108,3,1148,574,0,11107,11106,1,0,0,0,11107,11108,
        1,0,0,0,11108,11109,1,0,0,0,11109,11110,3,1108,554,0,11110,11195,
        1,0,0,0,11111,11112,7,105,0,0,11112,11113,5,1213,0,0,11113,11114,
        3,1000,500,0,11114,11115,5,1208,0,0,11115,11118,3,768,384,0,11116,
        11117,5,1208,0,0,11117,11119,3,994,497,0,11118,11116,1,0,0,0,11119,
        11120,1,0,0,0,11120,11118,1,0,0,0,11120,11121,1,0,0,0,11121,11122,
        1,0,0,0,11122,11123,5,1214,0,0,11123,11195,1,0,0,0,11124,11125,5,
        763,0,0,11125,11126,5,1213,0,0,11126,11127,3,1000,500,0,11127,11128,
        5,1214,0,0,11128,11195,1,0,0,0,11129,11130,5,249,0,0,11130,11131,
        5,1213,0,0,11131,11132,3,1000,500,0,11132,11133,5,1208,0,0,11133,
        11134,3,768,384,0,11134,11135,5,1208,0,0,11135,11136,3,994,497,0,
        11136,11137,5,1214,0,0,11137,11195,1,0,0,0,11138,11139,7,106,0,0,
        11139,11140,5,1213,0,0,11140,11141,3,1000,500,0,11141,11142,5,1214,
        0,0,11142,11143,5,1039,0,0,11143,11144,5,174,0,0,11144,11145,5,1213,
        0,0,11145,11146,5,291,0,0,11146,11147,5,42,0,0,11147,11152,3,992,
        496,0,11148,11149,5,1208,0,0,11149,11151,3,992,496,0,11150,11148,
        1,0,0,0,11151,11154,1,0,0,0,11152,11150,1,0,0,0,11152,11153,1,0,
        0,0,11153,11155,1,0,0,0,11154,11152,1,0,0,0,11155,11156,5,1214,0,
        0,11156,11195,1,0,0,0,11157,11158,5,316,0,0,11158,11159,5,1213,0,
        0,11159,11162,3,768,384,0,11160,11161,5,1208,0,0,11161,11163,3,994,
        497,0,11162,11160,1,0,0,0,11163,11164,1,0,0,0,11164,11162,1,0,0,
        0,11164,11165,1,0,0,0,11165,11166,1,0,0,0,11166,11167,5,1214,0,0,
        11167,11195,1,0,0,0,11168,11169,5,321,0,0,11169,11170,5,1213,0,0,
        11170,11171,5,1214,0,0,11171,11195,3,1110,555,0,11172,11173,5,321,
        0,0,11173,11174,5,1213,0,0,11174,11179,3,994,497,0,11175,11176,5,
        1208,0,0,11176,11178,3,994,497,0,11177,11175,1,0,0,0,11178,11181,
        1,0,0,0,11179,11177,1,0,0,0,11179,11180,1,0,0,0,11180,11182,1,0,
        0,0,11181,11179,1,0,0,0,11182,11183,5,1214,0,0,11183,11195,1,0,0,
        0,11184,11185,5,362,0,0,11185,11186,5,1213,0,0,11186,11187,5,1214,
        0,0,11187,11195,3,1108,554,0,11188,11189,5,1081,0,0,11189,11190,
        5,1213,0,0,11190,11191,3,1000,500,0,11191,11192,5,1214,0,0,11192,
        11193,3,1106,553,0,11193,11195,1,0,0,0,11194,11045,1,0,0,0,11194,
        11051,1,0,0,0,11194,11059,1,0,0,0,11194,11067,1,0,0,0,11194,11078,
        1,0,0,0,11194,11082,1,0,0,0,11194,11091,1,0,0,0,11194,11111,1,0,
        0,0,11194,11124,1,0,0,0,11194,11129,1,0,0,0,11194,11138,1,0,0,0,
        11194,11157,1,0,0,0,11194,11168,1,0,0,0,11194,11172,1,0,0,0,11194,
        11184,1,0,0,0,11194,11188,1,0,0,0,11195,1027,1,0,0,0,11196,11197,
        7,107,0,0,11197,11198,5,1213,0,0,11198,11199,3,1000,500,0,11199,
        11200,5,1214,0,0,11200,11251,1,0,0,0,11201,11203,3,1070,535,0,11202,
        11201,1,0,0,0,11202,11203,1,0,0,0,11203,11204,1,0,0,0,11204,11205,
        7,108,0,0,11205,11206,5,1213,0,0,11206,11207,3,1000,500,0,11207,
        11208,5,1214,0,0,11208,11251,1,0,0,0,11209,11210,7,109,0,0,11210,
        11211,5,1213,0,0,11211,11212,3,1000,500,0,11212,11213,5,1208,0,0,
        11213,11214,3,1000,500,0,11214,11215,5,1214,0,0,11215,11251,1,0,
        0,0,11216,11218,3,1074,537,0,11217,11216,1,0,0,0,11217,11218,1,0,
        0,0,11218,11219,1,0,0,0,11219,11220,5,856,0,0,11220,11221,5,1213,
        0,0,11221,11222,3,1000,500,0,11222,11223,5,1208,0,0,11223,11224,
        3,1000,500,0,11224,11225,5,1214,0,0,11225,11251,1,0,0,0,11226,11228,
        3,1070,535,0,11227,11226,1,0,0,0,11227,11228,1,0,0,0,11228,11229,
        1,0,0,0,11229,11230,7,110,0,0,11230,11231,5,1213,0,0,11231,11234,
        3,1000,500,0,11232,11233,5,1208,0,0,11233,11235,3,1000,500,0,11234,
        11232,1,0,0,0,11234,11235,1,0,0,0,11235,11236,1,0,0,0,11236,11237,
        5,1214,0,0,11237,11251,1,0,0,0,11238,11239,5,1100,0,0,11239,11240,
        5,1066,0,0,11240,11241,5,1213,0,0,11241,11242,3,1000,500,0,11242,
        11243,5,1208,0,0,11243,11244,3,1000,500,0,11244,11245,5,1208,0,0,
        11245,11246,3,1000,500,0,11246,11247,5,1208,0,0,11247,11248,3,1000,
        500,0,11248,11249,5,1214,0,0,11249,11251,1,0,0,0,11250,11196,1,0,
        0,0,11250,11202,1,0,0,0,11250,11209,1,0,0,0,11250,11217,1,0,0,0,
        11250,11227,1,0,0,0,11250,11238,1,0,0,0,11251,1029,1,0,0,0,11252,
        11254,3,1070,535,0,11253,11252,1,0,0,0,11253,11254,1,0,0,0,11254,
        11255,1,0,0,0,11255,11256,5,514,0,0,11256,11257,5,1213,0,0,11257,
        11264,3,1000,500,0,11258,11259,5,291,0,0,11259,11260,5,42,0,0,11260,
        11262,3,1000,500,0,11261,11263,7,84,0,0,11262,11261,1,0,0,0,11262,
        11263,1,0,0,0,11263,11265,1,0,0,0,11264,11258,1,0,0,0,11264,11265,
        1,0,0,0,11265,11266,1,0,0,0,11266,11267,5,1208,0,0,11267,11268,3,
        1000,500,0,11268,11269,5,1214,0,0,11269,11466,1,0,0,0,11270,11271,
        5,564,0,0,11271,11272,5,1213,0,0,11272,11277,3,1000,500,0,11273,
        11274,5,1208,0,0,11274,11276,3,1198,599,0,11275,11273,1,0,0,0,11276,
        11279,1,0,0,0,11277,11275,1,0,0,0,11277,11278,1,0,0,0,11278,11280,
        1,0,0,0,11279,11277,1,0,0,0,11280,11281,5,1214,0,0,11281,11466,1,
        0,0,0,11282,11283,5,517,0,0,11283,11284,5,1213,0,0,11284,11285,3,
        1000,500,0,11285,11286,5,1208,0,0,11286,11291,3,1000,500,0,11287,
        11288,5,1208,0,0,11288,11290,3,1198,599,0,11289,11287,1,0,0,0,11290,
        11293,1,0,0,0,11291,11289,1,0,0,0,11291,11292,1,0,0,0,11292,11294,
        1,0,0,0,11293,11291,1,0,0,0,11294,11295,5,1214,0,0,11295,11466,1,
        0,0,0,11296,11297,7,90,0,0,11297,11298,5,1213,0,0,11298,11299,3,
        1000,500,0,11299,11300,5,1208,0,0,11300,11305,3,1000,500,0,11301,
        11302,5,1208,0,0,11302,11304,3,1198,599,0,11303,11301,1,0,0,0,11304,
        11307,1,0,0,0,11305,11303,1,0,0,0,11305,11306,1,0,0,0,11306,11308,
        1,0,0,0,11307,11305,1,0,0,0,11308,11309,5,1214,0,0,11309,11466,1,
        0,0,0,11310,11311,7,91,0,0,11311,11312,5,1213,0,0,11312,11313,3,
        1000,500,0,11313,11314,5,1208,0,0,11314,11319,3,1000,500,0,11315,
        11316,5,1208,0,0,11316,11318,3,1198,599,0,11317,11315,1,0,0,0,11318,
        11321,1,0,0,0,11319,11317,1,0,0,0,11319,11320,1,0,0,0,11320,11322,
        1,0,0,0,11321,11319,1,0,0,0,11322,11323,5,1214,0,0,11323,11466,1,
        0,0,0,11324,11325,7,92,0,0,11325,11326,5,1213,0,0,11326,11331,3,
        1000,500,0,11327,11328,5,1208,0,0,11328,11330,3,1198,599,0,11329,
        11327,1,0,0,0,11330,11333,1,0,0,0,11331,11329,1,0,0,0,11331,11332,
        1,0,0,0,11332,11334,1,0,0,0,11333,11331,1,0,0,0,11334,11335,5,1214,
        0,0,11335,11466,1,0,0,0,11336,11337,5,518,0,0,11337,11338,5,1213,
        0,0,11338,11354,3,1000,500,0,11339,11340,5,1208,0,0,11340,11342,
        3,1198,599,0,11341,11339,1,0,0,0,11342,11345,1,0,0,0,11343,11341,
        1,0,0,0,11343,11344,1,0,0,0,11344,11346,1,0,0,0,11345,11343,1,0,
        0,0,11346,11347,5,1208,0,0,11347,11355,3,1000,500,0,11348,11349,
        5,1208,0,0,11349,11351,3,1198,599,0,11350,11348,1,0,0,0,11351,11352,
        1,0,0,0,11352,11350,1,0,0,0,11352,11353,1,0,0,0,11353,11355,1,0,
        0,0,11354,11343,1,0,0,0,11354,11350,1,0,0,0,11354,11355,1,0,0,0,
        11355,11356,1,0,0,0,11356,11357,5,1214,0,0,11357,11466,1,0,0,0,11358,
        11359,5,522,0,0,11359,11360,5,1213,0,0,11360,11361,3,1000,500,0,
        11361,11362,5,1208,0,0,11362,11363,3,1000,500,0,11363,11364,5,1214,
        0,0,11364,11466,1,0,0,0,11365,11366,5,516,0,0,11366,11367,5,1213,
        0,0,11367,11368,3,1000,500,0,11368,11369,5,1208,0,0,11369,11379,
        3,1000,500,0,11370,11371,5,1208,0,0,11371,11373,3,1198,599,0,11372,
        11370,1,0,0,0,11373,11374,1,0,0,0,11374,11372,1,0,0,0,11374,11375,
        1,0,0,0,11375,11376,1,0,0,0,11376,11377,5,1208,0,0,11377,11378,3,
        768,384,0,11378,11380,1,0,0,0,11379,11372,1,0,0,0,11379,11380,1,
        0,0,0,11380,11381,1,0,0,0,11381,11382,5,1214,0,0,11382,11466,1,0,
        0,0,11383,11384,5,533,0,0,11384,11385,5,1213,0,0,11385,11386,3,1000,
        500,0,11386,11387,5,1208,0,0,11387,11396,3,1000,500,0,11388,11389,
        5,1208,0,0,11389,11391,3,1198,599,0,11390,11388,1,0,0,0,11391,11392,
        1,0,0,0,11392,11390,1,0,0,0,11392,11393,1,0,0,0,11393,11397,1,0,
        0,0,11394,11395,5,1208,0,0,11395,11397,3,1000,500,0,11396,11390,
        1,0,0,0,11396,11394,1,0,0,0,11396,11397,1,0,0,0,11397,11398,1,0,
        0,0,11398,11399,5,1214,0,0,11399,11466,1,0,0,0,11400,11401,5,534,
        0,0,11401,11402,5,1213,0,0,11402,11403,3,1000,500,0,11403,11404,
        5,1208,0,0,11404,11405,3,1000,500,0,11405,11406,5,1208,0,0,11406,
        11415,3,768,384,0,11407,11408,5,1208,0,0,11408,11410,3,1198,599,
        0,11409,11407,1,0,0,0,11410,11411,1,0,0,0,11411,11409,1,0,0,0,11411,
        11412,1,0,0,0,11412,11416,1,0,0,0,11413,11414,5,1208,0,0,11414,11416,
        3,1000,500,0,11415,11409,1,0,0,0,11415,11413,1,0,0,0,11415,11416,
        1,0,0,0,11416,11417,1,0,0,0,11417,11418,5,1214,0,0,11418,11466,1,
        0,0,0,11419,11421,3,1070,535,0,11420,11419,1,0,0,0,11420,11421,1,
        0,0,0,11421,11422,1,0,0,0,11422,11423,7,93,0,0,11423,11424,5,1213,
        0,0,11424,11425,3,1000,500,0,11425,11426,5,1208,0,0,11426,11427,
        3,1000,500,0,11427,11428,5,1214,0,0,11428,11466,1,0,0,0,11429,11431,
        3,1070,535,0,11430,11429,1,0,0,0,11430,11431,1,0,0,0,11431,11432,
        1,0,0,0,11432,11433,7,111,0,0,11433,11434,5,1213,0,0,11434,11435,
        3,1000,500,0,11435,11436,5,1214,0,0,11436,11466,1,0,0,0,11437,11439,
        3,1070,535,0,11438,11437,1,0,0,0,11438,11439,1,0,0,0,11439,11440,
        1,0,0,0,11440,11441,5,818,0,0,11441,11442,5,1213,0,0,11442,11449,
        3,1000,500,0,11443,11444,5,1208,0,0,11444,11447,3,1000,500,0,11445,
        11446,5,1208,0,0,11446,11448,3,1000,500,0,11447,11445,1,0,0,0,11447,
        11448,1,0,0,0,11448,11450,1,0,0,0,11449,11443,1,0,0,0,11449,11450,
        1,0,0,0,11450,11451,1,0,0,0,11451,11452,5,1214,0,0,11452,11466,1,
        0,0,0,11453,11455,3,1070,535,0,11454,11453,1,0,0,0,11454,11455,1,
        0,0,0,11455,11456,1,0,0,0,11456,11457,5,832,0,0,11457,11458,5,1213,
        0,0,11458,11461,3,1000,500,0,11459,11460,5,1208,0,0,11460,11462,
        3,1000,500,0,11461,11459,1,0,0,0,11461,11462,1,0,0,0,11462,11463,
        1,0,0,0,11463,11464,5,1214,0,0,11464,11466,1,0,0,0,11465,11253,1,
        0,0,0,11465,11270,1,0,0,0,11465,11282,1,0,0,0,11465,11296,1,0,0,
        0,11465,11310,1,0,0,0,11465,11324,1,0,0,0,11465,11336,1,0,0,0,11465,
        11358,1,0,0,0,11465,11365,1,0,0,0,11465,11383,1,0,0,0,11465,11400,
        1,0,0,0,11465,11420,1,0,0,0,11465,11430,1,0,0,0,11465,11438,1,0,
        0,0,11465,11454,1,0,0,0,11466,1031,1,0,0,0,11467,11468,5,546,0,0,
        11468,11469,5,1213,0,0,11469,11472,3,1000,500,0,11470,11471,5,1208,
        0,0,11471,11473,3,758,379,0,11472,11470,1,0,0,0,11472,11473,1,0,
        0,0,11473,11474,1,0,0,0,11474,11475,5,1214,0,0,11475,11508,1,0,0,
        0,11476,11477,7,112,0,0,11477,11478,5,1213,0,0,11478,11479,3,1000,
        500,0,11479,11480,5,1214,0,0,11480,11508,1,0,0,0,11481,11482,7,113,
        0,0,11482,11483,5,1213,0,0,11483,11484,3,1000,500,0,11484,11485,
        5,1214,0,0,11485,11508,1,0,0,0,11486,11491,5,111,0,0,11487,11488,
        5,1213,0,0,11488,11489,3,788,394,0,11489,11490,5,1214,0,0,11490,
        11492,1,0,0,0,11491,11487,1,0,0,0,11491,11492,1,0,0,0,11492,11508,
        1,0,0,0,11493,11494,7,114,0,0,11494,11495,5,1213,0,0,11495,11496,
        3,1000,500,0,11496,11497,5,1214,0,0,11497,11508,1,0,0,0,11498,11499,
        5,281,0,0,11499,11500,5,1213,0,0,11500,11503,3,1000,500,0,11501,
        11502,5,1208,0,0,11502,11504,3,758,379,0,11503,11501,1,0,0,0,11503,
        11504,1,0,0,0,11504,11505,1,0,0,0,11505,11506,5,1214,0,0,11506,11508,
        1,0,0,0,11507,11467,1,0,0,0,11507,11476,1,0,0,0,11507,11481,1,0,
        0,0,11507,11486,1,0,0,0,11507,11493,1,0,0,0,11507,11498,1,0,0,0,
        11508,1033,1,0,0,0,11509,11511,3,1070,535,0,11510,11509,1,0,0,0,
        11510,11511,1,0,0,0,11511,11512,1,0,0,0,11512,11513,5,548,0,0,11513,
        11514,5,1213,0,0,11514,11515,3,1000,500,0,11515,11516,5,1214,0,0,
        11516,11574,1,0,0,0,11517,11519,3,1070,535,0,11518,11517,1,0,0,0,
        11518,11519,1,0,0,0,11519,11520,1,0,0,0,11520,11521,7,115,0,0,11521,
        11522,5,1213,0,0,11522,11523,3,1000,500,0,11523,11524,5,1208,0,0,
        11524,11525,3,1000,500,0,11525,11526,5,1214,0,0,11526,11574,1,0,
        0,0,11527,11529,3,1070,535,0,11528,11527,1,0,0,0,11528,11529,1,0,
        0,0,11529,11530,1,0,0,0,11530,11531,5,597,0,0,11531,11532,5,1213,
        0,0,11532,11535,3,1000,500,0,11533,11534,5,1208,0,0,11534,11536,
        3,1000,500,0,11535,11533,1,0,0,0,11535,11536,1,0,0,0,11536,11537,
        1,0,0,0,11537,11538,5,1214,0,0,11538,11574,1,0,0,0,11539,11541,3,
        1070,535,0,11540,11539,1,0,0,0,11540,11541,1,0,0,0,11541,11542,1,
        0,0,0,11542,11543,5,919,0,0,11543,11544,5,1213,0,0,11544,11545,3,
        1000,500,0,11545,11546,5,1208,0,0,11546,11549,3,1000,500,0,11547,
        11548,5,1208,0,0,11548,11550,3,1000,500,0,11549,11547,1,0,0,0,11549,
        11550,1,0,0,0,11550,11551,1,0,0,0,11551,11552,5,1214,0,0,11552,11574,
        1,0,0,0,11553,11555,3,1070,535,0,11554,11553,1,0,0,0,11554,11555,
        1,0,0,0,11555,11556,1,0,0,0,11556,11557,5,945,0,0,11557,11558,5,
        1213,0,0,11558,11559,3,1000,500,0,11559,11560,5,1208,0,0,11560,11561,
        3,1000,500,0,11561,11562,5,1208,0,0,11562,11563,3,1000,500,0,11563,
        11564,5,1214,0,0,11564,11574,1,0,0,0,11565,11567,3,1070,535,0,11566,
        11565,1,0,0,0,11566,11567,1,0,0,0,11567,11568,1,0,0,0,11568,11569,
        5,991,0,0,11569,11570,5,1213,0,0,11570,11571,3,1000,500,0,11571,
        11572,5,1214,0,0,11572,11574,1,0,0,0,11573,11510,1,0,0,0,11573,11518,
        1,0,0,0,11573,11528,1,0,0,0,11573,11540,1,0,0,0,11573,11554,1,0,
        0,0,11573,11566,1,0,0,0,11574,1035,1,0,0,0,11575,11632,5,5,0,0,11576,
        11579,5,94,0,0,11577,11578,5,1213,0,0,11578,11580,5,1214,0,0,11579,
        11577,1,0,0,0,11579,11580,1,0,0,0,11580,11585,1,0,0,0,11581,11582,
        5,604,0,0,11582,11583,5,1213,0,0,11583,11585,5,1214,0,0,11584,11576,
        1,0,0,0,11584,11581,1,0,0,0,11585,11587,1,0,0,0,11586,11588,3,1178,
        589,0,11587,11586,1,0,0,0,11587,11588,1,0,0,0,11588,11632,1,0,0,
        0,11589,11632,5,95,0,0,11590,11592,5,96,0,0,11591,11593,3,726,363,
        0,11592,11591,1,0,0,0,11592,11593,1,0,0,0,11593,11598,1,0,0,0,11594,
        11595,5,605,0,0,11595,11596,5,1213,0,0,11596,11598,5,1214,0,0,11597,
        11590,1,0,0,0,11597,11594,1,0,0,0,11598,11600,1,0,0,0,11599,11601,
        3,1178,589,0,11600,11599,1,0,0,0,11600,11601,1,0,0,0,11601,11632,
        1,0,0,0,11602,11604,5,97,0,0,11603,11605,3,726,363,0,11604,11603,
        1,0,0,0,11604,11605,1,0,0,0,11605,11607,1,0,0,0,11606,11608,3,1178,
        589,0,11607,11606,1,0,0,0,11607,11608,1,0,0,0,11608,11632,1,0,0,
        0,11609,11632,5,98,0,0,11610,11632,5,102,0,0,11611,11613,5,104,0,
        0,11612,11614,3,1178,589,0,11613,11612,1,0,0,0,11613,11614,1,0,0,
        0,11614,11632,1,0,0,0,11615,11616,5,803,0,0,11616,11617,5,1213,0,
        0,11617,11632,5,1214,0,0,11618,11632,5,311,0,0,11619,11632,5,357,
        0,0,11620,11632,5,371,0,0,11621,11632,5,980,0,0,11622,11624,5,981,
        0,0,11623,11625,3,726,363,0,11624,11623,1,0,0,0,11624,11625,1,0,
        0,0,11625,11632,1,0,0,0,11626,11628,5,421,0,0,11627,11629,3,1178,
        589,0,11628,11627,1,0,0,0,11628,11629,1,0,0,0,11629,11632,1,0,0,
        0,11630,11632,5,456,0,0,11631,11575,1,0,0,0,11631,11584,1,0,0,0,
        11631,11589,1,0,0,0,11631,11597,1,0,0,0,11631,11602,1,0,0,0,11631,
        11609,1,0,0,0,11631,11610,1,0,0,0,11631,11611,1,0,0,0,11631,11615,
        1,0,0,0,11631,11618,1,0,0,0,11631,11619,1,0,0,0,11631,11620,1,0,
        0,0,11631,11621,1,0,0,0,11631,11622,1,0,0,0,11631,11626,1,0,0,0,
        11631,11630,1,0,0,0,11632,1037,1,0,0,0,11633,11635,3,1074,537,0,
        11634,11633,1,0,0,0,11634,11635,1,0,0,0,11635,11636,1,0,0,0,11636,
        11637,7,116,0,0,11637,11638,5,1213,0,0,11638,11639,3,1000,500,0,
        11639,11640,5,1214,0,0,11640,11657,1,0,0,0,11641,11643,3,1070,535,
        0,11642,11641,1,0,0,0,11642,11643,1,0,0,0,11643,11644,1,0,0,0,11644,
        11645,7,117,0,0,11645,11646,5,1213,0,0,11646,11648,3,1000,500,0,
        11647,11649,5,1208,0,0,11648,11647,1,0,0,0,11648,11649,1,0,0,0,11649,
        11652,1,0,0,0,11650,11653,5,274,0,0,11651,11653,3,762,381,0,11652,
        11650,1,0,0,0,11652,11651,1,0,0,0,11652,11653,1,0,0,0,11653,11654,
        1,0,0,0,11654,11655,5,1214,0,0,11655,11657,1,0,0,0,11656,11634,1,
        0,0,0,11656,11642,1,0,0,0,11657,1039,1,0,0,0,11658,11660,3,1070,
        535,0,11659,11658,1,0,0,0,11659,11660,1,0,0,0,11660,11661,1,0,0,
        0,11661,11662,5,622,0,0,11662,11663,5,1213,0,0,11663,11664,3,1000,
        500,0,11664,11665,5,1208,0,0,11665,11666,3,1000,500,0,11666,11667,
        5,1208,0,0,11667,11668,3,1000,500,0,11668,11669,1,0,0,0,11669,11670,
        3,1000,500,0,11670,11671,5,1214,0,0,11671,11687,1,0,0,0,11672,11674,
        3,1070,535,0,11673,11672,1,0,0,0,11673,11674,1,0,0,0,11674,11675,
        1,0,0,0,11675,11676,7,118,0,0,11676,11677,5,1213,0,0,11677,11680,
        3,1000,500,0,11678,11679,5,1208,0,0,11679,11681,3,1000,500,0,11680,
        11678,1,0,0,0,11681,11682,1,0,0,0,11682,11680,1,0,0,0,11682,11683,
        1,0,0,0,11683,11684,1,0,0,0,11684,11685,5,1214,0,0,11685,11687,1,
        0,0,0,11686,11659,1,0,0,0,11686,11673,1,0,0,0,11687,1041,1,0,0,0,
        11688,11690,3,1070,535,0,11689,11688,1,0,0,0,11689,11690,1,0,0,0,
        11690,11691,1,0,0,0,11691,11692,7,119,0,0,11692,11693,5,1213,0,0,
        11693,11694,3,1000,500,0,11694,11695,5,1214,0,0,11695,1043,1,0,0,
        0,11696,11697,5,50,0,0,11697,11698,5,1213,0,0,11698,11699,3,1000,
        500,0,11699,11712,5,20,0,0,11700,11704,3,692,346,0,11701,11703,3,
        714,357,0,11702,11701,1,0,0,0,11703,11706,1,0,0,0,11704,11702,1,
        0,0,0,11704,11705,1,0,0,0,11705,11713,1,0,0,0,11706,11704,1,0,0,
        0,11707,11709,3,714,357,0,11708,11707,1,0,0,0,11709,11710,1,0,0,
        0,11710,11708,1,0,0,0,11710,11711,1,0,0,0,11711,11713,1,0,0,0,11712,
        11700,1,0,0,0,11712,11708,1,0,0,0,11713,11714,1,0,0,0,11714,11715,
        5,1214,0,0,11715,11828,1,0,0,0,11716,11717,5,1095,0,0,11717,11718,
        5,1213,0,0,11718,11719,3,1000,500,0,11719,11720,5,20,0,0,11720,11721,
        3,692,346,0,11721,11722,5,1214,0,0,11722,11828,1,0,0,0,11723,11725,
        3,1070,535,0,11724,11723,1,0,0,0,11724,11725,1,0,0,0,11725,11726,
        1,0,0,0,11726,11727,5,992,0,0,11727,11728,5,1213,0,0,11728,11729,
        3,1000,500,0,11729,11730,5,1208,0,0,11730,11731,3,762,381,0,11731,
        11732,5,1214,0,0,11732,11828,1,0,0,0,11733,11735,3,1070,535,0,11734,
        11733,1,0,0,0,11734,11735,1,0,0,0,11735,11736,1,0,0,0,11736,11737,
        5,679,0,0,11737,11738,5,1213,0,0,11738,11739,3,1000,500,0,11739,
        11740,5,1208,0,0,11740,11741,3,762,381,0,11741,11742,5,1214,0,0,
        11742,11828,1,0,0,0,11743,11745,3,1070,535,0,11744,11743,1,0,0,0,
        11744,11745,1,0,0,0,11745,11746,1,0,0,0,11746,11747,5,996,0,0,11747,
        11748,5,1213,0,0,11748,11758,3,1000,500,0,11749,11750,5,1208,0,0,
        11750,11756,3,762,381,0,11751,11754,5,1208,0,0,11752,11755,3,762,
        381,0,11753,11755,5,274,0,0,11754,11752,1,0,0,0,11754,11753,1,0,
        0,0,11755,11757,1,0,0,0,11756,11751,1,0,0,0,11756,11757,1,0,0,0,
        11757,11759,1,0,0,0,11758,11749,1,0,0,0,11758,11759,1,0,0,0,11759,
        11760,1,0,0,0,11760,11761,5,1214,0,0,11761,11828,1,0,0,0,11762,11764,
        3,1070,535,0,11763,11762,1,0,0,0,11763,11764,1,0,0,0,11764,11765,
        1,0,0,0,11765,11766,5,993,0,0,11766,11767,5,1213,0,0,11767,11777,
        3,1000,500,0,11768,11769,5,1208,0,0,11769,11775,3,762,381,0,11770,
        11773,5,1208,0,0,11771,11774,3,762,381,0,11772,11774,5,274,0,0,11773,
        11771,1,0,0,0,11773,11772,1,0,0,0,11774,11776,1,0,0,0,11775,11770,
        1,0,0,0,11775,11776,1,0,0,0,11776,11778,1,0,0,0,11777,11768,1,0,
        0,0,11777,11778,1,0,0,0,11778,11779,1,0,0,0,11779,11780,5,1214,0,
        0,11780,11828,1,0,0,0,11781,11783,3,1070,535,0,11782,11781,1,0,0,
        0,11782,11783,1,0,0,0,11783,11784,1,0,0,0,11784,11785,5,994,0,0,
        11785,11786,5,1213,0,0,11786,11787,3,1000,500,0,11787,11790,5,1208,
        0,0,11788,11791,3,762,381,0,11789,11791,5,274,0,0,11790,11788,1,
        0,0,0,11790,11789,1,0,0,0,11791,11792,1,0,0,0,11792,11793,5,1214,
        0,0,11793,11828,1,0,0,0,11794,11796,3,1070,535,0,11795,11794,1,0,
        0,0,11795,11796,1,0,0,0,11796,11797,1,0,0,0,11797,11798,7,120,0,
        0,11798,11799,5,1213,0,0,11799,11805,3,1000,500,0,11800,11803,5,
        1208,0,0,11801,11804,3,762,381,0,11802,11804,5,274,0,0,11803,11801,
        1,0,0,0,11803,11802,1,0,0,0,11804,11806,1,0,0,0,11805,11800,1,0,
        0,0,11805,11806,1,0,0,0,11806,11807,1,0,0,0,11807,11808,5,1214,0,
        0,11808,11828,1,0,0,0,11809,11811,3,1070,535,0,11810,11809,1,0,0,
        0,11810,11811,1,0,0,0,11811,11812,1,0,0,0,11812,11813,7,121,0,0,
        11813,11814,5,1213,0,0,11814,11815,3,1000,500,0,11815,11816,5,1214,
        0,0,11816,11828,1,0,0,0,11817,11819,3,1070,535,0,11818,11817,1,0,
        0,0,11818,11819,1,0,0,0,11819,11820,1,0,0,0,11820,11821,7,122,0,
        0,11821,11822,5,1213,0,0,11822,11823,3,1000,500,0,11823,11824,5,
        1208,0,0,11824,11825,3,1000,500,0,11825,11826,5,1214,0,0,11826,11828,
        1,0,0,0,11827,11696,1,0,0,0,11827,11716,1,0,0,0,11827,11724,1,0,
        0,0,11827,11734,1,0,0,0,11827,11744,1,0,0,0,11827,11763,1,0,0,0,
        11827,11782,1,0,0,0,11827,11795,1,0,0,0,11827,11810,1,0,0,0,11827,
        11818,1,0,0,0,11828,1045,1,0,0,0,11829,11830,7,123,0,0,11830,11831,
        5,1213,0,0,11831,11832,3,1000,500,0,11832,11833,5,1214,0,0,11833,
        11880,1,0,0,0,11834,11836,3,1070,535,0,11835,11834,1,0,0,0,11835,
        11836,1,0,0,0,11836,11837,1,0,0,0,11837,11838,5,732,0,0,11838,11839,
        5,1213,0,0,11839,11840,3,1000,500,0,11840,11841,5,1214,0,0,11841,
        11880,1,0,0,0,11842,11844,3,1070,535,0,11843,11842,1,0,0,0,11843,
        11844,1,0,0,0,11844,11845,1,0,0,0,11845,11846,5,792,0,0,11846,11847,
        5,1213,0,0,11847,11848,3,1000,500,0,11848,11849,5,1208,0,0,11849,
        11850,3,762,381,0,11850,11851,5,1214,0,0,11851,11880,1,0,0,0,11852,
        11854,3,1070,535,0,11853,11852,1,0,0,0,11853,11854,1,0,0,0,11854,
        11855,1,0,0,0,11855,11856,5,786,0,0,11856,11857,5,1213,0,0,11857,
        11858,3,1000,500,0,11858,11859,5,1208,0,0,11859,11860,3,1000,500,
        0,11860,11861,5,1214,0,0,11861,11880,1,0,0,0,11862,11864,3,1070,
        535,0,11863,11862,1,0,0,0,11863,11864,1,0,0,0,11864,11865,1,0,0,
        0,11865,11866,7,124,0,0,11866,11867,5,1213,0,0,11867,11868,3,1000,
        500,0,11868,11869,5,1208,0,0,11869,11870,3,1000,500,0,11870,11871,
        5,1214,0,0,11871,11880,1,0,0,0,11872,11873,5,152,0,0,11873,11874,
        5,1213,0,0,11874,11875,7,125,0,0,11875,11876,5,164,0,0,11876,11877,
        3,1000,500,0,11877,11878,5,1214,0,0,11878,11880,1,0,0,0,11879,11829,
        1,0,0,0,11879,11835,1,0,0,0,11879,11843,1,0,0,0,11879,11853,1,0,
        0,0,11879,11863,1,0,0,0,11879,11872,1,0,0,0,11880,1047,1,0,0,0,11881,
        11882,7,126,0,0,11882,11883,5,1213,0,0,11883,11910,5,1214,0,0,11884,
        11885,7,126,0,0,11885,11886,5,1213,0,0,11886,11887,3,1104,552,0,
        11887,11888,5,1214,0,0,11888,11910,1,0,0,0,11889,11890,5,181,0,0,
        11890,11891,5,1213,0,0,11891,11892,3,1000,500,0,11892,11893,5,1214,
        0,0,11893,11910,1,0,0,0,11894,11895,5,182,0,0,11895,11896,5,1213,
        0,0,11896,11910,5,1214,0,0,11897,11898,5,182,0,0,11898,11899,5,1213,
        0,0,11899,11904,3,1000,500,0,11900,11901,5,1208,0,0,11901,11903,
        3,1000,500,0,11902,11900,1,0,0,0,11903,11906,1,0,0,0,11904,11902,
        1,0,0,0,11904,11905,1,0,0,0,11905,11907,1,0,0,0,11906,11904,1,0,
        0,0,11907,11908,5,1214,0,0,11908,11910,1,0,0,0,11909,11881,1,0,0,
        0,11909,11884,1,0,0,0,11909,11889,1,0,0,0,11909,11894,1,0,0,0,11909,
        11897,1,0,0,0,11910,1049,1,0,0,0,11911,11913,3,1070,535,0,11912,
        11911,1,0,0,0,11912,11913,1,0,0,0,11913,11914,1,0,0,0,11914,11915,
        7,127,0,0,11915,11916,5,1213,0,0,11916,11917,5,1214,0,0,11917,1051,
        1,0,0,0,11918,11920,3,1074,537,0,11919,11918,1,0,0,0,11919,11920,
        1,0,0,0,11920,11921,1,0,0,0,11921,11922,5,1145,0,0,11922,11923,5,
        1213,0,0,11923,11924,3,762,381,0,11924,11925,5,1214,0,0,11925,11955,
        1,0,0,0,11926,11928,3,1074,537,0,11927,11926,1,0,0,0,11927,11928,
        1,0,0,0,11928,11929,1,0,0,0,11929,11930,5,1146,0,0,11930,11931,5,
        1213,0,0,11931,11932,3,762,381,0,11932,11933,5,1208,0,0,11933,11934,
        3,762,381,0,11934,11935,5,1208,0,0,11935,11936,3,762,381,0,11936,
        11937,5,1208,0,0,11937,11938,3,762,381,0,11938,11939,5,1208,0,0,
        11939,11940,3,762,381,0,11940,11941,5,1208,0,0,11941,11942,3,762,
        381,0,11942,11943,5,1214,0,0,11943,11955,1,0,0,0,11944,11946,3,1074,
        537,0,11945,11944,1,0,0,0,11945,11946,1,0,0,0,11946,11947,1,0,0,
        0,11947,11948,5,1147,0,0,11948,11949,5,1213,0,0,11949,11950,3,762,
        381,0,11950,11951,5,1208,0,0,11951,11952,3,762,381,0,11952,11953,
        5,1214,0,0,11953,11955,1,0,0,0,11954,11919,1,0,0,0,11954,11927,1,
        0,0,0,11954,11945,1,0,0,0,11955,1053,1,0,0,0,11956,11958,3,1070,
        535,0,11957,11956,1,0,0,0,11957,11958,1,0,0,0,11958,11959,1,0,0,
        0,11959,11960,5,810,0,0,11960,11961,5,1213,0,0,11961,11962,3,1000,
        500,0,11962,11963,5,1208,0,0,11963,11964,3,1000,500,0,11964,11965,
        5,1214,0,0,11965,11979,1,0,0,0,11966,11968,3,1070,535,0,11967,11966,
        1,0,0,0,11967,11968,1,0,0,0,11968,11969,1,0,0,0,11969,11970,5,811,
        0,0,11970,11971,5,1213,0,0,11971,11972,3,1000,500,0,11972,11973,
        5,1208,0,0,11973,11974,3,1000,500,0,11974,11975,5,1208,0,0,11975,
        11976,3,1000,500,0,11976,11977,5,1214,0,0,11977,11979,1,0,0,0,11978,
        11957,1,0,0,0,11978,11967,1,0,0,0,11979,1055,1,0,0,0,11980,11981,
        5,34,0,0,11981,11982,5,1213,0,0,11982,11983,3,1000,500,0,11983,11984,
        5,1214,0,0,11984,12022,1,0,0,0,11985,11986,5,134,0,0,11986,11987,
        5,1213,0,0,11987,11988,3,1000,500,0,11988,11989,5,1214,0,0,11989,
        12022,1,0,0,0,11990,11991,5,134,0,0,11991,11992,5,1213,0,0,11992,
        11993,3,1000,500,0,11993,11994,5,1214,0,0,11994,11996,5,207,0,0,
        11995,11997,5,272,0,0,11996,11995,1,0,0,0,11996,11997,1,0,0,0,11997,
        11998,1,0,0,0,11998,11999,7,128,0,0,11999,12022,1,0,0,0,12000,12001,
        5,205,0,0,12001,12002,5,1213,0,0,12002,12003,3,1000,500,0,12003,
        12004,5,1214,0,0,12004,12005,3,724,362,0,12005,12022,1,0,0,0,12006,
        12007,5,731,0,0,12007,12008,5,1213,0,0,12008,12009,3,1000,500,0,
        12009,12010,5,1214,0,0,12010,12022,1,0,0,0,12011,12012,5,267,0,0,
        12012,12013,5,1213,0,0,12013,12014,3,1000,500,0,12014,12015,5,1214,
        0,0,12015,12022,1,0,0,0,12016,12017,5,861,0,0,12017,12018,5,1213,
        0,0,12018,12019,3,1000,500,0,12019,12020,5,1214,0,0,12020,12022,
        1,0,0,0,12021,11980,1,0,0,0,12021,11985,1,0,0,0,12021,11990,1,0,
        0,0,12021,12000,1,0,0,0,12021,12006,1,0,0,0,12021,12011,1,0,0,0,
        12021,12016,1,0,0,0,12022,1057,1,0,0,0,12023,12025,3,1070,535,0,
        12024,12023,1,0,0,0,12024,12025,1,0,0,0,12025,12026,1,0,0,0,12026,
        12027,5,882,0,0,12027,12028,5,1213,0,0,12028,12029,3,1000,500,0,
        12029,12030,5,1208,0,0,12030,12038,3,1000,500,0,12031,12032,5,1208,
        0,0,12032,12033,3,1000,500,0,12033,12034,5,1208,0,0,12034,12035,
        3,1000,500,0,12035,12036,5,1208,0,0,12036,12037,3,1000,500,0,12037,
        12039,1,0,0,0,12038,12031,1,0,0,0,12038,12039,1,0,0,0,12039,12040,
        1,0,0,0,12040,12041,5,1214,0,0,12041,12113,1,0,0,0,12042,12044,3,
        1070,535,0,12043,12042,1,0,0,0,12043,12044,1,0,0,0,12044,12045,1,
        0,0,0,12045,12046,5,880,0,0,12046,12047,5,1213,0,0,12047,12048,3,
        1000,500,0,12048,12049,5,1208,0,0,12049,12059,3,1000,500,0,12050,
        12051,5,1208,0,0,12051,12052,3,1000,500,0,12052,12053,5,1208,0,0,
        12053,12054,3,1000,500,0,12054,12055,5,1208,0,0,12055,12056,3,1000,
        500,0,12056,12057,5,1208,0,0,12057,12058,3,1000,500,0,12058,12060,
        1,0,0,0,12059,12050,1,0,0,0,12059,12060,1,0,0,0,12060,12061,1,0,
        0,0,12061,12062,5,1214,0,0,12062,12113,1,0,0,0,12063,12065,3,1070,
        535,0,12064,12063,1,0,0,0,12064,12065,1,0,0,0,12065,12066,1,0,0,
        0,12066,12067,5,879,0,0,12067,12068,5,1213,0,0,12068,12069,3,1000,
        500,0,12069,12070,5,1208,0,0,12070,12080,3,1000,500,0,12071,12072,
        5,1208,0,0,12072,12073,3,1000,500,0,12073,12074,5,1208,0,0,12074,
        12075,3,1000,500,0,12075,12076,5,1208,0,0,12076,12077,3,1000,500,
        0,12077,12078,5,1208,0,0,12078,12079,3,1000,500,0,12079,12081,1,
        0,0,0,12080,12071,1,0,0,0,12080,12081,1,0,0,0,12081,12082,1,0,0,
        0,12082,12083,5,1214,0,0,12083,12113,1,0,0,0,12084,12086,3,1070,
        535,0,12085,12084,1,0,0,0,12085,12086,1,0,0,0,12086,12087,1,0,0,
        0,12087,12088,5,881,0,0,12088,12089,5,1213,0,0,12089,12090,3,1000,
        500,0,12090,12091,5,1208,0,0,12091,12094,3,1000,500,0,12092,12093,
        5,1208,0,0,12093,12095,3,1000,500,0,12094,12092,1,0,0,0,12094,12095,
        1,0,0,0,12095,12096,1,0,0,0,12096,12097,5,1214,0,0,12097,12113,1,
        0,0,0,12098,12100,3,1070,535,0,12099,12098,1,0,0,0,12099,12100,1,
        0,0,0,12100,12101,1,0,0,0,12101,12102,5,1083,0,0,12102,12103,5,1213,
        0,0,12103,12104,3,1000,500,0,12104,12105,5,1208,0,0,12105,12106,
        3,1000,500,0,12106,12107,5,1208,0,0,12107,12108,3,1000,500,0,12108,
        12109,5,1208,0,0,12109,12110,3,1000,500,0,12110,12111,5,1214,0,0,
        12111,12113,1,0,0,0,12112,12024,1,0,0,0,12112,12043,1,0,0,0,12112,
        12064,1,0,0,0,12112,12085,1,0,0,0,12112,12099,1,0,0,0,12113,1059,
        1,0,0,0,12114,12116,3,1070,535,0,12115,12114,1,0,0,0,12115,12116,
        1,0,0,0,12116,12117,1,0,0,0,12117,12118,7,129,0,0,12118,12119,5,
        1213,0,0,12119,12120,3,1000,500,0,12120,12121,5,1214,0,0,12121,12428,
        1,0,0,0,12122,12123,7,130,0,0,12123,12124,5,1213,0,0,12124,12125,
        3,1000,500,0,12125,12126,5,1214,0,0,12126,12428,1,0,0,0,12127,12128,
        5,586,0,0,12128,12129,5,1213,0,0,12129,12130,3,1000,500,0,12130,
        12131,5,1208,0,0,12131,12136,3,1000,500,0,12132,12133,5,1208,0,0,
        12133,12135,3,1000,500,0,12134,12132,1,0,0,0,12135,12138,1,0,0,0,
        12136,12134,1,0,0,0,12136,12137,1,0,0,0,12137,12139,1,0,0,0,12138,
        12136,1,0,0,0,12139,12140,5,1214,0,0,12140,12428,1,0,0,0,12141,12143,
        3,1070,535,0,12142,12141,1,0,0,0,12142,12143,1,0,0,0,12143,12144,
        1,0,0,0,12144,12145,5,1073,0,0,12145,12146,5,1213,0,0,12146,12147,
        5,265,0,0,12147,12148,5,1098,0,0,12148,12149,5,437,0,0,12149,12150,
        5,1213,0,0,12150,12155,3,1000,500,0,12151,12152,5,1208,0,0,12152,
        12154,3,1000,500,0,12153,12151,1,0,0,0,12154,12157,1,0,0,0,12155,
        12153,1,0,0,0,12155,12156,1,0,0,0,12156,12158,1,0,0,0,12157,12155,
        1,0,0,0,12158,12159,5,1214,0,0,12159,12160,5,1208,0,0,12160,12161,
        3,762,381,0,12161,12162,5,1208,0,0,12162,12163,3,762,381,0,12163,
        12164,5,1214,0,0,12164,12428,1,0,0,0,12165,12167,3,1070,535,0,12166,
        12165,1,0,0,0,12166,12167,1,0,0,0,12167,12168,1,0,0,0,12168,12169,
        5,1074,0,0,12169,12170,5,1213,0,0,12170,12171,3,1000,500,0,12171,
        12172,5,1208,0,0,12172,12173,3,762,381,0,12173,12174,5,1208,0,0,
        12174,12175,3,762,381,0,12175,12176,5,1214,0,0,12176,12428,1,0,0,
        0,12177,12179,3,1070,535,0,12178,12177,1,0,0,0,12178,12179,1,0,0,
        0,12179,12180,1,0,0,0,12180,12181,5,643,0,0,12181,12182,5,1213,0,
        0,12182,12183,3,1000,500,0,12183,12184,5,1208,0,0,12184,12194,3,
        1000,500,0,12185,12186,5,1208,0,0,12186,12187,3,768,384,0,12187,
        12188,5,1208,0,0,12188,12189,3,768,384,0,12189,12190,5,1208,0,0,
        12190,12191,3,768,384,0,12191,12192,5,1208,0,0,12192,12193,3,768,
        384,0,12193,12195,1,0,0,0,12194,12185,1,0,0,0,12194,12195,1,0,0,
        0,12195,12196,1,0,0,0,12196,12197,5,1214,0,0,12197,12428,1,0,0,0,
        12198,12199,5,192,0,0,12199,12200,5,1213,0,0,12200,12201,3,1000,
        500,0,12201,12202,5,1208,0,0,12202,12203,3,1000,500,0,12203,12204,
        5,1214,0,0,12204,12428,1,0,0,0,12205,12207,3,1070,535,0,12206,12205,
        1,0,0,0,12206,12207,1,0,0,0,12207,12208,1,0,0,0,12208,12209,5,711,
        0,0,12209,12210,5,1213,0,0,12210,12211,3,1000,500,0,12211,12212,
        5,1208,0,0,12212,12219,3,1000,500,0,12213,12214,5,1208,0,0,12214,
        12217,3,1000,500,0,12215,12216,5,1208,0,0,12216,12218,3,1000,500,
        0,12217,12215,1,0,0,0,12217,12218,1,0,0,0,12218,12220,1,0,0,0,12219,
        12213,1,0,0,0,12219,12220,1,0,0,0,12220,12221,1,0,0,0,12221,12222,
        5,1214,0,0,12222,12428,1,0,0,0,12223,12225,3,1070,535,0,12224,12223,
        1,0,0,0,12224,12225,1,0,0,0,12225,12226,1,0,0,0,12226,12227,7,38,
        0,0,12227,12228,5,1213,0,0,12228,12229,3,1000,500,0,12229,12230,
        5,1208,0,0,12230,12231,3,1000,500,0,12231,12232,5,1214,0,0,12232,
        12428,1,0,0,0,12233,12234,5,743,0,0,12234,12235,5,1213,0,0,12235,
        12236,3,1000,500,0,12236,12237,5,1208,0,0,12237,12240,3,1000,500,
        0,12238,12239,5,1208,0,0,12239,12241,3,1000,500,0,12240,12238,1,
        0,0,0,12240,12241,1,0,0,0,12241,12242,1,0,0,0,12242,12243,5,1214,
        0,0,12243,12428,1,0,0,0,12244,12245,7,131,0,0,12245,12246,5,1213,
        0,0,12246,12247,3,1000,500,0,12247,12248,5,1214,0,0,12248,12428,
        1,0,0,0,12249,12251,3,1070,535,0,12250,12249,1,0,0,0,12250,12251,
        1,0,0,0,12251,12252,1,0,0,0,12252,12253,7,132,0,0,12253,12254,5,
        1213,0,0,12254,12255,3,1000,500,0,12255,12256,5,1208,0,0,12256,12259,
        3,1000,500,0,12257,12258,5,1208,0,0,12258,12260,3,1000,500,0,12259,
        12257,1,0,0,0,12259,12260,1,0,0,0,12260,12261,1,0,0,0,12261,12262,
        5,1214,0,0,12262,12428,1,0,0,0,12263,12265,3,1070,535,0,12264,12263,
        1,0,0,0,12264,12265,1,0,0,0,12265,12266,1,0,0,0,12266,12267,7,133,
        0,0,12267,12268,5,1213,0,0,12268,12271,3,1000,500,0,12269,12270,
        5,1208,0,0,12270,12272,3,1000,500,0,12271,12269,1,0,0,0,12271,12272,
        1,0,0,0,12272,12273,1,0,0,0,12273,12274,5,1214,0,0,12274,12428,1,
        0,0,0,12275,12277,3,1070,535,0,12276,12275,1,0,0,0,12276,12277,1,
        0,0,0,12277,12278,1,0,0,0,12278,12279,5,793,0,0,12279,12280,5,1213,
        0,0,12280,12281,3,1000,500,0,12281,12282,5,1208,0,0,12282,12283,
        3,1000,500,0,12283,12284,5,1208,0,0,12284,12287,3,1000,500,0,12285,
        12286,5,1208,0,0,12286,12288,3,1000,500,0,12287,12285,1,0,0,0,12287,
        12288,1,0,0,0,12288,12289,1,0,0,0,12289,12290,5,1214,0,0,12290,12428,
        1,0,0,0,12291,12293,3,1070,535,0,12292,12291,1,0,0,0,12292,12293,
        1,0,0,0,12293,12294,1,0,0,0,12294,12295,5,812,0,0,12295,12296,5,
        1213,0,0,12296,12297,3,1000,500,0,12297,12298,5,1208,0,0,12298,12309,
        3,1000,500,0,12299,12300,5,1208,0,0,12300,12307,3,1000,500,0,12301,
        12302,5,1208,0,0,12302,12305,3,1000,500,0,12303,12304,5,1208,0,0,
        12304,12306,3,1000,500,0,12305,12303,1,0,0,0,12305,12306,1,0,0,0,
        12306,12308,1,0,0,0,12307,12301,1,0,0,0,12307,12308,1,0,0,0,12308,
        12310,1,0,0,0,12309,12299,1,0,0,0,12309,12310,1,0,0,0,12310,12311,
        1,0,0,0,12311,12312,5,1214,0,0,12312,12428,1,0,0,0,12313,12315,3,
        1070,535,0,12314,12313,1,0,0,0,12314,12315,1,0,0,0,12315,12316,1,
        0,0,0,12316,12317,5,830,0,0,12317,12318,5,1213,0,0,12318,12319,3,
        1000,500,0,12319,12320,5,1208,0,0,12320,12323,3,1000,500,0,12321,
        12322,5,1208,0,0,12322,12324,3,1000,500,0,12323,12321,1,0,0,0,12323,
        12324,1,0,0,0,12324,12325,1,0,0,0,12325,12326,5,1214,0,0,12326,12428,
        1,0,0,0,12327,12329,3,1070,535,0,12328,12327,1,0,0,0,12328,12329,
        1,0,0,0,12329,12330,1,0,0,0,12330,12331,5,831,0,0,12331,12332,5,
        1213,0,0,12332,12333,3,1000,500,0,12333,12334,5,1208,0,0,12334,12335,
        3,1000,500,0,12335,12336,5,1208,0,0,12336,12337,3,1000,500,0,12337,
        12338,5,1214,0,0,12338,12428,1,0,0,0,12339,12340,5,304,0,0,12340,
        12341,5,1213,0,0,12341,12342,3,1000,500,0,12342,12343,5,190,0,0,
        12343,12344,3,1000,500,0,12344,12345,5,1214,0,0,12345,12428,1,0,
        0,0,12346,12348,3,1070,535,0,12347,12346,1,0,0,0,12347,12348,1,0,
        0,0,12348,12349,1,0,0,0,12349,12350,5,943,0,0,12350,12351,5,1213,
        0,0,12351,12358,3,1000,500,0,12352,12353,5,1208,0,0,12353,12356,
        3,1000,500,0,12354,12355,5,1208,0,0,12355,12357,3,1000,500,0,12356,
        12354,1,0,0,0,12356,12357,1,0,0,0,12357,12359,1,0,0,0,12358,12352,
        1,0,0,0,12358,12359,1,0,0,0,12359,12360,1,0,0,0,12360,12361,5,1214,
        0,0,12361,12428,1,0,0,0,12362,12364,3,1070,535,0,12363,12362,1,0,
        0,0,12363,12364,1,0,0,0,12364,12365,1,0,0,0,12365,12366,5,1087,0,
        0,12366,12367,5,1213,0,0,12367,12368,3,1000,500,0,12368,12369,5,
        1208,0,0,12369,12370,3,1000,500,0,12370,12371,5,1208,0,0,12371,12372,
        3,1000,500,0,12372,12373,5,1214,0,0,12373,12374,5,352,0,0,12374,
        12375,5,1213,0,0,12375,12376,3,1190,595,0,12376,12377,5,1208,0,0,
        12377,12378,3,1190,595,0,12378,12379,5,1208,0,0,12379,12380,3,1190,
        595,0,12380,12381,5,1214,0,0,12381,12428,1,0,0,0,12382,12383,5,402,
        0,0,12383,12384,5,1213,0,0,12384,12385,3,1000,500,0,12385,12386,
        5,164,0,0,12386,12389,3,1000,500,0,12387,12388,7,134,0,0,12388,12390,
        3,1000,500,0,12389,12387,1,0,0,0,12389,12390,1,0,0,0,12390,12391,
        1,0,0,0,12391,12392,5,1214,0,0,12392,12428,1,0,0,0,12393,12394,7,
        135,0,0,12394,12395,5,1213,0,0,12395,12396,3,1000,500,0,12396,12397,
        5,1208,0,0,12397,12400,3,1000,500,0,12398,12399,7,134,0,0,12399,
        12401,3,1000,500,0,12400,12398,1,0,0,0,12400,12401,1,0,0,0,12401,
        12402,1,0,0,0,12402,12403,5,1214,0,0,12403,12428,1,0,0,0,12404,12405,
        7,136,0,0,12405,12406,5,1213,0,0,12406,12407,3,1000,500,0,12407,
        12408,5,457,0,0,12408,12411,3,1078,539,0,12409,12410,5,474,0,0,12410,
        12412,5,137,0,0,12411,12409,1,0,0,0,12411,12412,1,0,0,0,12412,12413,
        1,0,0,0,12413,12414,5,1214,0,0,12414,12428,1,0,0,0,12415,12416,5,
        436,0,0,12416,12422,5,1213,0,0,12417,12419,7,137,0,0,12418,12420,
        3,1000,500,0,12419,12418,1,0,0,0,12419,12420,1,0,0,0,12420,12421,
        1,0,0,0,12421,12423,5,164,0,0,12422,12417,1,0,0,0,12422,12423,1,
        0,0,0,12423,12424,1,0,0,0,12424,12425,3,1000,500,0,12425,12426,5,
        1214,0,0,12426,12428,1,0,0,0,12427,12115,1,0,0,0,12427,12122,1,0,
        0,0,12427,12127,1,0,0,0,12427,12142,1,0,0,0,12427,12166,1,0,0,0,
        12427,12178,1,0,0,0,12427,12198,1,0,0,0,12427,12206,1,0,0,0,12427,
        12224,1,0,0,0,12427,12233,1,0,0,0,12427,12244,1,0,0,0,12427,12250,
        1,0,0,0,12427,12264,1,0,0,0,12427,12276,1,0,0,0,12427,12292,1,0,
        0,0,12427,12314,1,0,0,0,12427,12328,1,0,0,0,12427,12339,1,0,0,0,
        12427,12347,1,0,0,0,12427,12363,1,0,0,0,12427,12382,1,0,0,0,12427,
        12393,1,0,0,0,12427,12404,1,0,0,0,12427,12415,1,0,0,0,12428,1061,
        1,0,0,0,12429,12431,3,1070,535,0,12430,12429,1,0,0,0,12430,12431,
        1,0,0,0,12431,12432,1,0,0,0,12432,12433,5,1174,0,0,12433,12434,5,
        1213,0,0,12434,12435,3,1000,500,0,12435,12437,5,1214,0,0,12436,12438,
        3,1082,541,0,12437,12436,1,0,0,0,12437,12438,1,0,0,0,12438,12552,
        1,0,0,0,12439,12441,3,1070,535,0,12440,12439,1,0,0,0,12440,12441,
        1,0,0,0,12441,12442,1,0,0,0,12442,12443,5,1175,0,0,12443,12444,5,
        1213,0,0,12444,12447,3,1000,500,0,12445,12446,5,1208,0,0,12446,12448,
        3,762,381,0,12447,12445,1,0,0,0,12447,12448,1,0,0,0,12448,12449,
        1,0,0,0,12449,12450,5,1214,0,0,12450,12552,1,0,0,0,12451,12453,3,
        1070,535,0,12452,12451,1,0,0,0,12452,12453,1,0,0,0,12453,12454,1,
        0,0,0,12454,12455,5,1075,0,0,12455,12456,5,1213,0,0,12456,12457,
        3,1000,500,0,12457,12458,5,1214,0,0,12458,12552,1,0,0,0,12459,12461,
        3,1070,535,0,12460,12459,1,0,0,0,12460,12461,1,0,0,0,12461,12462,
        1,0,0,0,12462,12463,5,1176,0,0,12463,12464,5,1213,0,0,12464,12467,
        3,1000,500,0,12465,12466,5,1208,0,0,12466,12468,3,768,384,0,12467,
        12465,1,0,0,0,12467,12468,1,0,0,0,12468,12469,1,0,0,0,12469,12471,
        5,1214,0,0,12470,12472,3,1082,541,0,12471,12470,1,0,0,0,12471,12472,
        1,0,0,0,12472,12552,1,0,0,0,12473,12475,3,1070,535,0,12474,12473,
        1,0,0,0,12474,12475,1,0,0,0,12475,12476,1,0,0,0,12476,12477,5,1177,
        0,0,12477,12478,5,1213,0,0,12478,12479,3,1000,500,0,12479,12480,
        5,1208,0,0,12480,12481,3,768,384,0,12481,12482,5,1214,0,0,12482,
        12552,1,0,0,0,12483,12485,3,1070,535,0,12484,12483,1,0,0,0,12484,
        12485,1,0,0,0,12485,12486,1,0,0,0,12486,12487,5,1178,0,0,12487,12488,
        5,1213,0,0,12488,12489,3,1000,500,0,12489,12490,5,1214,0,0,12490,
        12552,1,0,0,0,12491,12492,5,1179,0,0,12492,12493,5,1213,0,0,12493,
        12494,3,1000,500,0,12494,12495,5,1208,0,0,12495,12496,3,1000,500,
        0,12496,12497,5,20,0,0,12497,12498,3,692,346,0,12498,12499,5,1214,
        0,0,12499,12552,1,0,0,0,12500,12501,5,1180,0,0,12501,12502,5,1213,
        0,0,12502,12503,3,1000,500,0,12503,12504,5,1214,0,0,12504,12552,
        1,0,0,0,12505,12507,3,1070,535,0,12506,12505,1,0,0,0,12506,12507,
        1,0,0,0,12507,12508,1,0,0,0,12508,12509,5,1181,0,0,12509,12510,5,
        1213,0,0,12510,12519,3,1000,500,0,12511,12512,5,1208,0,0,12512,12513,
        3,762,381,0,12513,12514,5,1208,0,0,12514,12517,3,762,381,0,12515,
        12516,5,1208,0,0,12516,12518,3,762,381,0,12517,12515,1,0,0,0,12517,
        12518,1,0,0,0,12518,12520,1,0,0,0,12519,12511,1,0,0,0,12519,12520,
        1,0,0,0,12520,12521,1,0,0,0,12521,12522,5,1214,0,0,12522,12552,1,
        0,0,0,12523,12524,5,721,0,0,12524,12525,5,1213,0,0,12525,12530,3,
        1118,559,0,12526,12527,5,1208,0,0,12527,12529,3,1118,559,0,12528,
        12526,1,0,0,0,12529,12532,1,0,0,0,12530,12528,1,0,0,0,12530,12531,
        1,0,0,0,12531,12533,1,0,0,0,12532,12530,1,0,0,0,12533,12535,5,1214,
        0,0,12534,12536,3,1082,541,0,12535,12534,1,0,0,0,12535,12536,1,0,
        0,0,12536,12552,1,0,0,0,12537,12538,5,722,0,0,12538,12539,5,1213,
        0,0,12539,12544,3,1118,559,0,12540,12541,5,1208,0,0,12541,12543,
        3,1118,559,0,12542,12540,1,0,0,0,12543,12546,1,0,0,0,12544,12542,
        1,0,0,0,12544,12545,1,0,0,0,12545,12547,1,0,0,0,12546,12544,1,0,
        0,0,12547,12549,5,1214,0,0,12548,12550,3,1082,541,0,12549,12548,
        1,0,0,0,12549,12550,1,0,0,0,12550,12552,1,0,0,0,12551,12430,1,0,
        0,0,12551,12440,1,0,0,0,12551,12452,1,0,0,0,12551,12460,1,0,0,0,
        12551,12474,1,0,0,0,12551,12484,1,0,0,0,12551,12491,1,0,0,0,12551,
        12500,1,0,0,0,12551,12506,1,0,0,0,12551,12523,1,0,0,0,12551,12537,
        1,0,0,0,12552,1063,1,0,0,0,12553,12554,5,1068,0,0,12554,12555,5,
        1213,0,0,12555,12556,3,1000,500,0,12556,12557,5,1214,0,0,12557,12801,
        1,0,0,0,12558,12560,3,1070,535,0,12559,12558,1,0,0,0,12559,12560,
        1,0,0,0,12560,12561,1,0,0,0,12561,12562,5,1075,0,0,12562,12563,5,
        1213,0,0,12563,12564,3,1000,500,0,12564,12565,5,1214,0,0,12565,12801,
        1,0,0,0,12566,12567,5,1054,0,0,12567,12568,5,1213,0,0,12568,12570,
        3,762,381,0,12569,12571,3,1120,560,0,12570,12569,1,0,0,0,12570,12571,
        1,0,0,0,12571,12573,1,0,0,0,12572,12574,3,1144,572,0,12573,12572,
        1,0,0,0,12573,12574,1,0,0,0,12574,12576,1,0,0,0,12575,12577,3,1142,
        571,0,12576,12575,1,0,0,0,12576,12577,1,0,0,0,12577,12578,1,0,0,
        0,12578,12579,5,1214,0,0,12579,12801,1,0,0,0,12580,12581,5,1056,
        0,0,12581,12582,5,1213,0,0,12582,12583,7,138,0,0,12583,12586,3,1000,
        500,0,12584,12585,5,20,0,0,12585,12587,3,692,346,0,12586,12584,1,
        0,0,0,12586,12587,1,0,0,0,12587,12589,1,0,0,0,12588,12590,3,1140,
        570,0,12589,12588,1,0,0,0,12589,12590,1,0,0,0,12590,12596,1,0,0,
        0,12591,12593,5,474,0,0,12592,12594,5,268,0,0,12593,12592,1,0,0,
        0,12593,12594,1,0,0,0,12594,12595,1,0,0,0,12595,12597,5,554,0,0,
        12596,12591,1,0,0,0,12596,12597,1,0,0,0,12597,12600,1,0,0,0,12598,
        12599,5,1023,0,0,12599,12601,3,762,381,0,12600,12598,1,0,0,0,12600,
        12601,1,0,0,0,12601,12604,1,0,0,0,12602,12603,7,139,0,0,12603,12605,
        5,1047,0,0,12604,12602,1,0,0,0,12604,12605,1,0,0,0,12605,12612,1,
        0,0,0,12606,12607,5,268,0,0,12607,12613,5,704,0,0,12608,12609,5,
        704,0,0,12609,12610,5,927,0,0,12610,12611,5,1224,0,0,12611,12613,
        3,768,384,0,12612,12606,1,0,0,0,12612,12608,1,0,0,0,12612,12613,
        1,0,0,0,12613,12614,1,0,0,0,12614,12615,5,1214,0,0,12615,12801,1,
        0,0,0,12616,12617,5,1048,0,0,12617,12618,5,1213,0,0,12618,12620,
        3,1000,500,0,12619,12621,3,1144,572,0,12620,12619,1,0,0,0,12620,
        12621,1,0,0,0,12621,12622,1,0,0,0,12622,12623,5,1214,0,0,12623,12801,
        1,0,0,0,12624,12625,5,1049,0,0,12625,12626,5,1213,0,0,12626,12627,
        5,789,0,0,12627,12630,3,788,394,0,12628,12629,5,1208,0,0,12629,12631,
        3,1132,566,0,12630,12628,1,0,0,0,12630,12631,1,0,0,0,12631,12634,
        1,0,0,0,12632,12633,5,1208,0,0,12633,12635,3,1124,562,0,12634,12632,
        1,0,0,0,12634,12635,1,0,0,0,12635,12638,1,0,0,0,12636,12637,5,1208,
        0,0,12637,12639,3,1130,565,0,12638,12636,1,0,0,0,12638,12639,1,0,
        0,0,12639,12641,1,0,0,0,12640,12642,3,1144,572,0,12641,12640,1,0,
        0,0,12641,12642,1,0,0,0,12642,12643,1,0,0,0,12643,12644,5,1214,0,
        0,12644,12801,1,0,0,0,12645,12646,5,1050,0,0,12646,12648,5,1213,
        0,0,12647,12649,3,1132,566,0,12648,12647,1,0,0,0,12648,12649,1,0,
        0,0,12649,12658,1,0,0,0,12650,12655,3,1128,564,0,12651,12652,5,1208,
        0,0,12652,12654,3,1128,564,0,12653,12651,1,0,0,0,12654,12657,1,0,
        0,0,12655,12653,1,0,0,0,12655,12656,1,0,0,0,12656,12659,1,0,0,0,
        12657,12655,1,0,0,0,12658,12650,1,0,0,0,12658,12659,1,0,0,0,12659,
        12661,1,0,0,0,12660,12662,3,1146,573,0,12661,12660,1,0,0,0,12661,
        12662,1,0,0,0,12662,12664,1,0,0,0,12663,12665,3,1144,572,0,12664,
        12663,1,0,0,0,12664,12665,1,0,0,0,12665,12666,1,0,0,0,12666,12801,
        5,1214,0,0,12667,12668,5,1046,0,0,12668,12669,5,1213,0,0,12669,12674,
        3,1000,500,0,12670,12671,5,1208,0,0,12671,12673,3,1000,500,0,12672,
        12670,1,0,0,0,12673,12676,1,0,0,0,12674,12672,1,0,0,0,12674,12675,
        1,0,0,0,12675,12678,1,0,0,0,12676,12674,1,0,0,0,12677,12679,3,1144,
        572,0,12678,12677,1,0,0,0,12678,12679,1,0,0,0,12679,12680,1,0,0,
        0,12680,12681,5,1214,0,0,12681,12801,1,0,0,0,12682,12683,5,1045,
        0,0,12683,12684,5,1213,0,0,12684,12686,3,1000,500,0,12685,12687,
        3,1144,572,0,12686,12685,1,0,0,0,12686,12687,1,0,0,0,12687,12688,
        1,0,0,0,12688,12689,5,1214,0,0,12689,12801,1,0,0,0,12690,12691,5,
        1053,0,0,12691,12692,5,1213,0,0,12692,12693,5,789,0,0,12693,12696,
        3,788,394,0,12694,12695,5,1208,0,0,12695,12697,3,1000,500,0,12696,
        12694,1,0,0,0,12696,12697,1,0,0,0,12697,12699,1,0,0,0,12698,12700,
        3,1144,572,0,12699,12698,1,0,0,0,12699,12700,1,0,0,0,12700,12701,
        1,0,0,0,12701,12702,5,1214,0,0,12702,12801,1,0,0,0,12703,12704,5,
        1058,0,0,12704,12705,5,1213,0,0,12705,12707,3,1000,500,0,12706,12708,
        3,1144,572,0,12707,12706,1,0,0,0,12707,12708,1,0,0,0,12708,12709,
        1,0,0,0,12709,12710,5,1214,0,0,12710,12801,1,0,0,0,12711,12712,5,
        1052,0,0,12712,12713,5,1213,0,0,12713,12714,7,138,0,0,12714,12715,
        3,1000,500,0,12715,12716,7,140,0,0,12716,12717,5,1037,0,0,12717,
        12718,5,1214,0,0,12718,12801,1,0,0,0,12719,12720,5,1060,0,0,12720,
        12721,5,1213,0,0,12721,12722,7,141,0,0,12722,12723,3,1000,500,0,
        12723,12724,5,491,0,0,12724,12725,5,426,0,0,12725,12726,5,1055,0,
        0,12726,12727,5,459,0,0,12727,12732,3,1000,500,0,12728,12729,5,790,
        0,0,12729,12733,3,762,381,0,12730,12731,5,268,0,0,12731,12733,5,
        790,0,0,12732,12728,1,0,0,0,12732,12730,1,0,0,0,12732,12733,1,0,
        0,0,12733,12736,1,0,0,0,12734,12735,5,646,0,0,12735,12737,3,1000,
        500,0,12736,12734,1,0,0,0,12736,12737,1,0,0,0,12737,12738,1,0,0,
        0,12738,12739,5,1214,0,0,12739,12801,1,0,0,0,12740,12741,5,1043,
        0,0,12741,12742,5,1213,0,0,12742,12753,3,1000,500,0,12743,12744,
        5,291,0,0,12744,12745,5,42,0,0,12745,12750,3,992,496,0,12746,12747,
        5,1208,0,0,12747,12749,3,992,496,0,12748,12746,1,0,0,0,12749,12752,
        1,0,0,0,12750,12748,1,0,0,0,12750,12751,1,0,0,0,12751,12754,1,0,
        0,0,12752,12750,1,0,0,0,12753,12743,1,0,0,0,12753,12754,1,0,0,0,
        12754,12756,1,0,0,0,12755,12757,3,1144,572,0,12756,12755,1,0,0,0,
        12756,12757,1,0,0,0,12757,12758,1,0,0,0,12758,12759,5,1214,0,0,12759,
        12801,1,0,0,0,12760,12761,5,1103,0,0,12761,12762,5,1213,0,0,12762,
        12763,3,1000,500,0,12763,12764,5,1208,0,0,12764,12765,3,1000,500,
        0,12765,12766,5,1208,0,0,12766,12767,3,1000,500,0,12767,12768,5,
        1208,0,0,12768,12773,3,1000,500,0,12769,12770,5,1208,0,0,12770,12772,
        3,1000,500,0,12771,12769,1,0,0,0,12772,12775,1,0,0,0,12773,12771,
        1,0,0,0,12773,12774,1,0,0,0,12774,12776,1,0,0,0,12775,12773,1,0,
        0,0,12776,12777,5,1214,0,0,12777,12801,1,0,0,0,12778,12779,3,1072,
        536,0,12779,12780,5,1101,0,0,12780,12781,5,1213,0,0,12781,12782,
        3,1000,500,0,12782,12783,5,1208,0,0,12783,12784,3,1000,500,0,12784,
        12785,5,1208,0,0,12785,12786,3,1000,500,0,12786,12787,5,1208,0,0,
        12787,12788,3,1000,500,0,12788,12789,5,1214,0,0,12789,12801,1,0,
        0,0,12790,12791,3,1072,536,0,12791,12792,5,1102,0,0,12792,12793,
        5,1213,0,0,12793,12794,3,1000,500,0,12794,12795,5,1208,0,0,12795,
        12796,3,1000,500,0,12796,12797,5,1208,0,0,12797,12798,3,1000,500,
        0,12798,12799,5,1214,0,0,12799,12801,1,0,0,0,12800,12553,1,0,0,0,
        12800,12559,1,0,0,0,12800,12566,1,0,0,0,12800,12580,1,0,0,0,12800,
        12616,1,0,0,0,12800,12624,1,0,0,0,12800,12645,1,0,0,0,12800,12667,
        1,0,0,0,12800,12682,1,0,0,0,12800,12690,1,0,0,0,12800,12703,1,0,
        0,0,12800,12711,1,0,0,0,12800,12719,1,0,0,0,12800,12740,1,0,0,0,
        12800,12760,1,0,0,0,12800,12778,1,0,0,0,12800,12790,1,0,0,0,12801,
        1065,1,0,0,0,12802,12803,3,800,400,0,12803,12804,5,1213,0,0,12804,
        12809,3,1000,500,0,12805,12806,5,1208,0,0,12806,12808,3,1000,500,
        0,12807,12805,1,0,0,0,12808,12811,1,0,0,0,12809,12807,1,0,0,0,12809,
        12810,1,0,0,0,12810,12812,1,0,0,0,12811,12809,1,0,0,0,12812,12815,
        5,1214,0,0,12813,12816,3,1082,541,0,12814,12816,3,1106,553,0,12815,
        12813,1,0,0,0,12815,12814,1,0,0,0,12815,12816,1,0,0,0,12816,12825,
        1,0,0,0,12817,12818,3,800,400,0,12818,12819,5,1213,0,0,12819,12822,
        5,1214,0,0,12820,12823,3,1082,541,0,12821,12823,3,1106,553,0,12822,
        12820,1,0,0,0,12822,12821,1,0,0,0,12822,12823,1,0,0,0,12823,12825,
        1,0,0,0,12824,12802,1,0,0,0,12824,12817,1,0,0,0,12825,1067,1,0,0,
        0,12826,12827,5,48,0,0,12827,12828,5,1213,0,0,12828,12833,3,998,
        499,0,12829,12830,5,1208,0,0,12830,12832,3,998,499,0,12831,12829,
        1,0,0,0,12832,12835,1,0,0,0,12833,12831,1,0,0,0,12833,12834,1,0,
        0,0,12834,12838,1,0,0,0,12835,12833,1,0,0,0,12836,12837,5,1208,0,
        0,12837,12839,3,1090,545,0,12838,12836,1,0,0,0,12838,12839,1,0,0,
        0,12839,12840,1,0,0,0,12840,12841,5,1214,0,0,12841,12854,1,0,0,0,
        12842,12843,5,320,0,0,12843,12844,5,1213,0,0,12844,12845,3,1000,
        500,0,12845,12846,5,35,0,0,12846,12849,3,1092,546,0,12847,12848,
        5,1208,0,0,12848,12850,3,1102,551,0,12849,12847,1,0,0,0,12849,12850,
        1,0,0,0,12850,12851,1,0,0,0,12851,12852,5,1214,0,0,12852,12854,1,
        0,0,0,12853,12826,1,0,0,0,12853,12842,1,0,0,0,12854,1069,1,0,0,0,
        12855,12856,5,1091,0,0,12856,12857,5,1209,0,0,12857,1071,1,0,0,0,
        12858,12859,5,1092,0,0,12859,12860,5,1209,0,0,12860,1073,1,0,0,0,
        12861,12862,5,1088,0,0,12862,12863,5,1209,0,0,12863,1075,1,0,0,0,
        12864,12865,5,1090,0,0,12865,12866,5,1209,0,0,12866,1077,1,0,0,0,
        12867,12868,7,142,0,0,12868,1079,1,0,0,0,12869,12870,5,1213,0,0,
        12870,12875,3,1084,542,0,12871,12872,5,1208,0,0,12872,12874,3,1084,
        542,0,12873,12871,1,0,0,0,12874,12877,1,0,0,0,12875,12873,1,0,0,
        0,12875,12876,1,0,0,0,12876,12878,1,0,0,0,12877,12875,1,0,0,0,12878,
        12879,5,1214,0,0,12879,1081,1,0,0,0,12880,12881,5,352,0,0,12881,
        12886,3,692,346,0,12882,12883,5,352,0,0,12883,12884,5,944,0,0,12884,
        12886,3,788,394,0,12885,12880,1,0,0,0,12885,12882,1,0,0,0,12886,
        1083,1,0,0,0,12887,12892,3,1088,544,0,12888,12892,3,736,368,0,12889,
        12892,3,732,366,0,12890,12892,3,734,367,0,12891,12887,1,0,0,0,12891,
        12888,1,0,0,0,12891,12889,1,0,0,0,12891,12890,1,0,0,0,12892,1085,
        1,0,0,0,12893,12899,5,1213,0,0,12894,12895,3,1088,544,0,12895,12896,
        5,1208,0,0,12896,12898,1,0,0,0,12897,12894,1,0,0,0,12898,12901,1,
        0,0,0,12899,12897,1,0,0,0,12899,12900,1,0,0,0,12900,12902,1,0,0,
        0,12901,12899,1,0,0,0,12902,12910,3,692,346,0,12903,12906,5,1208,
        0,0,12904,12907,3,1088,544,0,12905,12907,3,732,366,0,12906,12904,
        1,0,0,0,12906,12905,1,0,0,0,12907,12909,1,0,0,0,12908,12903,1,0,
        0,0,12909,12912,1,0,0,0,12910,12908,1,0,0,0,12910,12911,1,0,0,0,
        12911,12913,1,0,0,0,12912,12910,1,0,0,0,12913,12914,5,1214,0,0,12914,
        1087,1,0,0,0,12915,12919,3,738,369,0,12916,12919,3,742,371,0,12917,
        12919,3,740,370,0,12918,12915,1,0,0,0,12918,12916,1,0,0,0,12918,
        12917,1,0,0,0,12919,1089,1,0,0,0,12920,12921,5,268,0,0,12921,12924,
        5,47,0,0,12922,12923,7,8,0,0,12923,12925,5,1016,0,0,12924,12922,
        1,0,0,0,12924,12925,1,0,0,0,12925,12928,1,0,0,0,12926,12928,5,1016,
        0,0,12927,12920,1,0,0,0,12927,12926,1,0,0,0,12928,1091,1,0,0,0,12929,
        12933,3,1096,548,0,12930,12933,3,1098,549,0,12931,12933,3,1094,547,
        0,12932,12929,1,0,0,0,12932,12930,1,0,0,0,12932,12931,1,0,0,0,12933,
        1093,1,0,0,0,12934,12941,3,1100,550,0,12935,12938,5,1219,0,0,12936,
        12937,5,16,0,0,12937,12939,3,1000,500,0,12938,12936,1,0,0,0,12938,
        12939,1,0,0,0,12939,12941,1,0,0,0,12940,12934,1,0,0,0,12940,12935,
        1,0,0,0,12941,12946,1,0,0,0,12942,12943,5,1208,0,0,12943,12945,3,
        1100,550,0,12944,12942,1,0,0,0,12945,12948,1,0,0,0,12946,12944,1,
        0,0,0,12946,12947,1,0,0,0,12947,12949,1,0,0,0,12948,12946,1,0,0,
        0,12949,12950,5,1208,0,0,12950,12951,3,1096,548,0,12951,1095,1,0,
        0,0,12952,12953,3,1000,500,0,12953,12956,5,16,0,0,12954,12957,3,
        1000,500,0,12955,12957,5,1219,0,0,12956,12954,1,0,0,0,12956,12955,
        1,0,0,0,12957,12960,1,0,0,0,12958,12959,5,129,0,0,12959,12961,3,
        1000,500,0,12960,12958,1,0,0,0,12960,12961,1,0,0,0,12961,1097,1,
        0,0,0,12962,12963,5,1219,0,0,12963,12966,5,16,0,0,12964,12967,3,
        1000,500,0,12965,12967,5,1219,0,0,12966,12964,1,0,0,0,12966,12965,
        1,0,0,0,12967,1099,1,0,0,0,12968,12969,3,1000,500,0,12969,12970,
        5,16,0,0,12970,12971,3,1000,500,0,12971,12974,1,0,0,0,12972,12973,
        5,129,0,0,12973,12975,3,1000,500,0,12974,12972,1,0,0,0,12974,12975,
        1,0,0,0,12975,1101,1,0,0,0,12976,12977,5,268,0,0,12977,12980,5,873,
        0,0,12978,12979,7,8,0,0,12979,12981,5,1016,0,0,12980,12978,1,0,0,
        0,12980,12981,1,0,0,0,12981,12984,1,0,0,0,12982,12984,5,1016,0,0,
        12983,12976,1,0,0,0,12983,12982,1,0,0,0,12984,1103,1,0,0,0,12985,
        12994,3,1000,500,0,12986,12987,5,236,0,0,12987,12988,5,1224,0,0,
        12988,12989,3,762,381,0,12989,12990,5,577,0,0,12990,12991,5,457,
        0,0,12991,12992,5,1224,0,0,12992,12993,3,762,381,0,12993,12995,1,
        0,0,0,12994,12986,1,0,0,0,12994,12995,1,0,0,0,12995,13005,1,0,0,
        0,12996,12997,3,1000,500,0,12997,12998,5,236,0,0,12998,12999,5,1224,
        0,0,12999,13000,3,762,381,0,13000,13005,1,0,0,0,13001,13002,5,236,
        0,0,13002,13003,5,1224,0,0,13003,13005,3,762,381,0,13004,12985,1,
        0,0,0,13004,12996,1,0,0,0,13004,13001,1,0,0,0,13005,1105,1,0,0,0,
        13006,13007,5,295,0,0,13007,13009,5,1213,0,0,13008,13010,3,1112,
        556,0,13009,13008,1,0,0,0,13009,13010,1,0,0,0,13010,13012,1,0,0,
        0,13011,13013,3,1114,557,0,13012,13011,1,0,0,0,13012,13013,1,0,0,
        0,13013,13015,1,0,0,0,13014,13016,3,1116,558,0,13015,13014,1,0,0,
        0,13015,13016,1,0,0,0,13016,13017,1,0,0,0,13017,13018,5,1214,0,0,
        13018,1107,1,0,0,0,13019,13020,5,295,0,0,13020,13022,5,1213,0,0,
        13021,13023,3,1112,556,0,13022,13021,1,0,0,0,13022,13023,1,0,0,0,
        13023,13024,1,0,0,0,13024,13025,3,1114,557,0,13025,13026,5,1214,
        0,0,13026,1109,1,0,0,0,13027,13028,5,295,0,0,13028,13030,5,1213,
        0,0,13029,13031,3,1112,556,0,13030,13029,1,0,0,0,13030,13031,1,0,
        0,0,13031,13032,1,0,0,0,13032,13034,3,1114,557,0,13033,13035,3,1152,
        576,0,13034,13033,1,0,0,0,13034,13035,1,0,0,0,13035,13036,1,0,0,
        0,13036,13037,5,1214,0,0,13037,1111,1,0,0,0,13038,13039,5,840,0,
        0,13039,13040,5,42,0,0,13040,13045,3,1000,500,0,13041,13042,5,1208,
        0,0,13042,13044,3,1000,500,0,13043,13041,1,0,0,0,13044,13047,1,0,
        0,0,13045,13043,1,0,0,0,13045,13046,1,0,0,0,13046,1113,1,0,0,0,13047,
        13045,1,0,0,0,13048,13049,5,291,0,0,13049,13050,5,42,0,0,13050,13055,
        3,992,496,0,13051,13052,5,1208,0,0,13052,13054,3,992,496,0,13053,
        13051,1,0,0,0,13054,13057,1,0,0,0,13055,13053,1,0,0,0,13055,13056,
        1,0,0,0,13056,13061,1,0,0,0,13057,13055,1,0,0,0,13058,13059,5,884,
        0,0,13059,13060,5,470,0,0,13060,13062,3,998,499,0,13061,13058,1,
        0,0,0,13061,13062,1,0,0,0,13062,1115,1,0,0,0,13063,13148,5,364,0,
        0,13064,13065,5,1013,0,0,13065,13149,5,858,0,0,13066,13067,3,1150,
        575,0,13067,13068,5,858,0,0,13068,13149,1,0,0,0,13069,13070,5,93,
        0,0,13070,13149,5,361,0,0,13071,13146,5,35,0,0,13072,13073,5,1013,
        0,0,13073,13074,5,858,0,0,13074,13075,5,16,0,0,13075,13076,5,1013,
        0,0,13076,13147,5,675,0,0,13077,13078,5,1013,0,0,13078,13079,5,858,
        0,0,13079,13080,5,16,0,0,13080,13081,3,1150,575,0,13081,13082,5,
        858,0,0,13082,13147,1,0,0,0,13083,13084,5,1013,0,0,13084,13085,5,
        858,0,0,13085,13086,5,16,0,0,13086,13087,5,93,0,0,13087,13147,5,
        361,0,0,13088,13089,5,1013,0,0,13089,13090,5,858,0,0,13090,13091,
        5,16,0,0,13091,13092,3,1150,575,0,13092,13093,5,675,0,0,13093,13147,
        1,0,0,0,13094,13095,3,1150,575,0,13095,13096,5,858,0,0,13096,13097,
        5,16,0,0,13097,13098,5,1013,0,0,13098,13099,5,675,0,0,13099,13147,
        1,0,0,0,13100,13101,3,1150,575,0,13101,13102,5,858,0,0,13102,13103,
        5,16,0,0,13103,13104,3,1150,575,0,13104,13105,5,858,0,0,13105,13147,
        1,0,0,0,13106,13107,3,1150,575,0,13107,13108,5,858,0,0,13108,13109,
        5,16,0,0,13109,13110,5,93,0,0,13110,13111,5,361,0,0,13111,13147,
        1,0,0,0,13112,13113,3,1150,575,0,13113,13114,5,858,0,0,13114,13115,
        5,16,0,0,13115,13116,3,1150,575,0,13116,13117,5,675,0,0,13117,13147,
        1,0,0,0,13118,13119,5,93,0,0,13119,13120,5,361,0,0,13120,13121,5,
        16,0,0,13121,13122,5,1013,0,0,13122,13147,5,675,0,0,13123,13124,
        5,93,0,0,13124,13125,5,361,0,0,13125,13126,5,16,0,0,13126,13127,
        5,93,0,0,13127,13147,5,361,0,0,13128,13129,5,93,0,0,13129,13130,
        5,361,0,0,13130,13131,5,16,0,0,13131,13132,3,1150,575,0,13132,13133,
        5,675,0,0,13133,13147,1,0,0,0,13134,13135,3,1150,575,0,13135,13136,
        5,675,0,0,13136,13137,5,16,0,0,13137,13138,5,1013,0,0,13138,13139,
        5,675,0,0,13139,13147,1,0,0,0,13140,13141,3,1150,575,0,13141,13142,
        5,675,0,0,13142,13143,5,16,0,0,13143,13144,3,1150,575,0,13144,13145,
        5,675,0,0,13145,13147,1,0,0,0,13146,13072,1,0,0,0,13146,13077,1,
        0,0,0,13146,13083,1,0,0,0,13146,13088,1,0,0,0,13146,13094,1,0,0,
        0,13146,13100,1,0,0,0,13146,13106,1,0,0,0,13146,13112,1,0,0,0,13146,
        13118,1,0,0,0,13146,13123,1,0,0,0,13146,13128,1,0,0,0,13146,13134,
        1,0,0,0,13146,13140,1,0,0,0,13147,13149,1,0,0,0,13148,13064,1,0,
        0,0,13148,13066,1,0,0,0,13148,13069,1,0,0,0,13148,13071,1,0,0,0,
        13149,1117,1,0,0,0,13150,13155,3,1000,500,0,13151,13152,5,1213,0,
        0,13152,13153,3,738,369,0,13153,13154,5,1214,0,0,13154,13156,1,0,
        0,0,13155,13151,1,0,0,0,13155,13156,1,0,0,0,13156,13159,1,0,0,0,
        13157,13158,5,20,0,0,13158,13160,3,812,406,0,13159,13157,1,0,0,0,
        13159,13160,1,0,0,0,13160,1119,1,0,0,0,13161,13164,5,845,0,0,13162,
        13163,5,42,0,0,13163,13165,5,459,0,0,13164,13162,1,0,0,0,13164,13165,
        1,0,0,0,13165,13175,1,0,0,0,13166,13176,3,788,394,0,13167,13172,
        3,1122,561,0,13168,13169,5,1208,0,0,13169,13171,3,1122,561,0,13170,
        13168,1,0,0,0,13171,13174,1,0,0,0,13172,13170,1,0,0,0,13172,13173,
        1,0,0,0,13173,13176,1,0,0,0,13174,13172,1,0,0,0,13175,13166,1,0,
        0,0,13175,13167,1,0,0,0,13176,1121,1,0,0,0,13177,13178,3,788,394,
        0,13178,13179,5,20,0,0,13179,13180,3,814,407,0,13180,1123,1,0,0,
        0,13181,13182,5,1044,0,0,13182,13183,5,1213,0,0,13183,13188,3,1126,
        563,0,13184,13185,5,1208,0,0,13185,13187,3,1126,563,0,13186,13184,
        1,0,0,0,13187,13190,1,0,0,0,13188,13186,1,0,0,0,13188,13189,1,0,
        0,0,13189,13191,1,0,0,0,13190,13188,1,0,0,0,13191,13192,5,1214,0,
        0,13192,1125,1,0,0,0,13193,13196,3,788,394,0,13194,13195,5,20,0,
        0,13195,13197,3,812,406,0,13196,13194,1,0,0,0,13196,13197,1,0,0,
        0,13197,1127,1,0,0,0,13198,13201,3,788,394,0,13199,13200,5,20,0,
        0,13200,13202,3,812,406,0,13201,13199,1,0,0,0,13201,13202,1,0,0,
        0,13202,1129,1,0,0,0,13203,13205,3,1000,500,0,13204,13206,3,1146,
        573,0,13205,13204,1,0,0,0,13205,13206,1,0,0,0,13206,1131,1,0,0,0,
        13207,13208,5,1051,0,0,13208,13209,5,1213,0,0,13209,13214,3,1134,
        567,0,13210,13211,5,1208,0,0,13211,13213,3,1134,567,0,13212,13210,
        1,0,0,0,13213,13216,1,0,0,0,13214,13212,1,0,0,0,13214,13215,1,0,
        0,0,13215,13217,1,0,0,0,13216,13214,1,0,0,0,13217,13218,5,1214,0,
        0,13218,1133,1,0,0,0,13219,13220,3,762,381,0,13220,13221,5,20,0,
        0,13221,13222,3,812,406,0,13222,13228,1,0,0,0,13223,13224,5,111,
        0,0,13224,13228,3,762,381,0,13225,13226,5,268,0,0,13226,13228,5,
        111,0,0,13227,13219,1,0,0,0,13227,13223,1,0,0,0,13227,13225,1,0,
        0,0,13228,1135,1,0,0,0,13229,13235,5,579,0,0,13230,13231,3,788,394,
        0,13231,13232,5,159,0,0,13232,13233,5,829,0,0,13233,13236,1,0,0,
        0,13234,13236,3,1138,569,0,13235,13230,1,0,0,0,13235,13234,1,0,0,
        0,13236,13247,1,0,0,0,13237,13243,5,1208,0,0,13238,13239,3,788,394,
        0,13239,13240,5,159,0,0,13240,13241,5,829,0,0,13241,13244,1,0,0,
        0,13242,13244,3,1138,569,0,13243,13238,1,0,0,0,13243,13242,1,0,0,
        0,13244,13246,1,0,0,0,13245,13237,1,0,0,0,13246,13249,1,0,0,0,13247,
        13245,1,0,0,0,13247,13248,1,0,0,0,13248,1137,1,0,0,0,13249,13247,
        1,0,0,0,13250,13251,3,792,396,0,13251,13254,3,692,346,0,13252,13253,
        5,1082,0,0,13253,13255,3,762,381,0,13254,13252,1,0,0,0,13254,13255,
        1,0,0,0,13255,13258,1,0,0,0,13256,13257,5,111,0,0,13257,13259,3,
        758,379,0,13258,13256,1,0,0,0,13258,13259,1,0,0,0,13259,1139,1,0,
        0,0,13260,13261,5,653,0,0,13261,13262,3,762,381,0,13262,1141,1,0,
        0,0,13263,13264,7,143,0,0,13264,13265,5,286,0,0,13265,13266,5,649,
        0,0,13266,1143,1,0,0,0,13267,13268,5,889,0,0,13268,13269,7,144,0,
        0,13269,1145,1,0,0,0,13270,13278,5,289,0,0,13271,13272,7,145,0,0,
        13272,13273,5,286,0,0,13273,13279,5,274,0,0,13274,13275,5,794,0,
        0,13275,13276,5,286,0,0,13276,13277,5,268,0,0,13277,13279,5,593,
        0,0,13278,13271,1,0,0,0,13278,13274,1,0,0,0,13279,1147,1,0,0,0,13280,
        13281,7,146,0,0,13281,13282,5,806,0,0,13282,1149,1,0,0,0,13283,13284,
        3,768,384,0,13284,1151,1,0,0,0,13285,13286,5,474,0,0,13286,13287,
        5,986,0,0,13287,13288,7,147,0,0,13288,1153,1,0,0,0,13289,13290,5,
        854,0,0,13290,13291,5,1213,0,0,13291,13292,3,1156,578,0,13292,13294,
        5,1214,0,0,13293,13295,3,1158,579,0,13294,13293,1,0,0,0,13294,13295,
        1,0,0,0,13295,13297,1,0,0,0,13296,13298,5,20,0,0,13297,13296,1,0,
        0,0,13297,13298,1,0,0,0,13298,13299,1,0,0,0,13299,13301,3,812,406,
        0,13300,13302,3,1186,593,0,13301,13300,1,0,0,0,13301,13302,1,0,0,
        0,13302,1155,1,0,0,0,13303,13308,3,1160,580,0,13304,13305,5,1208,
        0,0,13305,13307,3,1160,580,0,13306,13304,1,0,0,0,13307,13310,1,0,
        0,0,13308,13306,1,0,0,0,13308,13309,1,0,0,0,13309,13311,1,0,0,0,
        13310,13308,1,0,0,0,13311,13312,5,159,0,0,13312,13313,3,1162,581,
        0,13313,1157,1,0,0,0,13314,13315,5,474,0,0,13315,13320,3,1164,582,
        0,13316,13317,5,1208,0,0,13317,13319,3,1164,582,0,13318,13316,1,
        0,0,0,13319,13322,1,0,0,0,13320,13318,1,0,0,0,13320,13321,1,0,0,
        0,13321,1159,1,0,0,0,13322,13320,1,0,0,0,13323,13328,3,1024,512,
        0,13324,13326,5,20,0,0,13325,13324,1,0,0,0,13325,13326,1,0,0,0,13326,
        13327,1,0,0,0,13327,13329,3,812,406,0,13328,13325,1,0,0,0,13328,
        13329,1,0,0,0,13329,1161,1,0,0,0,13330,13331,3,788,394,0,13331,13332,
        5,190,0,0,13332,13333,5,1213,0,0,13333,13338,3,1166,583,0,13334,
        13335,5,1208,0,0,13335,13337,3,1166,583,0,13336,13334,1,0,0,0,13337,
        13340,1,0,0,0,13338,13336,1,0,0,0,13338,13339,1,0,0,0,13339,13341,
        1,0,0,0,13340,13338,1,0,0,0,13341,13342,5,1214,0,0,13342,13374,1,
        0,0,0,13343,13344,3,1186,593,0,13344,13345,5,190,0,0,13345,13346,
        5,1213,0,0,13346,13351,3,1166,583,0,13347,13348,5,1208,0,0,13348,
        13350,3,1166,583,0,13349,13347,1,0,0,0,13350,13353,1,0,0,0,13351,
        13349,1,0,0,0,13351,13352,1,0,0,0,13352,13354,1,0,0,0,13353,13351,
        1,0,0,0,13354,13355,5,1214,0,0,13355,13374,1,0,0,0,13356,13357,3,
        1186,593,0,13357,13358,5,190,0,0,13358,13359,5,1213,0,0,13359,13364,
        3,1168,584,0,13360,13361,5,1208,0,0,13361,13363,3,1168,584,0,13362,
        13360,1,0,0,0,13363,13366,1,0,0,0,13364,13362,1,0,0,0,13364,13365,
        1,0,0,0,13365,13367,1,0,0,0,13366,13364,1,0,0,0,13367,13368,5,1214,
        0,0,13368,13374,1,0,0,0,13369,13370,3,788,394,0,13370,13371,5,190,
        0,0,13371,13372,3,1188,594,0,13372,13374,1,0,0,0,13373,13330,1,0,
        0,0,13373,13343,1,0,0,0,13373,13356,1,0,0,0,13373,13369,1,0,0,0,
        13374,1163,1,0,0,0,13375,13377,3,1024,512,0,13376,13378,5,20,0,0,
        13377,13376,1,0,0,0,13377,13378,1,0,0,0,13378,13379,1,0,0,0,13379,
        13380,3,812,406,0,13380,1165,1,0,0,0,13381,13386,3,1000,500,0,13382,
        13384,5,20,0,0,13383,13382,1,0,0,0,13383,13384,1,0,0,0,13384,13385,
        1,0,0,0,13385,13387,3,812,406,0,13386,13383,1,0,0,0,13386,13387,
        1,0,0,0,13387,1167,1,0,0,0,13388,13390,3,1184,592,0,13389,13391,
        5,20,0,0,13390,13389,1,0,0,0,13390,13391,1,0,0,0,13391,13392,1,0,
        0,0,13392,13393,3,812,406,0,13393,1169,1,0,0,0,13394,13397,5,1017,
        0,0,13395,13396,7,148,0,0,13396,13398,5,806,0,0,13397,13395,1,0,
        0,0,13397,13398,1,0,0,0,13398,13399,1,0,0,0,13399,13400,5,1213,0,
        0,13400,13401,3,1172,586,0,13401,13403,5,1214,0,0,13402,13404,5,
        20,0,0,13403,13402,1,0,0,0,13403,13404,1,0,0,0,13404,13405,1,0,0,
        0,13405,13407,3,812,406,0,13406,13408,3,1186,593,0,13407,13406,1,
        0,0,0,13407,13408,1,0,0,0,13408,1171,1,0,0,0,13409,13410,3,788,394,
        0,13410,13411,5,159,0,0,13411,13412,3,788,394,0,13412,13413,5,190,
        0,0,13413,13414,5,1213,0,0,13414,13419,3,1174,587,0,13415,13416,
        5,1208,0,0,13416,13418,3,1174,587,0,13417,13415,1,0,0,0,13418,13421,
        1,0,0,0,13419,13417,1,0,0,0,13419,13420,1,0,0,0,13420,13422,1,0,
        0,0,13421,13419,1,0,0,0,13422,13423,5,1214,0,0,13423,13440,1,0,0,
        0,13424,13425,3,1186,593,0,13425,13426,5,159,0,0,13426,13427,3,788,
        394,0,13427,13428,5,190,0,0,13428,13429,5,1213,0,0,13429,13434,3,
        1176,588,0,13430,13431,5,1208,0,0,13431,13433,3,1176,588,0,13432,
        13430,1,0,0,0,13433,13436,1,0,0,0,13434,13432,1,0,0,0,13434,13435,
        1,0,0,0,13435,13437,1,0,0,0,13436,13434,1,0,0,0,13437,13438,5,1214,
        0,0,13438,13440,1,0,0,0,13439,13409,1,0,0,0,13439,13424,1,0,0,0,
        13440,1173,1,0,0,0,13441,13446,3,788,394,0,13442,13444,5,20,0,0,
        13443,13442,1,0,0,0,13443,13444,1,0,0,0,13444,13445,1,0,0,0,13445,
        13447,3,758,379,0,13446,13443,1,0,0,0,13446,13447,1,0,0,0,13447,
        1175,1,0,0,0,13448,13453,3,1186,593,0,13449,13451,5,20,0,0,13450,
        13449,1,0,0,0,13450,13451,1,0,0,0,13451,13452,1,0,0,0,13452,13454,
        3,758,379,0,13453,13450,1,0,0,0,13453,13454,1,0,0,0,13454,1177,1,
        0,0,0,13455,13462,5,24,0,0,13456,13463,5,224,0,0,13457,13458,5,421,
        0,0,13458,13460,5,480,0,0,13459,13457,1,0,0,0,13459,13460,1,0,0,
        0,13460,13461,1,0,0,0,13461,13463,3,1000,500,0,13462,13456,1,0,0,
        0,13462,13459,1,0,0,0,13463,1179,1,0,0,0,13464,13467,3,1188,594,
        0,13465,13467,3,1182,591,0,13466,13464,1,0,0,0,13466,13465,1,0,0,
        0,13467,1181,1,0,0,0,13468,13469,5,1213,0,0,13469,13474,3,1000,500,
        0,13470,13471,7,8,0,0,13471,13473,3,1000,500,0,13472,13470,1,0,0,
        0,13473,13476,1,0,0,0,13474,13472,1,0,0,0,13474,13475,1,0,0,0,13475,
        13477,1,0,0,0,13476,13474,1,0,0,0,13477,13478,5,1214,0,0,13478,1183,
        1,0,0,0,13479,13480,5,1213,0,0,13480,13485,3,1000,500,0,13481,13482,
        5,1208,0,0,13482,13484,3,1000,500,0,13483,13481,1,0,0,0,13484,13487,
        1,0,0,0,13485,13483,1,0,0,0,13485,13486,1,0,0,0,13486,13488,1,0,
        0,0,13487,13485,1,0,0,0,13488,13489,5,1214,0,0,13489,1185,1,0,0,
        0,13490,13491,5,1213,0,0,13491,13496,3,788,394,0,13492,13493,5,1208,
        0,0,13493,13495,3,788,394,0,13494,13492,1,0,0,0,13495,13498,1,0,
        0,0,13496,13494,1,0,0,0,13496,13497,1,0,0,0,13497,13499,1,0,0,0,
        13498,13496,1,0,0,0,13499,13500,5,1214,0,0,13500,1187,1,0,0,0,13501,
        13503,5,1213,0,0,13502,13504,3,1212,606,0,13503,13502,1,0,0,0,13503,
        13504,1,0,0,0,13504,13505,1,0,0,0,13505,13506,3,838,419,0,13506,
        13507,5,1214,0,0,13507,1189,1,0,0,0,13508,13509,3,792,396,0,13509,
        13510,3,692,346,0,13510,1191,1,0,0,0,13511,13512,5,1207,0,0,13512,
        13513,3,814,407,0,13513,1193,1,0,0,0,13514,13515,3,1192,596,0,13515,
        13516,5,1209,0,0,13516,13517,3,792,396,0,13517,1195,1,0,0,0,13518,
        13519,7,149,0,0,13519,13520,3,816,408,0,13520,1197,1,0,0,0,13521,
        13522,3,768,384,0,13522,13523,5,1208,0,0,13523,13524,3,768,384,0,
        13524,1199,1,0,0,0,13525,13543,5,1224,0,0,13526,13543,5,135,0,0,
        13527,13543,5,1225,0,0,13528,13543,5,1226,0,0,13529,13543,5,264,
        0,0,13530,13531,5,272,0,0,13531,13543,5,1224,0,0,13532,13533,5,1227,
        0,0,13533,13543,5,1229,0,0,13534,13543,5,1227,0,0,13535,13543,5,
        234,0,0,13536,13543,5,1228,0,0,13537,13543,5,216,0,0,13538,13543,
        5,1229,0,0,13539,13543,5,176,0,0,13540,13543,5,1230,0,0,13541,13543,
        5,168,0,0,13542,13525,1,0,0,0,13542,13526,1,0,0,0,13542,13527,1,
        0,0,0,13542,13528,1,0,0,0,13542,13529,1,0,0,0,13542,13530,1,0,0,
        0,13542,13532,1,0,0,0,13542,13534,1,0,0,0,13542,13535,1,0,0,0,13542,
        13536,1,0,0,0,13542,13537,1,0,0,0,13542,13538,1,0,0,0,13542,13539,
        1,0,0,0,13542,13540,1,0,0,0,13542,13541,1,0,0,0,13543,1201,1,0,0,
        0,13544,13545,7,150,0,0,13545,1203,1,0,0,0,13546,13551,3,1206,603,
        0,13547,13551,3,1212,606,0,13548,13551,3,1220,610,0,13549,13551,
        3,1224,612,0,13550,13546,1,0,0,0,13550,13547,1,0,0,0,13550,13548,
        1,0,0,0,13550,13549,1,0,0,0,13551,1205,1,0,0,0,13552,13554,3,1208,
        604,0,13553,13552,1,0,0,0,13554,13555,1,0,0,0,13555,13553,1,0,0,
        0,13555,13556,1,0,0,0,13556,1207,1,0,0,0,13557,13571,7,151,0,0,13558,
        13560,5,102,0,0,13559,13558,1,0,0,0,13559,13560,1,0,0,0,13560,13561,
        1,0,0,0,13561,13572,3,804,402,0,13562,13564,5,406,0,0,13563,13562,
        1,0,0,0,13563,13564,1,0,0,0,13564,13565,1,0,0,0,13565,13572,3,796,
        398,0,13566,13568,5,468,0,0,13567,13566,1,0,0,0,13567,13568,1,0,
        0,0,13568,13569,1,0,0,0,13569,13572,3,796,398,0,13570,13572,5,361,
        0,0,13571,13559,1,0,0,0,13571,13563,1,0,0,0,13571,13567,1,0,0,0,
        13571,13570,1,0,0,0,13572,13574,1,0,0,0,13573,13575,7,152,0,0,13574,
        13573,1,0,0,0,13574,13575,1,0,0,0,13575,13576,1,0,0,0,13576,13578,
        3,1210,605,0,13577,13579,5,252,0,0,13578,13577,1,0,0,0,13578,13579,
        1,0,0,0,13579,13581,1,0,0,0,13580,13582,5,273,0,0,13581,13580,1,
        0,0,0,13581,13582,1,0,0,0,13582,1209,1,0,0,0,13583,13595,5,490,0,
        0,13584,13595,7,153,0,0,13585,13595,5,923,0,0,13586,13588,5,877,
        0,0,13587,13589,5,297,0,0,13588,13587,1,0,0,0,13588,13589,1,0,0,
        0,13589,13595,1,0,0,0,13590,13595,5,1041,0,0,13591,13595,5,571,0,
        0,13592,13593,5,742,0,0,13593,13595,5,1067,0,0,13594,13583,1,0,0,
        0,13594,13584,1,0,0,0,13594,13585,1,0,0,0,13594,13586,1,0,0,0,13594,
        13590,1,0,0,0,13594,13591,1,0,0,0,13594,13592,1,0,0,0,13595,1211,
        1,0,0,0,13596,13597,5,474,0,0,13597,13602,3,1214,607,0,13598,13599,
        5,1208,0,0,13599,13601,3,1214,607,0,13600,13598,1,0,0,0,13601,13604,
        1,0,0,0,13602,13600,1,0,0,0,13602,13603,1,0,0,0,13603,1213,1,0,0,
        0,13604,13602,1,0,0,0,13605,13608,3,1216,608,0,13606,13608,3,1218,
        609,0,13607,13605,1,0,0,0,13607,13606,1,0,0,0,13608,1215,1,0,0,0,
        13609,13611,3,812,406,0,13610,13612,3,1186,593,0,13611,13610,1,0,
        0,0,13611,13612,1,0,0,0,13612,13613,1,0,0,0,13613,13614,5,20,0,0,
        13614,13615,3,1188,594,0,13615,1217,1,0,0,0,13616,13617,5,324,0,
        0,13617,13619,3,812,406,0,13618,13620,3,1186,593,0,13619,13618,1,
        0,0,0,13619,13620,1,0,0,0,13620,13621,1,0,0,0,13621,13622,5,20,0,
        0,13622,13623,5,1213,0,0,13623,13627,3,838,419,0,13624,13625,5,447,
        0,0,13625,13626,5,13,0,0,13626,13628,3,840,420,0,13627,13624,1,0,
        0,0,13628,13629,1,0,0,0,13629,13627,1,0,0,0,13629,13630,1,0,0,0,
        13630,13631,1,0,0,0,13631,13632,5,1214,0,0,13632,1219,1,0,0,0,13633,
        13634,5,457,0,0,13634,13635,5,1213,0,0,13635,13640,3,1222,611,0,
        13636,13637,5,1208,0,0,13637,13639,3,1222,611,0,13638,13636,1,0,
        0,0,13639,13642,1,0,0,0,13640,13638,1,0,0,0,13640,13641,1,0,0,0,
        13641,13643,1,0,0,0,13642,13640,1,0,0,0,13643,13644,5,1214,0,0,13644,
        1221,1,0,0,0,13645,13646,3,814,407,0,13646,13650,3,692,346,0,13647,
        13649,3,714,357,0,13648,13647,1,0,0,0,13649,13652,1,0,0,0,13650,
        13648,1,0,0,0,13650,13651,1,0,0,0,13651,13662,1,0,0,0,13652,13650,
        1,0,0,0,13653,13660,5,20,0,0,13654,13657,5,112,0,0,13655,13656,5,
        42,0,0,13656,13658,5,789,0,0,13657,13655,1,0,0,0,13657,13658,1,0,
        0,0,13658,13661,1,0,0,0,13659,13661,5,225,0,0,13660,13654,1,0,0,
        0,13660,13659,1,0,0,0,13661,13663,1,0,0,0,13662,13653,1,0,0,0,13662,
        13663,1,0,0,0,13663,1223,1,0,0,0,13664,13666,7,154,0,0,13665,13664,
        1,0,0,0,13665,13666,1,0,0,0,13666,13667,1,0,0,0,13667,13673,5,150,
        0,0,13668,13669,5,190,0,0,13669,13671,5,1042,0,0,13670,13672,5,795,
        0,0,13671,13670,1,0,0,0,13671,13672,1,0,0,0,13672,13674,1,0,0,0,
        13673,13668,1,0,0,0,13673,13674,1,0,0,0,13674,1225,1,0,0,0,13675,
        13679,3,1228,614,0,13676,13679,3,1230,615,0,13677,13679,3,1248,624,
        0,13678,13675,1,0,0,0,13678,13676,1,0,0,0,13678,13677,1,0,0,0,13679,
        1227,1,0,0,0,13680,13681,5,171,0,0,13681,13682,3,804,402,0,13682,
        13683,5,426,0,0,13683,13684,3,804,402,0,13684,1229,1,0,0,0,13685,
        13694,3,1234,617,0,13686,13694,3,1232,616,0,13687,13694,3,1236,618,
        0,13688,13694,3,1238,619,0,13689,13694,3,1240,620,0,13690,13694,
        3,1242,621,0,13691,13694,3,1244,622,0,13692,13694,3,1246,623,0,13693,
        13685,1,0,0,0,13693,13686,1,0,0,0,13693,13687,1,0,0,0,13693,13688,
        1,0,0,0,13693,13689,1,0,0,0,13693,13690,1,0,0,0,13693,13691,1,0,
        0,0,13693,13692,1,0,0,0,13694,1231,1,0,0,0,13695,13718,5,172,0,0,
        13696,13708,5,255,0,0,13697,13709,5,309,0,0,13698,13699,5,41,0,0,
        13699,13700,5,272,0,0,13700,13705,3,1278,639,0,13701,13702,5,1208,
        0,0,13702,13704,3,1278,639,0,13703,13701,1,0,0,0,13704,13707,1,0,
        0,0,13705,13703,1,0,0,0,13705,13706,1,0,0,0,13706,13709,1,0,0,0,
        13707,13705,1,0,0,0,13708,13697,1,0,0,0,13708,13698,1,0,0,0,13708,
        13709,1,0,0,0,13709,13719,1,0,0,0,13710,13715,3,1278,639,0,13711,
        13712,5,1208,0,0,13712,13714,3,1278,639,0,13713,13711,1,0,0,0,13714,
        13717,1,0,0,0,13715,13713,1,0,0,0,13715,13716,1,0,0,0,13716,13719,
        1,0,0,0,13717,13715,1,0,0,0,13718,13696,1,0,0,0,13718,13710,1,0,
        0,0,13719,13720,1,0,0,0,13720,13743,5,426,0,0,13721,13726,3,1280,
        640,0,13722,13723,5,1208,0,0,13723,13725,3,1280,640,0,13724,13722,
        1,0,0,0,13725,13728,1,0,0,0,13726,13724,1,0,0,0,13726,13727,1,0,
        0,0,13727,13731,1,0,0,0,13728,13726,1,0,0,0,13729,13731,5,313,0,
        0,13730,13721,1,0,0,0,13730,13729,1,0,0,0,13731,13733,1,0,0,0,13732,
        13734,3,1288,644,0,13733,13732,1,0,0,0,13733,13734,1,0,0,0,13734,
        13744,1,0,0,0,13735,13740,3,808,404,0,13736,13737,5,1208,0,0,13737,
        13739,3,808,404,0,13738,13736,1,0,0,0,13739,13742,1,0,0,0,13740,
        13738,1,0,0,0,13740,13741,1,0,0,0,13741,13744,1,0,0,0,13742,13740,
        1,0,0,0,13743,13730,1,0,0,0,13743,13735,1,0,0,0,13744,1233,1,0,0,
        0,13745,13746,5,172,0,0,13746,13747,3,808,404,0,13747,13748,5,1208,
        0,0,13748,13749,3,808,404,0,13749,13750,1,0,0,0,13750,13751,5,426,
        0,0,13751,13756,3,808,404,0,13752,13753,5,1208,0,0,13753,13755,3,
        808,404,0,13754,13752,1,0,0,0,13755,13758,1,0,0,0,13756,13754,1,
        0,0,0,13756,13757,1,0,0,0,13757,13760,1,0,0,0,13758,13756,1,0,0,
        0,13759,13761,3,1286,643,0,13760,13759,1,0,0,0,13760,13761,1,0,0,
        0,13761,1235,1,0,0,0,13762,13820,5,172,0,0,13763,13765,5,13,0,0,
        13764,13766,5,309,0,0,13765,13764,1,0,0,0,13765,13766,1,0,0,0,13766,
        13781,1,0,0,0,13767,13768,5,13,0,0,13768,13770,5,41,0,0,13769,13767,
        1,0,0,0,13769,13770,1,0,0,0,13770,13771,1,0,0,0,13771,13776,3,1266,
        633,0,13772,13773,5,1208,0,0,13773,13775,3,1266,633,0,13774,13772,
        1,0,0,0,13775,13778,1,0,0,0,13776,13774,1,0,0,0,13776,13777,1,0,
        0,0,13777,13781,1,0,0,0,13778,13776,1,0,0,0,13779,13781,5,91,0,0,
        13780,13763,1,0,0,0,13780,13769,1,0,0,0,13780,13779,1,0,0,0,13781,
        13782,1,0,0,0,13782,13783,5,286,0,0,13783,13821,3,1268,634,0,13784,
        13789,3,1270,635,0,13785,13786,5,1208,0,0,13786,13788,3,1270,635,
        0,13787,13785,1,0,0,0,13788,13791,1,0,0,0,13789,13787,1,0,0,0,13789,
        13790,1,0,0,0,13790,13821,1,0,0,0,13791,13789,1,0,0,0,13792,13797,
        3,1272,636,0,13793,13794,5,1208,0,0,13794,13796,3,1272,636,0,13795,
        13793,1,0,0,0,13796,13799,1,0,0,0,13797,13795,1,0,0,0,13797,13798,
        1,0,0,0,13798,13821,1,0,0,0,13799,13797,1,0,0,0,13800,13805,3,1274,
        637,0,13801,13802,5,1208,0,0,13802,13804,3,1272,636,0,13803,13801,
        1,0,0,0,13804,13807,1,0,0,0,13805,13803,1,0,0,0,13805,13806,1,0,
        0,0,13806,13821,1,0,0,0,13807,13805,1,0,0,0,13808,13813,3,1276,638,
        0,13809,13810,5,1208,0,0,13810,13812,3,1276,638,0,13811,13809,1,
        0,0,0,13812,13815,1,0,0,0,13813,13811,1,0,0,0,13813,13814,1,0,0,
        0,13814,13821,1,0,0,0,13815,13813,1,0,0,0,13816,13817,5,74,0,0,13817,
        13821,5,536,0,0,13818,13819,5,74,0,0,13819,13821,5,1078,0,0,13820,
        13780,1,0,0,0,13820,13784,1,0,0,0,13820,13792,1,0,0,0,13820,13800,
        1,0,0,0,13820,13808,1,0,0,0,13820,13816,1,0,0,0,13820,13818,1,0,
        0,0,13821,13822,1,0,0,0,13822,13846,5,426,0,0,13823,13828,3,1280,
        640,0,13824,13825,5,1208,0,0,13825,13827,3,1280,640,0,13826,13824,
        1,0,0,0,13827,13830,1,0,0,0,13828,13826,1,0,0,0,13828,13829,1,0,
        0,0,13829,13832,1,0,0,0,13830,13828,1,0,0,0,13831,13833,3,1288,644,
        0,13832,13831,1,0,0,0,13832,13833,1,0,0,0,13833,13847,1,0,0,0,13834,
        13836,5,313,0,0,13835,13837,3,1288,644,0,13836,13835,1,0,0,0,13836,
        13837,1,0,0,0,13837,13847,1,0,0,0,13838,13843,3,808,404,0,13839,
        13840,5,1208,0,0,13840,13842,3,808,404,0,13841,13839,1,0,0,0,13842,
        13845,1,0,0,0,13843,13841,1,0,0,0,13843,13844,1,0,0,0,13844,13847,
        1,0,0,0,13845,13843,1,0,0,0,13846,13823,1,0,0,0,13846,13834,1,0,
        0,0,13846,13838,1,0,0,0,13847,1237,1,0,0,0,13848,13849,5,172,0,0,
        13849,13850,5,73,0,0,13850,13851,5,984,0,0,13851,13854,3,806,403,
        0,13852,13853,5,474,0,0,13853,13855,5,1007,0,0,13854,13852,1,0,0,
        0,13854,13855,1,0,0,0,13855,13856,1,0,0,0,13856,13908,5,426,0,0,
        13857,13862,3,806,403,0,13858,13859,5,1208,0,0,13859,13861,3,806,
        403,0,13860,13858,1,0,0,0,13861,13864,1,0,0,0,13862,13860,1,0,0,
        0,13862,13863,1,0,0,0,13863,13883,1,0,0,0,13864,13862,1,0,0,0,13865,
        13866,5,474,0,0,13866,13867,5,357,0,0,13867,13872,3,808,404,0,13868,
        13869,5,1208,0,0,13869,13871,3,808,404,0,13870,13868,1,0,0,0,13871,
        13874,1,0,0,0,13872,13870,1,0,0,0,13872,13873,1,0,0,0,13873,13878,
        1,0,0,0,13874,13872,1,0,0,0,13875,13876,5,474,0,0,13876,13877,5,
        311,0,0,13877,13879,3,810,405,0,13878,13875,1,0,0,0,13878,13879,
        1,0,0,0,13879,13884,1,0,0,0,13880,13881,5,474,0,0,13881,13882,5,
        311,0,0,13882,13884,3,810,405,0,13883,13865,1,0,0,0,13883,13880,
        1,0,0,0,13884,13909,1,0,0,0,13885,13886,5,303,0,0,13886,13891,3,
        806,403,0,13887,13888,5,1208,0,0,13888,13890,3,806,403,0,13889,13887,
        1,0,0,0,13890,13893,1,0,0,0,13891,13889,1,0,0,0,13891,13892,1,0,
        0,0,13892,13906,1,0,0,0,13893,13891,1,0,0,0,13894,13895,5,474,0,
        0,13895,13896,5,357,0,0,13896,13901,3,808,404,0,13897,13898,5,1208,
        0,0,13898,13900,3,808,404,0,13899,13897,1,0,0,0,13900,13903,1,0,
        0,0,13901,13899,1,0,0,0,13901,13902,1,0,0,0,13902,13907,1,0,0,0,
        13903,13901,1,0,0,0,13904,13905,5,475,0,0,13905,13907,5,357,0,0,
        13906,13894,1,0,0,0,13906,13904,1,0,0,0,13907,13909,1,0,0,0,13908,
        13857,1,0,0,0,13908,13885,1,0,0,0,13909,1239,1,0,0,0,13910,13911,
        5,172,0,0,13911,13912,5,230,0,0,13912,13922,5,286,0,0,13913,13918,
        3,768,384,0,13914,13915,5,1208,0,0,13915,13917,3,768,384,0,13916,
        13914,1,0,0,0,13917,13920,1,0,0,0,13918,13916,1,0,0,0,13918,13919,
        1,0,0,0,13919,13923,1,0,0,0,13920,13918,1,0,0,0,13921,13923,5,13,
        0,0,13922,13913,1,0,0,0,13922,13921,1,0,0,0,13923,13935,1,0,0,0,
        13924,13925,5,20,0,0,13925,13936,5,111,0,0,13926,13927,7,155,0,0,
        13927,13932,3,806,403,0,13928,13929,5,1208,0,0,13929,13931,3,806,
        403,0,13930,13928,1,0,0,0,13931,13934,1,0,0,0,13932,13930,1,0,0,
        0,13932,13933,1,0,0,0,13933,13936,1,0,0,0,13934,13932,1,0,0,0,13935,
        13924,1,0,0,0,13935,13926,1,0,0,0,13936,13940,1,0,0,0,13937,13938,
        5,474,0,0,13938,13939,5,274,0,0,13939,13941,5,299,0,0,13940,13937,
        1,0,0,0,13940,13941,1,0,0,0,13941,1241,1,0,0,0,13942,13943,5,172,
        0,0,13943,13944,5,236,0,0,13944,13945,3,792,396,0,13945,13958,5,
        426,0,0,13946,13951,3,808,404,0,13947,13948,5,1208,0,0,13948,13950,
        3,808,404,0,13949,13947,1,0,0,0,13950,13953,1,0,0,0,13951,13949,
        1,0,0,0,13951,13952,1,0,0,0,13952,13955,1,0,0,0,13953,13951,1,0,
        0,0,13954,13956,3,1288,644,0,13955,13954,1,0,0,0,13955,13956,1,0,
        0,0,13956,13959,1,0,0,0,13957,13959,5,313,0,0,13958,13946,1,0,0,
        0,13958,13957,1,0,0,0,13959,1243,1,0,0,0,13960,13961,5,172,0,0,13961,
        13962,5,480,0,0,13962,13963,3,792,396,0,13963,13964,5,426,0,0,13964,
        13969,3,808,404,0,13965,13966,5,1208,0,0,13966,13968,3,808,404,0,
        13967,13965,1,0,0,0,13968,13971,1,0,0,0,13969,13967,1,0,0,0,13969,
        13970,1,0,0,0,13970,1245,1,0,0,0,13971,13969,1,0,0,0,13972,13973,
        5,172,0,0,13973,13974,5,480,0,0,13974,13975,5,297,0,0,13975,13976,
        5,426,0,0,13976,13981,3,806,403,0,13977,13978,5,1208,0,0,13978,13980,
        3,806,403,0,13979,13977,1,0,0,0,13980,13983,1,0,0,0,13981,13979,
        1,0,0,0,13981,13982,1,0,0,0,13982,1247,1,0,0,0,13983,13981,1,0,0,
        0,13984,13993,3,1250,625,0,13985,13993,3,1252,626,0,13986,13993,
        3,1254,627,0,13987,13993,3,1256,628,0,13988,13993,3,1258,629,0,13989,
        13993,3,1260,630,0,13990,13993,3,1262,631,0,13991,13993,3,1264,632,
        0,13992,13984,1,0,0,0,13992,13985,1,0,0,0,13992,13986,1,0,0,0,13992,
        13987,1,0,0,0,13992,13988,1,0,0,0,13992,13989,1,0,0,0,13992,13990,
        1,0,0,0,13992,13991,1,0,0,0,13993,1249,1,0,0,0,13994,13996,5,354,
        0,0,13995,13997,3,1290,645,0,13996,13995,1,0,0,0,13996,13997,1,0,
        0,0,13997,14020,1,0,0,0,13998,14010,5,255,0,0,13999,14011,5,309,
        0,0,14000,14001,5,41,0,0,14001,14002,5,272,0,0,14002,14007,3,1278,
        639,0,14003,14004,5,1208,0,0,14004,14006,3,1278,639,0,14005,14003,
        1,0,0,0,14006,14009,1,0,0,0,14007,14005,1,0,0,0,14007,14008,1,0,
        0,0,14008,14011,1,0,0,0,14009,14007,1,0,0,0,14010,13999,1,0,0,0,
        14010,14000,1,0,0,0,14010,14011,1,0,0,0,14011,14021,1,0,0,0,14012,
        14017,3,1278,639,0,14013,14014,5,1208,0,0,14014,14016,3,1278,639,
        0,14015,14013,1,0,0,0,14016,14019,1,0,0,0,14017,14015,1,0,0,0,14017,
        14018,1,0,0,0,14018,14021,1,0,0,0,14019,14017,1,0,0,0,14020,13998,
        1,0,0,0,14020,14012,1,0,0,0,14021,14022,1,0,0,0,14022,14032,7,155,
        0,0,14023,14028,3,1282,641,0,14024,14025,5,1208,0,0,14025,14027,
        3,1282,641,0,14026,14024,1,0,0,0,14027,14030,1,0,0,0,14028,14026,
        1,0,0,0,14028,14029,1,0,0,0,14029,14033,1,0,0,0,14030,14028,1,0,
        0,0,14031,14033,5,313,0,0,14032,14023,1,0,0,0,14032,14031,1,0,0,
        0,14033,1251,1,0,0,0,14034,14038,5,354,0,0,14035,14036,5,10,0,0,
        14036,14037,5,289,0,0,14037,14039,5,159,0,0,14038,14035,1,0,0,0,
        14038,14039,1,0,0,0,14039,14040,1,0,0,0,14040,14045,3,808,404,0,
        14041,14042,5,1208,0,0,14042,14044,3,808,404,0,14043,14041,1,0,0,
        0,14044,14047,1,0,0,0,14045,14043,1,0,0,0,14045,14046,1,0,0,0,14046,
        14048,1,0,0,0,14047,14045,1,0,0,0,14048,14049,7,155,0,0,14049,14054,
        3,808,404,0,14050,14051,5,1208,0,0,14051,14053,3,808,404,0,14052,
        14050,1,0,0,0,14053,14056,1,0,0,0,14054,14052,1,0,0,0,14054,14055,
        1,0,0,0,14055,1253,1,0,0,0,14056,14054,1,0,0,0,14057,14059,5,354,
        0,0,14058,14060,3,1290,645,0,14059,14058,1,0,0,0,14059,14060,1,0,
        0,0,14060,14113,1,0,0,0,14061,14063,5,13,0,0,14062,14064,5,309,0,
        0,14063,14062,1,0,0,0,14063,14064,1,0,0,0,14064,14078,1,0,0,0,14065,
        14066,5,13,0,0,14066,14068,5,41,0,0,14067,14065,1,0,0,0,14067,14068,
        1,0,0,0,14068,14069,1,0,0,0,14069,14074,3,1266,633,0,14070,14071,
        5,1208,0,0,14071,14073,3,1266,633,0,14072,14070,1,0,0,0,14073,14076,
        1,0,0,0,14074,14072,1,0,0,0,14074,14075,1,0,0,0,14075,14078,1,0,
        0,0,14076,14074,1,0,0,0,14077,14061,1,0,0,0,14077,14067,1,0,0,0,
        14078,14079,1,0,0,0,14079,14080,5,286,0,0,14080,14114,3,1268,634,
        0,14081,14086,3,1270,635,0,14082,14083,5,1208,0,0,14083,14085,3,
        1270,635,0,14084,14082,1,0,0,0,14085,14088,1,0,0,0,14086,14084,1,
        0,0,0,14086,14087,1,0,0,0,14087,14114,1,0,0,0,14088,14086,1,0,0,
        0,14089,14094,3,1272,636,0,14090,14091,5,1208,0,0,14091,14093,3,
        1272,636,0,14092,14090,1,0,0,0,14093,14096,1,0,0,0,14094,14092,1,
        0,0,0,14094,14095,1,0,0,0,14095,14114,1,0,0,0,14096,14094,1,0,0,
        0,14097,14102,3,1274,637,0,14098,14099,5,1208,0,0,14099,14101,3,
        1272,636,0,14100,14098,1,0,0,0,14101,14104,1,0,0,0,14102,14100,1,
        0,0,0,14102,14103,1,0,0,0,14103,14114,1,0,0,0,14104,14102,1,0,0,
        0,14105,14110,3,1276,638,0,14106,14107,5,1208,0,0,14107,14109,3,
        1276,638,0,14108,14106,1,0,0,0,14109,14112,1,0,0,0,14110,14108,1,
        0,0,0,14110,14111,1,0,0,0,14111,14114,1,0,0,0,14112,14110,1,0,0,
        0,14113,14077,1,0,0,0,14113,14081,1,0,0,0,14113,14089,1,0,0,0,14113,
        14097,1,0,0,0,14113,14105,1,0,0,0,14114,14115,1,0,0,0,14115,14133,
        7,155,0,0,14116,14121,3,1282,641,0,14117,14118,5,1208,0,0,14118,
        14120,3,1282,641,0,14119,14117,1,0,0,0,14120,14123,1,0,0,0,14121,
        14119,1,0,0,0,14121,14122,1,0,0,0,14122,14134,1,0,0,0,14123,14121,
        1,0,0,0,14124,14134,5,313,0,0,14125,14130,3,808,404,0,14126,14127,
        5,1208,0,0,14127,14129,3,808,404,0,14128,14126,1,0,0,0,14129,14132,
        1,0,0,0,14130,14128,1,0,0,0,14130,14131,1,0,0,0,14131,14134,1,0,
        0,0,14132,14130,1,0,0,0,14133,14116,1,0,0,0,14133,14124,1,0,0,0,
        14133,14125,1,0,0,0,14134,1255,1,0,0,0,14135,14136,5,354,0,0,14136,
        14137,5,73,0,0,14137,14138,5,984,0,0,14138,14194,3,806,403,0,14139,
        14189,7,155,0,0,14140,14145,3,806,403,0,14141,14142,5,1208,0,0,14142,
        14144,3,806,403,0,14143,14141,1,0,0,0,14144,14147,1,0,0,0,14145,
        14143,1,0,0,0,14145,14146,1,0,0,0,14146,14166,1,0,0,0,14147,14145,
        1,0,0,0,14148,14149,5,474,0,0,14149,14150,5,357,0,0,14150,14155,
        3,808,404,0,14151,14152,5,1208,0,0,14152,14154,3,808,404,0,14153,
        14151,1,0,0,0,14154,14157,1,0,0,0,14155,14153,1,0,0,0,14155,14156,
        1,0,0,0,14156,14161,1,0,0,0,14157,14155,1,0,0,0,14158,14159,5,474,
        0,0,14159,14160,5,311,0,0,14160,14162,3,810,405,0,14161,14158,1,
        0,0,0,14161,14162,1,0,0,0,14162,14167,1,0,0,0,14163,14164,5,474,
        0,0,14164,14165,5,311,0,0,14165,14167,3,810,405,0,14166,14148,1,
        0,0,0,14166,14163,1,0,0,0,14167,14190,1,0,0,0,14168,14169,5,303,
        0,0,14169,14174,3,806,403,0,14170,14171,5,1208,0,0,14171,14173,3,
        806,403,0,14172,14170,1,0,0,0,14173,14176,1,0,0,0,14174,14172,1,
        0,0,0,14174,14175,1,0,0,0,14175,14187,1,0,0,0,14176,14174,1,0,0,
        0,14177,14178,5,474,0,0,14178,14179,5,357,0,0,14179,14184,3,808,
        404,0,14180,14181,5,1208,0,0,14181,14183,3,808,404,0,14182,14180,
        1,0,0,0,14183,14186,1,0,0,0,14184,14182,1,0,0,0,14184,14185,1,0,
        0,0,14185,14188,1,0,0,0,14186,14184,1,0,0,0,14187,14177,1,0,0,0,
        14187,14188,1,0,0,0,14188,14190,1,0,0,0,14189,14140,1,0,0,0,14189,
        14168,1,0,0,0,14190,14195,1,0,0,0,14191,14192,5,474,0,0,14192,14193,
        5,1094,0,0,14193,14195,5,287,0,0,14194,14139,1,0,0,0,14194,14191,
        1,0,0,0,14195,1257,1,0,0,0,14196,14197,5,354,0,0,14197,14198,5,230,
        0,0,14198,14208,5,286,0,0,14199,14204,3,768,384,0,14200,14201,5,
        1208,0,0,14201,14203,3,768,384,0,14202,14200,1,0,0,0,14203,14206,
        1,0,0,0,14204,14202,1,0,0,0,14204,14205,1,0,0,0,14205,14209,1,0,
        0,0,14206,14204,1,0,0,0,14207,14209,5,13,0,0,14208,14199,1,0,0,0,
        14208,14207,1,0,0,0,14209,14221,1,0,0,0,14210,14211,5,20,0,0,14211,
        14222,5,111,0,0,14212,14213,7,155,0,0,14213,14218,3,806,403,0,14214,
        14215,5,1208,0,0,14215,14217,3,806,403,0,14216,14214,1,0,0,0,14217,
        14220,1,0,0,0,14218,14216,1,0,0,0,14218,14219,1,0,0,0,14219,14222,
        1,0,0,0,14220,14218,1,0,0,0,14221,14210,1,0,0,0,14221,14212,1,0,
        0,0,14222,1259,1,0,0,0,14223,14225,5,354,0,0,14224,14226,3,1290,
        645,0,14225,14224,1,0,0,0,14225,14226,1,0,0,0,14226,14227,1,0,0,
        0,14227,14228,5,236,0,0,14228,14229,3,792,396,0,14229,14239,7,155,
        0,0,14230,14235,3,808,404,0,14231,14232,5,1208,0,0,14232,14234,3,
        808,404,0,14233,14231,1,0,0,0,14234,14237,1,0,0,0,14235,14233,1,
        0,0,0,14235,14236,1,0,0,0,14236,14240,1,0,0,0,14237,14235,1,0,0,
        0,14238,14240,5,313,0,0,14239,14230,1,0,0,0,14239,14238,1,0,0,0,
        14240,1261,1,0,0,0,14241,14242,5,354,0,0,14242,14243,5,480,0,0,14243,
        14244,3,792,396,0,14244,14245,7,155,0,0,14245,14250,3,808,404,0,
        14246,14247,5,1208,0,0,14247,14249,3,808,404,0,14248,14246,1,0,0,
        0,14249,14252,1,0,0,0,14250,14248,1,0,0,0,14250,14251,1,0,0,0,14251,
        1263,1,0,0,0,14252,14250,1,0,0,0,14253,14254,5,354,0,0,14254,14255,
        5,480,0,0,14255,14256,5,297,0,0,14256,14257,7,155,0,0,14257,14262,
        3,806,403,0,14258,14259,5,1208,0,0,14259,14261,3,806,403,0,14260,
        14258,1,0,0,0,14261,14264,1,0,0,0,14262,14260,1,0,0,0,14262,14263,
        1,0,0,0,14263,1265,1,0,0,0,14264,14262,1,0,0,0,14265,14266,5,14,
        0,0,14266,14267,5,151,0,0,14267,14392,5,310,0,0,14268,14269,5,14,
        0,0,14269,14392,5,166,0,0,14270,14271,5,14,0,0,14271,14392,5,310,
        0,0,14272,14392,5,18,0,0,14273,14392,5,60,0,0,14274,14275,5,86,0,
        0,14275,14392,5,29,0,0,14276,14277,5,86,0,0,14277,14392,5,102,0,
        0,14278,14279,5,86,0,0,14279,14280,5,607,0,0,14280,14392,5,905,0,
        0,14281,14282,5,86,0,0,14282,14283,5,151,0,0,14283,14392,5,310,0,
        0,14284,14285,5,86,0,0,14285,14392,5,166,0,0,14286,14287,5,86,0,
        0,14287,14392,5,688,0,0,14288,14289,5,86,0,0,14289,14392,5,235,0,
        0,14290,14291,5,86,0,0,14291,14292,5,834,0,0,14292,14392,5,310,0,
        0,14293,14294,5,86,0,0,14294,14392,5,310,0,0,14295,14296,5,86,0,
        0,14296,14392,5,917,0,0,14297,14298,5,86,0,0,14298,14392,5,406,0,
        0,14299,14300,5,86,0,0,14300,14392,5,435,0,0,14301,14302,5,86,0,
        0,14302,14392,5,456,0,0,14303,14304,5,86,0,0,14304,14392,5,468,0,
        0,14305,14392,5,102,0,0,14306,14392,5,115,0,0,14307,14308,5,125,
        0,0,14308,14392,5,29,0,0,14309,14310,5,125,0,0,14310,14392,5,102,
        0,0,14311,14312,5,125,0,0,14312,14313,5,607,0,0,14313,14392,5,905,
        0,0,14314,14315,5,125,0,0,14315,14392,5,166,0,0,14316,14317,5,125,
        0,0,14317,14392,5,688,0,0,14318,14319,5,125,0,0,14319,14392,5,235,
        0,0,14320,14321,5,125,0,0,14321,14392,5,310,0,0,14322,14323,5,125,
        0,0,14323,14392,5,917,0,0,14324,14325,5,125,0,0,14325,14392,5,406,
        0,0,14326,14327,5,125,0,0,14327,14392,5,435,0,0,14328,14329,5,125,
        0,0,14329,14392,5,456,0,0,14330,14331,5,125,0,0,14331,14392,5,468,
        0,0,14332,14392,5,127,0,0,14333,14392,5,144,0,0,14334,14335,5,144,
        0,0,14335,14392,5,166,0,0,14336,14337,5,144,0,0,14337,14392,5,310,
        0,0,14338,14392,5,166,0,0,14339,14392,5,688,0,0,14340,14341,5,688,
        0,0,14341,14392,5,766,0,0,14342,14392,5,192,0,0,14343,14392,5,198,
        0,0,14344,14345,5,198,0,0,14345,14392,3,1186,593,0,14346,14392,5,
        235,0,0,14347,14392,5,270,0,0,14348,14392,5,297,0,0,14349,14350,
        5,297,0,0,14350,14392,5,115,0,0,14351,14352,5,297,0,0,14352,14392,
        5,127,0,0,14353,14354,5,297,0,0,14354,14392,5,198,0,0,14355,14356,
        5,297,0,0,14356,14392,5,346,0,0,14357,14358,5,297,0,0,14358,14392,
        5,370,0,0,14359,14360,5,297,0,0,14360,14392,5,453,0,0,14361,14392,
        5,310,0,0,14362,14392,5,325,0,0,14363,14364,5,325,0,0,14364,14392,
        3,1186,593,0,14365,14392,5,346,0,0,14366,14392,5,350,0,0,14367,14392,
        5,370,0,0,14368,14369,5,370,0,0,14369,14392,3,1186,593,0,14370,14392,
        5,376,0,0,14371,14392,5,395,0,0,14372,14392,5,406,0,0,14373,14392,
        5,435,0,0,14374,14375,5,1096,0,0,14375,14392,5,243,0,0,14376,14392,
        5,441,0,0,14377,14378,5,1096,0,0,14378,14392,5,437,0,0,14379,14392,
        5,442,0,0,14380,14381,5,1096,0,0,14381,14392,5,1097,0,0,14382,14392,
        5,443,0,0,14383,14392,5,453,0,0,14384,14385,5,453,0,0,14385,14392,
        3,1186,593,0,14386,14392,5,456,0,0,14387,14392,5,468,0,0,14388,14389,
        5,474,0,0,14389,14390,5,607,0,0,14390,14392,5,905,0,0,14391,14265,
        1,0,0,0,14391,14268,1,0,0,0,14391,14270,1,0,0,0,14391,14272,1,0,
        0,0,14391,14273,1,0,0,0,14391,14274,1,0,0,0,14391,14276,1,0,0,0,
        14391,14278,1,0,0,0,14391,14281,1,0,0,0,14391,14284,1,0,0,0,14391,
        14286,1,0,0,0,14391,14288,1,0,0,0,14391,14290,1,0,0,0,14391,14293,
        1,0,0,0,14391,14295,1,0,0,0,14391,14297,1,0,0,0,14391,14299,1,0,
        0,0,14391,14301,1,0,0,0,14391,14303,1,0,0,0,14391,14305,1,0,0,0,
        14391,14306,1,0,0,0,14391,14307,1,0,0,0,14391,14309,1,0,0,0,14391,
        14311,1,0,0,0,14391,14314,1,0,0,0,14391,14316,1,0,0,0,14391,14318,
        1,0,0,0,14391,14320,1,0,0,0,14391,14322,1,0,0,0,14391,14324,1,0,
        0,0,14391,14326,1,0,0,0,14391,14328,1,0,0,0,14391,14330,1,0,0,0,
        14391,14332,1,0,0,0,14391,14333,1,0,0,0,14391,14334,1,0,0,0,14391,
        14336,1,0,0,0,14391,14338,1,0,0,0,14391,14339,1,0,0,0,14391,14340,
        1,0,0,0,14391,14342,1,0,0,0,14391,14343,1,0,0,0,14391,14344,1,0,
        0,0,14391,14346,1,0,0,0,14391,14347,1,0,0,0,14391,14348,1,0,0,0,
        14391,14349,1,0,0,0,14391,14351,1,0,0,0,14391,14353,1,0,0,0,14391,
        14355,1,0,0,0,14391,14357,1,0,0,0,14391,14359,1,0,0,0,14391,14361,
        1,0,0,0,14391,14362,1,0,0,0,14391,14363,1,0,0,0,14391,14365,1,0,
        0,0,14391,14366,1,0,0,0,14391,14367,1,0,0,0,14391,14368,1,0,0,0,
        14391,14370,1,0,0,0,14391,14371,1,0,0,0,14391,14372,1,0,0,0,14391,
        14373,1,0,0,0,14391,14374,1,0,0,0,14391,14376,1,0,0,0,14391,14377,
        1,0,0,0,14391,14379,1,0,0,0,14391,14380,1,0,0,0,14391,14382,1,0,
        0,0,14391,14383,1,0,0,0,14391,14384,1,0,0,0,14391,14386,1,0,0,0,
        14391,14387,1,0,0,0,14391,14388,1,0,0,0,14392,1267,1,0,0,0,14393,
        14422,3,794,397,0,14394,14395,5,310,0,0,14395,14422,3,798,399,0,
        14396,14397,5,384,0,0,14397,14398,5,166,0,0,14398,14422,3,800,400,
        0,14399,14401,5,166,0,0,14400,14399,1,0,0,0,14400,14401,1,0,0,0,
        14401,14402,1,0,0,0,14402,14403,3,800,400,0,14403,14412,5,1213,0,
        0,14404,14409,3,1284,642,0,14405,14406,5,1208,0,0,14406,14408,3,
        1284,642,0,14407,14405,1,0,0,0,14408,14411,1,0,0,0,14409,14407,1,
        0,0,0,14409,14410,1,0,0,0,14410,14413,1,0,0,0,14411,14409,1,0,0,
        0,14412,14404,1,0,0,0,14412,14413,1,0,0,0,14413,14414,1,0,0,0,14414,
        14415,5,1214,0,0,14415,14422,1,0,0,0,14416,14418,5,437,0,0,14417,
        14419,3,722,361,0,14418,14417,1,0,0,0,14418,14419,1,0,0,0,14419,
        14420,1,0,0,0,14420,14422,3,828,414,0,14421,14393,1,0,0,0,14421,
        14394,1,0,0,0,14421,14396,1,0,0,0,14421,14400,1,0,0,0,14421,14416,
        1,0,0,0,14422,1269,1,0,0,0,14423,14424,5,86,0,0,14424,14429,5,236,
        0,0,14425,14426,5,125,0,0,14426,14429,5,236,0,0,14427,14429,5,236,
        0,0,14428,14423,1,0,0,0,14428,14425,1,0,0,0,14428,14427,1,0,0,0,
        14429,1271,1,0,0,0,14430,14431,5,86,0,0,14431,14436,5,357,0,0,14432,
        14433,5,125,0,0,14433,14436,5,357,0,0,14434,14436,5,357,0,0,14435,
        14430,1,0,0,0,14435,14432,1,0,0,0,14435,14434,1,0,0,0,14436,1273,
        1,0,0,0,14437,14438,5,86,0,0,14438,14443,5,311,0,0,14439,14440,5,
        125,0,0,14440,14443,5,311,0,0,14441,14443,5,311,0,0,14442,14437,
        1,0,0,0,14442,14439,1,0,0,0,14442,14441,1,0,0,0,14443,1275,1,0,0,
        0,14444,14445,5,86,0,0,14445,14450,5,480,0,0,14446,14447,5,125,0,
        0,14447,14450,5,480,0,0,14448,14450,5,480,0,0,14449,14444,1,0,0,
        0,14449,14446,1,0,0,0,14449,14448,1,0,0,0,14450,1277,1,0,0,0,14451,
        14452,7,156,0,0,14452,1279,1,0,0,0,14453,14455,5,13,0,0,14454,14453,
        1,0,0,0,14454,14455,1,0,0,0,14455,14456,1,0,0,0,14456,14457,3,804,
        402,0,14457,1281,1,0,0,0,14458,14460,5,13,0,0,14459,14458,1,0,0,
        0,14459,14460,1,0,0,0,14460,14461,1,0,0,0,14461,14462,3,804,402,
        0,14462,1283,1,0,0,0,14463,14465,3,816,408,0,14464,14463,1,0,0,0,
        14464,14465,1,0,0,0,14465,14466,1,0,0,0,14466,14467,3,692,346,0,
        14467,1285,1,0,0,0,14468,14469,5,474,0,0,14469,14470,5,10,0,0,14470,
        14471,5,289,0,0,14471,1287,1,0,0,0,14472,14473,5,474,0,0,14473,14474,
        5,172,0,0,14474,14475,5,289,0,0,14475,1289,1,0,0,0,14476,14477,5,
        172,0,0,14477,14478,5,289,0,0,14478,14479,5,159,0,0,14479,1291,1,
        0,0,0,1858,1297,1301,1308,1400,1406,1410,1414,1419,1421,1429,1431,
        1440,1442,1444,1458,1461,1464,1466,1470,1475,1477,1498,1508,1520,
        1523,1532,1539,1545,1549,1559,1563,1572,1576,1578,1585,1592,1608,
        1613,1620,1623,1634,1637,1641,1646,1648,1651,1658,1665,1675,1679,
        1681,1687,1690,1704,1718,1726,1737,1745,1754,1759,1763,1766,1771,
        1776,1780,1785,1789,1795,1815,1820,1827,1833,1843,1850,1853,1863,
        1868,1872,1875,1879,1882,1887,1895,1900,1903,1914,1919,1926,1929,
        1934,1938,1940,1944,1950,1954,1962,1967,1973,1979,1981,1990,1998,
        2002,2008,2013,2018,2024,2032,2036,2042,2047,2052,2063,2065,2074,
        2079,2087,2098,2108,2113,2117,2122,2127,2134,2139,2144,2148,2157,
        2160,2168,2172,2175,2180,2187,2192,2198,2201,2204,2213,2218,2222,
        2228,2238,2245,2249,2254,2258,2265,2273,2276,2281,2289,2292,2300,
        2303,2407,2415,2438,2446,2451,2454,2459,2462,2464,2466,2470,2485,
        2488,2493,2499,2501,2514,2521,2528,2531,2547,2550,2552,2557,2561,
        2568,2572,2583,2588,2599,2604,2608,2618,2627,2630,2633,2641,2644,
        2651,2654,2658,2662,2679,2682,2692,2696,2699,2702,2708,2712,2715,
        2723,2728,2730,2734,2737,2742,2747,2751,2756,2759,2763,2766,2773,
        2778,2784,2789,2793,2797,2799,2803,2806,2812,2815,2820,2828,2838,
        2849,2852,2859,2861,2867,2872,2874,2880,2886,2905,2908,2916,2918,
        2924,2929,2931,2937,2943,2946,2952,2954,2957,2963,2966,2968,2972,
        2983,2986,2994,2998,3000,3006,3011,3013,3019,3026,3032,3034,3037,
        3043,3046,3048,3062,3074,3082,3095,3097,3099,3102,3112,3120,3127,
        3141,3145,3159,3173,3182,3187,3192,3195,3200,3206,3218,3223,3228,
        3242,3245,3251,3253,3259,3266,3277,3290,3300,3304,3317,3322,3329,
        3346,3395,3400,3405,3411,3417,3423,3429,3434,3446,3455,3461,3467,
        3469,3482,3485,3494,3502,3509,3512,3520,3529,3536,3543,3545,3552,
        3555,3563,3567,3569,3573,3576,3583,3585,3588,3595,3597,3607,3615,
        3623,3631,3635,3638,3667,3670,3678,3694,3697,3705,3708,3717,3728,
        3731,3738,3745,3750,3752,3758,3760,3771,3779,3787,3795,3799,3806,
        3808,3819,3828,3840,3843,3846,3853,3862,3883,3887,3893,3899,3902,
        3906,3910,3913,3916,3928,3932,3934,3939,3946,3951,3959,3971,3979,
        3984,3989,3993,3996,4004,4009,4012,4023,4030,4035,4038,4046,4055,
        4066,4072,4080,4085,4089,4091,4099,4103,4115,4135,4138,4141,4145,
        4148,4151,4160,4163,4165,4171,4173,4182,4190,4202,4205,4214,4218,
        4229,4232,4236,4245,4251,4258,4262,4276,4279,4287,4296,4299,4305,
        4311,4317,4323,4329,4335,4341,4347,4353,4355,4361,4365,4368,4373,
        4378,4380,4385,4394,4403,4426,4435,4448,4451,4457,4465,4470,4472,
        4476,4487,4491,4495,4502,4511,4517,4522,4525,4528,4532,4536,4543,
        4552,4557,4563,4568,4572,4577,4580,4584,4589,4592,4595,4599,4603,
        4612,4621,4628,4634,4639,4642,4646,4657,4664,4673,4678,4682,4691,
        4696,4707,4710,4714,4722,4727,4732,4735,4740,4746,4752,4758,4763,
        4770,4772,4782,4794,4800,4806,4813,4822,4829,4834,4838,4851,4857,
        4866,4871,4875,4878,4881,4884,4888,4896,4907,4910,4918,4932,4937,
        4942,4950,4955,4958,4962,4971,4976,4979,4981,4986,4989,4996,5002,
        5032,5062,5075,5079,5085,5089,5098,5105,5107,5112,5124,5138,5150,
        5158,5162,5178,5183,5186,5195,5215,5218,5220,5225,5238,5243,5254,
        5256,5258,5262,5267,5275,5293,5299,5304,5308,5317,5322,5327,5331,
        5335,5339,5343,5350,5353,5357,5361,5370,5375,5378,5382,5389,5394,
        5404,5409,5418,5421,5426,5433,5439,5444,5455,5460,5467,5476,5481,
        5491,5495,5500,5507,5513,5519,5525,5529,5538,5541,5551,5553,5557,
        5560,5565,5570,5577,5582,5588,5591,5594,5598,5607,5610,5620,5622,
        5626,5629,5634,5639,5646,5651,5657,5660,5663,5668,5673,5680,5687,
        5701,5706,5713,5722,5731,5739,5742,5745,5756,5759,5766,5769,5789,
        5793,5805,5809,5825,5831,5840,5853,5860,5862,5872,5875,5880,5883,
        5887,5895,5904,5910,5921,5943,5949,5966,5971,5973,5988,5994,5997,
        6001,6031,6068,6075,6083,6086,6093,6096,6100,6104,6107,6112,6119,
        6123,6150,6159,6164,6168,6177,6180,6185,6190,6198,6201,6209,6212,
        6228,6250,6258,6262,6272,6281,6293,6326,6335,6340,6354,6365,6368,
        6371,6383,6390,6401,6419,6440,6444,6448,6451,6457,6461,6469,6473,
        6477,6489,6502,6515,6521,6532,6545,6556,6568,6576,6587,6591,6603,
        6607,6627,6631,6647,6653,6662,6665,6669,6676,6685,6688,6705,6710,
        6715,6756,6759,6764,6770,6772,6780,6791,6799,6810,6817,6824,6830,
        6837,6845,6854,6864,6868,6871,6878,6884,6889,6898,6907,6913,6927,
        6932,6941,6952,6955,6969,6973,6982,6990,6993,6999,7011,7018,7021,
        7026,7029,7034,7042,7053,7056,7071,7091,7096,7102,7116,7137,7142,
        7145,7156,7159,7166,7169,7172,7177,7179,7186,7189,7195,7200,7205,
        7207,7214,7217,7226,7230,7234,7237,7243,7246,7256,7259,7262,7269,
        7281,7289,7297,7303,7306,7312,7315,7322,7326,7330,7333,7337,7340,
        7343,7350,7353,7370,7400,7403,7414,7420,7424,7433,7443,7446,7450,
        7454,7457,7461,7465,7468,7472,7475,7479,7482,7486,7490,7494,7503,
        7506,7510,7513,7516,7521,7525,7534,7538,7548,7554,7557,7561,7565,
        7568,7576,7581,7584,7588,7597,7606,7611,7614,7618,7622,7632,7640,
        7644,7649,7655,7659,7662,7666,7670,7673,7677,7680,7684,7687,7694,
        7697,7701,7707,7711,7713,7716,7728,7732,7743,7757,7762,7770,7778,
        7785,7789,7793,7796,7807,7812,7816,7820,7830,7835,7837,7844,7848,
        7856,7859,7863,7876,7879,7893,7896,7900,7905,7909,7918,7921,7925,
        7928,7945,7948,7957,7963,7970,7972,7974,7978,7986,7989,7995,7998,
        8002,8006,8011,8013,8028,8031,8041,8044,8050,8053,8063,8076,8079,
        8083,8088,8090,8094,8097,8100,8103,8107,8110,8113,8118,8123,8129,
        8132,8138,8145,8149,8159,8162,8169,8178,8180,8198,8206,8212,8214,
        8227,8236,8248,8258,8262,8265,8272,8277,8283,8287,8290,8292,8296,
        8299,8303,8310,8314,8326,8329,8332,8334,8338,8342,8344,8350,8358,
        8362,8366,8374,8377,8379,8384,8387,8391,8394,8398,8408,8411,8418,
        8421,8424,8427,8431,8434,8437,8441,8444,8448,8451,8455,8458,8461,
        8465,8468,8472,8475,8485,8488,8495,8503,8507,8514,8518,8522,8526,
        8535,8537,8541,8548,8550,8554,8559,8561,8568,8572,8574,8583,8590,
        8601,8609,8633,8638,8640,8663,8668,8673,8676,8682,8689,8702,8707,
        8712,8718,8750,8766,8772,8776,8781,8785,8790,8794,8799,8803,8808,
        8812,8817,8821,8825,8829,8834,8838,8842,8846,8850,8854,8858,8862,
        8866,8870,8874,8878,8882,8894,8899,8904,8909,8912,8919,8927,8933,
        8940,8944,8946,8950,8963,8966,8970,8976,8979,8983,8994,8996,9004,
        9015,9018,9022,9025,9031,9036,9041,9045,9055,9062,9069,9078,9081,
        9089,9100,9104,9110,9117,9119,9122,9125,9130,9132,9139,9145,9147,
        9156,9165,9176,9179,9191,9193,9204,9209,9212,9222,9226,9237,9244,
        9248,9251,9258,9262,9268,9282,9294,9298,9302,9308,9311,9315,9317,
        9321,9328,9334,9344,9349,9359,9369,9382,9385,9389,9394,9398,9401,
        9406,9413,9422,9425,9435,9438,9450,9457,9464,9471,9479,9496,9499,
        9502,9509,9516,9523,9530,9535,9542,9552,9567,9578,9587,9598,9605,
        9623,9633,9635,9640,9658,9669,9678,9685,9694,9698,9703,9707,9714,
        9718,9722,9725,9734,9737,9747,9760,9765,9779,9785,9789,9793,9804,
        9848,9854,9903,9908,9913,9917,9921,9929,9950,9952,9958,9962,9967,
        9971,9980,10005,10015,10026,10030,10035,10042,10050,10058,10062,
        10067,10069,10077,10084,10089,10091,10093,10097,10106,10111,10115,
        10119,10137,10147,10152,10161,10164,10168,10174,10179,10182,10186,
        10192,10197,10200,10204,10210,10215,10218,10222,10228,10233,10239,
        10243,10251,10256,10261,10266,10274,10279,10284,10288,10297,10303,
        10310,10317,10324,10331,10354,10365,10371,10379,10381,10397,10406,
        10409,10419,10428,10431,10436,10439,10443,10460,10494,10513,10547,
        10556,10571,10641,10681,10704,10714,10724,10735,10746,10755,10765,
        10767,10786,10788,10800,10802,10816,10818,10844,10856,10859,10865,
        10867,10876,10882,10885,10890,10895,10901,10912,10916,10928,10932,
        10956,10968,10972,10980,10982,11006,11011,11027,11030,11043,11063,
        11074,11086,11095,11101,11103,11107,11120,11152,11164,11179,11194,
        11202,11217,11227,11234,11250,11253,11262,11264,11277,11291,11305,
        11319,11331,11343,11352,11354,11374,11379,11392,11396,11411,11415,
        11420,11430,11438,11447,11449,11454,11461,11465,11472,11491,11503,
        11507,11510,11518,11528,11535,11540,11549,11554,11566,11573,11579,
        11584,11587,11592,11597,11600,11604,11607,11613,11624,11628,11631,
        11634,11642,11648,11652,11656,11659,11673,11682,11686,11689,11704,
        11710,11712,11724,11734,11744,11754,11756,11758,11763,11773,11775,
        11777,11782,11790,11795,11803,11805,11810,11818,11827,11835,11843,
        11853,11863,11879,11904,11909,11912,11919,11927,11945,11954,11957,
        11967,11978,11996,12021,12024,12038,12043,12059,12064,12080,12085,
        12094,12099,12112,12115,12136,12142,12155,12166,12178,12194,12206,
        12217,12219,12224,12240,12250,12259,12264,12271,12276,12287,12292,
        12305,12307,12309,12314,12323,12328,12347,12356,12358,12363,12389,
        12400,12411,12419,12422,12427,12430,12437,12440,12447,12452,12460,
        12467,12471,12474,12484,12506,12517,12519,12530,12535,12544,12549,
        12551,12559,12570,12573,12576,12586,12589,12593,12596,12600,12604,
        12612,12620,12630,12634,12638,12641,12648,12655,12658,12661,12664,
        12674,12678,12686,12696,12699,12707,12732,12736,12750,12753,12756,
        12773,12800,12809,12815,12822,12824,12833,12838,12849,12853,12875,
        12885,12891,12899,12906,12910,12918,12924,12927,12932,12938,12940,
        12946,12956,12960,12966,12974,12980,12983,12994,13004,13009,13012,
        13015,13022,13030,13034,13045,13055,13061,13146,13148,13155,13159,
        13164,13172,13175,13188,13196,13201,13205,13214,13227,13235,13243,
        13247,13254,13258,13278,13294,13297,13301,13308,13320,13325,13328,
        13338,13351,13364,13373,13377,13383,13386,13390,13397,13403,13407,
        13419,13434,13439,13443,13446,13450,13453,13459,13462,13466,13474,
        13485,13496,13503,13542,13550,13555,13559,13563,13567,13571,13574,
        13578,13581,13588,13594,13602,13607,13611,13619,13629,13640,13650,
        13657,13660,13662,13665,13671,13673,13678,13693,13705,13708,13715,
        13718,13726,13730,13733,13740,13743,13756,13760,13765,13769,13776,
        13780,13789,13797,13805,13813,13820,13828,13832,13836,13843,13846,
        13854,13862,13872,13878,13883,13891,13901,13906,13908,13918,13922,
        13932,13935,13940,13951,13955,13958,13969,13981,13992,13996,14007,
        14010,14017,14020,14028,14032,14038,14045,14054,14059,14063,14067,
        14074,14077,14086,14094,14102,14110,14113,14121,14130,14133,14145,
        14155,14161,14166,14174,14184,14187,14189,14194,14204,14208,14218,
        14221,14225,14235,14239,14250,14262,14391,14400,14409,14412,14418,
        14421,14428,14435,14442,14449,14454,14459,14464
    ]

class TeradataSQLParser ( Parser ):

    grammarFileName = "TeradataSQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ABORT'", "'ABORTSESSION'", "'ABS'", 
                     "'ACCESS_LOCK'", "'ACCOUNT'", "'ACOS'", "'ACOSH'", 
                     "'ADD'", "'ADD_MONTHS'", "'ADMIN'", "'AFTER'", "'AGGREGATE'", 
                     "'ALL'", "'ALTER'", "'AMP'", "'AND'", "'ANSIDATE'", 
                     "'ANY'", "'ARGLPAREN'", "'AS'", "'ASC'", "'ASIN'", 
                     "'ASINH'", "'AT'", "'ATAN'", "'ATAN2'", "'ATANH'", 
                     "'ATOMIC'", "'AUTHORIZATION'", "'AVE'", "'AVERAGE'", 
                     "'AVG'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BIGINT'", 
                     "'BINARY'", "'BLOB'", "'BOTH'", "'BT'", "'BUT'", "'BY'", 
                     "'BYTE'", "'BYTEINT'", "'BYTES'", "'CALL'", "'CASE'", 
                     "'CASE_N'", "'CASESPECIFIC'", "'CAST'", "'CD'", "'CHAR'", 
                     "'CHAR_LENGTH'", "'CHAR2HEXINT'", "'CHARACTER'", "'CHARACTER_LENGTH'", 
                     "'CHARACTERS'", "'CHARS'", "'CHECK'", "'CHECKPOINT'", 
                     "'CLASS'", "'CLOB'", "'CLOSE'", "'CLUSTER'", "'CM'", 
                     "'COALESCE'", "'COLLATION'", "'COLLECT'", "'COLUMN'", 
                     "'COMMENT'", "'COMMIT'", "'COMPRESS'", "'CONNECT'", 
                     "'CONSTRAINT'", "'CONSTRUCTOR'", "'CONSUME'", "'CONTAINS'", 
                     "'CONTINUE'", "'CONVERT_TABLE_HEADER'", "'CORR'", "'COS'", 
                     "'COSH'", "'COUNT'", "'COVAR_POP'", "'COVAR_SAMP'", 
                     "'CREATE'", "'CROSS'", "'CS'", "'CSUM'", "'CT'", "'CTCONTROL'", 
                     "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_ROLE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'CURSOR'", "'CV'", "'CYCLE'", "'DATABASE'", "'DATABLOCKSIZE'", 
                     "'DATE'", "'DATEFORM'", "'DAY'", "'DEALLOCATE'", "'DEC'", 
                     "'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFERRED'", 
                     "'DEGREES'", "'DEL'", "'DELETE'", "'DESC'", "'DETERMINISTIC'", 
                     "'DIAGNOSTIC'", "'DICTIONARY'", "'DISABLED'", "'DISTINCT'", 
                     "'DO'", "'DOMAIN'", "'DOUBLE'", "'DROP'", "'DUAL'", 
                     "'DUMP'", "'DYNAMIC'", "'EACH'", "'ECHO'", "'ELSE'", 
                     "'ELSEIF'", "'ENABLED'", "'END'", "'EQ'", "'EQUALS'", 
                     "'ERROR'", "'ERRORFILES'", "'ERRORTABLES'", "'ESCAPE'", 
                     "'ET'", "'EXCEPT'", "'EXEC'", "'EXECUTE'", "'EXISTS'", 
                     "'EXIT'", "'EXP'", "'EXPAND'", "'EXPANDING'", "'EXPLAIN'", 
                     "'EXTERNAL'", "'EXTRACT'", "'FALLBACK'", "'FASTEXPORT'", 
                     "'FETCH'", "'FIRST'", "'FLOAT'", "'FLUSH'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FOUND'", "'FREESPACE'", 
                     "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONDESCRIPTOR'", 
                     "'GE'", "'GENERATED'", "'GET'", "'GIVE'", "'GRANT'", 
                     "'GRAPHIC'", "'GROUP'", "'GROUPING'", "'GT'", "'HANDLER'", 
                     "'HASH'", "'HASHAMP'", "'HASHBAKAMP'", "'HASHBUCKET'", 
                     "'HASHROW'", "'HAVING'", "'HELP'", "'HOUR'", "'ID2BIGINT'", 
                     "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IN'", "'INCONSISTENT'", 
                     "'INDEX'", "'INITIATE'", "'INNER'", "'INOUT'", "'INPUT'", 
                     "'INS'", "'INSERT'", "'INSTANCE'", "'INSTEAD'", "'INT'", 
                     "'INTEGER'", "'INTEGERDATE'", "'INTERSECT'", "'INTERVAL'", 
                     "'INTO'", "'IS'", "'ITERATE'", "'JAR'", "'JOIN'", "'JOURNAL'", 
                     "'KEY'", "'KURTOSIS'", "'LANGUAGE'", "'LARGE'", "'LE'", 
                     "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", 
                     "'LN'", "'LOADING'", "'LOCAL'", "'LOCATOR'", "'LOCK'", 
                     "'LOCKING'", "'LOG'", "'LOGGING'", "'LOGON'", "'LONG'", 
                     "'LOOP'", "'LOWER'", "'LT'", "'MACRO'", "'MAP'", "'MAVG'", 
                     "'MAX'", "'MAXIMUM'", "'MCHARACTERS'", "'MDIFF'", "'MERGE'", 
                     "'METHOD'", "'MIN'", "'MINDEX'", "'MINIMUM'", "'MINUS'", 
                     "'MINUTE'", "'MLINREG'", "'MLOAD'", "'MOD'", "'MODE'", 
                     "'MODIFIES'", "'MODIFY'", "'MONITOR'", "'MONRESOURCE'", 
                     "'MONSESSION'", "'MONTH'", "'MSUBSTR'", "'MSUM'", "'MULTISET'", 
                     "'NAMED'", "'NATURAL'", "'NE'", "'NEW'", "'NEW_TABLE'", 
                     "'NEXT'", "'NO'", "'NONE'", "'NONTEMPORAL'", "'NORMALIZE'", 
                     "'NOT'", "'NOWAIT'", "'NULL'", "'NULLIF'", "'NULLIFZERO'", 
                     "'NUMBER'", "'NUMERIC'", "'OBJECT'", "'OBJECTS'", "'OCTET_LENGTH'", 
                     "'OF'", "'OFF'", "'OLD'", "'OLD_TABLE'", "'ON'", "'ONLY'", 
                     "'OPEN'", "'OPTION'", "'OR'", "'ORDER'", "'ORDERING'", 
                     "'OUT'", "'OUTER'", "'OVER'", "'OVERLAPS'", "'OVERRIDE'", 
                     "'PARAMETER'", "'PASSWORD'", "'PERCENT'", "'PERCENT_RANK'", 
                     "'PERM'", "'PERMANENT'", "'POSITION'", "'PRECISION'", 
                     "'PREPARE'", "'PRESERVE'", "'PRIMARY'", "'PRIVILEGES'", 
                     "'PROCEDURE'", "'PROFILE'", "'PROTECTION'", "'PUBLIC'", 
                     "'QUALIFIED'", "'QUALIFY'", "'QUANTILE'", "'QUEUE'", 
                     "'RADIANS'", "'RANDOM'", "'RANGE_N'", "'RANK'", "'READS'", 
                     "'REAL'", "'RECURSIVE'", "'REFERENCES'", "'REFERENCING'", 
                     "'REGR_AVGX'", "'REGR_AVGY'", "'REGR_COUNT'", "'REGR_INTERCEPT'", 
                     "'REGR_R2'", "'REGR_SLOPE'", "'REGR_SXX'", "'REGR_SXY'", 
                     "'REGR_SYY'", "'RELATIVE'", "'RELEASE'", "'RENAME'", 
                     "'REPEAT'", "'REPLACE'", "'REPLCONTROL'", "'REPLICATION'", 
                     "'REQUEST'", "'RESIGNAL'", "'RESTART'", "'RESTORE'", 
                     "'RESULT'", "'RESUME'", "'RET'", "'RETRIEVE'", "'RETURN'", 
                     "'RETURNS'", "'REVALIDATE'", "'REVOKE'", "'RIGHT'", 
                     "'RIGHTS'", "'ROLE'", "'ROLLBACK'", "'ROLLFORWARD'", 
                     "'ROLLUP'", "'ROW'", "'ROW_NUMBER'", "'ROWID'", "'ROWS'", 
                     "'SAMPLE'", "'SAMPLEID'", "'SCROLL'", "'SECOND'", "'SEL'", 
                     "'SELECT'", "'SESSION'", "'SET'", "'SETRESRATE'", "'SETS'", 
                     "'SETSESSRATE'", "'SHOW'", "'SIGNAL'", "'SIN'", "'SINH'", 
                     "'SKEW'", "'SMALLINT'", "'SOME'", "'SOUNDEX'", "'SPECIFIC'", 
                     "'SPOOL'", "'SQL'", "'SQLEXCEPTION'", "'SQLTEXT'", 
                     "'SQLWARNING'", "'SQRT'", "'SS'", "'START'", "'STARTUP'", 
                     "'STATEMENT'", "'STATISTICS'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
                     "'STEPINFO'", "'STRING_CS'", "'SUBSCRIBER'", "'SUBSTR'", 
                     "'SUBSTRING'", "'SUM'", "'SUMMARY'", "'SUSPEND'", "'TABLE'", 
                     "'TAN'", "'TANH'", "'TBL_CS'", "'TD_ANYTYPE'", "'TD_AUTHID'", 
                     "'TD_HOST'", "'TD_ROWLOADID'", "'TD_ROWREVISION'", 
                     "'TD_ROWSIZE'", "'TD_VALIST'", "'TEMPORARY'", "'TERMINATE'", 
                     "'THEN'", "'THRESHOLD'", "'TIME'", "'TIMESTAMP'", "'TIMEZONE_HOUR'", 
                     "'TIMEZONE_MINUTE'", "'TITLE'", "'TO'", "'TOP'", "'TRACE'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONTIME'", 
                     "'TRANSFORM'", "'TRANSLATE'", "'TRANSLATE_CHK'", "'TRIGGER'", 
                     "'TRIM'", "'TYPE'", "'UC'", "'UDTCASTAS'", "'UDTCASTLPAREN'", 
                     "'UDTMETHOD'", "'UDTTYPE'", "'UDTUSAGE'", "'UESCAPE'", 
                     "'UNDEFINED'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNTIL'", 
                     "'UNTIL_CHANGED'", "'UNTIL_CLOSED'", "'UPD'", "'UPDATE'", 
                     "'UPPER'", "'UPPERCASE'", "'USER'", "'USING'", "'VALIDTIME'", 
                     "'VALUE'", "'VALUES'", "'VAR_POP'", "'VAR_SAMP'", "'VARBYTE'", 
                     "'VARCHAR'", "'VARGRAPHIC'", "'VARIANT_TYPE'", "'VARYING'", 
                     "'VIEW'", "'VOLATILE'", "'WHEN'", "'WHERE'", "'WHILE'", 
                     "'WIDTH_BUCKET'", "'WITH'", "'WITHOUT'", "'WORK'", 
                     "'XMLPLAN'", "'YEAR'", "'ZEROIFNULL'", "'ZONE'", "'ALIAS'", 
                     "'DESCRIPTOR'", "'GO'", "'GOTO'", "'INDICATOR'", "'PRIVATE'", 
                     "'WAIT'", "'AbortSessions'", "'ABSENT'", "'ACCESS'", 
                     "'ACCORDING'", "'ACCUMULATE'", "'AG'", "'AggGeomIntersection'", 
                     "'AggGeomUnion'", "'ALLDBQL'", "'ALLOCATE'", "'ALLOCATION'", 
                     "'ALLOW'", "'ALLPARAMS'", "'ALLTDWM'", "'ALWAYS'", 
                     "'AMPCOUNT'", "'ANALYSIS'", "'ANCHOR'", "'ANCHOR_HOUR'", 
                     "'ANCHOR_MILLISECOND'", "'ANCHOR_MINUTE'", "'ANCHOR_SECOND'", 
                     "'APPLNAME'", "'ARCHIVE'", "'ARRAY'", "'ARRAY_ADD'", 
                     "'ARRAY_AGG'", "'ARRAY_AVG'", "'ARRAY_COMPARE'", "'ARRAY_CONCAT'", 
                     "'ARRAY_COUNT_DISTINCT'", "'ARRAY_DIV'", "'ARRAY_EQ'", 
                     "'ARRAY_GE'", "'ARRAY_GET'", "'ARRAY_GT'", "'ARRAY_LE'", 
                     "'ARRAY_LT'", "'ARRAY_MAX'", "'ARRAY_MIN'", "'ARRAY_MOD'", 
                     "'ARRAY_MUL'", "'ARRAY_NE'", "'ARRAY_SUB'", "'ARRAY_SUM'", 
                     "'ARRAY_UPDATE'", "'ARRAY_UPDATE_STRIDE'", "'ASCII'", 
                     "'ASSIGNMENT'", "'ATTR'", "'ATTRIBUTE'", "'ATTRIBUTES'", 
                     "'ATTRIBUTION'", "'ATTRS'", "'AUTH'", "'AUTO'", "'AUTOTEMP'", 
                     "'AVRO'", "'BIT_LENGTH'", "'BITAND'", "'BITNOT'", "'BITOR'", 
                     "'BITXOR'", "'BLOCKCOMPRESSION'", "'BLOCKCOMPRESSIONALGORITHM'", 
                     "'BLOCKCOMPRESSIONLEVEL'", "'BOM'", "'BOTTOM'", "'BSON'", 
                     "'C'", "'CALENDAR'", "'CALLED'", "'CALLER'", "'camset'", 
                     "'camset_l'", "'CAPTURE'", "'CARDINALITY'", "'CEIL'", 
                     "'CEILING'", "'CHANGERATE'", "'CHARACTERISTICS'", "'CHARSET'", 
                     "'CHARSET_COLL'", "'CHECKSUM'", "'CHR'", "'CLASS_ORIGIN'", 
                     "'CLICKLAG'", "'CLIENT'", "'CNT'", "'COLOCATE'", "'COLUMNMETA'", 
                     "'COLUMNS'", "'COLUMNSPERINDEX'", "'COLUMNSPERJOININDEX'", 
                     "'COMMAND_FUNCTION'", "'COMMAND_FUNCTION_CODE'", "'COMPARISON'", 
                     "'COMPILE'", "'CONCAT'", "'CONCURRENT'", "'CONDITION'", 
                     "'CONDITION_IDENTIFIER'", "'CONDITION_NUMBER'", "'CONTAINED'", 
                     "'CONTAINEDTOKEN'", "'CONTENT'", "'CONTIGUOUS'", "'COST'", 
                     "'COSTS'", "'COUNTSET'", "'CPP'", "'CPUTIME'", "'CPUTIMENORM'", 
                     "'CREATEDATASET'", "'CREATOR'", "'CUME_DIST'", "'CURDATE'", 
                     "'CURTIME'", "'DATA'", "'DATASET'", "'day_of_calendar'", 
                     "'day_of_month'", "'day_of_week'", "'day_of_year'", 
                     "'DayNumber_Of_Calendar'", "'DayNumber_Of_Month'", 
                     "'DayNumber_Of_Week'", "'DayNumber_Of_Year'", "'DayOccurrence_Of_Month'", 
                     "'DBA'", "'DBC'", "'DEBUG'", "'decamset'", "'decamset_l'", 
                     "'DECODE'", "'DECOMPRESS'", "'DEFINER'", "'DELIMITER'", 
                     "'DELTA_T'", "'DEMOGRAPHICS'", "'DENIALS'", "'DENSE'", 
                     "'DENSE_RANK'", "'DESCRIBE'", "'DETAILED'", "'DIAGNOSTICS'", 
                     "'DIGITS'", "'DIMENSION'", "'DOCUMENT'", "'DOT'", "'DOWN'", 
                     "'DR'", "'DUPCOUNT'", "'DUPCOUNTCUM'", "'EBCDIC'", 
                     "'EDITDISTANCE'", "'ELAPSEDSEC'", "'ELAPSEDTIME'", 
                     "'ELEMENT'", "'ELZS_H'", "'EMITNULL'", "'EMPTY'", "'EMPTY_BLOB'", 
                     "'EMPTY_CLOB'", "'ENCODE'", "'ENCODING'", "'ENCRYPT'", 
                     "'ERRORS'", "'ERRORTBL'", "'EVENTCOLUMN'", "'EXCEPTION'", 
                     "'EXCL'", "'EXCLUDE'", "'EXCLUDING'", "'EXCLUSIVE'", 
                     "'EXPIRE'", "'EXPORT'", "'EXPORTWIDTH'", "'FALSE'", 
                     "'FEATUREINFO'", "'FILE'", "'FILL'", "'FILTER'", "'FINAL'", 
                     "'FIRST_NOTNULL'", "'FIRST_VALUE'", "'FLOOR'", "'FOLLOWING'", 
                     "'FOREIGNFUNCTION'", "'FORTOKEN'", "'FRIDAY'", "'FROM_BYTES'", 
                     "'FUNCTIONPARAMETER'", "'G'", "'GETBIT'", "'GetPSFVersion'", 
                     "'GetQueryBand'", "'GetQueryBandValue'", "'GetTimeZoneDisplacement'", 
                     "'GLOBAL'", "'GLOP'", "'Greatest'", "'HIGH'", "'HOST'", 
                     "'IdentifyDatabase'", "'IdentifySession'", "'IdentifyTable'", 
                     "'IdentifyUser'", "'IFP'", "'IGNORE'", "'IMMEDIATELY'", 
                     "'IMPORT'", "'INCLUDE'", "'INCLUDING'", "'INCREMENT'", 
                     "'INCREMENTAL'", "'INDENT'", "'INDEXESPERTABLE'", "'INDEXMAINTMODE'", 
                     "'INIT'", "'INITCAP'", "'INLINE'", "'INSTANTIABLE'", 
                     "'INSTR'", "'INTERNAL'", "'INVOKER'", "'IOCOUNT'", 
                     "'IPARTITION'", "'ISOLATED'", "'ISOLATION'", "'JAVA'", 
                     "'JIS_COLL'", "'JSON'", "'JSON_AGG'", "'JSON_COMPOSE'", 
                     "'K'", "'KANJI1'", "'KANJISJIS'", "'KBYTE'", "'KBYTES'", 
                     "'KEEP'", "'KILOBYTES'", "'LAG'", "'LAST'", "'Last_Day'", 
                     "'LAST_NOTNULL'", "'LAST_VALUE'", "'LATIN'", "'LDIFF'", 
                     "'LEAD'", "'Least'", "'LENGTH'", "'LEVEL'", "'LIST'", 
                     "'LOAD'", "'LOCATE'", "'LOCKEDUSEREXPIRE'", "'LOW'", 
                     "'LPAD'", "'LTRIM'", "'lzcomp'", "'lzcomp_L'", "'lzdecomp'", 
                     "'lzdecomp_L'", "'M'", "'MAD'", "'MANUAL'", "'MAPPING'", 
                     "'MATCHED'", "'MAX_CHOOSE'", "'MAXCHAR'", "'MAXINTERVALS'", 
                     "'MAXLOGONATTEMPTS'", "'MAXVALUE'", "'MAXVALUELENGTH'", 
                     "'MEDIAN'", "'MEDIUM'", "'MEETS'", "'MEMBER'", "'MERGEBLOCKRATIO'", 
                     "'MESSAGE_LENGTH'", "'MESSAGE_TEXT'", "'MIN_CHOOSE'", 
                     "'MINCHAR'", "'MINVALUE'", "'MODIFIED'", "'MONDAY'", 
                     "'MonitorQueryBand'", "'MonitorSessionRate'", "'MonitorVersion'", 
                     "'MONTH_BEGIN'", "'MONTH_END'", "'month_of_calendar'", 
                     "'month_of_quarter'", "'month_of_year'", "'MonthNumber_Of_Calendar'", 
                     "'MonthNumber_Of_Quarter'", "'MonthNumber_Of_Year'", 
                     "'Months_Between'", "'MORE'", "'MULTINATIONAL'", "'NAME'", 
                     "'NAMESPACE'", "'NEVER'", "'NEXT_DAY'", "'NGRAM'", 
                     "'NIL'", "'NODDLTEXT'", "'NODE'", "'NONOPTCOST'", "'NONOPTINIT'", 
                     "'NONSEQUENCED'", "'NORIGHT'", "'NOSEXTRACTVARFROMPATH'", 
                     "'NOTATION'", "'NOW'", "'NPATH'", "'NTH'", "'NULLS'", 
                     "'NUMFPFNS'", "'NUMTODSINTERVAL'", "'NUMTOYMINTERVAL'", 
                     "'nvl'", "'nvl2'", "'NVP'", "'OA'", "'OAdd_Months'", 
                     "'OCOUNT'", "'ODELETE'", "'OEXISTS'", "'OEXTEND'", 
                     "'OFIRST'", "'OLAST'", "'OLD_NEW_TABLE'", "'OLIMIT'", 
                     "'ONEXT'", "'ONLINE'", "'OPRIOR'", "'OPTIONS'", "'ORDERBYVALUES'", 
                     "'ORDERED_ANALYTIC'", "'ORDINALITY'", "'OREPLACE'", 
                     "'OTRANSLATE'", "'OTRIM'", "'OVERLAYS'", "'OWNER'", 
                     "'P_INTERSECT'", "'P_NORMALIZE'", "'PARAMID'", "'PARAMINFO'", 
                     "'PARENT'", "'PARTITION'", "<INVALID>", "'PARTITIONED'", 
                     "'PARTITIONNAMES'", "'PASS'", "'PASSING'", "'PATH_GENERATOR'", 
                     "'PATH_START'", "'PATH_SUMMARIZER'", "'PATTERN'", "'PERCENTILE'", 
                     "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'PERIOD'", 
                     "'PIVOT'", "'PORTION'", "'POWER'", "'PRECEDES'", "'PRECEDING'", 
                     "'PREFIX'", "'PRINT'", "'PRIOR'", "'PROTECTED'", "'QUARTER_BEGIN'", 
                     "'QUARTER_END'", "'quarter_of_calendar'", "'quarter_of_year'", 
                     "'QuarterNumber_Of_Calendar'", "'QuarterNumber_Of_Year'", 
                     "'QUERY'", "'QUERY_BAND'", "'QUOTECHAR'", "'RANDOMIZED'", 
                     "'RANGE'", "<INVALID>", "'RAPIDFIRE'", "'RDIFF'", "'READ'", 
                     "'RECALC'", "'regexp_instr'", "'regexp_replace'", "'regexp_similar'", 
                     "'regexp_substr'", "'REPLACEMENT'", "'RESET'", "'RESPECT'", 
                     "'RESTRICTWORDS'", "'RETAIN'", "'RETURNED_SQLSTATE'", 
                     "'RETURNING'", "'REUSE'", "'ROOT'", "'ROTATELEFT'", 
                     "'ROTATERIGHT'", "'Round'", "'ROW_COUNT'", "'ROWIDGEN'", 
                     "'ROWIDGEN2'", "'RPAD'", "'RTRIM'", "'RU'", "'RULES'", 
                     "'RULESET'", "'SAMPLES'", "'SATURDAY'", "'SCHEMA'", 
                     "'SCRIPT'", "'SCRIPT_COMMAND'", "'SEARCHSPACE'", "'SEARCHUIFDBPATH'", 
                     "'SECURITY'", "'SEED'", "'SELF'", "'SEQ'", "'SEQUENCE'", 
                     "'SEQUENCED'", "'SERIALIZABLE'", "'SERVER'", "'SESSIONIZE'", 
                     "'SETBIT'", "'SetResourceRate'", "'SetSessionAccount'", 
                     "'SetSessionRate'", "'SHARE'", "'SHIFTLEFT'", "'SHIFTRIGHT'", 
                     "'SIGN'", "'SIZE'", "'SNAPPY_COMPRESS'", "'SNAPPY_DECOMPRESS'", 
                     "'SOURCE'", "'SPARSE'", "'SPECCHAR'", "'SPL'", "'SQLSTATE'", 
                     "'SR'", "'ST_GEOMETRY'", "'STAT'", "'STATIC'", "'STATS'", 
                     "'STATSUSAGE'", "'STORAGE'", "'STRIP'", "'STRTOK'", 
                     "'STYLE'", "'SUBBITSTR'", "'SUBCLASS_ORIGIN'", "'SUCCEEDS'", 
                     "'SUMMARYONLY'", "'SUNDAY'", "'SYMBOLS'", "'SYSTEM'", 
                     "'SYSTEM_TIME'", "'SYSTEMTEST'", "'TARGET'", "'TD_ARRAY2P'", 
                     "'TD_DATASET'", "'td_day_of_calendar'", "'td_day_of_month'", 
                     "'td_day_of_week'", "'td_day_of_year'", "'TD_GENERAL'", 
                     "'TD_GETTIMEBUCKET'", "'TD_INTERNAL'", "'TD_LZ_COMPRESS'", 
                     "'TD_LZ_DECOMPRESS'", "'td_month_of_calendar'", "'td_month_of_quarter'", 
                     "'td_month_of_year'", "'td_quarter_of_calendar'", "'td_quarter_of_year'", 
                     "'TD_TIME_BUCKET_NUMBER'", "'td_week_of_calendar'", 
                     "'td_week_of_month'", "'td_week_of_year'", "'td_weekday_of_month'", 
                     "'td_year_of_calendar'", "'TDWMEVENT'", "'TDWMEXCEPTION'", 
                     "'TDWMHISTORY'", "'TEMPORAL_DATE'", "'TEMPORAL_TIMESTAMP'", 
                     "'TEXT'", "'THRESHOLDPERCENT'", "'THROUGH'", "'THURSDAY'", 
                     "'TIES'", "'TIMECODE'", "'TIMECOLUMN'", "'TIMEOUT'", 
                     "'TIMESTAMPCOLUMN'", "'TO_BYTE'", "'TO_BYTES'", "'TO_CHAR'", 
                     "'TO_DATE'", "'TO_DSINTERVAL'", "'TO_NUMBER'", "'TO_TIMESTAMP'", 
                     "'TO_TIMESTAMP_TZ'", "'TO_YMINTERVAL'", "'TOTOKEN'", 
                     "'TPA'", "'TRANSACTION_ACTIVE'", "'TransUnicodeToUTF8'", 
                     "'TransUTF8ToUnicode'", "'TRUE'", "'Trunc'", "'TRUST_ONLY'", 
                     "'TTGRANULARITY'", "'TUESDAY'", "'UBJSON'", "'UCASE'", 
                     "'UDFSEARCHPATH'", "'UNBOUNDED'", "'UNCOMMITTED'", 
                     "'UNICODE'", "'UNKNOWN'", "'UNPIVOT'", "'USE'", "'USECOUNT'", 
                     "'UTILITYINFO'", "'VARRAY'", "'VERBOSE'", "'VERSION'", 
                     "'VERSIONING'", "'WARNING'", "'WEDNESDAY'", "'WEEK_BEGIN'", 
                     "'WEEK_END'", "'week_of_calendar'", "'week_of_month'", 
                     "'week_of_year'", "'weekday_of_month'", "'WeekNumber_Of_Calendar'", 
                     "'WeekNumber_Of_Month'", "'WeekNumber_Of_Quarter'", 
                     "'WeekNumber_Of_Year'", "'WHITESPACE'", "'WINDOWSIZE'", 
                     "'WITHIN'", "'WORKLOAD'", "'WRITE'", "'XML'", "'XMLAGG'", 
                     "'XMLATTRIBUTES'", "'XMLCOMMENT'", "'XMLCONCAT'", "'XMLDECLARATION'", 
                     "'XMLDOCUMENT'", "'XMLELEMENT'", "'XMLFOREST'", "'XMLNAMESPACES'", 
                     "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLSCHEMA'", 
                     "'XMLSERIALIZE'", "'XMLTABLE'", "'XMLTEXT'", "'XMLTYPE'", 
                     "'XMLVALIDATE'", "'YEAR_BEGIN'", "'YEAR_END'", "'year_of_calendar'", 
                     "'YearNumber_Of_Calendar'", "'ZLIB'", "'BUCKET'", "'COMMITTED'", 
                     "'CREATEXML'", "'_LATIN'", "'_UNICODE'", "'_KANJISJIS'", 
                     "'_GRAPHIC'", "'CSV'", "'CSVLD'", "'DATASIZE'", "'DAYOFMONTH'", 
                     "'DAYS'", "'DEFINITION'", "'DELETED'", "'FAST'", "'LISTAGG'", 
                     "'PATH'", "'REGEXP_SPLIT_TO_TABLE'", "'REVERSE'", "'SAS'", 
                     "'SQLTABLE'", "'STRTOK_SPLIT_TO_TABLE'", "'SYSLIB'", 
                     "'SYSUDTLIB'", "'TD_SERVER_DB'", "'TD_SYSFNLIB'", "'TD_SYSXML'", 
                     "'TIMEDATEWZCONTROL'", "'TRUST'", "'TRYCAST'", "'UDT'", 
                     "'USAGE'", "'VARIANT'", "'WEEK'", "'WIDTH'", "'XMLPUBLISH'", 
                     "'XMLPUBLISH_STREAM'", "'XMLSPLIT'", "'LATIN_TO_UNICODE'", 
                     "'UNICODE_TO_LATIN'", "'LOCALE_TO_UNICODE'", "'UNICODE_TO_LOCALE'", 
                     "'ASBSON'", "'ASBSONTEXT'", "'COMBINE'", "'EXISTVALUE'", 
                     "'JSONEXTRACT'", "'JSONEXTRACTVALUE'", "'JSONEXTRACTLARGEVALUE'", 
                     "'KEYCOUNT'", "'METADATA'", "'STORAGE_SIZE'", "'CREATESCHEMABASEDXML'", 
                     "'CREATENONSCHEMABASEDXML'", "'EXISTSNODE'", "'ISCONTENT'", 
                     "'ISDOCUMENT'", "'ISSCHEMAVALID'", "'ISSCHEMAVALIDATED'", 
                     "'XMLEXTRACT'", "'XMLTRANSFORM'", "'PROC_ID'", "'LOCATION'", 
                     "'PAYLOAD'", "'TRUSTED'", "'PATHPATTERN'", "'MANIFEST'", 
                     "'ROWFORMAT'", "'STOREDAS'", "'HEADER'", "'STRIP_EXTERIOR_SPACES'", 
                     "'STRIP_ENCLOSING_CHAR'", "'RLS'", "'SINGLE'", "'MULTIPLE'", 
                     "'JSON_COMPRESS'", "'JSON_DECOMPRESS'", "'TS_COMPRESS'", 
                     "'TS_DECOMPRESS'", "'CONTIGUOUSMAPAMPS'", "'SPARSEMAPAMPS'", 
                     "'SPARSETABLEAMPS'", "'UNNEST'", "'CALCMATRIX'", "'PHRASE'", 
                     "'CALCTYPE'", "'OUTPUT'", "'NULL_HANDLING'", "'READ_NOS'", 
                     "'BUFFERSIZE'", "'RETURNTYPE'", "'SAMPLE_PERC'", "'FULLSCAN'", 
                     "'TD_UNPIVOT'", "'VALUE_COLUMNS'", "'UNPIVOT_COLUMN'", 
                     "'COLUMN_LIST'", "'COLUMN_ALIAS_LIST'", "'INCLUDE_NULLS'", 
                     "'WRITE_NOS'", "'NAMING'", "'MANIFESTFILE'", "'MANIFESTONLY'", 
                     "'OVERWRITE'", "'INCLUDE_ORDERING'", "'INCLUDE_HASHBY'", 
                     "'MAXOBJECTSIZE'", "'COMPRESSION'", "'ARRAY_TO_JSON'", 
                     "'BSON_CHECK'", "'GEOJSONFROMGEOM'", "'GEOMFROMGEOJSON'", 
                     "'JSON_CHECK'", "'JSONGETVALUE'", "'JSONMETADATA'", 
                     "'NVP2JSON'", "'TD_JSONSHRED'", "'JSON_KEYS'", "'JSON_TABLE'", 
                     "'DEPTH'", "'QUOTES'", "'ROWEXPR'", "'COLEXPR'", "'RETURNTYPES'", 
                     "'NOCASE'", "'TRUNCATE'", "'LINK'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "':'", 
                     "','", "'.'", "'@'", "'^'", "'?'", "'('", "')'", "'['", 
                     "']'", "'||'", "'\\u00A6\\u00A6'", "'*'", "'/'", "'+'", 
                     "'-'", "'**'", "'='", "'<>'", "'^='", "'<'", "'<='", 
                     "'>'", "'>='" ]

    symbolicNames = [ "<INVALID>", "ABORT", "ABORTSESSION", "ABS", "ACCESS_LOCK", 
                      "ACCOUNT", "ACOS", "ACOSH", "ADD", "ADD_MONTHS", "ADMIN", 
                      "AFTER", "AGGREGATE", "ALL", "ALTER", "AMP", "AND", 
                      "ANSIDATE", "ANY", "ARGLPAREN", "AS", "ASC", "ASIN", 
                      "ASINH", "AT", "ATAN", "ATAN2", "ATANH", "ATOMIC", 
                      "AUTHORIZATION", "AVE", "AVERAGE", "AVG", "BEFORE", 
                      "BEGIN", "BETWEEN", "BIGINT", "BINARY", "BLOB", "BOTH", 
                      "BT", "BUT", "BY", "BYTE", "BYTEINT", "BYTES", "CALL", 
                      "CASE", "CASE_N", "CASESPECIFIC", "CAST", "CD", "CHAR", 
                      "CHAR_LENGTH", "CHAR2HEXINT", "CHARACTER", "CHARACTER_LENGTH", 
                      "CHARACTERS", "CHARS", "CHECK", "CHECKPOINT", "CLASS", 
                      "CLOB", "CLOSE", "CLUSTER", "CM", "COALESCE", "COLLATION", 
                      "COLLECT", "COLUMN", "COMMENT", "COMMIT", "COMPRESS", 
                      "CONNECT", "CONSTRAINT", "CONSTRUCTOR", "CONSUME", 
                      "CONTAINS", "CONTINUE", "CONVERT_TABLE_HEADER", "CORR", 
                      "COS", "COSH", "COUNT", "COVAR_POP", "COVAR_SAMP", 
                      "CREATE", "CROSS", "CS", "CSUM", "CT", "CTCONTROL", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_ROLE", 
                      "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
                      "CURSOR", "CV", "CYCLE", "DATABASE", "DATABLOCKSIZE", 
                      "DATE", "DATEFORM", "DAY", "DEALLOCATE", "DEC", "DECIMAL", 
                      "DECLARE", "DEFAULT", "DEFERRED", "DEGREES", "DEL", 
                      "DELETE", "DESC", "DETERMINISTIC", "DIAGNOSTIC", "DICTIONARY", 
                      "DISABLED", "DISTINCT", "DO", "DOMAIN", "DOUBLE", 
                      "DROP", "DUAL", "DUMP", "DYNAMIC", "EACH", "ECHO", 
                      "ELSE", "ELSEIF", "ENABLED", "END", "EQ", "EQUALS", 
                      "ERROR", "ERRORFILES", "ERRORTABLES", "ESCAPE", "ET", 
                      "EXCEPT", "EXEC", "EXECUTE", "EXISTS", "EXIT", "EXP", 
                      "EXPAND", "EXPANDING", "EXPLAIN", "EXTERNAL", "EXTRACT", 
                      "FALLBACK", "FASTEXPORT", "FETCH", "FIRST", "FLOAT", 
                      "FLUSH", "FOR", "FOREIGN", "FORMAT", "FOUND", "FREESPACE", 
                      "FROM", "FULL", "FUNCTION", "FUNCTIONDESCRIPTOR", 
                      "GE", "GENERATED", "GET", "GIVE", "GRANT", "GRAPHIC", 
                      "GROUP", "GROUPING", "GT", "HANDLER", "HASH", "HASHAMP", 
                      "HASHBAKAMP", "HASHBUCKET", "HASHROW", "HAVING", "HELP", 
                      "HOUR", "ID2BIGINT", "IDENTITY", "IF", "IMMEDIATE", 
                      "IN", "INCONSISTENT", "INDEX", "INITIATE", "INNER", 
                      "INOUT", "INPUT", "INS", "INSERT", "INSTANCE", "INSTEAD", 
                      "INT", "INTEGER", "INTEGERDATE", "INTERSECT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JAR", "JOIN", "JOURNAL", 
                      "KEY", "KURTOSIS", "LANGUAGE", "LARGE", "LE", "LEADING", 
                      "LEAVE", "LEFT", "LIKE", "LIMIT", "LN", "LOADING", 
                      "LOCAL", "LOCATOR", "LOCK", "LOCKING", "LOG", "LOGGING", 
                      "LOGON", "LONG", "LOOP", "LOWER", "LT", "MACRO", "MAP", 
                      "MAVG", "MAX", "MAXIMUM", "MCHARACTERS", "MDIFF", 
                      "MERGE", "METHOD", "MIN", "MINDEX", "MINIMUM", "MINUS", 
                      "MINUTE", "MLINREG", "MLOAD", "MOD", "MODE", "MODIFIES", 
                      "MODIFY", "MONITOR", "MONRESOURCE", "MONSESSION", 
                      "MONTH", "MSUBSTR", "MSUM", "MULTISET", "NAMED", "NATURAL", 
                      "NE", "NEW", "NEW_TABLE", "NEXT", "NO", "NONE", "NONTEMPORAL", 
                      "NORMALIZE", "NOT", "NOWAIT", "NULL", "NULLIF", "NULLIFZERO", 
                      "NUMBER", "NUMERIC", "OBJECT", "OBJECTS", "OCTET_LENGTH", 
                      "OF", "OFF", "OLD", "OLD_TABLE", "ON", "ONLY", "OPEN", 
                      "OPTION", "OR", "ORDER", "ORDERING", "OUT", "OUTER", 
                      "OVER", "OVERLAPS", "OVERRIDE", "PARAMETER", "PASSWORD", 
                      "PERCENT", "PERCENT_RANK", "PERM", "PERMANENT", "POSITION", 
                      "PRECISION", "PREPARE", "PRESERVE", "PRIMARY", "PRIVILEGES", 
                      "PROCEDURE", "PROFILE", "PROTECTION", "PUBLIC", "QUALIFIED", 
                      "QUALIFY", "QUANTILE", "QUEUE", "RADIANS", "RANDOM", 
                      "RANGE_N", "RANK", "READS", "REAL", "RECURSIVE", "REFERENCES", 
                      "REFERENCING", "REGR_AVGX", "REGR_AVGY", "REGR_COUNT", 
                      "REGR_INTERCEPT", "REGR_R2", "REGR_SLOPE", "REGR_SXX", 
                      "REGR_SXY", "REGR_SYY", "RELATIVE", "RELEASE", "RENAME", 
                      "REPEAT", "REPLACE", "REPLCONTROL", "REPLICATION", 
                      "REQUEST", "RESIGNAL", "RESTART", "RESTORE", "RESULT", 
                      "RESUME", "RET", "RETRIEVE", "RETURN", "RETURNS", 
                      "REVALIDATE", "REVOKE", "RIGHT", "RIGHTS", "ROLE", 
                      "ROLLBACK", "ROLLFORWARD", "ROLLUP", "ROW", "ROW_NUMBER", 
                      "ROWID", "ROWS", "SAMPLE", "SAMPLEID", "SCROLL", "SECOND", 
                      "SEL", "SELECT", "SESSION", "SET", "SETRESRATE", "SETS", 
                      "SETSESSRATE", "SHOW", "SIGNAL", "SIN", "SINH", "SKEW", 
                      "SMALLINT", "SOME", "SOUNDEX", "SPECIFIC", "SPOOL", 
                      "SQL", "SQLEXCEPTION", "SQLTEXT", "SQLWARNING", "SQRT", 
                      "SS", "START", "STARTUP", "STATEMENT", "STATISTICS", 
                      "STDDEV_POP", "STDDEV_SAMP", "STEPINFO", "STRING_CS", 
                      "SUBSCRIBER", "SUBSTR", "SUBSTRING", "SUM", "SUMMARY", 
                      "SUSPEND", "TABLE", "TAN", "TANH", "TBL_CS", "TD_ANYTYPE", 
                      "TD_AUTHID", "TD_HOST", "TD_ROWLOADID", "TD_ROWREVISION", 
                      "TD_ROWSIZE", "TD_VALIST", "TEMPORARY", "TERMINATE", 
                      "THEN", "THRESHOLD", "TIME", "TIMESTAMP", "TIMEZONE_HOUR", 
                      "TIMEZONE_MINUTE", "TITLE", "TO", "TOP", "TRACE", 
                      "TRAILING", "TRANSACTION", "TRANSACTIONTIME", "TRANSFORM", 
                      "TRANSLATE", "TRANSLATE_CHK", "TRIGGER", "TRIM", "TYPE", 
                      "UC", "UDTCASTAS", "UDTCASTLPAREN", "UDTMETHOD", "UDTTYPE", 
                      "UDTUSAGE", "UESCAPE", "UNDEFINED", "UNDO", "UNION", 
                      "UNIQUE", "UNTIL", "UNTIL_CHANGED", "UNTIL_CLOSED", 
                      "UPD", "UPDATE", "UPPER", "UPPERCASE", "USER", "USING", 
                      "VALIDTIME", "VALUE", "VALUES", "VAR_POP", "VAR_SAMP", 
                      "VARBYTE", "VARCHAR", "VARGRAPHIC", "VARIANT_TYPE", 
                      "VARYING", "VIEW", "VOLATILE", "WHEN", "WHERE", "WHILE", 
                      "WIDTH_BUCKET", "WITH", "WITHOUT", "WORK", "XMLPLAN", 
                      "YEAR", "ZEROIFNULL", "ZONE", "ALIAS", "DESCRIPTOR", 
                      "GO", "GOTO", "INDICATOR", "PRIVATE", "WAIT", "ABORTSESSIONS", 
                      "ABSENT", "ACCESS", "ACCORDING", "ACCUMULATE", "AG", 
                      "AGGGEOMINTERSECTION", "AGGGEOMUNION", "ALLDBQL", 
                      "ALLOCATE", "ALLOCATION", "ALLOW", "ALLPARAMS", "ALLTDWM", 
                      "ALWAYS", "AMPCOUNT", "ANALYSIS", "ANCHOR", "ANCHOR_HOUR", 
                      "ANCHOR_MILLISECOND", "ANCHOR_MINUTE", "ANCHOR_SECOND", 
                      "APPLNAME", "ARCHIVE", "ARRAY", "ARRAY_ADD", "ARRAY_AGG", 
                      "ARRAY_AVG", "ARRAY_COMPARE", "ARRAY_CONCAT", "ARRAY_COUNT_DISTINCT", 
                      "ARRAY_DIV", "ARRAY_EQ", "ARRAY_GE", "ARRAY_GET", 
                      "ARRAY_GT", "ARRAY_LE", "ARRAY_LT", "ARRAY_MAX", "ARRAY_MIN", 
                      "ARRAY_MOD", "ARRAY_MUL", "ARRAY_NE", "ARRAY_SUB", 
                      "ARRAY_SUM", "ARRAY_UPDATE", "ARRAY_UPDATE_STRIDE", 
                      "ASCII", "ASSIGNMENT", "ATTR", "ATTRIBUTE", "ATTRIBUTES", 
                      "ATTRIBUTION", "ATTRS", "AUTH", "AUTO", "AUTOTEMP", 
                      "AVRO", "BIT_LENGTH", "BITAND", "BITNOT", "BITOR", 
                      "BITXOR", "BLOCKCOMPRESSION", "BLOCKCOMPRESSIONALGORITHM", 
                      "BLOCKCOMPRESSIONLEVEL", "BOM", "BOTTOM", "BSON", 
                      "C", "CALENDAR", "CALLED", "CALLER", "CAMSET", "CAMSET_L", 
                      "CAPTURE", "CARDINALITY", "CEIL", "CEILING", "CHANGERATE", 
                      "CHARACTERISTICS", "CHARSET", "CHARSET_COLL", "CHECKSUM", 
                      "CHR", "CLASS_ORIGIN", "CLICKLAG", "CLIENT", "CNT", 
                      "COLOCATE", "COLUMNMETA", "COLUMNS", "COLUMNSPERINDEX", 
                      "COLUMNSPERJOININDEX", "COMMAND_FUNCTION", "COMMAND_FUNCTION_CODE", 
                      "COMPARISON", "COMPILE", "CONCAT", "CONCURRENT", "CONDITION", 
                      "CONDITION_IDENTIFIER", "CONDITION_NUMBER", "CONTAINED", 
                      "CONTAINEDTOKEN", "CONTENT", "CONTIGUOUS", "COST", 
                      "COSTS", "COUNTSET", "CPP", "CPUTIME", "CPUTIMENORM", 
                      "CREATEDATASET", "CREATOR", "CUME_DIST", "CURDATE", 
                      "CURTIME", "DATA", "DATASET", "DAY_OF_CALENDAR", "DAY_OF_MONTH", 
                      "DAY_OF_WEEK", "DAY_OF_YEAR", "DAYNUMBER_OF_CALENDAR", 
                      "DAYNUMBER_OF_MONTH", "DAYNUMBER_OF_WEEK", "DAYNUMBER_OF_YEAR", 
                      "DAYOCCURRENCE_OF_MONTH", "DBA", "DBC", "DEBUG", "DECAMSET", 
                      "DECAMSET_L", "DECODE", "DECOMPRESS", "DEFINER", "DELIMITER", 
                      "DELTA_T", "DEMOGRAPHICS", "DENIALS", "DENSE", "DENSE_RANK", 
                      "DESCRIBE", "DETAILED", "DIAGNOSTICS", "DIGITS", "DIMENSION", 
                      "DOCUMENT", "DOT", "DOWN", "DR", "DUPCOUNT", "DUPCOUNTCUM", 
                      "EBCDIC", "EDITDISTANCE", "ELAPSEDSEC", "ELAPSEDTIME", 
                      "ELEMENT", "ELZS_H", "EMITNULL", "EMPTY", "EMPTY_BLOB", 
                      "EMPTY_CLOB", "ENCODE", "ENCODING", "ENCRYPT", "ERRORS", 
                      "ERRORTBL", "EVENTCOLUMN", "EXCEPTION", "EXCL", "EXCLUDE", 
                      "EXCLUDING", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXPORTWIDTH", 
                      "FALSE", "FEATUREINFO", "FILE", "FILL", "FILTER", 
                      "FINAL", "FIRST_NOTNULL", "FIRST_VALUE", "FLOOR", 
                      "FOLLOWING", "FOREIGNFUNCTION", "FORTOKEN", "FRIDAY", 
                      "FROM_BYTES", "FUNCTIONPARAMETER", "G", "GETBIT", 
                      "GETPSFVERSION", "GETQUERYBAND", "GETQUERYBANDVALUE", 
                      "GETTIMEZONEDISPLACEMENT", "GLOBAL", "GLOP", "GREATEST", 
                      "HIGH", "HOST", "IDENTIFYDATABASE", "IDENTIFYSESSION", 
                      "IDENTIFYTABLE", "IDENTIFYUSER", "IFP", "IGNORE", 
                      "IMMEDIATELY", "IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", 
                      "INCREMENTAL", "INDENT", "INDEXESPERTABLE", "INDEXMAINTMODE", 
                      "INIT", "INITCAP", "INLINE", "INSTANTIABLE", "INSTR", 
                      "INTERNAL", "INVOKER", "IOCOUNT", "IPARTITION", "ISOLATED", 
                      "ISOLATION", "JAVA", "JIS_COLL", "JSON", "JSON_AGG", 
                      "JSON_COMPOSE", "K", "KANJI1", "KANJISJIS", "KBYTE", 
                      "KBYTES", "KEEP", "KILOBYTES", "LAG", "LAST", "LAST_DAY", 
                      "LAST_NOTNULL", "LAST_VALUE", "LATIN", "LDIFF", "LEAD", 
                      "LEAST", "LENGTH", "LEVEL", "LIST", "LOAD", "LOCATE", 
                      "LOCKEDUSEREXPIRE", "LOW", "LPAD", "LTRIM", "LZCOMP", 
                      "LZCOMP_L", "LZDECOMP", "LZDECOMP_L", "M", "MAD", 
                      "MANUAL", "MAPPING", "MATCHED", "MAX_CHOOSE", "MAXCHAR", 
                      "MAXINTERVALS", "MAXLOGONATTEMPTS", "MAXVALUE", "MAXVALUELENGTH", 
                      "MEDIAN", "MEDIUM", "MEETS", "MEMBER", "MERGEBLOCKRATIO", 
                      "MESSAGE_LENGTH", "MESSAGE_TEXT", "MIN_CHOOSE", "MINCHAR", 
                      "MINVALUE", "MODIFIED", "MONDAY", "MONITORQUERYBAND", 
                      "MONITORSESSIONRATE", "MONITORVERSION", "MONTH_BEGIN", 
                      "MONTH_END", "MONTH_OF_CALENDAR", "MONTH_OF_QUARTER", 
                      "MONTH_OF_YEAR", "MONTHNUMBER_OF_CALENDAR", "MONTHNUMBER_OF_QUARTER", 
                      "MONTHNUMBER_OF_YEAR", "MONTHS_BETWEEN", "MORE_", 
                      "MULTINATIONAL", "NAME", "NAMESPACE", "NEVER", "NEXT_DAY", 
                      "NGRAM", "NIL", "NODDLTEXT", "NODE", "NONOPTCOST", 
                      "NONOPTINIT", "NONSEQUENCED", "NORIGHT", "NOSEXTRACTVARFROMPATH", 
                      "NOTATION", "NOW", "NPATH", "NTH", "NULLS", "NUMFPFNS", 
                      "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "NVL", "NVL2", 
                      "NVP", "OA", "OADD_MONTHS", "OCOUNT", "ODELETE", "OEXISTS", 
                      "OEXTEND", "OFIRST", "OLAST", "OLD_NEW_TABLE", "OLIMIT", 
                      "ONEXT", "ONLINE", "OPRIOR", "OPTIONS", "ORDERBYVALUES", 
                      "ORDERED_ANALYTIC", "ORDINALITY", "OREPLACE", "OTRANSLATE", 
                      "OTRIM", "OVERLAYS", "OWNER", "P_INTERSECT", "P_NORMALIZE", 
                      "PARAMID", "PARAMINFO", "PARENT", "PARTITION", "PARTITION_L", 
                      "PARTITIONED", "PARTITIONNAMES", "PASS", "PASSING", 
                      "PATH_GENERATOR", "PATH_START", "PATH_SUMMARIZER", 
                      "PATTERN", "PERCENTILE", "PERCENTILE_CONT", "PERCENTILE_DISC", 
                      "PERIOD", "PIVOT", "PORTION", "POWER", "PRECEDES", 
                      "PRECEDING", "PREFIX", "PRINT", "PRIOR", "PROTECTED", 
                      "QUARTER_BEGIN", "QUARTER_END", "QUARTER_OF_CALENDAR", 
                      "QUARTER_OF_YEAR", "QUARTERNUMBER_OF_CALENDAR", "QUARTERNUMBER_OF_YEAR", 
                      "QUERY", "QUERY_BAND", "QUOTECHAR", "RANDOMIZED", 
                      "RANGE", "RANGE_L", "RAPIDFIRE", "RDIFF", "READ", 
                      "RECALC", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SIMILAR", 
                      "REGEXP_SUBSTR", "REPLACEMENT", "RESET", "RESPECT", 
                      "RESTRICTWORDS", "RETAIN", "RETURNED_SQLSTATE", "RETURNING", 
                      "REUSE", "ROOT", "ROTATELEFT", "ROTATERIGHT", "ROUND", 
                      "ROW_COUNT", "ROWIDGEN", "ROWIDGEN2", "RPAD", "RTRIM", 
                      "RU", "RULES", "RULESET", "SAMPLES", "SATURDAY", "SCHEMA", 
                      "SCRIPT", "SCRIPT_COMMAND", "SEARCHSPACE", "SEARCHUIFDBPATH", 
                      "SECURITY", "SEED", "SELF", "SEQ", "SEQUENCE", "SEQUENCED", 
                      "SERIALIZABLE", "SERVER", "SESSIONIZE", "SETBIT", 
                      "SETRESOURCERATE", "SETSESSIONACCOUNT", "SETSESSIONRATE", 
                      "SHARE", "SHIFTLEFT", "SHIFTRIGHT", "SIGN", "SIZE", 
                      "SNAPPY_COMPRESS", "SNAPPY_DECOMPRESS", "SOURCE", 
                      "SPARSE", "SPECCHAR", "SPL", "SQLSTATE", "SR", "ST_GEOMETRY", 
                      "STAT", "STATIC", "STATS", "STATSUSAGE", "STORAGE", 
                      "STRIP", "STRTOK", "STYLE", "SUBBITSTR", "SUBCLASS_ORIGIN", 
                      "SUCCEEDS", "SUMMARYONLY", "SUNDAY", "SYMBOLS", "SYSTEM", 
                      "SYSTEM_TIME", "SYSTEMTEST", "TARGET", "TD_ARRAY2P", 
                      "TD_DATASET", "TD_DAY_OF_CALENDAR", "TD_DAY_OF_MONTH", 
                      "TD_DAY_OF_WEEK", "TD_DAY_OF_YEAR", "TD_GENERAL", 
                      "TD_GETTIMEBUCKET", "TD_INTERNAL", "TD_LZ_COMPRESS", 
                      "TD_LZ_DECOMPRESS", "TD_MONTH_OF_CALENDAR", "TD_MONTH_OF_QUARTER", 
                      "TD_MONTH_OF_YEAR", "TD_QUARTER_OF_CALENDAR", "TD_QUARTER_OF_YEAR", 
                      "TD_TIME_BUCKET_NUMBER", "TD_WEEK_OF_CALENDAR", "TD_WEEK_OF_MONTH", 
                      "TD_WEEK_OF_YEAR", "TD_WEEKDAY_OF_MONTH", "TD_YEAR_OF_CALENDAR", 
                      "TDWMEVENT", "TDWMEXCEPTION", "TDWMHISTORY", "TEMPORAL_DATE", 
                      "TEMPORAL_TIMESTAMP", "TEXT", "THRESHOLDPERCENT", 
                      "THROUGH", "THURSDAY", "TIES", "TIMECODE", "TIMECOLUMN", 
                      "TIMEOUT", "TIMESTAMPCOLUMN", "TO_BYTE", "TO_BYTES", 
                      "TO_CHAR", "TO_DATE", "TO_DSINTERVAL", "TO_NUMBER", 
                      "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_YMINTERVAL", 
                      "TOTOKEN", "TPA", "TRANSACTION_ACTIVE", "TRANSUNICODETOUTF8", 
                      "TRANSUTF8TOUNICODE", "TRUE", "TRUNC", "TRUST_ONLY", 
                      "TTGRANULARITY", "TUESDAY", "UBJSON", "UCASE", "UDFSEARCHPATH", 
                      "UNBOUNDED", "UNCOMMITTED", "UNICODE", "UNKNOWN", 
                      "UNPIVOT", "USE", "USECOUNT", "UTILITYINFO", "VARRAY", 
                      "VERBOSE", "VERSION", "VERSIONING", "WARNING", "WEDNESDAY", 
                      "WEEK_BEGIN", "WEEK_END", "WEEK_OF_CALENDAR", "WEEK_OF_MONTH", 
                      "WEEK_OF_YEAR", "WEEKDAY_OF_MONTH", "WEEKNUMBER_OF_CALENDAR", 
                      "WEEKNUMBER_OF_MONTH", "WEEKNUMBER_OF_QUARTER", "WEEKNUMBER_OF_YEAR", 
                      "WHITESPACE", "WINDOWSIZE", "WITHIN", "WORKLOAD", 
                      "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCOMMENT", 
                      "XMLCONCAT", "XMLDECLARATION", "XMLDOCUMENT", "XMLELEMENT", 
                      "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
                      "XMLQUERY", "XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", 
                      "XMLTEXT", "XMLTYPE", "XMLVALIDATE", "YEAR_BEGIN", 
                      "YEAR_END", "YEAR_OF_CALENDAR", "YEARNUMBER_OF_CALENDAR", 
                      "ZLIB", "BUCKET", "COMMITTED", "CREATEXML", "CS_LATIN", 
                      "CS_UNICODE", "CS_KANJISJIS", "CS_GRAPHIC", "CSV", 
                      "CSVLD", "DATASIZE", "DAYOFMONTH", "DAYS", "DEFINITION", 
                      "DELETED", "FAST", "LISTAGG", "PATH", "REGEXP_SPLIT_TO_TABLE", 
                      "REVERSE", "SAS", "SQLTABLE", "STRTOK_SPLIT_TO_TABLE", 
                      "SYSLIB", "SYSUDTLIB", "TD_SERVER_DB", "TD_SYSFNLIB", 
                      "TD_SYSXML", "TIMEDATEWZCONTROL", "TRUST", "TRYCAST", 
                      "UDT", "USAGE", "VARIANT", "WEEK", "WIDTH", "XMLPUBLISH", 
                      "XMLPUBLISH_STREAM", "XMLSPLIT", "LATIN_TO_UNICODE", 
                      "UNICODE_TO_LATIN", "LOCALE_TO_UNICODE", "UNICODE_TO_LOCALE", 
                      "ASBSON", "ASBSONTEXT", "COMBINE", "EXISTVALUE", "JSONEXTRACT", 
                      "JSONEXTRACTVALUE", "JSONEXTRACTLARGEVALUE", "KEYCOUNT", 
                      "METADATA", "STORAGE_SIZE", "CREATESCHEMABASEDXML", 
                      "CREATENONSCHEMABASEDXML", "EXISTSNODE", "ISCONTENT", 
                      "ISDOCUMENT", "ISSCHEMAVALID", "ISSCHEMAVALIDATED", 
                      "XMLEXTRACT", "XMLTRANSFORM", "PROC_ID", "LOCATION", 
                      "PAYLOAD", "TRUSTED", "PATHPATTERN", "MANIFEST", "ROWFORMAT", 
                      "STOREDAS", "HEADER", "STRIP_EXTERIOR_SPACES", "STRIP_ENCLOSING_CHAR", 
                      "RLS", "SINGLE", "MULTIPLE", "JSON_COMPRESS", "JSON_DECOMPRESS", 
                      "TS_COMPRESS", "TS_DECOMPRESS", "CONTIGUOUSMAPAMPS", 
                      "SPARSEMAPAMPS", "SPARSETABLEAMPS", "UNNEST", "CALCMATRIX", 
                      "PHRASE", "CALCTYPE", "OUTPUT", "NULL_HANDLING", "READ_NOS", 
                      "BUFFERSIZE", "RETURNTYPE", "SAMPLE_PERC", "FULLSCAN", 
                      "TD_UNPIVOT", "VALUE_COLUMNS", "UNPIVOT_COLUMN", "COLUMN_LIST", 
                      "COLUMN_ALIAS_LIST", "INCLUDE_NULLS", "WRITE_NOS", 
                      "NAMING", "MANIFESTFILE", "MANIFESTONLY", "OVERWRITE", 
                      "INCLUDE_ORDERING", "INCLUDE_HASHBY", "MAXOBJECTSIZE", 
                      "COMPRESSION", "ARRAY_TO_JSON", "BSON_CHECK", "GEOJSONFROMGEOM", 
                      "GEOMFROMGEOJSON", "JSON_CHECK", "JSONGETVALUE", "JSONMETADATA", 
                      "NVP2JSON", "TD_JSONSHRED", "JSON_KEYS", "JSON_TABLE", 
                      "DEPTH", "QUOTES", "ROWEXPR", "COLEXPR", "RETURNTYPES", 
                      "NOCASE", "TRUNCATE", "LINK", "OBJECT_NAME", "UNSIGNED_INTEGER", 
                      "HEX_BYTE_LITERAL", "HEX_INTEGER_LITERAL", "FLOAT_LITERAL", 
                      "DATE_STRING", "TIME_STRING", "TIMESTAMP_STRING", 
                      "PERIOD_STRING", "UNICODE_STRING_LEADING", "CHAR_STRING", 
                      "HEX_STRING", "PASSWORD_STRING", "SEMICOLON", "COLON", 
                      "COMMA", "DOT_", "AT_SIGN", "CARET", "QUESTION_MARK", 
                      "OPEN_PAR", "CLOSE_PAR", "OPEN_SQ_BRACKET", "CLOSE_SQ_BRACKET", 
                      "CONCATENATE", "BROKEN_CONCATENATE", "MUL_SIGN", "DIV_SIGN", 
                      "PLUS_SIGN", "MINUS_SIGN", "EXPONENTIATION", "EQUALS_SIGN", 
                      "NOT_EQUALS_SIGN", "NOT_EQUALS_SIGN_TD", "LT_SIGN", 
                      "LE_SIGN", "GT_SIGN", "GE_SIGN", "SINGLE_LINE_COMMENT", 
                      "MULTI_LINE_COMMENT", "WS" ]

    RULE_sql_script = 0
    RULE_unit_stat = 1
    RULE_ddl_stat = 2
    RULE_alter_foreign_server_stat = 3
    RULE_foreign_server_add_clause = 4
    RULE_foreign_server_drop_clause = 5
    RULE_alter_function_stat = 6
    RULE_alter_join_index_stat = 7
    RULE_alter_hash_index_stat = 8
    RULE_alter_table_stat = 9
    RULE_alter_table_basic_stat = 10
    RULE_alter_table_join_index_stat = 11
    RULE_alter_table_revalidation_stat = 12
    RULE_alter_table_release_rows_stat = 13
    RULE_alter_table_map_and_collocation_form_stat = 14
    RULE_alter_foreign_table_stat = 15
    RULE_alter_foreign_column_option = 16
    RULE_alter_table_to_current_stat = 17
    RULE_alter_option = 18
    RULE_table_option_alter_form = 19
    RULE_add_option = 20
    RULE_drop_option = 21
    RULE_modify_primary = 22
    RULE_alter_partitioning = 23
    RULE_add_drop_range_option = 24
    RULE_alter_column_spec = 25
    RULE_alter_range_expr = 26
    RULE_with_isolated_loading_alter_form = 27
    RULE_join_index_add_option = 28
    RULE_alter_type_stat = 29
    RULE_add_attribute_clause = 30
    RULE_add_method_clause = 31
    RULE_add_specific_method_clause = 32
    RULE_drop_attribute_clause = 33
    RULE_drop_method_clause = 34
    RULE_drop_specific_method_clause = 35
    RULE_add_method_spec = 36
    RULE_add_specific_method_spec = 37
    RULE_begin_isolated_loading_stat = 38
    RULE_begin_logging_stat = 39
    RULE_operation = 40
    RULE_logging_frequency = 41
    RULE_logging_item = 42
    RULE_begin_query_capture_stat = 43
    RULE_begin_query_logging_stat = 44
    RULE_query_logging_with_item = 45
    RULE_query_logging_limit_item = 46
    RULE_query_logging_on_items = 47
    RULE_query_logging_on_all = 48
    RULE_query_logging_on_users = 49
    RULE_query_logging_on_application = 50
    RULE_account_spec = 51
    RULE_checkpoint_isolated_loading_stat = 52
    RULE_collect_statistics_optimizer_form_stat = 53
    RULE_using_option = 54
    RULE_stats_target_spec = 55
    RULE_stats_index_spec = 56
    RULE_stats_column_spec = 57
    RULE_collection_source = 58
    RULE_from_stats_option = 59
    RULE_comment_placing_stat = 60
    RULE_create_replace_authorization_stat = 61
    RULE_create_replace_function_stat = 62
    RULE_create_replace_sql_function_stat = 63
    RULE_create_replace_table_function_stat = 64
    RULE_create_replace_external_function_stat = 65
    RULE_sql_function_parameter_spec = 66
    RULE_sql_function_language_spec = 67
    RULE_sql_function_access_spec = 68
    RULE_sql_function_attr = 69
    RULE_table_spec = 70
    RULE_table_function_parameter_spec = 71
    RULE_table_function_language_spec = 72
    RULE_table_function_attr = 73
    RULE_table_function_parameter_style = 74
    RULE_external_function_parameter_spec = 75
    RULE_external_function_language_spec = 76
    RULE_external_function_attr = 77
    RULE_external_function_parameter_style = 78
    RULE_no_sql = 79
    RULE_create_replace_macro_stat = 80
    RULE_macro_parameter = 81
    RULE_create_replace_procedure_stat = 82
    RULE_create_replace_procedure_sql_form_stat = 83
    RULE_parameter_spec = 84
    RULE_sql_data_access_option = 85
    RULE_dynamic_result_sets = 86
    RULE_sql_security_option = 87
    RULE_procedure_body = 88
    RULE_procedure_stat = 89
    RULE_procedure_data_stat = 90
    RULE_procedure_dml_stat = 91
    RULE_procedure_ddl_stat = 92
    RULE_procedure_dcl_stat = 93
    RULE_compound_stat = 94
    RULE_procedure_cursor_control_stat = 95
    RULE_assignment_stat = 96
    RULE_condition_stat = 97
    RULE_iteration_stat = 98
    RULE_diagnostic_stat = 99
    RULE_print_stat = 100
    RULE_local_declaration = 101
    RULE_cursor_declaration = 102
    RULE_condition_handler = 103
    RULE_allocate_stat = 104
    RULE_close_stat = 105
    RULE_deallocate_prepare_stat = 106
    RULE_positioned_delete_stat = 107
    RULE_positioned_update_stat = 108
    RULE_execute_statement_stat = 109
    RULE_execute_immediate_stat = 110
    RULE_fetch_stat = 111
    RULE_open_stat = 112
    RULE_prepare_stat = 113
    RULE_case_stat = 114
    RULE_when_operand_clause = 115
    RULE_when_condition_clause = 116
    RULE_if_stat = 117
    RULE_while_stat = 118
    RULE_loop_stat = 119
    RULE_for_stat = 120
    RULE_repeat_stat = 121
    RULE_diagnostic_statement_assignment = 122
    RULE_diagnostic_condition_assignment = 123
    RULE_condition_information_item = 124
    RULE_statement_information_item = 125
    RULE_signal_spec = 126
    RULE_sqlstate_spec = 127
    RULE_create_replace_view_stat = 128
    RULE_as_of_clause = 129
    RULE_create_database_stat = 130
    RULE_database_attribute = 131
    RULE_create_index_stat = 132
    RULE_index_spec = 133
    RULE_create_join_index_stat = 134
    RULE_join_index_select_clause = 135
    RULE_ji_selection = 136
    RULE_aggregation_clause = 137
    RULE_ji_source = 138
    RULE_ji_joined_table = 139
    RULE_ji_grouping_or_ordering_spec = 140
    RULE_create_profile_stat = 141
    RULE_profile_attribute = 142
    RULE_password_attribute = 143
    RULE_create_foreign_server_stat = 144
    RULE_foreign_server_external_security_clause = 145
    RULE_foreign_server_using_clause = 146
    RULE_foreign_server_using_option = 147
    RULE_foreign_server_operator_option = 148
    RULE_do_import_with = 149
    RULE_do_export_with = 150
    RULE_foreign_server_with_clause = 151
    RULE_foreign_server_option_name = 152
    RULE_create_hash_index_stat = 153
    RULE_create_role_stat = 154
    RULE_create_table_stat = 155
    RULE_create_table_primary_form_stat = 156
    RULE_create_table_as_stat = 157
    RULE_create_queue_table_stat = 158
    RULE_create_global_temporary_trace_table_stat = 159
    RULE_create_foreign_table_stat = 160
    RULE_create_error_table_stat = 161
    RULE_table_kind = 162
    RULE_table_option = 163
    RULE_column_definition = 164
    RULE_ctas_column_definition = 165
    RULE_index_definition = 166
    RULE_qits_definition = 167
    RULE_foreign_table_external_security_clause = 168
    RULE_location_column = 169
    RULE_payload_column = 170
    RULE_foreign_table_option = 171
    RULE_table_preservation = 172
    RULE_mergeblockratio = 173
    RULE_datablocksize = 174
    RULE_block_compression = 175
    RULE_table_isolated_loading = 176
    RULE_column_attribute = 177
    RULE_column_storage_attribute = 178
    RULE_compressed_value = 179
    RULE_column_constraint_attribute = 180
    RULE_auto_column_attribute = 181
    RULE_identity_column_attribute = 182
    RULE_id_column_value = 183
    RULE_normalize_option = 184
    RULE_table_constraint = 185
    RULE_references = 186
    RULE_partitioning_level = 187
    RULE_column_partition = 188
    RULE_create_type_stat = 189
    RULE_create_type_structured_form_stat = 190
    RULE_create_type_distinct_form_stat = 191
    RULE_create_type_array_form_stat = 192
    RULE_create_type_one_dimensional_array_form_stat = 193
    RULE_create_type_one_dimensional_varray_form_stat = 194
    RULE_create_type_multidimensional_array_form_stat = 195
    RULE_create_type_multidimensional_varray_form_stat = 196
    RULE_type_attribute_spec = 197
    RULE_structured_method_spec = 198
    RULE_distinct_method_spec = 199
    RULE_method_parameter_spec = 200
    RULE_returns_parameter_spec = 201
    RULE_method_language_spec = 202
    RULE_method_attr = 203
    RULE_multidimensional_array_dimension = 204
    RULE_multidimensional_varray_dimension = 205
    RULE_array_bounds = 206
    RULE_bound = 207
    RULE_create_user_stat = 208
    RULE_user_attribute = 209
    RULE_transform_specification = 210
    RULE_user_constraint = 211
    RULE_database_stat = 212
    RULE_delete_database_stat = 213
    RULE_delete_user_stat = 214
    RULE_drop_authorization_stat = 215
    RULE_drop_cast_stat = 216
    RULE_drop_constraint_stat = 217
    RULE_drop_database_stat = 218
    RULE_drop_error_table_stat = 219
    RULE_drop_foreign_server_stat = 220
    RULE_drop_function_stat = 221
    RULE_drop_function_mapping_stat = 222
    RULE_drop_index_stat = 223
    RULE_drop_glop_set_stat = 224
    RULE_drop_join_index_stat = 225
    RULE_drop_hash_index_stat = 226
    RULE_drop_macro_stat = 227
    RULE_drop_map_stat = 228
    RULE_drop_method_stat = 229
    RULE_drop_ordering_stat = 230
    RULE_drop_procedure_stat = 231
    RULE_drop_profile_stat = 232
    RULE_drop_replication_group_stat = 233
    RULE_drop_replication_ruleset_stat = 234
    RULE_drop_role_stat = 235
    RULE_drop_schema_stat = 236
    RULE_drop_statistics_optimizer_form_stat = 237
    RULE_drop_table_stat = 238
    RULE_drop_transform_stat = 239
    RULE_drop_trigger_stat = 240
    RULE_drop_type_stat = 241
    RULE_drop_user_stat = 242
    RULE_drop_view_stat = 243
    RULE_drop_zone_stat = 244
    RULE_end_isolated_loading_stat = 245
    RULE_end_logging_stat = 246
    RULE_end_query_capture_stat = 247
    RULE_end_query_logging_stat = 248
    RULE_end_query_logging_on_items = 249
    RULE_end_query_logging_all_rules = 250
    RULE_flush_query_logging_stat = 251
    RULE_flush_option = 252
    RULE_help_stat = 253
    RULE_help_statistics_optimimizer_form_stat = 254
    RULE_help_statistics_qcd_form_stat = 255
    RULE_incremental_restore_allow_write_stat = 256
    RULE_logging_incremental_archive_off_stat = 257
    RULE_logging_incremental_archive_on_stat = 258
    RULE_modify_database_stat = 259
    RULE_modified_database_attribute = 260
    RULE_modify_profile_stat = 261
    RULE_modify_user_stat = 262
    RULE_modify_user_attribute = 263
    RULE_rename_function_stat = 264
    RULE_rename_procedure_stat = 265
    RULE_rename_macro_stat = 266
    RULE_rename_table_stat = 267
    RULE_rename_trigger_stat = 268
    RULE_rename_view_stat = 269
    RULE_replace_query_logging_stat = 270
    RULE_set_session_stat = 271
    RULE_collation_sequence = 272
    RULE_session_constraint = 273
    RULE_isolation_level = 274
    RULE_session_debug_spec = 275
    RULE_trace_enabling_spec = 276
    RULE_set_role_stat = 277
    RULE_set_query_band_stat = 278
    RULE_show_object_stat = 279
    RULE_show_query_logging_stat = 280
    RULE_show_request_stat = 281
    RULE_show_statistics_optimizer_form_stat = 282
    RULE_show_statistics_qcd_form_stat = 283
    RULE_show_stats_target_spec = 284
    RULE_method = 285
    RULE_index_loading = 286
    RULE_index_ordering = 287
    RULE_table_option_index_form = 288
    RULE_map_spec = 289
    RULE_database_size_spec = 290
    RULE_skew_spec = 291
    RULE_database_default_map = 292
    RULE_fallback_protection = 293
    RULE_before_journal = 294
    RULE_after_journal = 295
    RULE_default_journal_table = 296
    RULE_drop_default_journal_table = 297
    RULE_password = 298
    RULE_dml_stat = 299
    RULE_select_stat = 300
    RULE_select_and_consume_stat = 301
    RULE_delete_stat = 302
    RULE_delete_table_spec = 303
    RULE_insert_stat = 304
    RULE_hash_by = 305
    RULE_local_order_by = 306
    RULE_update_stat = 307
    RULE_update_basic_form_stat = 308
    RULE_update_with_from_stat = 309
    RULE_update_upsert_form_stat = 310
    RULE_update_table_spec = 311
    RULE_merge_stat = 312
    RULE_when_matched = 313
    RULE_when_not_matched = 314
    RULE_collect_demographics_stat = 315
    RULE_collect_statistics_qcd_form_stat = 316
    RULE_qcd_stats_target_spec = 317
    RULE_drop_statistics_qcd_form_stat = 318
    RULE_dump_explain_stat = 319
    RULE_initiate_index_analysis_stat = 320
    RULE_index_analysis_set_spec = 321
    RULE_index_analysis_boundary_option = 322
    RULE_initiate_partition_analysis_stat = 323
    RULE_insert_explain_stat = 324
    RULE_restart_index_analysis_stat = 325
    RULE_call_stat = 326
    RULE_argument = 327
    RULE_execute_stat = 328
    RULE_commit_stat = 329
    RULE_rollback_stat = 330
    RULE_abort_stat = 331
    RULE_begin_transaction_stat = 332
    RULE_end_transaction_stat = 333
    RULE_locking_stat = 334
    RULE_comment_retrieving_stat = 335
    RULE_checkpoint_stat = 336
    RULE_echo_stat = 337
    RULE_null_stat = 338
    RULE_set_spec = 339
    RULE_with_isolated_loading = 340
    RULE_logging_errors = 341
    RULE_object_kind = 342
    RULE_explained_sql_request = 343
    RULE_limit_sql_clause = 344
    RULE_analysis_time_limit_clause = 345
    RULE_data_type = 346
    RULE_variable_data_type = 347
    RULE_external_function_data_type = 348
    RULE_numeric_data_type = 349
    RULE_char_data_type = 350
    RULE_precisionless_char_data_type = 351
    RULE_lob_as_locator_data_type = 352
    RULE_binary_data_type = 353
    RULE_datetime_type = 354
    RULE_period_type = 355
    RULE_udt_type = 356
    RULE_data_type_attribute = 357
    RULE_default_value_control_phrase = 358
    RULE_default_value = 359
    RULE_column_naming_phrase = 360
    RULE_sysudtlib = 361
    RULE_interval_period_spec = 362
    RULE_type_precision = 363
    RULE_max_length_k_m_g = 364
    RULE_max_length_k_m = 365
    RULE_character_set_phrase = 366
    RULE_uppercase_phrase = 367
    RULE_casespecific_phrase = 368
    RULE_format_phrase = 369
    RULE_title_phrase = 370
    RULE_named_phrase = 371
    RULE_latin_unicode_character_set_phrase = 372
    RULE_inline_length = 373
    RULE_json_storage_format = 374
    RULE_dataset_storage_format_clause = 375
    RULE_dataset_storage_format = 376
    RULE_with_schema = 377
    RULE_with_time_zone = 378
    RULE_literal = 379
    RULE_hex_byte_literal = 380
    RULE_char_string_literal = 381
    RULE_unicode_char_string_literal = 382
    RULE_hex_char_string_literal = 383
    RULE_integer_literal = 384
    RULE_hex_integer_literal = 385
    RULE_float_literal = 386
    RULE_character_set_prefix = 387
    RULE_date_literal = 388
    RULE_time_literal = 389
    RULE_timestamp_literal = 390
    RULE_interval_literal = 391
    RULE_interval_qualifier = 392
    RULE_period_literal = 393
    RULE_column_name = 394
    RULE_unqualified_column_name = 395
    RULE_unqualified_name = 396
    RULE_object_name = 397
    RULE_table_name = 398
    RULE_procedure_name = 399
    RULE_function_name = 400
    RULE_macro_name = 401
    RULE_database_name = 402
    RULE_user_name = 403
    RULE_role_name = 404
    RULE_profile_name = 405
    RULE_alias_name = 406
    RULE_variable_name = 407
    RULE_parameter_name = 408
    RULE_label_name = 409
    RULE_condition_name = 410
    RULE_cursor_name = 411
    RULE_statement_name = 412
    RULE_statistics_name = 413
    RULE_udt_name = 414
    RULE_attribute_name = 415
    RULE_method_name = 416
    RULE_anchor_name = 417
    RULE_nonreserved_word = 418
    RULE_query_expr = 419
    RULE_query_term = 420
    RULE_with_deleted_rows = 421
    RULE_as_json = 422
    RULE_select_list = 423
    RULE_top_n = 424
    RULE_normalize = 425
    RULE_all_operator = 426
    RULE_selected_columns = 427
    RULE_selected_column = 428
    RULE_into_clause = 429
    RULE_from_clause = 430
    RULE_from_spec = 431
    RULE_join_source_spec = 432
    RULE_join_joined_spec = 433
    RULE_from_pivot_spec = 434
    RULE_from_unpivot_spec = 435
    RULE_table_reference = 436
    RULE_join_clause = 437
    RULE_join_on_clause = 438
    RULE_foreign_table_reference = 439
    RULE_foreign_function_reference = 440
    RULE_foreign_on_clause = 441
    RULE_exported_data = 442
    RULE_foreign_using_clause = 443
    RULE_foreign_parameter = 444
    RULE_foreign_returns_clause = 445
    RULE_server_name_reference = 446
    RULE_table_function_reference = 447
    RULE_udt_table_function = 448
    RULE_unnest_table_function = 449
    RULE_table_function_returns_clause = 450
    RULE_table_function_local_order_by_clause = 451
    RULE_table_function_hash_by_clause = 452
    RULE_table_operator_reference = 453
    RULE_xmltable_operator = 454
    RULE_calcmatrix_table_operator = 455
    RULE_read_nos_table_operator = 456
    RULE_script_table_operator = 457
    RULE_td_unpivot_table_operator = 458
    RULE_write_nos_table_operator = 459
    RULE_json_table_table_operator = 460
    RULE_json_keys_table_operator = 461
    RULE_json_shred_table_operator = 462
    RULE_generic_table_operator = 463
    RULE_table_operator_on_clause = 464
    RULE_table_operator_execute_clause = 465
    RULE_table_operator_out_table_clause = 466
    RULE_table_operator_using_clause = 467
    RULE_table_operator_using_spec = 468
    RULE_json_keys_using_name_value_pair = 469
    RULE_hash_or_partition_by = 470
    RULE_subquery_reference = 471
    RULE_location = 472
    RULE_read_nos_option = 473
    RULE_write_nos_option = 474
    RULE_with_clause = 475
    RULE_with_clause_by_phrase = 476
    RULE_with_clause_title_phrase = 477
    RULE_where_clause = 478
    RULE_group_by_clause = 479
    RULE_group_by_spec = 480
    RULE_ordinary_grouping_set = 481
    RULE_ordinary_grouping_set_parenthesized = 482
    RULE_empty_grouping_set = 483
    RULE_rollup_option = 484
    RULE_cube_option = 485
    RULE_grouping_sets_option = 486
    RULE_grouping_sets_spec = 487
    RULE_having_clause = 488
    RULE_qualify_clause = 489
    RULE_sample_clause = 490
    RULE_sample_fraction_description = 491
    RULE_sample_count_description = 492
    RULE_sample_when_clause = 493
    RULE_expand_on_clause = 494
    RULE_order_by_clause = 495
    RULE_order_by_spec_full = 496
    RULE_order_by_spec_asc_desc_only = 497
    RULE_with_check_option = 498
    RULE_logical_expr = 499
    RULE_scalar_expr = 500
    RULE_tuple = 501
    RULE_tuple_attribute = 502
    RULE_case_expr = 503
    RULE_valued_case_expr = 504
    RULE_searched_case_expr = 505
    RULE_coalesce_expr = 506
    RULE_nullif_expr = 507
    RULE_interval_expr_base = 508
    RULE_interval_expr_parenthesized = 509
    RULE_interval_expr_start_end_phrase = 510
    RULE_function_invocation = 511
    RULE_aggregate_function = 512
    RULE_analytic_function = 513
    RULE_arithmetic_function = 514
    RULE_array_function = 515
    RULE_attribute_function = 516
    RULE_byte_function = 517
    RULE_builtin_function = 518
    RULE_calendar_function = 519
    RULE_comparison_function = 520
    RULE_compression_function = 521
    RULE_conversion_function = 522
    RULE_date_function = 523
    RULE_hash_function = 524
    RULE_lob_function = 525
    RULE_map_function = 526
    RULE_nvl_funtion = 527
    RULE_period_function = 528
    RULE_regexp_function = 529
    RULE_string_function = 530
    RULE_json_function = 531
    RULE_xml_function = 532
    RULE_other_function = 533
    RULE_partitioning_expr = 534
    RULE_td_sysfnlib = 535
    RULE_td_sysxml = 536
    RULE_syslib = 537
    RULE_td_server_db = 538
    RULE_translation_mapping = 539
    RULE_attribute_modification = 540
    RULE_returns_clause = 541
    RULE_attribute_modification_option = 542
    RULE_teradata_type_conversion = 543
    RULE_teradata_type_conversion_data_attribute = 544
    RULE_case_spec = 545
    RULE_range_expr = 546
    RULE_range_list = 547
    RULE_range_expr_1 = 548
    RULE_range_expr_2 = 549
    RULE_range_expr_3 = 550
    RULE_range_spec = 551
    RULE_hash_bucket_number_expr = 552
    RULE_window_spec = 553
    RULE_window_spec_without_rows = 554
    RULE_window_spec_with_ties = 555
    RULE_window_partition_by = 556
    RULE_window_order_by = 557
    RULE_window_rows = 558
    RULE_json_param_spec = 559
    RULE_xml_query_argument = 560
    RULE_xml_query_variable_spec = 561
    RULE_xml_attribute_declaration = 562
    RULE_xml_attribute_spec = 563
    RULE_xml_forest_element_spec = 564
    RULE_xml_value_declaration = 565
    RULE_xml_namespace_declaration = 566
    RULE_xml_namespace_spec = 567
    RULE_xml_columns_spec = 568
    RULE_xml_regular_column_definition = 569
    RULE_xml_encoding = 570
    RULE_xml_query_on_empty = 571
    RULE_xml_returning_spec = 572
    RULE_xml_content_option_spec = 573
    RULE_ignore_respect_nulls = 574
    RULE_number_of_rows = 575
    RULE_with_ties = 576
    RULE_pivot = 577
    RULE_pivot_spec = 578
    RULE_pivot_with_phrase = 579
    RULE_pivot_agg_func_spec = 580
    RULE_pivot_for_phrase = 581
    RULE_pivot_with_spec = 582
    RULE_pivot_expr_spec_scalar = 583
    RULE_pivot_expr_spec_list = 584
    RULE_unpivot = 585
    RULE_unpivot_spec = 586
    RULE_unpivot_column_name_spec_single = 587
    RULE_unpivot_column_name_spec_list = 588
    RULE_at_timezone = 589
    RULE_elements_list = 590
    RULE_scalar_expr_list = 591
    RULE_scalar_expr_list_comma_separated = 592
    RULE_column_list = 593
    RULE_subquery = 594
    RULE_column_spec = 595
    RULE_variable_reference = 596
    RULE_cursor_variable_reference = 597
    RULE_macro_parameter_reference = 598
    RULE_array_scope_reference = 599
    RULE_comparison_operator = 600
    RULE_quantifier = 601
    RULE_request_modifier = 602
    RULE_locking_request_modifier = 603
    RULE_locking_spec = 604
    RULE_lock_type = 605
    RULE_with_request_modifier = 606
    RULE_cte_spec = 607
    RULE_regular_cte_spec = 608
    RULE_recursive_cte_spec = 609
    RULE_using_request_modifier = 610
    RULE_using_spec = 611
    RULE_explain_request_modifier = 612
    RULE_dcl_stat = 613
    RULE_give_stat = 614
    RULE_grant_stat = 615
    RULE_grant_monitor_stat = 616
    RULE_grant_role_stat = 617
    RULE_grant_sql_form_stat = 618
    RULE_grant_connect_through_stat = 619
    RULE_grant_logon_stat = 620
    RULE_grant_map_stat = 621
    RULE_grant_zone_stat = 622
    RULE_grant_zone_override_stat = 623
    RULE_revoke_stat = 624
    RULE_revoke_monitor_stat = 625
    RULE_revoke_role_stat = 626
    RULE_revoke_sql_form_stat = 627
    RULE_revoke_connect_through_stat = 628
    RULE_revoke_logon_stat = 629
    RULE_revoke_map_stat = 630
    RULE_revoke_zone_stat = 631
    RULE_revoke_zone_override_stat = 632
    RULE_privilege = 633
    RULE_privilege_object = 634
    RULE_map_privilege = 635
    RULE_role_privilege = 636
    RULE_profile_privilege = 637
    RULE_zone_privilege = 638
    RULE_monitor_privilege = 639
    RULE_grantee = 640
    RULE_revokee = 641
    RULE_function_parameter = 642
    RULE_with_admin_option = 643
    RULE_with_grant_option = 644
    RULE_grant_option_for = 645

    ruleNames =  [ "sql_script", "unit_stat", "ddl_stat", "alter_foreign_server_stat", 
                   "foreign_server_add_clause", "foreign_server_drop_clause", 
                   "alter_function_stat", "alter_join_index_stat", "alter_hash_index_stat", 
                   "alter_table_stat", "alter_table_basic_stat", "alter_table_join_index_stat", 
                   "alter_table_revalidation_stat", "alter_table_release_rows_stat", 
                   "alter_table_map_and_collocation_form_stat", "alter_foreign_table_stat", 
                   "alter_foreign_column_option", "alter_table_to_current_stat", 
                   "alter_option", "table_option_alter_form", "add_option", 
                   "drop_option", "modify_primary", "alter_partitioning", 
                   "add_drop_range_option", "alter_column_spec", "alter_range_expr", 
                   "with_isolated_loading_alter_form", "join_index_add_option", 
                   "alter_type_stat", "add_attribute_clause", "add_method_clause", 
                   "add_specific_method_clause", "drop_attribute_clause", 
                   "drop_method_clause", "drop_specific_method_clause", 
                   "add_method_spec", "add_specific_method_spec", "begin_isolated_loading_stat", 
                   "begin_logging_stat", "operation", "logging_frequency", 
                   "logging_item", "begin_query_capture_stat", "begin_query_logging_stat", 
                   "query_logging_with_item", "query_logging_limit_item", 
                   "query_logging_on_items", "query_logging_on_all", "query_logging_on_users", 
                   "query_logging_on_application", "account_spec", "checkpoint_isolated_loading_stat", 
                   "collect_statistics_optimizer_form_stat", "using_option", 
                   "stats_target_spec", "stats_index_spec", "stats_column_spec", 
                   "collection_source", "from_stats_option", "comment_placing_stat", 
                   "create_replace_authorization_stat", "create_replace_function_stat", 
                   "create_replace_sql_function_stat", "create_replace_table_function_stat", 
                   "create_replace_external_function_stat", "sql_function_parameter_spec", 
                   "sql_function_language_spec", "sql_function_access_spec", 
                   "sql_function_attr", "table_spec", "table_function_parameter_spec", 
                   "table_function_language_spec", "table_function_attr", 
                   "table_function_parameter_style", "external_function_parameter_spec", 
                   "external_function_language_spec", "external_function_attr", 
                   "external_function_parameter_style", "no_sql", "create_replace_macro_stat", 
                   "macro_parameter", "create_replace_procedure_stat", "create_replace_procedure_sql_form_stat", 
                   "parameter_spec", "sql_data_access_option", "dynamic_result_sets", 
                   "sql_security_option", "procedure_body", "procedure_stat", 
                   "procedure_data_stat", "procedure_dml_stat", "procedure_ddl_stat", 
                   "procedure_dcl_stat", "compound_stat", "procedure_cursor_control_stat", 
                   "assignment_stat", "condition_stat", "iteration_stat", 
                   "diagnostic_stat", "print_stat", "local_declaration", 
                   "cursor_declaration", "condition_handler", "allocate_stat", 
                   "close_stat", "deallocate_prepare_stat", "positioned_delete_stat", 
                   "positioned_update_stat", "execute_statement_stat", "execute_immediate_stat", 
                   "fetch_stat", "open_stat", "prepare_stat", "case_stat", 
                   "when_operand_clause", "when_condition_clause", "if_stat", 
                   "while_stat", "loop_stat", "for_stat", "repeat_stat", 
                   "diagnostic_statement_assignment", "diagnostic_condition_assignment", 
                   "condition_information_item", "statement_information_item", 
                   "signal_spec", "sqlstate_spec", "create_replace_view_stat", 
                   "as_of_clause", "create_database_stat", "database_attribute", 
                   "create_index_stat", "index_spec", "create_join_index_stat", 
                   "join_index_select_clause", "ji_selection", "aggregation_clause", 
                   "ji_source", "ji_joined_table", "ji_grouping_or_ordering_spec", 
                   "create_profile_stat", "profile_attribute", "password_attribute", 
                   "create_foreign_server_stat", "foreign_server_external_security_clause", 
                   "foreign_server_using_clause", "foreign_server_using_option", 
                   "foreign_server_operator_option", "do_import_with", "do_export_with", 
                   "foreign_server_with_clause", "foreign_server_option_name", 
                   "create_hash_index_stat", "create_role_stat", "create_table_stat", 
                   "create_table_primary_form_stat", "create_table_as_stat", 
                   "create_queue_table_stat", "create_global_temporary_trace_table_stat", 
                   "create_foreign_table_stat", "create_error_table_stat", 
                   "table_kind", "table_option", "column_definition", "ctas_column_definition", 
                   "index_definition", "qits_definition", "foreign_table_external_security_clause", 
                   "location_column", "payload_column", "foreign_table_option", 
                   "table_preservation", "mergeblockratio", "datablocksize", 
                   "block_compression", "table_isolated_loading", "column_attribute", 
                   "column_storage_attribute", "compressed_value", "column_constraint_attribute", 
                   "auto_column_attribute", "identity_column_attribute", 
                   "id_column_value", "normalize_option", "table_constraint", 
                   "references", "partitioning_level", "column_partition", 
                   "create_type_stat", "create_type_structured_form_stat", 
                   "create_type_distinct_form_stat", "create_type_array_form_stat", 
                   "create_type_one_dimensional_array_form_stat", "create_type_one_dimensional_varray_form_stat", 
                   "create_type_multidimensional_array_form_stat", "create_type_multidimensional_varray_form_stat", 
                   "type_attribute_spec", "structured_method_spec", "distinct_method_spec", 
                   "method_parameter_spec", "returns_parameter_spec", "method_language_spec", 
                   "method_attr", "multidimensional_array_dimension", "multidimensional_varray_dimension", 
                   "array_bounds", "bound", "create_user_stat", "user_attribute", 
                   "transform_specification", "user_constraint", "database_stat", 
                   "delete_database_stat", "delete_user_stat", "drop_authorization_stat", 
                   "drop_cast_stat", "drop_constraint_stat", "drop_database_stat", 
                   "drop_error_table_stat", "drop_foreign_server_stat", 
                   "drop_function_stat", "drop_function_mapping_stat", "drop_index_stat", 
                   "drop_glop_set_stat", "drop_join_index_stat", "drop_hash_index_stat", 
                   "drop_macro_stat", "drop_map_stat", "drop_method_stat", 
                   "drop_ordering_stat", "drop_procedure_stat", "drop_profile_stat", 
                   "drop_replication_group_stat", "drop_replication_ruleset_stat", 
                   "drop_role_stat", "drop_schema_stat", "drop_statistics_optimizer_form_stat", 
                   "drop_table_stat", "drop_transform_stat", "drop_trigger_stat", 
                   "drop_type_stat", "drop_user_stat", "drop_view_stat", 
                   "drop_zone_stat", "end_isolated_loading_stat", "end_logging_stat", 
                   "end_query_capture_stat", "end_query_logging_stat", "end_query_logging_on_items", 
                   "end_query_logging_all_rules", "flush_query_logging_stat", 
                   "flush_option", "help_stat", "help_statistics_optimimizer_form_stat", 
                   "help_statistics_qcd_form_stat", "incremental_restore_allow_write_stat", 
                   "logging_incremental_archive_off_stat", "logging_incremental_archive_on_stat", 
                   "modify_database_stat", "modified_database_attribute", 
                   "modify_profile_stat", "modify_user_stat", "modify_user_attribute", 
                   "rename_function_stat", "rename_procedure_stat", "rename_macro_stat", 
                   "rename_table_stat", "rename_trigger_stat", "rename_view_stat", 
                   "replace_query_logging_stat", "set_session_stat", "collation_sequence", 
                   "session_constraint", "isolation_level", "session_debug_spec", 
                   "trace_enabling_spec", "set_role_stat", "set_query_band_stat", 
                   "show_object_stat", "show_query_logging_stat", "show_request_stat", 
                   "show_statistics_optimizer_form_stat", "show_statistics_qcd_form_stat", 
                   "show_stats_target_spec", "method", "index_loading", 
                   "index_ordering", "table_option_index_form", "map_spec", 
                   "database_size_spec", "skew_spec", "database_default_map", 
                   "fallback_protection", "before_journal", "after_journal", 
                   "default_journal_table", "drop_default_journal_table", 
                   "password", "dml_stat", "select_stat", "select_and_consume_stat", 
                   "delete_stat", "delete_table_spec", "insert_stat", "hash_by", 
                   "local_order_by", "update_stat", "update_basic_form_stat", 
                   "update_with_from_stat", "update_upsert_form_stat", "update_table_spec", 
                   "merge_stat", "when_matched", "when_not_matched", "collect_demographics_stat", 
                   "collect_statistics_qcd_form_stat", "qcd_stats_target_spec", 
                   "drop_statistics_qcd_form_stat", "dump_explain_stat", 
                   "initiate_index_analysis_stat", "index_analysis_set_spec", 
                   "index_analysis_boundary_option", "initiate_partition_analysis_stat", 
                   "insert_explain_stat", "restart_index_analysis_stat", 
                   "call_stat", "argument", "execute_stat", "commit_stat", 
                   "rollback_stat", "abort_stat", "begin_transaction_stat", 
                   "end_transaction_stat", "locking_stat", "comment_retrieving_stat", 
                   "checkpoint_stat", "echo_stat", "null_stat", "set_spec", 
                   "with_isolated_loading", "logging_errors", "object_kind", 
                   "explained_sql_request", "limit_sql_clause", "analysis_time_limit_clause", 
                   "data_type", "variable_data_type", "external_function_data_type", 
                   "numeric_data_type", "char_data_type", "precisionless_char_data_type", 
                   "lob_as_locator_data_type", "binary_data_type", "datetime_type", 
                   "period_type", "udt_type", "data_type_attribute", "default_value_control_phrase", 
                   "default_value", "column_naming_phrase", "sysudtlib", 
                   "interval_period_spec", "type_precision", "max_length_k_m_g", 
                   "max_length_k_m", "character_set_phrase", "uppercase_phrase", 
                   "casespecific_phrase", "format_phrase", "title_phrase", 
                   "named_phrase", "latin_unicode_character_set_phrase", 
                   "inline_length", "json_storage_format", "dataset_storage_format_clause", 
                   "dataset_storage_format", "with_schema", "with_time_zone", 
                   "literal", "hex_byte_literal", "char_string_literal", 
                   "unicode_char_string_literal", "hex_char_string_literal", 
                   "integer_literal", "hex_integer_literal", "float_literal", 
                   "character_set_prefix", "date_literal", "time_literal", 
                   "timestamp_literal", "interval_literal", "interval_qualifier", 
                   "period_literal", "column_name", "unqualified_column_name", 
                   "unqualified_name", "object_name", "table_name", "procedure_name", 
                   "function_name", "macro_name", "database_name", "user_name", 
                   "role_name", "profile_name", "alias_name", "variable_name", 
                   "parameter_name", "label_name", "condition_name", "cursor_name", 
                   "statement_name", "statistics_name", "udt_name", "attribute_name", 
                   "method_name", "anchor_name", "nonreserved_word", "query_expr", 
                   "query_term", "with_deleted_rows", "as_json", "select_list", 
                   "top_n", "normalize", "all_operator", "selected_columns", 
                   "selected_column", "into_clause", "from_clause", "from_spec", 
                   "join_source_spec", "join_joined_spec", "from_pivot_spec", 
                   "from_unpivot_spec", "table_reference", "join_clause", 
                   "join_on_clause", "foreign_table_reference", "foreign_function_reference", 
                   "foreign_on_clause", "exported_data", "foreign_using_clause", 
                   "foreign_parameter", "foreign_returns_clause", "server_name_reference", 
                   "table_function_reference", "udt_table_function", "unnest_table_function", 
                   "table_function_returns_clause", "table_function_local_order_by_clause", 
                   "table_function_hash_by_clause", "table_operator_reference", 
                   "xmltable_operator", "calcmatrix_table_operator", "read_nos_table_operator", 
                   "script_table_operator", "td_unpivot_table_operator", 
                   "write_nos_table_operator", "json_table_table_operator", 
                   "json_keys_table_operator", "json_shred_table_operator", 
                   "generic_table_operator", "table_operator_on_clause", 
                   "table_operator_execute_clause", "table_operator_out_table_clause", 
                   "table_operator_using_clause", "table_operator_using_spec", 
                   "json_keys_using_name_value_pair", "hash_or_partition_by", 
                   "subquery_reference", "location", "read_nos_option", 
                   "write_nos_option", "with_clause", "with_clause_by_phrase", 
                   "with_clause_title_phrase", "where_clause", "group_by_clause", 
                   "group_by_spec", "ordinary_grouping_set", "ordinary_grouping_set_parenthesized", 
                   "empty_grouping_set", "rollup_option", "cube_option", 
                   "grouping_sets_option", "grouping_sets_spec", "having_clause", 
                   "qualify_clause", "sample_clause", "sample_fraction_description", 
                   "sample_count_description", "sample_when_clause", "expand_on_clause", 
                   "order_by_clause", "order_by_spec_full", "order_by_spec_asc_desc_only", 
                   "with_check_option", "logical_expr", "scalar_expr", "tuple", 
                   "tuple_attribute", "case_expr", "valued_case_expr", "searched_case_expr", 
                   "coalesce_expr", "nullif_expr", "interval_expr_base", 
                   "interval_expr_parenthesized", "interval_expr_start_end_phrase", 
                   "function_invocation", "aggregate_function", "analytic_function", 
                   "arithmetic_function", "array_function", "attribute_function", 
                   "byte_function", "builtin_function", "calendar_function", 
                   "comparison_function", "compression_function", "conversion_function", 
                   "date_function", "hash_function", "lob_function", "map_function", 
                   "nvl_funtion", "period_function", "regexp_function", 
                   "string_function", "json_function", "xml_function", "other_function", 
                   "partitioning_expr", "td_sysfnlib", "td_sysxml", "syslib", 
                   "td_server_db", "translation_mapping", "attribute_modification", 
                   "returns_clause", "attribute_modification_option", "teradata_type_conversion", 
                   "teradata_type_conversion_data_attribute", "case_spec", 
                   "range_expr", "range_list", "range_expr_1", "range_expr_2", 
                   "range_expr_3", "range_spec", "hash_bucket_number_expr", 
                   "window_spec", "window_spec_without_rows", "window_spec_with_ties", 
                   "window_partition_by", "window_order_by", "window_rows", 
                   "json_param_spec", "xml_query_argument", "xml_query_variable_spec", 
                   "xml_attribute_declaration", "xml_attribute_spec", "xml_forest_element_spec", 
                   "xml_value_declaration", "xml_namespace_declaration", 
                   "xml_namespace_spec", "xml_columns_spec", "xml_regular_column_definition", 
                   "xml_encoding", "xml_query_on_empty", "xml_returning_spec", 
                   "xml_content_option_spec", "ignore_respect_nulls", "number_of_rows", 
                   "with_ties", "pivot", "pivot_spec", "pivot_with_phrase", 
                   "pivot_agg_func_spec", "pivot_for_phrase", "pivot_with_spec", 
                   "pivot_expr_spec_scalar", "pivot_expr_spec_list", "unpivot", 
                   "unpivot_spec", "unpivot_column_name_spec_single", "unpivot_column_name_spec_list", 
                   "at_timezone", "elements_list", "scalar_expr_list", "scalar_expr_list_comma_separated", 
                   "column_list", "subquery", "column_spec", "variable_reference", 
                   "cursor_variable_reference", "macro_parameter_reference", 
                   "array_scope_reference", "comparison_operator", "quantifier", 
                   "request_modifier", "locking_request_modifier", "locking_spec", 
                   "lock_type", "with_request_modifier", "cte_spec", "regular_cte_spec", 
                   "recursive_cte_spec", "using_request_modifier", "using_spec", 
                   "explain_request_modifier", "dcl_stat", "give_stat", 
                   "grant_stat", "grant_monitor_stat", "grant_role_stat", 
                   "grant_sql_form_stat", "grant_connect_through_stat", 
                   "grant_logon_stat", "grant_map_stat", "grant_zone_stat", 
                   "grant_zone_override_stat", "revoke_stat", "revoke_monitor_stat", 
                   "revoke_role_stat", "revoke_sql_form_stat", "revoke_connect_through_stat", 
                   "revoke_logon_stat", "revoke_map_stat", "revoke_zone_stat", 
                   "revoke_zone_override_stat", "privilege", "privilege_object", 
                   "map_privilege", "role_privilege", "profile_privilege", 
                   "zone_privilege", "monitor_privilege", "grantee", "revokee", 
                   "function_parameter", "with_admin_option", "with_grant_option", 
                   "grant_option_for" ]

    EOF = Token.EOF
    ABORT=1
    ABORTSESSION=2
    ABS=3
    ACCESS_LOCK=4
    ACCOUNT=5
    ACOS=6
    ACOSH=7
    ADD=8
    ADD_MONTHS=9
    ADMIN=10
    AFTER=11
    AGGREGATE=12
    ALL=13
    ALTER=14
    AMP=15
    AND=16
    ANSIDATE=17
    ANY=18
    ARGLPAREN=19
    AS=20
    ASC=21
    ASIN=22
    ASINH=23
    AT=24
    ATAN=25
    ATAN2=26
    ATANH=27
    ATOMIC=28
    AUTHORIZATION=29
    AVE=30
    AVERAGE=31
    AVG=32
    BEFORE=33
    BEGIN=34
    BETWEEN=35
    BIGINT=36
    BINARY=37
    BLOB=38
    BOTH=39
    BT=40
    BUT=41
    BY=42
    BYTE=43
    BYTEINT=44
    BYTES=45
    CALL=46
    CASE=47
    CASE_N=48
    CASESPECIFIC=49
    CAST=50
    CD=51
    CHAR=52
    CHAR_LENGTH=53
    CHAR2HEXINT=54
    CHARACTER=55
    CHARACTER_LENGTH=56
    CHARACTERS=57
    CHARS=58
    CHECK=59
    CHECKPOINT=60
    CLASS=61
    CLOB=62
    CLOSE=63
    CLUSTER=64
    CM=65
    COALESCE=66
    COLLATION=67
    COLLECT=68
    COLUMN=69
    COMMENT=70
    COMMIT=71
    COMPRESS=72
    CONNECT=73
    CONSTRAINT=74
    CONSTRUCTOR=75
    CONSUME=76
    CONTAINS=77
    CONTINUE=78
    CONVERT_TABLE_HEADER=79
    CORR=80
    COS=81
    COSH=82
    COUNT=83
    COVAR_POP=84
    COVAR_SAMP=85
    CREATE=86
    CROSS=87
    CS=88
    CSUM=89
    CT=90
    CTCONTROL=91
    CUBE=92
    CURRENT=93
    CURRENT_DATE=94
    CURRENT_ROLE=95
    CURRENT_TIME=96
    CURRENT_TIMESTAMP=97
    CURRENT_USER=98
    CURSOR=99
    CV=100
    CYCLE=101
    DATABASE=102
    DATABLOCKSIZE=103
    DATE=104
    DATEFORM=105
    DAY=106
    DEALLOCATE=107
    DEC=108
    DECIMAL=109
    DECLARE=110
    DEFAULT=111
    DEFERRED=112
    DEGREES=113
    DEL=114
    DELETE=115
    DESC=116
    DETERMINISTIC=117
    DIAGNOSTIC=118
    DICTIONARY=119
    DISABLED=120
    DISTINCT=121
    DO=122
    DOMAIN=123
    DOUBLE=124
    DROP=125
    DUAL=126
    DUMP=127
    DYNAMIC=128
    EACH=129
    ECHO=130
    ELSE=131
    ELSEIF=132
    ENABLED=133
    END=134
    EQ=135
    EQUALS=136
    ERROR=137
    ERRORFILES=138
    ERRORTABLES=139
    ESCAPE=140
    ET=141
    EXCEPT=142
    EXEC=143
    EXECUTE=144
    EXISTS=145
    EXIT=146
    EXP=147
    EXPAND=148
    EXPANDING=149
    EXPLAIN=150
    EXTERNAL=151
    EXTRACT=152
    FALLBACK=153
    FASTEXPORT=154
    FETCH=155
    FIRST=156
    FLOAT=157
    FLUSH=158
    FOR=159
    FOREIGN=160
    FORMAT=161
    FOUND=162
    FREESPACE=163
    FROM=164
    FULL=165
    FUNCTION=166
    FUNCTIONDESCRIPTOR=167
    GE=168
    GENERATED=169
    GET=170
    GIVE=171
    GRANT=172
    GRAPHIC=173
    GROUP=174
    GROUPING=175
    GT=176
    HANDLER=177
    HASH=178
    HASHAMP=179
    HASHBAKAMP=180
    HASHBUCKET=181
    HASHROW=182
    HAVING=183
    HELP=184
    HOUR=185
    ID2BIGINT=186
    IDENTITY=187
    IF=188
    IMMEDIATE=189
    IN=190
    INCONSISTENT=191
    INDEX=192
    INITIATE=193
    INNER=194
    INOUT=195
    INPUT=196
    INS=197
    INSERT=198
    INSTANCE=199
    INSTEAD=200
    INT=201
    INTEGER=202
    INTEGERDATE=203
    INTERSECT=204
    INTERVAL=205
    INTO=206
    IS=207
    ITERATE=208
    JAR=209
    JOIN=210
    JOURNAL=211
    KEY=212
    KURTOSIS=213
    LANGUAGE=214
    LARGE=215
    LE=216
    LEADING=217
    LEAVE=218
    LEFT=219
    LIKE=220
    LIMIT=221
    LN=222
    LOADING=223
    LOCAL=224
    LOCATOR=225
    LOCK=226
    LOCKING=227
    LOG=228
    LOGGING=229
    LOGON=230
    LONG=231
    LOOP=232
    LOWER=233
    LT=234
    MACRO=235
    MAP=236
    MAVG=237
    MAX=238
    MAXIMUM=239
    MCHARACTERS=240
    MDIFF=241
    MERGE=242
    METHOD=243
    MIN=244
    MINDEX=245
    MINIMUM=246
    MINUS=247
    MINUTE=248
    MLINREG=249
    MLOAD=250
    MOD=251
    MODE=252
    MODIFIES=253
    MODIFY=254
    MONITOR=255
    MONRESOURCE=256
    MONSESSION=257
    MONTH=258
    MSUBSTR=259
    MSUM=260
    MULTISET=261
    NAMED=262
    NATURAL=263
    NE=264
    NEW=265
    NEW_TABLE=266
    NEXT=267
    NO=268
    NONE=269
    NONTEMPORAL=270
    NORMALIZE=271
    NOT=272
    NOWAIT=273
    NULL=274
    NULLIF=275
    NULLIFZERO=276
    NUMBER=277
    NUMERIC=278
    OBJECT=279
    OBJECTS=280
    OCTET_LENGTH=281
    OF=282
    OFF=283
    OLD=284
    OLD_TABLE=285
    ON=286
    ONLY=287
    OPEN=288
    OPTION=289
    OR=290
    ORDER=291
    ORDERING=292
    OUT=293
    OUTER=294
    OVER=295
    OVERLAPS=296
    OVERRIDE=297
    PARAMETER=298
    PASSWORD=299
    PERCENT=300
    PERCENT_RANK=301
    PERM=302
    PERMANENT=303
    POSITION=304
    PRECISION=305
    PREPARE=306
    PRESERVE=307
    PRIMARY=308
    PRIVILEGES=309
    PROCEDURE=310
    PROFILE=311
    PROTECTION=312
    PUBLIC=313
    QUALIFIED=314
    QUALIFY=315
    QUANTILE=316
    QUEUE=317
    RADIANS=318
    RANDOM=319
    RANGE_N=320
    RANK=321
    READS=322
    REAL=323
    RECURSIVE=324
    REFERENCES=325
    REFERENCING=326
    REGR_AVGX=327
    REGR_AVGY=328
    REGR_COUNT=329
    REGR_INTERCEPT=330
    REGR_R2=331
    REGR_SLOPE=332
    REGR_SXX=333
    REGR_SXY=334
    REGR_SYY=335
    RELATIVE=336
    RELEASE=337
    RENAME=338
    REPEAT=339
    REPLACE=340
    REPLCONTROL=341
    REPLICATION=342
    REQUEST=343
    RESIGNAL=344
    RESTART=345
    RESTORE=346
    RESULT=347
    RESUME=348
    RET=349
    RETRIEVE=350
    RETURN=351
    RETURNS=352
    REVALIDATE=353
    REVOKE=354
    RIGHT=355
    RIGHTS=356
    ROLE=357
    ROLLBACK=358
    ROLLFORWARD=359
    ROLLUP=360
    ROW=361
    ROW_NUMBER=362
    ROWID=363
    ROWS=364
    SAMPLE=365
    SAMPLEID=366
    SCROLL=367
    SECOND=368
    SEL=369
    SELECT=370
    SESSION=371
    SET=372
    SETRESRATE=373
    SETS=374
    SETSESSRATE=375
    SHOW=376
    SIGNAL=377
    SIN=378
    SINH=379
    SKEW=380
    SMALLINT=381
    SOME=382
    SOUNDEX=383
    SPECIFIC=384
    SPOOL=385
    SQL=386
    SQLEXCEPTION=387
    SQLTEXT=388
    SQLWARNING=389
    SQRT=390
    SS=391
    START=392
    STARTUP=393
    STATEMENT=394
    STATISTICS=395
    STDDEV_POP=396
    STDDEV_SAMP=397
    STEPINFO=398
    STRING_CS=399
    SUBSCRIBER=400
    SUBSTR=401
    SUBSTRING=402
    SUM=403
    SUMMARY=404
    SUSPEND=405
    TABLE=406
    TAN=407
    TANH=408
    TBL_CS=409
    TD_ANYTYPE=410
    TD_AUTHID=411
    TD_HOST=412
    TD_ROWLOADID=413
    TD_ROWREVISION=414
    TD_ROWSIZE=415
    TD_VALIST=416
    TEMPORARY=417
    TERMINATE=418
    THEN=419
    THRESHOLD=420
    TIME=421
    TIMESTAMP=422
    TIMEZONE_HOUR=423
    TIMEZONE_MINUTE=424
    TITLE=425
    TO=426
    TOP=427
    TRACE=428
    TRAILING=429
    TRANSACTION=430
    TRANSACTIONTIME=431
    TRANSFORM=432
    TRANSLATE=433
    TRANSLATE_CHK=434
    TRIGGER=435
    TRIM=436
    TYPE=437
    UC=438
    UDTCASTAS=439
    UDTCASTLPAREN=440
    UDTMETHOD=441
    UDTTYPE=442
    UDTUSAGE=443
    UESCAPE=444
    UNDEFINED=445
    UNDO=446
    UNION=447
    UNIQUE=448
    UNTIL=449
    UNTIL_CHANGED=450
    UNTIL_CLOSED=451
    UPD=452
    UPDATE=453
    UPPER=454
    UPPERCASE=455
    USER=456
    USING=457
    VALIDTIME=458
    VALUE=459
    VALUES=460
    VAR_POP=461
    VAR_SAMP=462
    VARBYTE=463
    VARCHAR=464
    VARGRAPHIC=465
    VARIANT_TYPE=466
    VARYING=467
    VIEW=468
    VOLATILE=469
    WHEN=470
    WHERE=471
    WHILE=472
    WIDTH_BUCKET=473
    WITH=474
    WITHOUT=475
    WORK=476
    XMLPLAN=477
    YEAR=478
    ZEROIFNULL=479
    ZONE=480
    ALIAS=481
    DESCRIPTOR=482
    GO=483
    GOTO=484
    INDICATOR=485
    PRIVATE=486
    WAIT=487
    ABORTSESSIONS=488
    ABSENT=489
    ACCESS=490
    ACCORDING=491
    ACCUMULATE=492
    AG=493
    AGGGEOMINTERSECTION=494
    AGGGEOMUNION=495
    ALLDBQL=496
    ALLOCATE=497
    ALLOCATION=498
    ALLOW=499
    ALLPARAMS=500
    ALLTDWM=501
    ALWAYS=502
    AMPCOUNT=503
    ANALYSIS=504
    ANCHOR=505
    ANCHOR_HOUR=506
    ANCHOR_MILLISECOND=507
    ANCHOR_MINUTE=508
    ANCHOR_SECOND=509
    APPLNAME=510
    ARCHIVE=511
    ARRAY=512
    ARRAY_ADD=513
    ARRAY_AGG=514
    ARRAY_AVG=515
    ARRAY_COMPARE=516
    ARRAY_CONCAT=517
    ARRAY_COUNT_DISTINCT=518
    ARRAY_DIV=519
    ARRAY_EQ=520
    ARRAY_GE=521
    ARRAY_GET=522
    ARRAY_GT=523
    ARRAY_LE=524
    ARRAY_LT=525
    ARRAY_MAX=526
    ARRAY_MIN=527
    ARRAY_MOD=528
    ARRAY_MUL=529
    ARRAY_NE=530
    ARRAY_SUB=531
    ARRAY_SUM=532
    ARRAY_UPDATE=533
    ARRAY_UPDATE_STRIDE=534
    ASCII=535
    ASSIGNMENT=536
    ATTR=537
    ATTRIBUTE=538
    ATTRIBUTES=539
    ATTRIBUTION=540
    ATTRS=541
    AUTH=542
    AUTO=543
    AUTOTEMP=544
    AVRO=545
    BIT_LENGTH=546
    BITAND=547
    BITNOT=548
    BITOR=549
    BITXOR=550
    BLOCKCOMPRESSION=551
    BLOCKCOMPRESSIONALGORITHM=552
    BLOCKCOMPRESSIONLEVEL=553
    BOM=554
    BOTTOM=555
    BSON=556
    C=557
    CALENDAR=558
    CALLED=559
    CALLER=560
    CAMSET=561
    CAMSET_L=562
    CAPTURE=563
    CARDINALITY=564
    CEIL=565
    CEILING=566
    CHANGERATE=567
    CHARACTERISTICS=568
    CHARSET=569
    CHARSET_COLL=570
    CHECKSUM=571
    CHR=572
    CLASS_ORIGIN=573
    CLICKLAG=574
    CLIENT=575
    CNT=576
    COLOCATE=577
    COLUMNMETA=578
    COLUMNS=579
    COLUMNSPERINDEX=580
    COLUMNSPERJOININDEX=581
    COMMAND_FUNCTION=582
    COMMAND_FUNCTION_CODE=583
    COMPARISON=584
    COMPILE=585
    CONCAT=586
    CONCURRENT=587
    CONDITION=588
    CONDITION_IDENTIFIER=589
    CONDITION_NUMBER=590
    CONTAINED=591
    CONTAINEDTOKEN=592
    CONTENT=593
    CONTIGUOUS=594
    COST=595
    COSTS=596
    COUNTSET=597
    CPP=598
    CPUTIME=599
    CPUTIMENORM=600
    CREATEDATASET=601
    CREATOR=602
    CUME_DIST=603
    CURDATE=604
    CURTIME=605
    DATA=606
    DATASET=607
    DAY_OF_CALENDAR=608
    DAY_OF_MONTH=609
    DAY_OF_WEEK=610
    DAY_OF_YEAR=611
    DAYNUMBER_OF_CALENDAR=612
    DAYNUMBER_OF_MONTH=613
    DAYNUMBER_OF_WEEK=614
    DAYNUMBER_OF_YEAR=615
    DAYOCCURRENCE_OF_MONTH=616
    DBA=617
    DBC=618
    DEBUG=619
    DECAMSET=620
    DECAMSET_L=621
    DECODE=622
    DECOMPRESS=623
    DEFINER=624
    DELIMITER=625
    DELTA_T=626
    DEMOGRAPHICS=627
    DENIALS=628
    DENSE=629
    DENSE_RANK=630
    DESCRIBE=631
    DETAILED=632
    DIAGNOSTICS=633
    DIGITS=634
    DIMENSION=635
    DOCUMENT=636
    DOT=637
    DOWN=638
    DR=639
    DUPCOUNT=640
    DUPCOUNTCUM=641
    EBCDIC=642
    EDITDISTANCE=643
    ELAPSEDSEC=644
    ELAPSEDTIME=645
    ELEMENT=646
    ELZS_H=647
    EMITNULL=648
    EMPTY=649
    EMPTY_BLOB=650
    EMPTY_CLOB=651
    ENCODE=652
    ENCODING=653
    ENCRYPT=654
    ERRORS=655
    ERRORTBL=656
    EVENTCOLUMN=657
    EXCEPTION=658
    EXCL=659
    EXCLUDE=660
    EXCLUDING=661
    EXCLUSIVE=662
    EXPIRE=663
    EXPORT=664
    EXPORTWIDTH=665
    FALSE=666
    FEATUREINFO=667
    FILE=668
    FILL=669
    FILTER=670
    FINAL=671
    FIRST_NOTNULL=672
    FIRST_VALUE=673
    FLOOR=674
    FOLLOWING=675
    FOREIGNFUNCTION=676
    FORTOKEN=677
    FRIDAY=678
    FROM_BYTES=679
    FUNCTIONPARAMETER=680
    G=681
    GETBIT=682
    GETPSFVERSION=683
    GETQUERYBAND=684
    GETQUERYBANDVALUE=685
    GETTIMEZONEDISPLACEMENT=686
    GLOBAL=687
    GLOP=688
    GREATEST=689
    HIGH=690
    HOST=691
    IDENTIFYDATABASE=692
    IDENTIFYSESSION=693
    IDENTIFYTABLE=694
    IDENTIFYUSER=695
    IFP=696
    IGNORE=697
    IMMEDIATELY=698
    IMPORT=699
    INCLUDE=700
    INCLUDING=701
    INCREMENT=702
    INCREMENTAL=703
    INDENT=704
    INDEXESPERTABLE=705
    INDEXMAINTMODE=706
    INIT=707
    INITCAP=708
    INLINE=709
    INSTANTIABLE=710
    INSTR=711
    INTERNAL=712
    INVOKER=713
    IOCOUNT=714
    IPARTITION=715
    ISOLATED=716
    ISOLATION=717
    JAVA=718
    JIS_COLL=719
    JSON=720
    JSON_AGG=721
    JSON_COMPOSE=722
    K=723
    KANJI1=724
    KANJISJIS=725
    KBYTE=726
    KBYTES=727
    KEEP=728
    KILOBYTES=729
    LAG=730
    LAST=731
    LAST_DAY=732
    LAST_NOTNULL=733
    LAST_VALUE=734
    LATIN=735
    LDIFF=736
    LEAD=737
    LEAST=738
    LENGTH=739
    LEVEL=740
    LIST=741
    LOAD=742
    LOCATE=743
    LOCKEDUSEREXPIRE=744
    LOW=745
    LPAD=746
    LTRIM=747
    LZCOMP=748
    LZCOMP_L=749
    LZDECOMP=750
    LZDECOMP_L=751
    M=752
    MAD=753
    MANUAL=754
    MAPPING=755
    MATCHED=756
    MAX_CHOOSE=757
    MAXCHAR=758
    MAXINTERVALS=759
    MAXLOGONATTEMPTS=760
    MAXVALUE=761
    MAXVALUELENGTH=762
    MEDIAN=763
    MEDIUM=764
    MEETS=765
    MEMBER=766
    MERGEBLOCKRATIO=767
    MESSAGE_LENGTH=768
    MESSAGE_TEXT=769
    MIN_CHOOSE=770
    MINCHAR=771
    MINVALUE=772
    MODIFIED=773
    MONDAY=774
    MONITORQUERYBAND=775
    MONITORSESSIONRATE=776
    MONITORVERSION=777
    MONTH_BEGIN=778
    MONTH_END=779
    MONTH_OF_CALENDAR=780
    MONTH_OF_QUARTER=781
    MONTH_OF_YEAR=782
    MONTHNUMBER_OF_CALENDAR=783
    MONTHNUMBER_OF_QUARTER=784
    MONTHNUMBER_OF_YEAR=785
    MONTHS_BETWEEN=786
    MORE_=787
    MULTINATIONAL=788
    NAME=789
    NAMESPACE=790
    NEVER=791
    NEXT_DAY=792
    NGRAM=793
    NIL=794
    NODDLTEXT=795
    NODE=796
    NONOPTCOST=797
    NONOPTINIT=798
    NONSEQUENCED=799
    NORIGHT=800
    NOSEXTRACTVARFROMPATH=801
    NOTATION=802
    NOW=803
    NPATH=804
    NTH=805
    NULLS=806
    NUMFPFNS=807
    NUMTODSINTERVAL=808
    NUMTOYMINTERVAL=809
    NVL=810
    NVL2=811
    NVP=812
    OA=813
    OADD_MONTHS=814
    OCOUNT=815
    ODELETE=816
    OEXISTS=817
    OEXTEND=818
    OFIRST=819
    OLAST=820
    OLD_NEW_TABLE=821
    OLIMIT=822
    ONEXT=823
    ONLINE=824
    OPRIOR=825
    OPTIONS=826
    ORDERBYVALUES=827
    ORDERED_ANALYTIC=828
    ORDINALITY=829
    OREPLACE=830
    OTRANSLATE=831
    OTRIM=832
    OVERLAYS=833
    OWNER=834
    P_INTERSECT=835
    P_NORMALIZE=836
    PARAMID=837
    PARAMINFO=838
    PARENT=839
    PARTITION=840
    PARTITION_L=841
    PARTITIONED=842
    PARTITIONNAMES=843
    PASS=844
    PASSING=845
    PATH_GENERATOR=846
    PATH_START=847
    PATH_SUMMARIZER=848
    PATTERN=849
    PERCENTILE=850
    PERCENTILE_CONT=851
    PERCENTILE_DISC=852
    PERIOD=853
    PIVOT=854
    PORTION=855
    POWER=856
    PRECEDES=857
    PRECEDING=858
    PREFIX=859
    PRINT=860
    PRIOR=861
    PROTECTED=862
    QUARTER_BEGIN=863
    QUARTER_END=864
    QUARTER_OF_CALENDAR=865
    QUARTER_OF_YEAR=866
    QUARTERNUMBER_OF_CALENDAR=867
    QUARTERNUMBER_OF_YEAR=868
    QUERY=869
    QUERY_BAND=870
    QUOTECHAR=871
    RANDOMIZED=872
    RANGE=873
    RANGE_L=874
    RAPIDFIRE=875
    RDIFF=876
    READ=877
    RECALC=878
    REGEXP_INSTR=879
    REGEXP_REPLACE=880
    REGEXP_SIMILAR=881
    REGEXP_SUBSTR=882
    REPLACEMENT=883
    RESET=884
    RESPECT=885
    RESTRICTWORDS=886
    RETAIN=887
    RETURNED_SQLSTATE=888
    RETURNING=889
    REUSE=890
    ROOT=891
    ROTATELEFT=892
    ROTATERIGHT=893
    ROUND=894
    ROW_COUNT=895
    ROWIDGEN=896
    ROWIDGEN2=897
    RPAD=898
    RTRIM=899
    RU=900
    RULES=901
    RULESET=902
    SAMPLES=903
    SATURDAY=904
    SCHEMA=905
    SCRIPT=906
    SCRIPT_COMMAND=907
    SEARCHSPACE=908
    SEARCHUIFDBPATH=909
    SECURITY=910
    SEED=911
    SELF=912
    SEQ=913
    SEQUENCE=914
    SEQUENCED=915
    SERIALIZABLE=916
    SERVER=917
    SESSIONIZE=918
    SETBIT=919
    SETRESOURCERATE=920
    SETSESSIONACCOUNT=921
    SETSESSIONRATE=922
    SHARE=923
    SHIFTLEFT=924
    SHIFTRIGHT=925
    SIGN=926
    SIZE=927
    SNAPPY_COMPRESS=928
    SNAPPY_DECOMPRESS=929
    SOURCE=930
    SPARSE=931
    SPECCHAR=932
    SPL=933
    SQLSTATE=934
    SR=935
    ST_GEOMETRY=936
    STAT=937
    STATIC=938
    STATS=939
    STATSUSAGE=940
    STORAGE=941
    STRIP=942
    STRTOK=943
    STYLE=944
    SUBBITSTR=945
    SUBCLASS_ORIGIN=946
    SUCCEEDS=947
    SUMMARYONLY=948
    SUNDAY=949
    SYMBOLS=950
    SYSTEM=951
    SYSTEM_TIME=952
    SYSTEMTEST=953
    TARGET=954
    TD_ARRAY2P=955
    TD_DATASET=956
    TD_DAY_OF_CALENDAR=957
    TD_DAY_OF_MONTH=958
    TD_DAY_OF_WEEK=959
    TD_DAY_OF_YEAR=960
    TD_GENERAL=961
    TD_GETTIMEBUCKET=962
    TD_INTERNAL=963
    TD_LZ_COMPRESS=964
    TD_LZ_DECOMPRESS=965
    TD_MONTH_OF_CALENDAR=966
    TD_MONTH_OF_QUARTER=967
    TD_MONTH_OF_YEAR=968
    TD_QUARTER_OF_CALENDAR=969
    TD_QUARTER_OF_YEAR=970
    TD_TIME_BUCKET_NUMBER=971
    TD_WEEK_OF_CALENDAR=972
    TD_WEEK_OF_MONTH=973
    TD_WEEK_OF_YEAR=974
    TD_WEEKDAY_OF_MONTH=975
    TD_YEAR_OF_CALENDAR=976
    TDWMEVENT=977
    TDWMEXCEPTION=978
    TDWMHISTORY=979
    TEMPORAL_DATE=980
    TEMPORAL_TIMESTAMP=981
    TEXT=982
    THRESHOLDPERCENT=983
    THROUGH=984
    THURSDAY=985
    TIES=986
    TIMECODE=987
    TIMECOLUMN=988
    TIMEOUT=989
    TIMESTAMPCOLUMN=990
    TO_BYTE=991
    TO_BYTES=992
    TO_CHAR=993
    TO_DATE=994
    TO_DSINTERVAL=995
    TO_NUMBER=996
    TO_TIMESTAMP=997
    TO_TIMESTAMP_TZ=998
    TO_YMINTERVAL=999
    TOTOKEN=1000
    TPA=1001
    TRANSACTION_ACTIVE=1002
    TRANSUNICODETOUTF8=1003
    TRANSUTF8TOUNICODE=1004
    TRUE=1005
    TRUNC=1006
    TRUST_ONLY=1007
    TTGRANULARITY=1008
    TUESDAY=1009
    UBJSON=1010
    UCASE=1011
    UDFSEARCHPATH=1012
    UNBOUNDED=1013
    UNCOMMITTED=1014
    UNICODE=1015
    UNKNOWN=1016
    UNPIVOT=1017
    USE=1018
    USECOUNT=1019
    UTILITYINFO=1020
    VARRAY=1021
    VERBOSE=1022
    VERSION=1023
    VERSIONING=1024
    WARNING=1025
    WEDNESDAY=1026
    WEEK_BEGIN=1027
    WEEK_END=1028
    WEEK_OF_CALENDAR=1029
    WEEK_OF_MONTH=1030
    WEEK_OF_YEAR=1031
    WEEKDAY_OF_MONTH=1032
    WEEKNUMBER_OF_CALENDAR=1033
    WEEKNUMBER_OF_MONTH=1034
    WEEKNUMBER_OF_QUARTER=1035
    WEEKNUMBER_OF_YEAR=1036
    WHITESPACE=1037
    WINDOWSIZE=1038
    WITHIN=1039
    WORKLOAD=1040
    WRITE=1041
    XML=1042
    XMLAGG=1043
    XMLATTRIBUTES=1044
    XMLCOMMENT=1045
    XMLCONCAT=1046
    XMLDECLARATION=1047
    XMLDOCUMENT=1048
    XMLELEMENT=1049
    XMLFOREST=1050
    XMLNAMESPACES=1051
    XMLPARSE=1052
    XMLPI=1053
    XMLQUERY=1054
    XMLSCHEMA=1055
    XMLSERIALIZE=1056
    XMLTABLE=1057
    XMLTEXT=1058
    XMLTYPE=1059
    XMLVALIDATE=1060
    YEAR_BEGIN=1061
    YEAR_END=1062
    YEAR_OF_CALENDAR=1063
    YEARNUMBER_OF_CALENDAR=1064
    ZLIB=1065
    BUCKET=1066
    COMMITTED=1067
    CREATEXML=1068
    CS_LATIN=1069
    CS_UNICODE=1070
    CS_KANJISJIS=1071
    CS_GRAPHIC=1072
    CSV=1073
    CSVLD=1074
    DATASIZE=1075
    DAYOFMONTH=1076
    DAYS=1077
    DEFINITION=1078
    DELETED=1079
    FAST=1080
    LISTAGG=1081
    PATH=1082
    REGEXP_SPLIT_TO_TABLE=1083
    REVERSE=1084
    SAS=1085
    SQLTABLE=1086
    STRTOK_SPLIT_TO_TABLE=1087
    SYSLIB=1088
    SYSUDTLIB=1089
    TD_SERVER_DB=1090
    TD_SYSFNLIB=1091
    TD_SYSXML=1092
    TIMEDATEWZCONTROL=1093
    TRUST=1094
    TRYCAST=1095
    UDT=1096
    USAGE=1097
    VARIANT=1098
    WEEK=1099
    WIDTH=1100
    XMLPUBLISH=1101
    XMLPUBLISH_STREAM=1102
    XMLSPLIT=1103
    LATIN_TO_UNICODE=1104
    UNICODE_TO_LATIN=1105
    LOCALE_TO_UNICODE=1106
    UNICODE_TO_LOCALE=1107
    ASBSON=1108
    ASBSONTEXT=1109
    COMBINE=1110
    EXISTVALUE=1111
    JSONEXTRACT=1112
    JSONEXTRACTVALUE=1113
    JSONEXTRACTLARGEVALUE=1114
    KEYCOUNT=1115
    METADATA=1116
    STORAGE_SIZE=1117
    CREATESCHEMABASEDXML=1118
    CREATENONSCHEMABASEDXML=1119
    EXISTSNODE=1120
    ISCONTENT=1121
    ISDOCUMENT=1122
    ISSCHEMAVALID=1123
    ISSCHEMAVALIDATED=1124
    XMLEXTRACT=1125
    XMLTRANSFORM=1126
    PROC_ID=1127
    LOCATION=1128
    PAYLOAD=1129
    TRUSTED=1130
    PATHPATTERN=1131
    MANIFEST=1132
    ROWFORMAT=1133
    STOREDAS=1134
    HEADER=1135
    STRIP_EXTERIOR_SPACES=1136
    STRIP_ENCLOSING_CHAR=1137
    RLS=1138
    SINGLE=1139
    MULTIPLE=1140
    JSON_COMPRESS=1141
    JSON_DECOMPRESS=1142
    TS_COMPRESS=1143
    TS_DECOMPRESS=1144
    CONTIGUOUSMAPAMPS=1145
    SPARSEMAPAMPS=1146
    SPARSETABLEAMPS=1147
    UNNEST=1148
    CALCMATRIX=1149
    PHRASE=1150
    CALCTYPE=1151
    OUTPUT=1152
    NULL_HANDLING=1153
    READ_NOS=1154
    BUFFERSIZE=1155
    RETURNTYPE=1156
    SAMPLE_PERC=1157
    FULLSCAN=1158
    TD_UNPIVOT=1159
    VALUE_COLUMNS=1160
    UNPIVOT_COLUMN=1161
    COLUMN_LIST=1162
    COLUMN_ALIAS_LIST=1163
    INCLUDE_NULLS=1164
    WRITE_NOS=1165
    NAMING=1166
    MANIFESTFILE=1167
    MANIFESTONLY=1168
    OVERWRITE=1169
    INCLUDE_ORDERING=1170
    INCLUDE_HASHBY=1171
    MAXOBJECTSIZE=1172
    COMPRESSION=1173
    ARRAY_TO_JSON=1174
    BSON_CHECK=1175
    GEOJSONFROMGEOM=1176
    GEOMFROMGEOJSON=1177
    JSON_CHECK=1178
    JSONGETVALUE=1179
    JSONMETADATA=1180
    NVP2JSON=1181
    TD_JSONSHRED=1182
    JSON_KEYS=1183
    JSON_TABLE=1184
    DEPTH=1185
    QUOTES=1186
    ROWEXPR=1187
    COLEXPR=1188
    RETURNTYPES=1189
    NOCASE=1190
    TRUNCATE=1191
    LINK=1192
    OBJECT_NAME=1193
    UNSIGNED_INTEGER=1194
    HEX_BYTE_LITERAL=1195
    HEX_INTEGER_LITERAL=1196
    FLOAT_LITERAL=1197
    DATE_STRING=1198
    TIME_STRING=1199
    TIMESTAMP_STRING=1200
    PERIOD_STRING=1201
    UNICODE_STRING_LEADING=1202
    CHAR_STRING=1203
    HEX_STRING=1204
    PASSWORD_STRING=1205
    SEMICOLON=1206
    COLON=1207
    COMMA=1208
    DOT_=1209
    AT_SIGN=1210
    CARET=1211
    QUESTION_MARK=1212
    OPEN_PAR=1213
    CLOSE_PAR=1214
    OPEN_SQ_BRACKET=1215
    CLOSE_SQ_BRACKET=1216
    CONCATENATE=1217
    BROKEN_CONCATENATE=1218
    MUL_SIGN=1219
    DIV_SIGN=1220
    PLUS_SIGN=1221
    MINUS_SIGN=1222
    EXPONENTIATION=1223
    EQUALS_SIGN=1224
    NOT_EQUALS_SIGN=1225
    NOT_EQUALS_SIGN_TD=1226
    LT_SIGN=1227
    LE_SIGN=1228
    GT_SIGN=1229
    GE_SIGN=1230
    SINGLE_LINE_COMMENT=1231
    MULTI_LINE_COMMENT=1232
    WS=1233

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Sql_scriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unit_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unit_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unit_statContext,i)


        def EOF(self):
            return self.getToken(TeradataSQLParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.SEMICOLON)
            else:
                return self.getToken(TeradataSQLParser.SEMICOLON, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sql_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_script" ):
                listener.enterSql_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_script" ):
                listener.exitSql_script(self)




    def sql_script(self):

        localctx = TeradataSQLParser.Sql_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_sql_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            self.unit_stat()
            self.state = 1297
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1293
                    self.match(TeradataSQLParser.SEMICOLON)
                    self.state = 1294
                    self.unit_stat() 
                self.state = 1299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1206:
                self.state = 1300
                self.match(TeradataSQLParser.SEMICOLON)


            self.state = 1303
            self.match(TeradataSQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unit_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddl_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Ddl_statContext,0)


        def dcl_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Dcl_statContext,0)


        def dml_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Dml_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_unit_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_stat" ):
                listener.enterUnit_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_stat" ):
                listener.exitUnit_stat(self)




    def unit_stat(self):

        localctx = TeradataSQLParser.Unit_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_unit_stat)
        try:
            self.state = 1308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1305
                self.ddl_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1306
                self.dcl_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1307
                self.dml_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_foreign_server_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_foreign_server_statContext,0)


        def alter_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_function_statContext,0)


        def alter_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_join_index_statContext,0)


        def alter_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_hash_index_statContext,0)


        def alter_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_table_statContext,0)


        def alter_type_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_type_statContext,0)


        def begin_isolated_loading_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Begin_isolated_loading_statContext,0)


        def begin_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Begin_logging_statContext,0)


        def begin_query_capture_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Begin_query_capture_statContext,0)


        def begin_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Begin_query_logging_statContext,0)


        def checkpoint_isolated_loading_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Checkpoint_isolated_loading_statContext,0)


        def collect_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collect_statistics_optimizer_form_statContext,0)


        def comment_placing_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Comment_placing_statContext,0)


        def create_replace_authorization_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_authorization_statContext,0)


        def create_replace_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_function_statContext,0)


        def create_replace_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_macro_statContext,0)


        def create_replace_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_procedure_statContext,0)


        def create_replace_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_view_statContext,0)


        def create_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_database_statContext,0)


        def create_foreign_server_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_foreign_server_statContext,0)


        def create_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_hash_index_statContext,0)


        def create_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_index_statContext,0)


        def create_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_join_index_statContext,0)


        def create_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_profile_statContext,0)


        def create_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_role_statContext,0)


        def create_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_table_statContext,0)


        def create_type_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_type_statContext,0)


        def create_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_user_statContext,0)


        def database_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_statContext,0)


        def delete_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Delete_database_statContext,0)


        def delete_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Delete_user_statContext,0)


        def drop_authorization_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_authorization_statContext,0)


        def drop_cast_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_cast_statContext,0)


        def drop_constraint_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_constraint_statContext,0)


        def drop_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_database_statContext,0)


        def drop_error_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_error_table_statContext,0)


        def drop_foreign_server_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_foreign_server_statContext,0)


        def drop_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_function_statContext,0)


        def drop_function_mapping_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_function_mapping_statContext,0)


        def drop_glop_set_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_glop_set_statContext,0)


        def drop_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_hash_index_statContext,0)


        def drop_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_index_statContext,0)


        def drop_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_join_index_statContext,0)


        def drop_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_macro_statContext,0)


        def drop_map_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_map_statContext,0)


        def drop_method_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_method_statContext,0)


        def drop_ordering_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_ordering_statContext,0)


        def drop_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_procedure_statContext,0)


        def drop_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_profile_statContext,0)


        def drop_replication_group_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_replication_group_statContext,0)


        def drop_replication_ruleset_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_replication_ruleset_statContext,0)


        def drop_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_role_statContext,0)


        def drop_schema_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_schema_statContext,0)


        def drop_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_statistics_optimizer_form_statContext,0)


        def drop_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_table_statContext,0)


        def drop_transform_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_transform_statContext,0)


        def drop_trigger_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_trigger_statContext,0)


        def drop_type_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_type_statContext,0)


        def drop_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_user_statContext,0)


        def drop_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_view_statContext,0)


        def drop_zone_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_zone_statContext,0)


        def end_isolated_loading_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.End_isolated_loading_statContext,0)


        def end_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.End_logging_statContext,0)


        def end_query_capture_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.End_query_capture_statContext,0)


        def end_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.End_query_logging_statContext,0)


        def flush_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Flush_query_logging_statContext,0)


        def help_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Help_statContext,0)


        def help_statistics_optimimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Help_statistics_optimimizer_form_statContext,0)


        def help_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Help_statistics_qcd_form_statContext,0)


        def incremental_restore_allow_write_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Incremental_restore_allow_write_statContext,0)


        def logging_incremental_archive_off_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logging_incremental_archive_off_statContext,0)


        def logging_incremental_archive_on_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logging_incremental_archive_on_statContext,0)


        def modify_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Modify_database_statContext,0)


        def modify_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Modify_profile_statContext,0)


        def modify_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Modify_user_statContext,0)


        def rename_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_function_statContext,0)


        def rename_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_procedure_statContext,0)


        def rename_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_macro_statContext,0)


        def rename_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_table_statContext,0)


        def rename_trigger_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_trigger_statContext,0)


        def rename_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_view_statContext,0)


        def replace_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Replace_query_logging_statContext,0)


        def set_session_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Set_session_statContext,0)


        def set_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Set_role_statContext,0)


        def set_query_band_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Set_query_band_statContext,0)


        def show_object_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Show_object_statContext,0)


        def show_query_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Show_query_logging_statContext,0)


        def show_request_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Show_request_statContext,0)


        def show_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Show_statistics_optimizer_form_statContext,0)


        def show_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Show_statistics_qcd_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_ddl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_stat" ):
                listener.enterDdl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_stat" ):
                listener.exitDdl_stat(self)




    def ddl_stat(self):

        localctx = TeradataSQLParser.Ddl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ddl_stat)
        try:
            self.state = 1400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1310
                self.alter_foreign_server_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self.alter_function_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1312
                self.alter_join_index_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1313
                self.alter_hash_index_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1314
                self.alter_table_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1315
                self.alter_type_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1316
                self.begin_isolated_loading_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1317
                self.begin_logging_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1318
                self.begin_query_capture_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1319
                self.begin_query_logging_stat()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1320
                self.checkpoint_isolated_loading_stat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1321
                self.collect_statistics_optimizer_form_stat()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1322
                self.comment_placing_stat()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1323
                self.create_replace_authorization_stat()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1324
                self.create_replace_function_stat()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1325
                self.create_replace_macro_stat()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1326
                self.create_replace_procedure_stat()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1327
                self.create_replace_view_stat()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1328
                self.create_database_stat()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1329
                self.create_foreign_server_stat()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1330
                self.create_hash_index_stat()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1331
                self.create_index_stat()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1332
                self.create_join_index_stat()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1333
                self.create_profile_stat()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1334
                self.create_role_stat()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1335
                self.create_table_stat()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1336
                self.create_type_stat()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1337
                self.create_user_stat()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1338
                self.database_stat()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1339
                self.delete_database_stat()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1340
                self.delete_user_stat()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1341
                self.drop_authorization_stat()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1342
                self.drop_cast_stat()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1343
                self.drop_constraint_stat()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1344
                self.drop_database_stat()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1345
                self.drop_error_table_stat()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1346
                self.drop_foreign_server_stat()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1347
                self.drop_function_stat()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1348
                self.drop_function_mapping_stat()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1349
                self.drop_glop_set_stat()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 1350
                self.drop_hash_index_stat()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 1351
                self.drop_index_stat()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 1352
                self.drop_join_index_stat()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 1353
                self.drop_macro_stat()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 1354
                self.drop_map_stat()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 1355
                self.drop_method_stat()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 1356
                self.drop_ordering_stat()
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 1357
                self.drop_procedure_stat()
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 1358
                self.drop_profile_stat()
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 1359
                self.drop_replication_group_stat()
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 1360
                self.drop_replication_ruleset_stat()
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 1361
                self.drop_role_stat()
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 1362
                self.drop_schema_stat()
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 1363
                self.drop_statistics_optimizer_form_stat()
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 1364
                self.drop_table_stat()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 1365
                self.drop_transform_stat()
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 1366
                self.drop_trigger_stat()
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 1367
                self.drop_type_stat()
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 1368
                self.drop_user_stat()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 1369
                self.drop_view_stat()
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 1370
                self.drop_zone_stat()
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 1371
                self.end_isolated_loading_stat()
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 1372
                self.end_logging_stat()
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 1373
                self.end_query_capture_stat()
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 1374
                self.end_query_logging_stat()
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 1375
                self.flush_query_logging_stat()
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 1376
                self.help_stat()
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 1377
                self.help_statistics_optimimizer_form_stat()
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 1378
                self.help_statistics_qcd_form_stat()
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 1379
                self.incremental_restore_allow_write_stat()
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 1380
                self.logging_incremental_archive_off_stat()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 1381
                self.logging_incremental_archive_on_stat()
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 1382
                self.modify_database_stat()
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 1383
                self.modify_profile_stat()
                pass

            elif la_ == 75:
                self.enterOuterAlt(localctx, 75)
                self.state = 1384
                self.modify_user_stat()
                pass

            elif la_ == 76:
                self.enterOuterAlt(localctx, 76)
                self.state = 1385
                self.rename_function_stat()
                pass

            elif la_ == 77:
                self.enterOuterAlt(localctx, 77)
                self.state = 1386
                self.rename_procedure_stat()
                pass

            elif la_ == 78:
                self.enterOuterAlt(localctx, 78)
                self.state = 1387
                self.rename_macro_stat()
                pass

            elif la_ == 79:
                self.enterOuterAlt(localctx, 79)
                self.state = 1388
                self.rename_table_stat()
                pass

            elif la_ == 80:
                self.enterOuterAlt(localctx, 80)
                self.state = 1389
                self.rename_trigger_stat()
                pass

            elif la_ == 81:
                self.enterOuterAlt(localctx, 81)
                self.state = 1390
                self.rename_view_stat()
                pass

            elif la_ == 82:
                self.enterOuterAlt(localctx, 82)
                self.state = 1391
                self.replace_query_logging_stat()
                pass

            elif la_ == 83:
                self.enterOuterAlt(localctx, 83)
                self.state = 1392
                self.set_session_stat()
                pass

            elif la_ == 84:
                self.enterOuterAlt(localctx, 84)
                self.state = 1393
                self.set_role_stat()
                pass

            elif la_ == 85:
                self.enterOuterAlt(localctx, 85)
                self.state = 1394
                self.set_query_band_stat()
                pass

            elif la_ == 86:
                self.enterOuterAlt(localctx, 86)
                self.state = 1395
                self.show_object_stat()
                pass

            elif la_ == 87:
                self.enterOuterAlt(localctx, 87)
                self.state = 1396
                self.show_query_logging_stat()
                pass

            elif la_ == 88:
                self.enterOuterAlt(localctx, 88)
                self.state = 1397
                self.show_request_stat()
                pass

            elif la_ == 89:
                self.enterOuterAlt(localctx, 89)
                self.state = 1398
                self.show_statistics_optimizer_form_stat()
                pass

            elif la_ == 90:
                self.enterOuterAlt(localctx, 90)
                self.state = 1399
                self.show_statistics_qcd_form_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_foreign_server_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_name = None # Unqualified_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLParser.SERVER, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def foreign_server_add_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Foreign_server_add_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_add_clauseContext,i)


        def foreign_server_drop_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Foreign_server_drop_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_drop_clauseContext,i)


        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_server_dbContext,0)


        def foreign_server_external_security_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_external_security_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_foreign_server_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_foreign_server_stat" ):
                listener.enterAlter_foreign_server_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_foreign_server_stat" ):
                listener.exitAlter_foreign_server_stat(self)




    def alter_foreign_server_stat(self):

        localctx = TeradataSQLParser.Alter_foreign_server_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alter_foreign_server_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(TeradataSQLParser.ALTER)
            self.state = 1403
            self.match(TeradataSQLParser.FOREIGN)
            self.state = 1404
            self.match(TeradataSQLParser.SERVER)
            self.state = 1406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 1405
                self.td_server_db()


            self.state = 1408
            localctx.server_name = self.unqualified_name()
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 1409
                self.foreign_server_external_security_clause()


            self.state = 1414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.state = 1412
                self.foreign_server_add_clause()
                pass
            elif token in [125]:
                self.state = 1413
                self.foreign_server_drop_clause()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==125 or _la==1208:
                self.state = 1419
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1208]:
                    self.state = 1416
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1417
                    self.foreign_server_add_clause()
                    pass
                elif token in [125]:
                    self.state = 1418
                    self.foreign_server_drop_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_add_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TeradataSQLParser.ADD, 0)

        def foreign_server_using_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_using_optionContext,0)


        def IMPORT(self):
            return self.getToken(TeradataSQLParser.IMPORT, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLParser.EXPORT, 0)

        def foreign_server_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_using_clauseContext,0)


        def foreign_server_with_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_with_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_server_add_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_add_clause" ):
                listener.enterForeign_server_add_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_add_clause" ):
                listener.exitForeign_server_add_clause(self)




    def foreign_server_add_clause(self):

        localctx = TeradataSQLParser.Foreign_server_add_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_foreign_server_add_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.match(TeradataSQLParser.ADD)
            self.state = 1431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1023, 1192]:
                self.state = 1425
                self.foreign_server_using_option()
                pass
            elif token in [664, 699]:
                self.state = 1426
                _la = self._input.LA(1)
                if not(_la==664 or _la==699):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1429
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [457]:
                    self.state = 1427
                    self.foreign_server_using_clause()
                    pass
                elif token in [474]:
                    self.state = 1428
                    self.foreign_server_with_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_drop_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def foreign_server_option_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Foreign_server_option_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_option_nameContext,i)


        def IMPORT(self):
            return self.getToken(TeradataSQLParser.IMPORT, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLParser.EXPORT, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_server_drop_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_drop_clause" ):
                listener.enterForeign_server_drop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_drop_clause" ):
                listener.exitForeign_server_drop_clause(self)




    def foreign_server_drop_clause(self):

        localctx = TeradataSQLParser.Foreign_server_drop_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_foreign_server_drop_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(TeradataSQLParser.DROP)
            self.state = 1444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1023, 1192]:
                self.state = 1434
                self.foreign_server_option_name()
                pass
            elif token in [664, 699]:
                self.state = 1435
                _la = self._input.LA(1)
                if not(_la==664 or _la==699):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==457:
                    self.state = 1436
                    self.match(TeradataSQLParser.USING)
                    self.state = 1438 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1437
                        self.foreign_server_option_name()
                        self.state = 1440 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1023 or _la==1192):
                            break



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def EXECUTE(self):
            return self.getToken(TeradataSQLParser.EXECUTE, 0)

        def PROTECTED(self):
            return self.getToken(TeradataSQLParser.PROTECTED, 0)

        def COMPILE(self):
            return self.getToken(TeradataSQLParser.COMPILE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def ONLY(self):
            return self.getToken(TeradataSQLParser.ONLY, 0)

        def variable_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Variable_data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Variable_data_typeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_function_stat" ):
                listener.enterAlter_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_function_stat" ):
                listener.exitAlter_function_stat(self)




    def alter_function_stat(self):

        localctx = TeradataSQLParser.Alter_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_alter_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1446
            self.match(TeradataSQLParser.ALTER)
            self.state = 1466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.state = 1447
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 1448
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 1449
                self.function_name()
                pass
            elif token in [166]:
                self.state = 1450
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 1451
                self.function_name()
                self.state = 1464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 1452
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 1461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                        self.state = 1453
                        self.variable_data_type()
                        self.state = 1458
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 1454
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 1455
                            self.variable_data_type()
                            self.state = 1460
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1463
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [144]:
                self.state = 1468
                self.match(TeradataSQLParser.EXECUTE)
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 1469
                    self.match(TeradataSQLParser.NOT)


                self.state = 1472
                self.match(TeradataSQLParser.PROTECTED)
                pass
            elif token in [585]:
                self.state = 1473
                self.match(TeradataSQLParser.COMPILE)
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 1474
                    self.match(TeradataSQLParser.ONLY)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_join_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def JOIN(self):
            return self.getToken(TeradataSQLParser.JOIN, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Map_specContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_join_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_join_index_stat" ):
                listener.enterAlter_join_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_join_index_stat" ):
                listener.exitAlter_join_index_stat(self)




    def alter_join_index_stat(self):

        localctx = TeradataSQLParser.Alter_join_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_alter_join_index_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.match(TeradataSQLParser.ALTER)
            self.state = 1480
            self.match(TeradataSQLParser.JOIN)
            self.state = 1481
            self.match(TeradataSQLParser.INDEX)
            self.state = 1482
            localctx.join_index_name = self.table_name()
            self.state = 1483
            self.map_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_hash_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hash_index_name = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def HASH(self):
            return self.getToken(TeradataSQLParser.HASH, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Map_specContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_hash_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_hash_index_stat" ):
                listener.enterAlter_hash_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_hash_index_stat" ):
                listener.exitAlter_hash_index_stat(self)




    def alter_hash_index_stat(self):

        localctx = TeradataSQLParser.Alter_hash_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_alter_hash_index_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1485
            self.match(TeradataSQLParser.ALTER)
            self.state = 1486
            self.match(TeradataSQLParser.HASH)
            self.state = 1487
            self.match(TeradataSQLParser.INDEX)
            self.state = 1488
            localctx.hash_index_name = self.table_name()
            self.state = 1489
            self.map_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_basic_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_table_basic_statContext,0)


        def alter_table_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_table_join_index_statContext,0)


        def alter_table_revalidation_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_table_revalidation_statContext,0)


        def alter_table_release_rows_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_table_release_rows_statContext,0)


        def alter_table_map_and_collocation_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_table_map_and_collocation_form_statContext,0)


        def alter_foreign_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_foreign_table_statContext,0)


        def alter_table_to_current_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_table_to_current_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stat" ):
                listener.enterAlter_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stat" ):
                listener.exitAlter_table_stat(self)




    def alter_table_stat(self):

        localctx = TeradataSQLParser.Alter_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_alter_table_stat)
        try:
            self.state = 1498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1491
                self.alter_table_basic_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1492
                self.alter_table_join_index_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1493
                self.alter_table_revalidation_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1494
                self.alter_table_release_rows_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1495
                self.alter_table_map_and_collocation_form_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1496
                self.alter_foreign_table_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1497
                self.alter_table_to_current_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_basic_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.quotestring = None # Char_string_literalContext
            self.n = None # Integer_literalContext

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def alter_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Alter_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Alter_optionContext,i)


        def table_option_alter_form(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_option_alter_formContext,0)


        def normalize_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Normalize_optionContext,0)


        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def NORMALIZE(self):
            return self.getToken(TeradataSQLParser.NORMALIZE, 0)

        def modify_primary(self):
            return self.getTypedRuleContext(TeradataSQLParser.Modify_primaryContext,0)


        def MODIFY(self):
            return self.getToken(TeradataSQLParser.MODIFY, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLParser.PRIMARY, 0)

        def alter_partitioning(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_partitioningContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.TIME)
            else:
                return self.getToken(TeradataSQLParser.TIME, i)

        def ZONE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ZONE)
            else:
                return self.getToken(TeradataSQLParser.ZONE, i)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLParser.EQUALS_SIGN, i)

        def DOWN(self):
            return self.getToken(TeradataSQLParser.DOWN, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def RESET(self):
            return self.getToken(TeradataSQLParser.RESET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def TIMEDATEWZCONTROL(self):
            return self.getToken(TeradataSQLParser.TIMEDATEWZCONTROL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_table_basic_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_basic_stat" ):
                listener.enterAlter_table_basic_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_basic_stat" ):
                listener.exitAlter_table_basic_stat(self)




    def alter_table_basic_stat(self):

        localctx = TeradataSQLParser.Alter_table_basic_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_alter_table_basic_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.match(TeradataSQLParser.ALTER)
            self.state = 1501
            self.match(TeradataSQLParser.TABLE)
            self.state = 1502
            self.table_name()
            self.state = 1549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 1503
                self.alter_option()
                self.state = 1508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1504
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1505
                    self.alter_option()
                    self.state = 1510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1511
                self.table_option_alter_form()
                pass

            elif la_ == 3:
                self.state = 1512
                self.normalize_option()
                pass

            elif la_ == 4:
                self.state = 1513
                self.match(TeradataSQLParser.DROP)
                self.state = 1514
                self.match(TeradataSQLParser.NORMALIZE)
                pass

            elif la_ == 5:
                self.state = 1515
                self.modify_primary()
                pass

            elif la_ == 6:
                self.state = 1516
                self.match(TeradataSQLParser.MODIFY)
                self.state = 1517
                self.match(TeradataSQLParser.NO)
                self.state = 1518
                self.match(TeradataSQLParser.PRIMARY)
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 1519
                    self.match(TeradataSQLParser.INDEX)


                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8 or _la==125 or _la==272 or _la==840:
                    self.state = 1522
                    self.alter_partitioning()


                pass

            elif la_ == 7:
                self.state = 1525
                self.match(TeradataSQLParser.MODIFY)
                self.state = 1526
                self.alter_partitioning()
                pass

            elif la_ == 8:
                self.state = 1527
                self.match(TeradataSQLParser.FROM)
                self.state = 1528
                self.match(TeradataSQLParser.TIME)
                self.state = 1529
                self.match(TeradataSQLParser.ZONE)
                self.state = 1530
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1221 or _la==1222:
                    self.state = 1531
                    _la = self._input.LA(1)
                    if not(_la==1221 or _la==1222):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1534
                localctx.quotestring = self.char_string_literal()
                self.state = 1539
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 1535
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1536
                    self.match(TeradataSQLParser.TIMEDATEWZCONTROL)
                    self.state = 1537
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 1538
                    localctx.n = self.integer_literal()


                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 1541
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1542
                    self.match(TeradataSQLParser.WITH)
                    self.state = 1543
                    self.match(TeradataSQLParser.TIME)
                    self.state = 1544
                    self.match(TeradataSQLParser.ZONE)


                pass

            elif la_ == 9:
                self.state = 1547
                _la = self._input.LA(1)
                if not(_la==372 or _la==884):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1548
                self.match(TeradataSQLParser.DOWN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_join_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def join_index_add_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Join_index_add_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Join_index_add_optionContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_table_join_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_join_index_stat" ):
                listener.enterAlter_table_join_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_join_index_stat" ):
                listener.exitAlter_table_join_index_stat(self)




    def alter_table_join_index_stat(self):

        localctx = TeradataSQLParser.Alter_table_join_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_alter_table_join_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(TeradataSQLParser.ALTER)
            self.state = 1552
            self.match(TeradataSQLParser.TABLE)
            self.state = 1553
            localctx.join_index_name = self.table_name()
            self.state = 1554
            self.join_index_add_option()
            self.state = 1559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 1555
                self.match(TeradataSQLParser.COMMA)
                self.state = 1556
                self.join_index_add_option()
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_revalidation_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.save_table_name = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def REVALIDATE(self):
            return self.getToken(TeradataSQLParser.REVALIDATE, 0)

        def NONTEMPORAL(self):
            return self.getToken(TeradataSQLParser.NONTEMPORAL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_table_revalidation_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_revalidation_stat" ):
                listener.enterAlter_table_revalidation_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_revalidation_stat" ):
                listener.exitAlter_table_revalidation_stat(self)




    def alter_table_revalidation_stat(self):

        localctx = TeradataSQLParser.Alter_table_revalidation_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_alter_table_revalidation_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==270:
                self.state = 1562
                self.match(TeradataSQLParser.NONTEMPORAL)


            self.state = 1565
            self.match(TeradataSQLParser.ALTER)
            self.state = 1566
            self.match(TeradataSQLParser.TABLE)
            self.state = 1567
            self.table_name()
            self.state = 1568
            self.match(TeradataSQLParser.REVALIDATE)
            self.state = 1578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1569
                self.match(TeradataSQLParser.WITH)
                self.state = 1576
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [198]:
                    self.state = 1570
                    self.match(TeradataSQLParser.INSERT)
                    self.state = 1572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==206:
                        self.state = 1571
                        self.match(TeradataSQLParser.INTO)


                    self.state = 1574
                    localctx.save_table_name = self.table_name()
                    pass
                elif token in [115]:
                    self.state = 1575
                    self.match(TeradataSQLParser.DELETE)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_release_rows_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def RELEASE(self):
            return self.getToken(TeradataSQLParser.RELEASE, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLParser.ROWS, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLParser.DELETED, 0)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def RESET(self):
            return self.getToken(TeradataSQLParser.RESET, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLParser.LOAD, 0)

        def IDENTITY(self):
            return self.getToken(TeradataSQLParser.IDENTITY, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_table_release_rows_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_release_rows_stat" ):
                listener.enterAlter_table_release_rows_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_release_rows_stat" ):
                listener.exitAlter_table_release_rows_stat(self)




    def alter_table_release_rows_stat(self):

        localctx = TeradataSQLParser.Alter_table_release_rows_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_alter_table_release_rows_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self.match(TeradataSQLParser.ALTER)
            self.state = 1581
            self.match(TeradataSQLParser.TABLE)
            self.state = 1582
            self.table_name()
            self.state = 1583
            self.match(TeradataSQLParser.RELEASE)
            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1079:
                self.state = 1584
                self.match(TeradataSQLParser.DELETED)


            self.state = 1587
            self.match(TeradataSQLParser.ROWS)
            self.state = 1592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 1588
                self.match(TeradataSQLParser.AND)
                self.state = 1589
                self.match(TeradataSQLParser.RESET)
                self.state = 1590
                self.match(TeradataSQLParser.LOAD)
                self.state = 1591
                self.match(TeradataSQLParser.IDENTITY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_map_and_collocation_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Map_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_table_map_and_collocation_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_map_and_collocation_form_stat" ):
                listener.enterAlter_table_map_and_collocation_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_map_and_collocation_form_stat" ):
                listener.exitAlter_table_map_and_collocation_form_stat(self)




    def alter_table_map_and_collocation_form_stat(self):

        localctx = TeradataSQLParser.Alter_table_map_and_collocation_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_alter_table_map_and_collocation_form_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.match(TeradataSQLParser.ALTER)
            self.state = 1595
            self.match(TeradataSQLParser.TABLE)
            self.state = 1596
            self.table_name()
            self.state = 1597
            self.match(TeradataSQLParser.COMMA)
            self.state = 1598
            self.map_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_foreign_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_optionContext,i)


        def foreign_table_external_security_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_table_external_security_clauseContext,0)


        def alter_foreign_column_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Alter_foreign_column_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Alter_foreign_column_optionContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def location_column(self):
            return self.getTypedRuleContext(TeradataSQLParser.Location_columnContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def payload_column(self):
            return self.getTypedRuleContext(TeradataSQLParser.Payload_columnContext,0)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_definitionContext,i)


        def location(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.LocationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.LocationContext,i)


        def foreign_table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Foreign_table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Foreign_table_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_foreign_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_foreign_table_stat" ):
                listener.enterAlter_foreign_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_foreign_table_stat" ):
                listener.exitAlter_foreign_table_stat(self)




    def alter_foreign_table_stat(self):

        localctx = TeradataSQLParser.Alter_foreign_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_alter_foreign_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1600
            self.match(TeradataSQLParser.ALTER)
            self.state = 1601
            self.match(TeradataSQLParser.FOREIGN)
            self.state = 1602
            self.match(TeradataSQLParser.TABLE)
            self.state = 1603
            self.table_name()
            self.state = 1608
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1604
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1605
                    self.table_option() 
                self.state = 1610
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 1611
                self.match(TeradataSQLParser.COMMA)
                self.state = 1612
                self.foreign_table_external_security_clause()


            self.state = 1623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==125 or _la==338:
                self.state = 1615
                self.alter_foreign_column_option()
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1616
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1617
                    self.alter_foreign_column_option()
                    self.state = 1622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 1625
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 1626
                self.location_column()
                self.state = 1627
                self.match(TeradataSQLParser.COMMA)
                self.state = 1637
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 1628
                    self.payload_column()
                    pass

                elif la_ == 2:
                    self.state = 1629
                    self.column_definition()
                    self.state = 1634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1630
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 1631
                        self.column_definition()
                        self.state = 1636
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 1639
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 1643
                self.match(TeradataSQLParser.UPDATE)
                self.state = 1648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & 1017) != 0):
                    self.state = 1646
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1128]:
                        self.state = 1644
                        self.location()
                        pass
                    elif token in [1131, 1132, 1133, 1134, 1135, 1136, 1137]:
                        self.state = 1645
                        self.foreign_table_option()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_foreign_column_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.old_name = None # Unqualified_nameContext
            self.new_name = None # Unqualified_nameContext

        def ADD(self):
            return self.getToken(TeradataSQLParser.ADD, 0)

        def add_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Add_optionContext,0)


        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def IDENTITY(self):
            return self.getToken(TeradataSQLParser.IDENTITY, 0)

        def RENAME(self):
            return self.getToken(TeradataSQLParser.RENAME, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_foreign_column_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_foreign_column_option" ):
                listener.enterAlter_foreign_column_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_foreign_column_option" ):
                listener.exitAlter_foreign_column_option(self)




    def alter_foreign_column_option(self):

        localctx = TeradataSQLParser.Alter_foreign_column_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_alter_foreign_column_option)
        self._la = 0 # Token type
        try:
            self.state = 1665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1653
                self.match(TeradataSQLParser.ADD)
                self.state = 1654
                self.add_option()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.match(TeradataSQLParser.DROP)
                self.state = 1656
                localctx.name = self.unqualified_name()
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==187:
                    self.state = 1657
                    self.match(TeradataSQLParser.IDENTITY)


                pass
            elif token in [338]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1660
                self.match(TeradataSQLParser.RENAME)
                self.state = 1661
                localctx.old_name = self.unqualified_name()
                self.state = 1662
                _la = self._input.LA(1)
                if not(_la==20 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1663
                localctx.new_name = self.unqualified_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_to_current_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.save_table = None # Table_nameContext

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLParser.CURRENT, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_table_to_current_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_to_current_stat" ):
                listener.enterAlter_table_to_current_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_to_current_stat" ):
                listener.exitAlter_table_to_current_stat(self)




    def alter_table_to_current_stat(self):

        localctx = TeradataSQLParser.Alter_table_to_current_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_alter_table_to_current_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(TeradataSQLParser.ALTER)
            self.state = 1668
            self.match(TeradataSQLParser.TABLE)
            self.state = 1669
            self.table_name()
            self.state = 1670
            self.match(TeradataSQLParser.TO)
            self.state = 1671
            self.match(TeradataSQLParser.CURRENT)
            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 1672
                self.match(TeradataSQLParser.WITH)
                self.state = 1679
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [198]:
                    self.state = 1673
                    self.match(TeradataSQLParser.INSERT)
                    self.state = 1675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==206:
                        self.state = 1674
                        self.match(TeradataSQLParser.INTO)


                    self.state = 1677
                    localctx.save_table = self.table_name()
                    pass
                elif token in [115]:
                    self.state = 1678
                    self.match(TeradataSQLParser.DELETE)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Unqualified_nameContext
            self.old_name = None # Unqualified_nameContext
            self.new_name = None # Unqualified_nameContext

        def ADD(self):
            return self.getToken(TeradataSQLParser.ADD, 0)

        def add_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Add_optionContext,0)


        def MODIFY(self):
            return self.getToken(TeradataSQLParser.MODIFY, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLParser.CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def RENAME(self):
            return self.getToken(TeradataSQLParser.RENAME, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def drop_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_option" ):
                listener.enterAlter_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_option" ):
                listener.exitAlter_option(self)




    def alter_option(self):

        localctx = TeradataSQLParser.Alter_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_alter_option)
        self._la = 0 # Token type
        try:
            self.state = 1704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1683
                self.match(TeradataSQLParser.ADD)
                self.state = 1684
                self.add_option()
                pass
            elif token in [254]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1685
                self.match(TeradataSQLParser.MODIFY)
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 1687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74:
                        self.state = 1686
                        self.match(TeradataSQLParser.CONSTRAINT)


                    self.state = 1689
                    localctx.constraint_name = self.unqualified_name()


                self.state = 1692
                self.match(TeradataSQLParser.CHECK)
                self.state = 1693
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 1694
                self.logical_expr(0)
                self.state = 1695
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [338]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1697
                self.match(TeradataSQLParser.RENAME)
                self.state = 1698
                localctx.old_name = self.unqualified_name()
                self.state = 1699
                _la = self._input.LA(1)
                if not(_la==20 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1700
                localctx.new_name = self.unqualified_name()
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1702
                self.match(TeradataSQLParser.DROP)
                self.state = 1703
                self.drop_option()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_option_alter_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table_name = None # Table_nameContext

        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLParser.Fallback_protectionContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLParser.JOURNAL, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Before_journalContext,0)


        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def COMMIT(self):
            return self.getToken(TeradataSQLParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLParser.ROWS, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLParser.PRESERVE, 0)

        def LOG(self):
            return self.getToken(TeradataSQLParser.LOG, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def AFTER(self):
            return self.getToken(TeradataSQLParser.AFTER, 0)

        def DUAL(self):
            return self.getToken(TeradataSQLParser.DUAL, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLParser.CHECKSUM, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def OFF(self):
            return self.getToken(TeradataSQLParser.OFF, 0)

        def FREESPACE(self):
            return self.getToken(TeradataSQLParser.FREESPACE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLParser.PERCENT, 0)

        def datablocksize(self):
            return self.getTypedRuleContext(TeradataSQLParser.DatablocksizeContext,0)


        def IMMEDIATE(self):
            return self.getToken(TeradataSQLParser.IMMEDIATE, 0)

        def mergeblockratio(self):
            return self.getTypedRuleContext(TeradataSQLParser.MergeblockratioContext,0)


        def block_compression(self):
            return self.getTypedRuleContext(TeradataSQLParser.Block_compressionContext,0)


        def with_isolated_loading_alter_form(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_isolated_loading_alter_formContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_option_alter_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_option_alter_form" ):
                listener.enterTable_option_alter_form(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_option_alter_form" ):
                listener.exitTable_option_alter_form(self)




    def table_option_alter_form(self):

        localctx = TeradataSQLParser.Table_option_alter_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_table_option_alter_form)
        self._la = 0 # Token type
        try:
            self.state = 1745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1706
                self.fallback_protection()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1707
                self.match(TeradataSQLParser.WITH)
                self.state = 1708
                self.match(TeradataSQLParser.JOURNAL)
                self.state = 1709
                self.match(TeradataSQLParser.TABLE)
                self.state = 1710
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 1711
                localctx.journal_table_name = self.table_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1712
                self.before_journal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1713
                self.match(TeradataSQLParser.ON)
                self.state = 1714
                self.match(TeradataSQLParser.COMMIT)
                self.state = 1715
                _la = self._input.LA(1)
                if not(_la==115 or _la==307):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1716
                self.match(TeradataSQLParser.ROWS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 1717
                    self.match(TeradataSQLParser.NO)


                self.state = 1720
                self.match(TeradataSQLParser.LOG)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1726
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 1721
                    self.match(TeradataSQLParser.NO)
                    pass
                elif token in [126]:
                    self.state = 1722
                    self.match(TeradataSQLParser.DUAL)
                    pass
                elif token in [224]:
                    self.state = 1723
                    self.match(TeradataSQLParser.LOCAL)
                    pass
                elif token in [272]:
                    self.state = 1724
                    self.match(TeradataSQLParser.NOT)
                    self.state = 1725
                    self.match(TeradataSQLParser.LOCAL)
                    pass
                elif token in [11]:
                    pass
                else:
                    pass
                self.state = 1728
                self.match(TeradataSQLParser.AFTER)
                self.state = 1729
                self.match(TeradataSQLParser.JOURNAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1730
                self.match(TeradataSQLParser.CHECKSUM)
                self.state = 1731
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 1732
                _la = self._input.LA(1)
                if not(_la==111 or _la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1733
                self.match(TeradataSQLParser.FREESPACE)
                self.state = 1734
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 1735
                self.integer_literal()
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 1736
                    self.match(TeradataSQLParser.PERCENT)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1739
                self.datablocksize()
                self.state = 1740
                self.match(TeradataSQLParser.IMMEDIATE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1742
                self.mergeblockratio()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1743
                self.block_compression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1744
                self.with_isolated_loading_alter_form()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.into_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.name = list() # of Unqualified_nameContexts
            self.period_name = None # Unqualified_nameContext
            self.period_begin_column = None # Unqualified_nameContext
            self.period_end_column = None # Unqualified_nameContext
            self.row_level_security_constraint_column_name = list() # of Unqualified_nameContexts

        def alter_column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Alter_column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Alter_column_specContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def AUTO(self):
            return self.getToken(TeradataSQLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLParser.COMPRESS, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLParser.ROW, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLParser.SYSTEM, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLParser.PERIOD, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def table_constraint(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_constraintContext,0)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_add_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_option" ):
                listener.enterAdd_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_option" ):
                listener.exitAdd_option(self)




    def add_option(self):

        localctx = TeradataSQLParser.Add_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_add_option)
        self._la = 0 # Token type
        try:
            self.state = 1820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1759
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 1747
                    self.alter_column_spec()
                    pass
                elif token in [1213]:
                    self.state = 1748
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 1749
                    self.alter_column_spec()
                    self.state = 1754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1750
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 1751
                        self.alter_column_spec()
                        self.state = 1756
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1757
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 1761
                    self.match(TeradataSQLParser.INTO)
                    self.state = 1762
                    localctx.into_name = self.unqualified_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==361 or _la==951:
                    self.state = 1765
                    _la = self._input.LA(1)
                    if not(_la==69 or _la==361 or _la==951):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1768
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 1771
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 1769
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.name.append(localctx._unqualified_name)
                    pass

                elif la_ == 2:
                    self.state = 1770
                    self.alter_column_spec()
                    pass


                self.state = 1780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1773
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1776
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        self.state = 1774
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.name.append(localctx._unqualified_name)
                        pass

                    elif la_ == 2:
                        self.state = 1775
                        self.alter_column_spec()
                        pass


                    self.state = 1782
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1783
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 1785
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 1784
                        self.match(TeradataSQLParser.NO)


                    self.state = 1787
                    self.match(TeradataSQLParser.AUTO)
                    self.state = 1788
                    self.match(TeradataSQLParser.COMPRESS)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1791
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 1792
                localctx._unqualified_name = self.unqualified_name()
                localctx.name.append(localctx._unqualified_name)
                self.state = 1793
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 1795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 1794
                    self.match(TeradataSQLParser.NO)


                self.state = 1797
                self.match(TeradataSQLParser.AUTO)
                self.state = 1798
                self.match(TeradataSQLParser.COMPRESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1800
                self.match(TeradataSQLParser.PERIOD)
                self.state = 1801
                self.match(TeradataSQLParser.FOR)
                self.state = 1802
                localctx.period_name = self.unqualified_name()
                self.state = 1803
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 1804
                localctx.period_begin_column = self.unqualified_name()
                self.state = 1805
                self.match(TeradataSQLParser.COMMA)
                self.state = 1806
                localctx.period_end_column = self.unqualified_name()
                self.state = 1807
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1809
                self.table_constraint()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1810
                localctx._unqualified_name = self.unqualified_name()
                localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1811
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1812
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                    self.state = 1817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1818
                self.match(TeradataSQLParser.CONSTRAINT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.period_name = None # Unqualified_nameContext
            self.name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.fk_column_name = list() # of Unqualified_nameContexts
            self.row_level_security_constraint_column_name = list() # of Unqualified_nameContexts

        def PERIOD(self):
            return self.getToken(TeradataSQLParser.PERIOD, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def IDENTITY(self):
            return self.getToken(TeradataSQLParser.IDENTITY, 0)

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(TeradataSQLParser.KEY, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def references(self):
            return self.getTypedRuleContext(TeradataSQLParser.ReferencesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def CHECK(self):
            return self.getToken(TeradataSQLParser.CHECK, 0)

        def INCONSISTENT(self):
            return self.getToken(TeradataSQLParser.INCONSISTENT, 0)

        def REFERENCES(self):
            return self.getToken(TeradataSQLParser.REFERENCES, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_option" ):
                listener.enterDrop_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_option" ):
                listener.exitDrop_option(self)




    def drop_option(self):

        localctx = TeradataSQLParser.Drop_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_drop_option)
        self._la = 0 # Token type
        try:
            self.state = 1868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1822
                self.match(TeradataSQLParser.PERIOD)
                self.state = 1823
                self.match(TeradataSQLParser.FOR)
                self.state = 1824
                localctx.period_name = self.unqualified_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1825
                localctx.name = self.unqualified_name()
                self.state = 1827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==187:
                    self.state = 1826
                    self.match(TeradataSQLParser.IDENTITY)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1829
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 1830
                localctx.name = self.unqualified_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74:
                    self.state = 1831
                    self.match(TeradataSQLParser.CONSTRAINT)
                    self.state = 1832
                    localctx.name = self.unqualified_name()


                self.state = 1835
                self.match(TeradataSQLParser.FOREIGN)
                self.state = 1836
                self.match(TeradataSQLParser.KEY)
                self.state = 1837
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 1838
                localctx._unqualified_name = self.unqualified_name()
                localctx.fk_column_name.append(localctx._unqualified_name)
                self.state = 1843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1839
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1840
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.fk_column_name.append(localctx._unqualified_name)
                    self.state = 1845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1846
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 1847
                self.references()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 1850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==74:
                        self.state = 1849
                        self.match(TeradataSQLParser.CONSTRAINT)


                    self.state = 1852
                    localctx.name = self.unqualified_name()


                self.state = 1855
                self.match(TeradataSQLParser.CHECK)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1856
                self.match(TeradataSQLParser.INCONSISTENT)
                self.state = 1857
                self.match(TeradataSQLParser.REFERENCES)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1858
                localctx._unqualified_name = self.unqualified_name()
                localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1859
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1860
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                    self.state = 1865
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1866
                self.match(TeradataSQLParser.CONSTRAINT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts

        def MODIFY(self):
            return self.getToken(TeradataSQLParser.MODIFY, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(TeradataSQLParser.UNIQUE, 0)

        def AMP(self):
            return self.getToken(TeradataSQLParser.AMP, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.NOT)
            else:
                return self.getToken(TeradataSQLParser.NOT, i)

        def NAMED(self):
            return self.getToken(TeradataSQLParser.NAMED, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def alter_partitioning(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_partitioningContext,0)


        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_modify_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_primary" ):
                listener.enterModify_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_primary" ):
                listener.exitModify_primary(self)




    def modify_primary(self):

        localctx = TeradataSQLParser.Modify_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_modify_primary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1870
            self.match(TeradataSQLParser.MODIFY)
            self.state = 1875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==448:
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 1871
                    self.match(TeradataSQLParser.NOT)


                self.state = 1874
                self.match(TeradataSQLParser.UNIQUE)


            self.state = 1877
            self.match(TeradataSQLParser.PRIMARY)
            self.state = 1879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 1878
                self.match(TeradataSQLParser.AMP)


            self.state = 1882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192:
                self.state = 1881
                self.match(TeradataSQLParser.INDEX)


            self.state = 1887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 1884
                localctx.index_name = self.unqualified_name()

            elif la_ == 2:
                self.state = 1885
                self.match(TeradataSQLParser.NOT)
                self.state = 1886
                self.match(TeradataSQLParser.NAMED)


            self.state = 1900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 1889
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 1890
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 1895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 1891
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1892
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 1897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1898
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 1903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8 or _la==125 or _la==272 or _la==840:
                self.state = 1902
                self.alter_partitioning()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_partitioningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.save_table_name = None # Table_nameContext

        def PARTITION(self):
            return self.getToken(TeradataSQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def add_drop_range_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Add_drop_range_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Add_drop_range_optionContext,i)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def partitioning_level(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Partitioning_levelContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Partitioning_levelContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def PARTITIONED(self):
            return self.getToken(TeradataSQLParser.PARTITIONED, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_partitioning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_partitioning" ):
                listener.enterAlter_partitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_partitioning" ):
                listener.exitAlter_partitioning(self)




    def alter_partitioning(self):

        localctx = TeradataSQLParser.Alter_partitioningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_alter_partitioning)
        self._la = 0 # Token type
        try:
            self.state = 1944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 125, 840]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1929
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [840]:
                    self.state = 1905
                    self.match(TeradataSQLParser.PARTITION)
                    self.state = 1906
                    self.match(TeradataSQLParser.BY)
                    self.state = 1919
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [48, 69, 320]:
                        self.state = 1907
                        self.partitioning_level()
                        pass
                    elif token in [1213]:
                        self.state = 1908
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 1909
                        self.partitioning_level()
                        self.state = 1914
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 1910
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 1911
                            self.partitioning_level()
                            self.state = 1916
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1917
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [8, 125]:
                    self.state = 1921
                    self.add_drop_range_option()
                    self.state = 1926
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 1922
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 1923
                        self.add_drop_range_option()
                        self.state = 1928
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 1931
                    self.match(TeradataSQLParser.WITH)
                    self.state = 1938
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [198]:
                        self.state = 1932
                        self.match(TeradataSQLParser.INSERT)
                        self.state = 1934
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==206:
                            self.state = 1933
                            self.match(TeradataSQLParser.INTO)


                        self.state = 1936
                        localctx.save_table_name = self.table_name()
                        pass
                    elif token in [115]:
                        self.state = 1937
                        self.match(TeradataSQLParser.DELETE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [272]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1942
                self.match(TeradataSQLParser.NOT)
                self.state = 1943
                self.match(TeradataSQLParser.PARTITIONED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_drop_range_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def alter_range_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Alter_range_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Alter_range_exprContext,i)


        def ADD(self):
            return self.getToken(TeradataSQLParser.ADD, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_add_drop_range_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_drop_range_option" ):
                listener.enterAdd_drop_range_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_drop_range_option" ):
                listener.exitAdd_drop_range_option(self)




    def add_drop_range_option(self):

        localctx = TeradataSQLParser.Add_drop_range_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_add_drop_range_option)
        self._la = 0 # Token type
        try:
            self.state = 1954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1946
                self.match(TeradataSQLParser.DROP)
                self.state = 1947
                self.alter_range_expr()
                self.state = 1950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 1948
                    self.match(TeradataSQLParser.ADD)
                    self.state = 1949
                    self.alter_range_expr()


                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1952
                self.match(TeradataSQLParser.ADD)
                self.state = 1953
                self.alter_range_expr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def column_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_attributeContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_column_spec" ):
                listener.enterAlter_column_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_column_spec" ):
                listener.exitAlter_column_spec(self)




    def alter_column_spec(self):

        localctx = TeradataSQLParser.Alter_column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_alter_column_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            localctx.name = self.unqualified_name()
            self.state = 1981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 1957
                self.data_type()
                pass

            elif la_ == 2:
                self.state = 1958
                self.data_type()
                self.state = 1960 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1959
                    self.column_attribute()
                    self.state = 1962 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211):
                        break

                pass

            elif la_ == 3:
                self.state = 1965 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1964
                        self.column_attribute()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1967 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 1969
                self.data_type()
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 1970
                    self.column_attribute()
                    self.state = 1975
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.state = 1977 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1976
                    self.column_attribute()
                    self.state = 1979 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_range_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.RANGE)
            else:
                return self.getToken(TeradataSQLParser.RANGE, i)

        def RANGE_L(self):
            return self.getToken(TeradataSQLParser.RANGE_L, 0)

        def BETWEEN(self):
            return self.getToken(TeradataSQLParser.BETWEEN, 0)

        def range_expr_3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Range_expr_3Context)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Range_expr_3Context,i)


        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLParser.UNKNOWN, 0)

        def WHERE(self):
            return self.getToken(TeradataSQLParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def OR(self):
            return self.getToken(TeradataSQLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_range_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_range_expr" ):
                listener.enterAlter_range_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_range_expr" ):
                listener.exitAlter_range_expr(self)




    def alter_range_expr(self):

        localctx = TeradataSQLParser.Alter_range_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_alter_range_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1983
            _la = self._input.LA(1)
            if not(_la==873 or _la==874):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.state = 1984
                self.match(TeradataSQLParser.BETWEEN)
                self.state = 1985
                self.range_expr_3()
                self.state = 1990
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1986
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 1987
                        self.range_expr_3() 
                    self.state = 1992
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                self.state = 2002
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 1993
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 1994
                    self.match(TeradataSQLParser.NO)
                    self.state = 1995
                    self.match(TeradataSQLParser.RANGE)
                    self.state = 1998
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        self.state = 1996
                        _la = self._input.LA(1)
                        if not(_la==290 or _la==1208):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1997
                        self.match(TeradataSQLParser.UNKNOWN)



                elif la_ == 2:
                    self.state = 2000
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2001
                    self.match(TeradataSQLParser.UNKNOWN)


                pass
            elif token in [268]:
                self.state = 2004
                self.match(TeradataSQLParser.NO)
                self.state = 2005
                self.match(TeradataSQLParser.RANGE)
                self.state = 2008
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 2006
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2007
                    self.match(TeradataSQLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.state = 2010
                self.match(TeradataSQLParser.UNKNOWN)
                pass
            elif token in [471]:
                self.state = 2011
                self.match(TeradataSQLParser.WHERE)
                self.state = 2012
                self.logical_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_isolated_loading_alter_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_isolated_loadingContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def FAST(self):
            return self.getToken(TeradataSQLParser.FAST, 0)

        def MODE(self):
            return self.getToken(TeradataSQLParser.MODE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def NONE(self):
            return self.getToken(TeradataSQLParser.NONE, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def OFF(self):
            return self.getToken(TeradataSQLParser.OFF, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_isolated_loading_alter_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_isolated_loading_alter_form" ):
                listener.enterWith_isolated_loading_alter_form(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_isolated_loading_alter_form" ):
                listener.exitWith_isolated_loading_alter_form(self)




    def with_isolated_loading_alter_form(self):

        localctx = TeradataSQLParser.With_isolated_loading_alter_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_with_isolated_loading_alter_form)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            self.with_isolated_loading()
            self.state = 2018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2016
                self.match(TeradataSQLParser.FOR)
                self.state = 2017
                _la = self._input.LA(1)
                if not(_la==13 or _la==198 or _la==269):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2020
                self.match(TeradataSQLParser.USING)
                self.state = 2021
                self.match(TeradataSQLParser.FAST)
                self.state = 2022
                self.match(TeradataSQLParser.MODE)
                self.state = 2023
                _la = self._input.LA(1)
                if not(_la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_index_add_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def ADD(self):
            return self.getToken(TeradataSQLParser.ADD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLParser.COMPRESS, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLParser.ROW, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLParser.SYSTEM, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_join_index_add_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_index_add_option" ):
                listener.enterJoin_index_add_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_index_add_option" ):
                listener.exitJoin_index_add_option(self)




    def join_index_add_option(self):

        localctx = TeradataSQLParser.Join_index_add_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_join_index_add_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.match(TeradataSQLParser.ADD)
            self.state = 2047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69, 361, 951]:
                self.state = 2027
                _la = self._input.LA(1)
                if not(_la==69 or _la==361 or _la==951):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2028
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 2029
                localctx.name = self.unqualified_name()
                self.state = 2030
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 2036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 2032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 2031
                        self.match(TeradataSQLParser.NO)


                    self.state = 2034
                    self.match(TeradataSQLParser.AUTO)
                    self.state = 2035
                    self.match(TeradataSQLParser.COMPRESS)


                pass
            elif token in [1213]:
                self.state = 2038
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 2039
                localctx.name = self.unqualified_name()
                self.state = 2040
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 2042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 2041
                    self.match(TeradataSQLParser.NO)


                self.state = 2044
                self.match(TeradataSQLParser.AUTO)
                self.state = 2045
                self.match(TeradataSQLParser.COMPRESS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_type_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)


        def add_attribute_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Add_attribute_clauseContext,0)


        def add_method_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Add_method_clauseContext,0)


        def add_specific_method_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Add_specific_method_clauseContext,0)


        def drop_attribute_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_attribute_clauseContext,0)


        def drop_method_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_method_clauseContext,0)


        def drop_specific_method_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_specific_method_clauseContext,0)


        def COMPILE(self):
            return self.getToken(TeradataSQLParser.COMPILE, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def ONLY(self):
            return self.getToken(TeradataSQLParser.ONLY, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alter_type_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_type_stat" ):
                listener.enterAlter_type_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_type_stat" ):
                listener.exitAlter_type_stat(self)




    def alter_type_stat(self):

        localctx = TeradataSQLParser.Alter_type_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_alter_type_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.match(TeradataSQLParser.ALTER)
            self.state = 2050
            self.match(TeradataSQLParser.TYPE)
            self.state = 2052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 2051
                self.sysudtlib()


            self.state = 2054
            self.udt_name()
            self.state = 2065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 2055
                self.add_attribute_clause()
                pass

            elif la_ == 2:
                self.state = 2056
                self.add_method_clause()
                pass

            elif la_ == 3:
                self.state = 2057
                self.add_specific_method_clause()
                pass

            elif la_ == 4:
                self.state = 2058
                self.drop_attribute_clause()
                pass

            elif la_ == 5:
                self.state = 2059
                self.drop_method_clause()
                pass

            elif la_ == 6:
                self.state = 2060
                self.drop_specific_method_clause()
                pass

            elif la_ == 7:
                self.state = 2061
                self.match(TeradataSQLParser.COMPILE)
                self.state = 2063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 2062
                    self.match(TeradataSQLParser.ONLY)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_attribute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TeradataSQLParser.ADD, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLParser.ATTRIBUTE, 0)

        def type_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Type_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Type_attribute_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_add_attribute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_attribute_clause" ):
                listener.enterAdd_attribute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_attribute_clause" ):
                listener.exitAdd_attribute_clause(self)




    def add_attribute_clause(self):

        localctx = TeradataSQLParser.Add_attribute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_add_attribute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.match(TeradataSQLParser.ADD)
            self.state = 2068
            self.match(TeradataSQLParser.ATTRIBUTE)
            self.state = 2069
            self.type_attribute_spec()
            self.state = 2074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2070
                self.match(TeradataSQLParser.COMMA)
                self.state = 2071
                self.type_attribute_spec()
                self.state = 2076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TeradataSQLParser.ADD, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def add_method_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Add_method_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Add_method_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def INSTANCE(self):
            return self.getToken(TeradataSQLParser.INSTANCE, 0)

        def CONSTRUCTOR(self):
            return self.getToken(TeradataSQLParser.CONSTRUCTOR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_add_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_method_clause" ):
                listener.enterAdd_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_method_clause" ):
                listener.exitAdd_method_clause(self)




    def add_method_clause(self):

        localctx = TeradataSQLParser.Add_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_add_method_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.match(TeradataSQLParser.ADD)
            self.state = 2079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199:
                self.state = 2078
                _la = self._input.LA(1)
                if not(_la==75 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2081
            self.match(TeradataSQLParser.METHOD)
            self.state = 2082
            self.add_method_spec()
            self.state = 2087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2083
                self.match(TeradataSQLParser.COMMA)
                self.state = 2084
                self.add_method_spec()
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_specific_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(TeradataSQLParser.ADD, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def add_specific_method_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Add_specific_method_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Add_specific_method_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_add_specific_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_specific_method_clause" ):
                listener.enterAdd_specific_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_specific_method_clause" ):
                listener.exitAdd_specific_method_clause(self)




    def add_specific_method_clause(self):

        localctx = TeradataSQLParser.Add_specific_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_add_specific_method_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090
            self.match(TeradataSQLParser.ADD)
            self.state = 2091
            self.match(TeradataSQLParser.SPECIFIC)
            self.state = 2092
            self.match(TeradataSQLParser.METHOD)
            self.state = 2093
            self.add_specific_method_spec()
            self.state = 2098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2094
                self.match(TeradataSQLParser.COMMA)
                self.state = 2095
                self.add_specific_method_spec()
                self.state = 2100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_attribute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLParser.ATTRIBUTE, 0)

        def attribute_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_attribute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_attribute_clause" ):
                listener.enterDrop_attribute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_attribute_clause" ):
                listener.exitDrop_attribute_clause(self)




    def drop_attribute_clause(self):

        localctx = TeradataSQLParser.Drop_attribute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_drop_attribute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2101
            self.match(TeradataSQLParser.DROP)
            self.state = 2102
            self.match(TeradataSQLParser.ATTRIBUTE)
            self.state = 2103
            self.attribute_name()
            self.state = 2108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2104
                self.match(TeradataSQLParser.COMMA)
                self.state = 2105
                self.attribute_name()
                self.state = 2110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,i)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def INSTANCE(self):
            return self.getToken(TeradataSQLParser.INSTANCE, 0)

        def CONSTRUCTOR(self):
            return self.getToken(TeradataSQLParser.CONSTRUCTOR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_method_clause" ):
                listener.enterDrop_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_method_clause" ):
                listener.exitDrop_method_clause(self)




    def drop_method_clause(self):

        localctx = TeradataSQLParser.Drop_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_drop_method_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2111
            self.match(TeradataSQLParser.DROP)
            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199:
                self.state = 2112
                _la = self._input.LA(1)
                if not(_la==75 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2115
            self.match(TeradataSQLParser.METHOD)
            self.state = 2117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 2116
                self.sysudtlib()


            self.state = 2119
            self.method_name()
            self.state = 2127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2120
                self.match(TeradataSQLParser.COMMA)
                self.state = 2122
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 2121
                    self.sysudtlib()


                self.state = 2124
                self.method_name()
                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_specific_method_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,i)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_specific_method_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_specific_method_clause" ):
                listener.enterDrop_specific_method_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_specific_method_clause" ):
                listener.exitDrop_specific_method_clause(self)




    def drop_specific_method_clause(self):

        localctx = TeradataSQLParser.Drop_specific_method_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_drop_specific_method_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2130
            self.match(TeradataSQLParser.DROP)
            self.state = 2131
            self.match(TeradataSQLParser.SPECIFIC)
            self.state = 2132
            self.match(TeradataSQLParser.METHOD)
            self.state = 2134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 2133
                self.sysudtlib()


            self.state = 2136
            self.method_name()
            self.state = 2144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2137
                self.match(TeradataSQLParser.COMMA)
                self.state = 2139
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 2138
                    self.sysudtlib()


                self.state = 2141
                self.method_name()
                self.state = 2146
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_method_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cast_from_data_type = None # Data_typeContext
            self.specific_method_name = None # Method_nameContext

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def returns_parameter_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Returns_parameter_specContext,0)


        def method_language_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_language_specContext,0)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,i)


        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,i)


        def CAST(self):
            return self.getToken(TeradataSQLParser.CAST, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def method_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_attrContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_add_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_method_spec" ):
                listener.enterAdd_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_method_spec" ):
                listener.exitAdd_method_spec(self)




    def add_method_spec(self):

        localctx = TeradataSQLParser.Add_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_add_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 2147
                self.sysudtlib()


            self.state = 2150
            self.method_name()
            self.state = 2151
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 2160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 2152
                self.data_type()
                self.state = 2157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2153
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2154
                    self.data_type()
                    self.state = 2159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2162
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 2163
            self.match(TeradataSQLParser.RETURNS)
            self.state = 2164
            self.returns_parameter_spec()
            self.state = 2168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 2165
                self.match(TeradataSQLParser.CAST)
                self.state = 2166
                self.match(TeradataSQLParser.FROM)
                self.state = 2167
                localctx.cast_from_data_type = self.data_type()


            self.state = 2175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 2170
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 2172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 2171
                    self.sysudtlib()


                self.state = 2174
                localctx.specific_method_name = self.method_name()


            self.state = 2201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 2177
                    self.method_attr()
                    self.state = 2182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2183
                self.method_language_spec()
                self.state = 2185 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2184
                    self.method_attr()
                    self.state = 2187 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                pass

            elif la_ == 2:
                self.state = 2190 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2189
                    self.method_attr()
                    self.state = 2192 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                self.state = 2194
                self.method_language_spec()
                self.state = 2198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 2195
                    self.method_attr()
                    self.state = 2200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_specific_method_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.specific_method_name = None # Method_nameContext

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)


        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,0)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_add_specific_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_specific_method_spec" ):
                listener.enterAdd_specific_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_specific_method_spec" ):
                listener.exitAdd_specific_method_spec(self)




    def add_specific_method_spec(self):

        localctx = TeradataSQLParser.Add_specific_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_add_specific_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.state = 2203
                self.sysudtlib()


            self.state = 2206
            localctx.specific_method_name = self.method_name()
            self.state = 2218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 2207
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 2208
                self.data_type()
                self.state = 2213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2209
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2210
                    self.data_type()
                    self.state = 2215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2216
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 2220
            self.match(TeradataSQLParser.FOR)
            self.state = 2222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 2221
                self.sysudtlib()


            self.state = 2224
            self.udt_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_isolated_loading_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_band = None # Char_string_literalContext

        def BEGIN(self):
            return self.getToken(TeradataSQLParser.BEGIN, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLParser.LOADING, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLParser.QUERY_BAND, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def CONCURRENT(self):
            return self.getToken(TeradataSQLParser.CONCURRENT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def SESSION(self):
            return self.getToken(TeradataSQLParser.SESSION, 0)

        def SINGLE(self):
            return self.getToken(TeradataSQLParser.SINGLE, 0)

        def MULTIPLE(self):
            return self.getToken(TeradataSQLParser.MULTIPLE, 0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_begin_isolated_loading_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_isolated_loading_stat" ):
                listener.enterBegin_isolated_loading_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_isolated_loading_stat" ):
                listener.exitBegin_isolated_loading_stat(self)




    def begin_isolated_loading_stat(self):

        localctx = TeradataSQLParser.Begin_isolated_loading_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_begin_isolated_loading_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self.match(TeradataSQLParser.BEGIN)
            self.state = 2228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==587:
                self.state = 2227
                self.match(TeradataSQLParser.CONCURRENT)


            self.state = 2230
            self.match(TeradataSQLParser.ISOLATED)
            self.state = 2231
            self.match(TeradataSQLParser.LOADING)
            self.state = 2232
            self.match(TeradataSQLParser.ON)
            self.state = 2233
            self.table_name()
            self.state = 2238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2234
                self.match(TeradataSQLParser.COMMA)
                self.state = 2235
                self.table_name()
                self.state = 2240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2241
            self.match(TeradataSQLParser.USING)
            self.state = 2242
            self.match(TeradataSQLParser.QUERY_BAND)
            self.state = 2243
            localctx.query_band = self.char_string_literal()
            self.state = 2249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190 or _la==1139 or _la==1140:
                self.state = 2245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 2244
                    self.match(TeradataSQLParser.IN)


                self.state = 2247
                _la = self._input.LA(1)
                if not(_la==1139 or _la==1140):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2248
                self.match(TeradataSQLParser.SESSION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Object_nameContext

        def BEGIN(self):
            return self.getToken(TeradataSQLParser.BEGIN, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ON)
            else:
                return self.getToken(TeradataSQLParser.ON, i)

        def logging_frequency(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logging_frequencyContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.OperationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.OperationContext,i)


        def DENIALS(self):
            return self.getToken(TeradataSQLParser.DENIALS, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLParser.TEXT, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.FOR)
            else:
                return self.getToken(TeradataSQLParser.FOR, i)

        def CONSTRAINT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CONSTRAINT)
            else:
                return self.getToken(TeradataSQLParser.CONSTRAINT, i)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,i)


        def logging_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Logging_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Logging_itemContext,i)


        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_begin_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_logging_stat" ):
                listener.enterBegin_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_logging_stat" ):
                listener.exitBegin_logging_stat(self)




    def begin_logging_stat(self):

        localctx = TeradataSQLParser.Begin_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_begin_logging_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2251
            self.match(TeradataSQLParser.BEGIN)
            self.state = 2252
            self.match(TeradataSQLParser.LOGGING)
            self.state = 2254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==628:
                self.state = 2253
                self.match(TeradataSQLParser.DENIALS)


            self.state = 2258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2256
                self.match(TeradataSQLParser.WITH)
                self.state = 2257
                self.match(TeradataSQLParser.TEXT)


            self.state = 2260
            self.match(TeradataSQLParser.ON)
            self.state = 2261
            self.logging_frequency()
            self.state = 2265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2262
                self.match(TeradataSQLParser.FOR)
                self.state = 2263
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 2264
                localctx.constraint_name = self.object_name()


            self.state = 2276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 2267
                self.match(TeradataSQLParser.ALL)
                pass
            elif token in [14, 60, 86, 102, 115, 125, 127, 144, 172, 192, 198, 235, 297, 310, 325, 346, 358, 359, 370, 406, 435, 441, 442, 443, 453, 456, 468]:
                self.state = 2268
                self.operation()
                self.state = 2273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2269
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2270
                    self.operation()
                    self.state = 2275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2278
                self.match(TeradataSQLParser.FOR)
                self.state = 2279
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 2280
                localctx.constraint_name = self.object_name()


            self.state = 2292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 2283
                self.match(TeradataSQLParser.BY)
                self.state = 2284
                self.user_name()
                self.state = 2289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2285
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2286
                    self.user_name()
                    self.state = 2291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 2294
                self.match(TeradataSQLParser.ON)
                self.state = 2295
                self.logging_item()
                self.state = 2300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2296
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2297
                    self.logging_item()
                    self.state = 2302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TeradataSQLParser.EXTERNAL, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLParser.CHECKPOINT, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLParser.AUTHORIZATION, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLParser.MACRO, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLParser.TRIGGER, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def DUMP(self):
            return self.getToken(TeradataSQLParser.DUMP, 0)

        def EXECUTE(self):
            return self.getToken(TeradataSQLParser.EXECUTE, 0)

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def REFERENCES(self):
            return self.getToken(TeradataSQLParser.REFERENCES, 0)

        def RESTORE(self):
            return self.getToken(TeradataSQLParser.RESTORE, 0)

        def ROLLBACK(self):
            return self.getToken(TeradataSQLParser.ROLLBACK, 0)

        def ROLLFORWARD(self):
            return self.getToken(TeradataSQLParser.ROLLFORWARD, 0)

        def UDTMETHOD(self):
            return self.getToken(TeradataSQLParser.UDTMETHOD, 0)

        def UDTTYPE(self):
            return self.getToken(TeradataSQLParser.UDTTYPE, 0)

        def UDTUSAGE(self):
            return self.getToken(TeradataSQLParser.UDTUSAGE, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLParser.OVERRIDE, 0)

        def SELECT(self):
            return self.getToken(TeradataSQLParser.SELECT, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperation" ):
                listener.enterOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperation" ):
                listener.exitOperation(self)




    def operation(self):

        localctx = TeradataSQLParser.OperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_operation)
        try:
            self.state = 2407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2305
                self.match(TeradataSQLParser.ALTER)
                self.state = 2306
                self.match(TeradataSQLParser.EXTERNAL)
                self.state = 2307
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2308
                self.match(TeradataSQLParser.ALTER)
                self.state = 2309
                self.match(TeradataSQLParser.FUNCTION)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2310
                self.match(TeradataSQLParser.ALTER)
                self.state = 2311
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2312
                self.match(TeradataSQLParser.CHECKPOINT)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2313
                self.match(TeradataSQLParser.CREATE)
                self.state = 2314
                self.match(TeradataSQLParser.AUTHORIZATION)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2315
                self.match(TeradataSQLParser.CREATE)
                self.state = 2316
                self.match(TeradataSQLParser.DATABASE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2317
                self.match(TeradataSQLParser.CREATE)
                self.state = 2318
                self.match(TeradataSQLParser.EXTERNAL)
                self.state = 2319
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2320
                self.match(TeradataSQLParser.CREATE)
                self.state = 2321
                self.match(TeradataSQLParser.FUNCTION)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2322
                self.match(TeradataSQLParser.CREATE)
                self.state = 2323
                self.match(TeradataSQLParser.GLOP)
                self.state = 2324
                self.match(TeradataSQLParser.SET)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2325
                self.match(TeradataSQLParser.CREATE)
                self.state = 2326
                self.match(TeradataSQLParser.MACRO)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2327
                self.match(TeradataSQLParser.CREATE)
                self.state = 2328
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2329
                self.match(TeradataSQLParser.CREATE)
                self.state = 2330
                self.match(TeradataSQLParser.PROFILE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2331
                self.match(TeradataSQLParser.CREATE)
                self.state = 2332
                self.match(TeradataSQLParser.ROLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2333
                self.match(TeradataSQLParser.CREATE)
                self.state = 2334
                self.match(TeradataSQLParser.TABLE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2335
                self.match(TeradataSQLParser.CREATE)
                self.state = 2336
                self.match(TeradataSQLParser.TRIGGER)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2337
                self.match(TeradataSQLParser.CREATE)
                self.state = 2338
                self.match(TeradataSQLParser.USER)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2339
                self.match(TeradataSQLParser.CREATE)
                self.state = 2340
                self.match(TeradataSQLParser.VIEW)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2341
                self.match(TeradataSQLParser.DATABASE)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2342
                self.match(TeradataSQLParser.DROP)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2343
                self.match(TeradataSQLParser.DROP)
                self.state = 2344
                self.match(TeradataSQLParser.AUTHORIZATION)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2345
                self.match(TeradataSQLParser.DROP)
                self.state = 2346
                self.match(TeradataSQLParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2347
                self.match(TeradataSQLParser.DROP)
                self.state = 2348
                self.match(TeradataSQLParser.FUNCTION)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2349
                self.match(TeradataSQLParser.DROP)
                self.state = 2350
                self.match(TeradataSQLParser.GLOP)
                self.state = 2351
                self.match(TeradataSQLParser.SET)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2352
                self.match(TeradataSQLParser.DROP)
                self.state = 2353
                self.match(TeradataSQLParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2354
                self.match(TeradataSQLParser.DROP)
                self.state = 2355
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2356
                self.match(TeradataSQLParser.DROP)
                self.state = 2357
                self.match(TeradataSQLParser.PROFILE)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2358
                self.match(TeradataSQLParser.DROP)
                self.state = 2359
                self.match(TeradataSQLParser.ROLE)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2360
                self.match(TeradataSQLParser.DROP)
                self.state = 2361
                self.match(TeradataSQLParser.TABLE)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2362
                self.match(TeradataSQLParser.DROP)
                self.state = 2363
                self.match(TeradataSQLParser.TRIGGER)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2364
                self.match(TeradataSQLParser.DROP)
                self.state = 2365
                self.match(TeradataSQLParser.USER)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2366
                self.match(TeradataSQLParser.DROP)
                self.state = 2367
                self.match(TeradataSQLParser.VIEW)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2368
                self.match(TeradataSQLParser.DUMP)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2369
                self.match(TeradataSQLParser.EXECUTE)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2370
                self.match(TeradataSQLParser.EXECUTE)
                self.state = 2371
                self.match(TeradataSQLParser.FUNCTION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2372
                self.match(TeradataSQLParser.EXECUTE)
                self.state = 2373
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2374
                self.match(TeradataSQLParser.GRANT)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2375
                self.match(TeradataSQLParser.INDEX)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2376
                self.match(TeradataSQLParser.MACRO)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2377
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2378
                self.match(TeradataSQLParser.REFERENCES)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2379
                self.match(TeradataSQLParser.RESTORE)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2380
                self.match(TeradataSQLParser.ROLLBACK)
                self.state = 2381
                self.match(TeradataSQLParser.DATABASE)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 2382
                self.match(TeradataSQLParser.ROLLFORWARD)
                self.state = 2383
                self.match(TeradataSQLParser.DATABASE)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 2384
                self.match(TeradataSQLParser.TABLE)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 2385
                self.match(TeradataSQLParser.TRIGGER)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 2386
                self.match(TeradataSQLParser.UDTMETHOD)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 2387
                self.match(TeradataSQLParser.UDTTYPE)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 2388
                self.match(TeradataSQLParser.UDTUSAGE)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 2389
                self.match(TeradataSQLParser.USER)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 2390
                self.match(TeradataSQLParser.VIEW)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 2391
                self.match(TeradataSQLParser.DELETE)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 2392
                self.match(TeradataSQLParser.INSERT)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 2393
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 2394
                self.match(TeradataSQLParser.DELETE)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 2395
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 2396
                self.match(TeradataSQLParser.DUMP)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 2397
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 2398
                self.match(TeradataSQLParser.INSERT)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 2399
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 2400
                self.match(TeradataSQLParser.RESTORE)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 2401
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 2402
                self.match(TeradataSQLParser.SELECT)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 2403
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 2404
                self.match(TeradataSQLParser.UPDATE)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 2405
                self.match(TeradataSQLParser.SELECT)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 2406
                self.match(TeradataSQLParser.UPDATE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_frequencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(TeradataSQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TeradataSQLParser.LAST, 0)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def EACH(self):
            return self.getToken(TeradataSQLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_logging_frequency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_frequency" ):
                listener.enterLogging_frequency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_frequency" ):
                listener.exitLogging_frequency(self)




    def logging_frequency(self):

        localctx = TeradataSQLParser.Logging_frequencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_logging_frequency)
        try:
            self.state = 2415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2409
                self.match(TeradataSQLParser.FIRST)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2410
                self.match(TeradataSQLParser.LAST)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2411
                self.match(TeradataSQLParser.FIRST)
                self.state = 2412
                self.match(TeradataSQLParser.AND)
                self.state = 2413
                self.match(TeradataSQLParser.LAST)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2414
                self.match(TeradataSQLParser.EACH)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.view_name = None # Table_nameContext
            self.function_mapping_name = None # Object_nameContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLParser.AUTHORIZATION, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,0)


        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLParser.MACRO, 0)

        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Macro_nameContext,0)


        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,0)


        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def MAPPING(self):
            return self.getToken(TeradataSQLParser.MAPPING, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_logging_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_item" ):
                listener.enterLogging_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_item" ):
                listener.exitLogging_item(self)




    def logging_item(self):

        localctx = TeradataSQLParser.Logging_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_logging_item)
        try:
            self.state = 2438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2417
                self.match(TeradataSQLParser.AUTHORIZATION)
                self.state = 2418
                localctx.authorization_name = self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2419
                self.match(TeradataSQLParser.DATABASE)
                self.state = 2420
                self.database_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2421
                self.match(TeradataSQLParser.USER)
                self.state = 2422
                self.user_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2423
                self.match(TeradataSQLParser.TABLE)
                self.state = 2424
                self.table_name()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2425
                self.match(TeradataSQLParser.VIEW)
                self.state = 2426
                localctx.view_name = self.table_name()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2427
                self.match(TeradataSQLParser.MACRO)
                self.state = 2428
                self.macro_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2429
                self.match(TeradataSQLParser.PROCEDURE)
                self.state = 2430
                self.procedure_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2431
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 2432
                self.function_name()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2433
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 2434
                self.match(TeradataSQLParser.MAPPING)
                self.state = 2435
                localctx.function_mapping_name = self.object_name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2436
                self.match(TeradataSQLParser.TYPE)
                self.state = 2437
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_query_capture_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext
            self.workload_name = None # Unqualified_nameContext

        def BEGIN(self):
            return self.getToken(TeradataSQLParser.BEGIN, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLParser.CAPTURE, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def WORKLOAD(self):
            return self.getToken(TeradataSQLParser.WORKLOAD, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLParser.ANALYSIS, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def VERBOSE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.VERBOSE)
            else:
                return self.getToken(TeradataSQLParser.VERBOSE, i)

        def STATSUSAGE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.STATSUSAGE)
            else:
                return self.getToken(TeradataSQLParser.STATSUSAGE, i)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def DETAILED(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DETAILED)
            else:
                return self.getToken(TeradataSQLParser.DETAILED, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_begin_query_capture_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_query_capture_stat" ):
                listener.enterBegin_query_capture_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_query_capture_stat" ):
                listener.exitBegin_query_capture_stat(self)




    def begin_query_capture_stat(self):

        localctx = TeradataSQLParser.Begin_query_capture_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_begin_query_capture_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2440
            self.match(TeradataSQLParser.BEGIN)
            self.state = 2441
            self.match(TeradataSQLParser.QUERY)
            self.state = 2442
            self.match(TeradataSQLParser.CAPTURE)
            self.state = 2446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2443
                self.match(TeradataSQLParser.FOR)
                self.state = 2444
                self.match(TeradataSQLParser.INDEX)
                self.state = 2445
                self.match(TeradataSQLParser.ANALYSIS)


            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2448
                self.match(TeradataSQLParser.WITH)
                self.state = 2454
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1022]:
                    self.state = 2449
                    self.match(TeradataSQLParser.VERBOSE)
                    pass
                elif token in [632, 940]:
                    self.state = 2451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==632:
                        self.state = 2450
                        self.match(TeradataSQLParser.DETAILED)


                    self.state = 2453
                    self.match(TeradataSQLParser.STATSUSAGE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 2456
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2462
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1022]:
                        self.state = 2457
                        self.match(TeradataSQLParser.VERBOSE)
                        pass
                    elif token in [632, 940]:
                        self.state = 2459
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==632:
                            self.state = 2458
                            self.match(TeradataSQLParser.DETAILED)


                        self.state = 2461
                        self.match(TeradataSQLParser.STATSUSAGE)
                        pass
                    else:
                        raise NoViableAltException(self)





            self.state = 2470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 2468
                self.match(TeradataSQLParser.INTO)
                self.state = 2469
                localctx.qcd_name = self.database_name()


            self.state = 2472
            self.match(TeradataSQLParser.AS)
            self.state = 2473
            self.match(TeradataSQLParser.WORKLOAD)
            self.state = 2474
            localctx.workload_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.m = None # Integer_literalContext

        def BEGIN(self):
            return self.getToken(TeradataSQLParser.BEGIN, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def query_logging_on_items(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_logging_on_itemsContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def query_logging_with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Query_logging_with_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Query_logging_with_itemContext,i)


        def MODE(self):
            return self.getToken(TeradataSQLParser.MODE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLParser.LIMIT, 0)

        def query_logging_limit_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Query_logging_limit_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Query_logging_limit_itemContext,i)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_begin_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_query_logging_stat" ):
                listener.enterBegin_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_query_logging_stat" ):
                listener.exitBegin_query_logging_stat(self)




    def begin_query_logging_stat(self):

        localctx = TeradataSQLParser.Begin_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_begin_query_logging_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2476
            self.match(TeradataSQLParser.BEGIN)
            self.state = 2477
            self.match(TeradataSQLParser.QUERY)
            self.state = 2478
            self.match(TeradataSQLParser.LOGGING)
            self.state = 2488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 2479
                self.match(TeradataSQLParser.WITH)
                self.state = 2480
                self.query_logging_with_item()
                self.state = 2485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2481
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2482
                    self.query_logging_with_item()
                    self.state = 2487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 2490
                self.match(TeradataSQLParser.MODE)
                self.state = 2491
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 2492
                localctx.m = self.integer_literal()


            self.state = 2501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 2495
                self.match(TeradataSQLParser.LIMIT)
                self.state = 2496
                self.query_logging_limit_item()
                self.state = 2499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 2497
                    self.match(TeradataSQLParser.AND)
                    self.state = 2498
                    self.query_logging_limit_item()




            self.state = 2503
            self.match(TeradataSQLParser.ON)
            self.state = 2504
            self.query_logging_on_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_with_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lock_duration = None # Integer_literalContext

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLParser.EXPLAIN, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLParser.LOCK, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def NONE(self):
            return self.getToken(TeradataSQLParser.NONE, 0)

        def OBJECTS(self):
            return self.getToken(TeradataSQLParser.OBJECTS, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLParser.COLUMNS, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLParser.PARAMINFO, 0)

        def FEATUREINFO(self):
            return self.getToken(TeradataSQLParser.FEATUREINFO, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLParser.STATSUSAGE, 0)

        def DETAILED(self):
            return self.getToken(TeradataSQLParser.DETAILED, 0)

        def STEPINFO(self):
            return self.getToken(TeradataSQLParser.STEPINFO, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLParser.USECOUNT, 0)

        def UTILITYINFO(self):
            return self.getToken(TeradataSQLParser.UTILITYINFO, 0)

        def XMLPLAN(self):
            return self.getToken(TeradataSQLParser.XMLPLAN, 0)

        def VERBOSE(self):
            return self.getToken(TeradataSQLParser.VERBOSE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_query_logging_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_with_item" ):
                listener.enterQuery_logging_with_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_with_item" ):
                listener.exitQuery_logging_with_item(self)




    def query_logging_with_item(self):

        localctx = TeradataSQLParser.Query_logging_with_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_query_logging_with_item)
        self._la = 0 # Token type
        try:
            self.state = 2531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2506
                self.match(TeradataSQLParser.ALL)
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2507
                self.match(TeradataSQLParser.EXPLAIN)
                pass
            elif token in [226]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2508
                self.match(TeradataSQLParser.LOCK)
                self.state = 2509
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 2510
                localctx.lock_duration = self.integer_literal()
                pass
            elif token in [269]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2511
                self.match(TeradataSQLParser.NONE)
                pass
            elif token in [268, 280]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 2512
                    self.match(TeradataSQLParser.NO)
                    self.state = 2513
                    self.match(TeradataSQLParser.COLUMNS)


                self.state = 2516
                self.match(TeradataSQLParser.OBJECTS)
                pass
            elif token in [838]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2517
                self.match(TeradataSQLParser.PARAMINFO)
                pass
            elif token in [667]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2518
                self.match(TeradataSQLParser.FEATUREINFO)
                pass
            elif token in [386]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2519
                self.match(TeradataSQLParser.SQL)
                pass
            elif token in [632, 940]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==632:
                    self.state = 2520
                    self.match(TeradataSQLParser.DETAILED)


                self.state = 2523
                self.match(TeradataSQLParser.STATSUSAGE)
                pass
            elif token in [398]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2524
                self.match(TeradataSQLParser.STEPINFO)
                pass
            elif token in [1019]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2525
                self.match(TeradataSQLParser.USECOUNT)
                pass
            elif token in [1020]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2526
                self.match(TeradataSQLParser.UTILITYINFO)
                pass
            elif token in [477, 1022]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1022:
                    self.state = 2527
                    self.match(TeradataSQLParser.VERBOSE)


                self.state = 2530
                self.match(TeradataSQLParser.XMLPLAN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_limit_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sqltext_n = None # Integer_literalContext
            self.summary_n1 = None # Integer_literalContext
            self.summary_n2 = None # Integer_literalContext
            self.summary_n3 = None # Integer_literalContext
            self.threshold_n = None # Integer_literalContext

        def SQLTEXT(self):
            return self.getToken(TeradataSQLParser.SQLTEXT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def SUMMARY(self):
            return self.getToken(TeradataSQLParser.SUMMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def THRESHOLD(self):
            return self.getToken(TeradataSQLParser.THRESHOLD, 0)

        def CPUTIME(self):
            return self.getToken(TeradataSQLParser.CPUTIME, 0)

        def CPUTIMENORM(self):
            return self.getToken(TeradataSQLParser.CPUTIMENORM, 0)

        def ELAPSEDSEC(self):
            return self.getToken(TeradataSQLParser.ELAPSEDSEC, 0)

        def ELAPSEDTIME(self):
            return self.getToken(TeradataSQLParser.ELAPSEDTIME, 0)

        def IOCOUNT(self):
            return self.getToken(TeradataSQLParser.IOCOUNT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_query_logging_limit_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_limit_item" ):
                listener.enterQuery_logging_limit_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_limit_item" ):
                listener.exitQuery_logging_limit_item(self)




    def query_logging_limit_item(self):

        localctx = TeradataSQLParser.Query_logging_limit_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_query_logging_limit_item)
        self._la = 0 # Token type
        try:
            self.state = 2552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [388]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2533
                self.match(TeradataSQLParser.SQLTEXT)

                self.state = 2534
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 2535
                localctx.sqltext_n = self.integer_literal()
                pass
            elif token in [404, 420]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2547
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [404]:
                    self.state = 2536
                    self.match(TeradataSQLParser.SUMMARY)
                    self.state = 2537
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 2538
                    localctx.summary_n1 = self.integer_literal()
                    self.state = 2539
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2540
                    localctx.summary_n2 = self.integer_literal()
                    self.state = 2541
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2542
                    localctx.summary_n3 = self.integer_literal()
                    pass
                elif token in [420]:
                    self.state = 2544
                    self.match(TeradataSQLParser.THRESHOLD)

                    self.state = 2545
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 2546
                    localctx.threshold_n = self.integer_literal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & 105553116266499) != 0) or _la==714:
                    self.state = 2549
                    _la = self._input.LA(1)
                    if not(((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & 105553116266499) != 0) or _la==714):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_on_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_logging_on_all(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_logging_on_allContext,0)


        def query_logging_on_users(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_logging_on_usersContext,0)


        def query_logging_on_application(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_logging_on_applicationContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_query_logging_on_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_on_items" ):
                listener.enterQuery_logging_on_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_on_items" ):
                listener.exitQuery_logging_on_items(self)




    def query_logging_on_items(self):

        localctx = TeradataSQLParser.Query_logging_on_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_query_logging_on_items)
        try:
            self.state = 2557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2554
                self.query_logging_on_all()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2555
                self.query_logging_on_users()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2556
                self.query_logging_on_application()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_on_allContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def account_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Account_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_query_logging_on_all

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_on_all" ):
                listener.enterQuery_logging_on_all(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_on_all" ):
                listener.exitQuery_logging_on_all(self)




    def query_logging_on_all(self):

        localctx = TeradataSQLParser.Query_logging_on_allContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_query_logging_on_all)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2559
            self.match(TeradataSQLParser.ALL)
            self.state = 2561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 2560
                self.account_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_on_usersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def account_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Account_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_query_logging_on_users

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_on_users" ):
                listener.enterQuery_logging_on_users(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_on_users" ):
                listener.exitQuery_logging_on_users(self)




    def query_logging_on_users(self):

        localctx = TeradataSQLParser.Query_logging_on_usersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_query_logging_on_users)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2563
            self.user_name()
            self.state = 2568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 2564
                self.match(TeradataSQLParser.COMMA)
                self.state = 2565
                self.user_name()
                self.state = 2570
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 2571
                self.account_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_logging_on_applicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.application_name = list() # of Char_string_literalContexts

        def APPLNAME(self):
            return self.getToken(TeradataSQLParser.APPLNAME, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_query_logging_on_application

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_logging_on_application" ):
                listener.enterQuery_logging_on_application(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_logging_on_application" ):
                listener.exitQuery_logging_on_application(self)




    def query_logging_on_application(self):

        localctx = TeradataSQLParser.Query_logging_on_applicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_query_logging_on_application)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2574
            self.match(TeradataSQLParser.APPLNAME)
            self.state = 2575
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 2588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 2576
                localctx._char_string_literal = self.char_string_literal()
                localctx.application_name.append(localctx._char_string_literal)
                pass
            elif token in [1213]:
                self.state = 2577
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 2578
                localctx._char_string_literal = self.char_string_literal()
                localctx.application_name.append(localctx._char_string_literal)
                self.state = 2583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2579
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2580
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.application_name.append(localctx._char_string_literal)
                    self.state = 2585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2586
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Account_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.account_string = list() # of Char_string_literalContexts

        def ACCOUNT(self):
            return self.getToken(TeradataSQLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_account_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccount_spec" ):
                listener.enterAccount_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccount_spec" ):
                listener.exitAccount_spec(self)




    def account_spec(self):

        localctx = TeradataSQLParser.Account_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_account_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.match(TeradataSQLParser.ACCOUNT)
            self.state = 2591
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 2604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 2592
                localctx._char_string_literal = self.char_string_literal()
                localctx.account_string.append(localctx._char_string_literal)
                pass
            elif token in [1213]:
                self.state = 2593
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 2594
                localctx._char_string_literal = self.char_string_literal()
                localctx.account_string.append(localctx._char_string_literal)
                self.state = 2599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2595
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2596
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.account_string.append(localctx._char_string_literal)
                    self.state = 2601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2602
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checkpoint_isolated_loading_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_band = None # Char_string_literalContext

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLParser.CHECKPOINT, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLParser.LOADING, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLParser.QUERY_BAND, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def CONCURRENT(self):
            return self.getToken(TeradataSQLParser.CONCURRENT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_checkpoint_isolated_loading_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckpoint_isolated_loading_stat" ):
                listener.enterCheckpoint_isolated_loading_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckpoint_isolated_loading_stat" ):
                listener.exitCheckpoint_isolated_loading_stat(self)




    def checkpoint_isolated_loading_stat(self):

        localctx = TeradataSQLParser.Checkpoint_isolated_loading_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_checkpoint_isolated_loading_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.match(TeradataSQLParser.CHECKPOINT)
            self.state = 2608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==587:
                self.state = 2607
                self.match(TeradataSQLParser.CONCURRENT)


            self.state = 2610
            self.match(TeradataSQLParser.ISOLATED)
            self.state = 2611
            self.match(TeradataSQLParser.LOADING)
            self.state = 2612
            self.match(TeradataSQLParser.FOR)
            self.state = 2613
            self.match(TeradataSQLParser.QUERY_BAND)
            self.state = 2614
            localctx.query_band = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_statistics_optimizer_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLLECT(self):
            return self.getToken(TeradataSQLParser.COLLECT, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLParser.STAT, 0)

        def STATS(self):
            return self.getToken(TeradataSQLParser.STATS, 0)

        def collection_source(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collection_sourceContext,0)


        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def SUMMARY(self):
            return self.getToken(TeradataSQLParser.SUMMARY, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def using_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Using_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Using_optionContext,i)


        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def from_stats_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.From_stats_optionContext,0)


        def stats_target_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Stats_target_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Stats_target_specContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.AND)
            else:
                return self.getToken(TeradataSQLParser.AND, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_collect_statistics_optimizer_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_statistics_optimizer_form_stat" ):
                listener.enterCollect_statistics_optimizer_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_statistics_optimizer_form_stat" ):
                listener.exitCollect_statistics_optimizer_form_stat(self)




    def collect_statistics_optimizer_form_stat(self):

        localctx = TeradataSQLParser.Collect_statistics_optimizer_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_collect_statistics_optimizer_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2616
            self.match(TeradataSQLParser.COLLECT)
            self.state = 2618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==404:
                self.state = 2617
                self.match(TeradataSQLParser.SUMMARY)


            self.state = 2620
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2621
                self.match(TeradataSQLParser.USING)
                self.state = 2622
                self.using_option()
                self.state = 2627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==16:
                    self.state = 2623
                    self.match(TeradataSQLParser.AND)
                    self.state = 2624
                    self.using_option()
                    self.state = 2629
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 2633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 2632
                    self.match(TeradataSQLParser.ON)


                self.state = 2635
                self.collection_source()
                self.state = 2644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==192 or _la==308 or _la==448:
                    self.state = 2636
                    self.stats_target_spec()
                    self.state = 2641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2637
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 2638
                        self.stats_target_spec()
                        self.state = 2643
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                self.state = 2654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==192 or _la==308 or _la==448:
                    self.state = 2646
                    self.stats_target_spec()
                    self.state = 2651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2647
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 2648
                        self.stats_target_spec()
                        self.state = 2653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2656
                self.match(TeradataSQLParser.ON)
                self.state = 2657
                self.collection_source()
                pass


            self.state = 2662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 2660
                self.match(TeradataSQLParser.FROM)
                self.state = 2661
                self.from_stats_option()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Integer_literalContext

        def SAMPLE(self):
            return self.getToken(TeradataSQLParser.SAMPLE, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLParser.SYSTEM, 0)

        def PERCENT(self):
            return self.getToken(TeradataSQLParser.PERCENT, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def MAXINTERVALS(self):
            return self.getToken(TeradataSQLParser.MAXINTERVALS, 0)

        def MAXVALUELENGTH(self):
            return self.getToken(TeradataSQLParser.MAXVALUELENGTH, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLParser.CURRENT, 0)

        def THRESHOLD(self):
            return self.getToken(TeradataSQLParser.THRESHOLD, 0)

        def DAYS(self):
            return self.getToken(TeradataSQLParser.DAYS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_using_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_option" ):
                listener.enterUsing_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_option" ):
                listener.exitUsing_option(self)




    def using_option(self):

        localctx = TeradataSQLParser.Using_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_using_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 2664
                self.match(TeradataSQLParser.SAMPLE)
                pass

            elif la_ == 2:
                self.state = 2665
                self.match(TeradataSQLParser.SYSTEM)
                self.state = 2666
                self.match(TeradataSQLParser.SAMPLE)
                pass

            elif la_ == 3:
                self.state = 2667
                self.match(TeradataSQLParser.SAMPLE)
                self.state = 2668
                localctx.n = self.integer_literal()
                self.state = 2669
                self.match(TeradataSQLParser.PERCENT)
                pass

            elif la_ == 4:
                self.state = 2671
                self.match(TeradataSQLParser.NO)
                self.state = 2672
                self.match(TeradataSQLParser.SAMPLE)
                pass

            elif la_ == 5:
                self.state = 2679
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [951]:
                    self.state = 2673
                    self.match(TeradataSQLParser.SYSTEM)
                    self.state = 2674
                    self.match(TeradataSQLParser.THRESHOLD)
                    pass
                elif token in [420]:
                    self.state = 2675
                    self.match(TeradataSQLParser.THRESHOLD)
                    self.state = 2676
                    localctx.n = self.integer_literal()
                    pass
                elif token in [268]:
                    self.state = 2677
                    self.match(TeradataSQLParser.NO)
                    self.state = 2678
                    self.match(TeradataSQLParser.THRESHOLD)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2682
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 2681
                    _la = self._input.LA(1)
                    if not(_la==300 or _la==1077):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                self.state = 2684
                self.match(TeradataSQLParser.MAXINTERVALS)
                self.state = 2685
                localctx.n = self.integer_literal()
                pass

            elif la_ == 7:
                self.state = 2686
                self.match(TeradataSQLParser.SYSTEM)
                self.state = 2687
                self.match(TeradataSQLParser.MAXINTERVALS)
                pass

            elif la_ == 8:
                self.state = 2688
                self.match(TeradataSQLParser.MAXVALUELENGTH)
                self.state = 2689
                localctx.n = self.integer_literal()
                pass

            elif la_ == 9:
                self.state = 2690
                self.match(TeradataSQLParser.SYSTEM)
                self.state = 2691
                self.match(TeradataSQLParser.MAXVALUELENGTH)
                pass


            self.state = 2696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 2694
                self.match(TeradataSQLParser.FOR)
                self.state = 2695
                self.match(TeradataSQLParser.CURRENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stats_target_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def stats_index_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Stats_index_specContext,0)


        def UNIQUE(self):
            return self.getToken(TeradataSQLParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLParser.PRIMARY, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def stats_column_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Stats_column_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_stats_target_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStats_target_spec" ):
                listener.enterStats_target_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStats_target_spec" ):
                listener.exitStats_target_spec(self)




    def stats_target_spec(self):

        localctx = TeradataSQLParser.Stats_target_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_stats_target_spec)
        self._la = 0 # Token type
        try:
            self.state = 2708
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192, 308, 448]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 2698
                    self.match(TeradataSQLParser.UNIQUE)


                self.state = 2702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==308:
                    self.state = 2701
                    self.match(TeradataSQLParser.PRIMARY)


                self.state = 2704
                self.match(TeradataSQLParser.INDEX)
                self.state = 2705
                self.stats_index_spec()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2706
                self.match(TeradataSQLParser.COLUMN)
                self.state = 2707
                self.stats_column_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stats_index_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Table_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def index_ordering(self):
            return self.getTypedRuleContext(TeradataSQLParser.Index_orderingContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_stats_index_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStats_index_spec" ):
                listener.enterStats_index_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStats_index_spec" ):
                listener.exitStats_index_spec(self)




    def stats_index_spec(self):

        localctx = TeradataSQLParser.Stats_index_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_stats_index_spec)
        self._la = 0 # Token type
        try:
            self.state = 2730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2710
                localctx.index_name = self.table_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 2711
                    localctx.index_name = self.table_name()


                self.state = 2715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 2714
                    self.match(TeradataSQLParser.ALL)


                self.state = 2717
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 2718
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 2723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2719
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2720
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 2725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2726
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 2728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 2727
                    self.index_ordering()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stats_column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def statistics_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Statistics_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.PARTITION)
            else:
                return self.getToken(TeradataSQLParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_stats_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStats_column_spec" ):
                listener.enterStats_column_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStats_column_spec" ):
                listener.exitStats_column_spec(self)




    def stats_column_spec(self):

        localctx = TeradataSQLParser.Stats_column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_stats_column_spec)
        self._la = 0 # Token type
        try:
            self.state = 2763
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2732
                self.scalar_expr(0)
                self.state = 2737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 2734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2733
                        self.match(TeradataSQLParser.AS)


                    self.state = 2736
                    self.statistics_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2739
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 2742
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 2740
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 2741
                    self.match(TeradataSQLParser.PARTITION)
                    pass


                self.state = 2751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2744
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2747
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                    if la_ == 1:
                        self.state = 2745
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 2746
                        self.match(TeradataSQLParser.PARTITION)
                        pass


                    self.state = 2753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2754
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 2759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 2756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 2755
                        self.match(TeradataSQLParser.AS)


                    self.state = 2758
                    self.statistics_name()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2761
                self.match(TeradataSQLParser.PARTITION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2762
                self.statistics_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collection_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_collection_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollection_source" ):
                listener.enterCollection_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollection_source" ):
                listener.exitCollection_source(self)




    def collection_source(self):

        localctx = TeradataSQLParser.Collection_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_collection_source)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 2765
                self.match(TeradataSQLParser.TEMPORARY)


            self.state = 2768
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_stats_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Table_nameContext
            self.from_column_name = None # Unqualified_nameContext
            self.partition_column = None # Token

        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def statistics_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Statistics_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.PARTITION)
            else:
                return self.getToken(TeradataSQLParser.PARTITION, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_from_stats_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stats_option" ):
                listener.enterFrom_stats_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stats_option" ):
                listener.exitFrom_stats_option(self)




    def from_stats_option(self):

        localctx = TeradataSQLParser.From_stats_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_from_stats_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [417]:
                self.state = 2770
                self.match(TeradataSQLParser.TEMPORARY)
                self.state = 2771
                self.table_name()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 2772
                localctx.index_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 2775
                self.match(TeradataSQLParser.COLUMN)
                self.state = 2797
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
                if la_ == 1:
                    self.state = 2778
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                    if la_ == 1:
                        self.state = 2776
                        localctx.from_column_name = self.unqualified_name()
                        pass

                    elif la_ == 2:
                        self.state = 2777
                        localctx.partition_column = self.match(TeradataSQLParser.PARTITION)
                        pass


                    pass

                elif la_ == 2:
                    self.state = 2780
                    self.statistics_name()
                    pass

                elif la_ == 3:
                    self.state = 2781
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 2784
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                    if la_ == 1:
                        self.state = 2782
                        localctx.from_column_name = self.unqualified_name()
                        pass

                    elif la_ == 2:
                        self.state = 2783
                        localctx.partition_column = self.match(TeradataSQLParser.PARTITION)
                        pass


                    self.state = 2793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 2786
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 2789
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
                        if la_ == 1:
                            self.state = 2787
                            self.unqualified_name()
                            pass

                        elif la_ == 2:
                            self.state = 2788
                            localctx.partition_column = self.match(TeradataSQLParser.PARTITION)
                            pass


                        self.state = 2795
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2796
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comment_placing_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.comment = None # Char_string_literalContext
            self.unicode_comment = None # Unicode_char_string_literalContext
            self.hexstring_comment = None # Hex_char_string_literalContext

        def COMMENT(self):
            return self.getToken(TeradataSQLParser.COMMENT, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def unicode_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unicode_char_string_literalContext,0)


        def hex_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Hex_char_string_literalContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def IS(self):
            return self.getToken(TeradataSQLParser.IS, 0)

        def object_kind(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_kindContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_comment_placing_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_placing_stat" ):
                listener.enterComment_placing_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_placing_stat" ):
                listener.exitComment_placing_stat(self)




    def comment_placing_stat(self):

        localctx = TeradataSQLParser.Comment_placing_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_comment_placing_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            self.match(TeradataSQLParser.COMMENT)
            self.state = 2803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 2802
                self.match(TeradataSQLParser.ON)


            self.state = 2812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.state = 2806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 2805
                    self.object_kind()


                self.state = 2808
                self.object_name()
                pass

            elif la_ == 2:
                self.state = 2809
                self.match(TeradataSQLParser.COLUMN)
                self.state = 2810
                self.column_name()
                pass

            elif la_ == 3:
                self.state = 2811
                self.column_name()
                pass


            self.state = 2815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==207:
                self.state = 2814
                _la = self._input.LA(1)
                if not(_la==20 or _la==207):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 2817
                localctx.comment = self.char_string_literal()
                pass

            elif la_ == 2:
                self.state = 2818
                localctx.unicode_comment = self.unicode_char_string_literal()
                pass

            elif la_ == 3:
                self.state = 2819
                localctx.hexstring_comment = self.hex_char_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_authorization_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_user_name = None # Char_string_literalContext
            self.authorization_password = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLParser.AUTHORIZATION, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(TeradataSQLParser.PASSWORD, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLParser.REPLACE, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLParser.TRUSTED, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLParser.INVOKER, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_replace_authorization_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_authorization_stat" ):
                listener.enterCreate_replace_authorization_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_authorization_stat" ):
                listener.exitCreate_replace_authorization_stat(self)




    def create_replace_authorization_stat(self):

        localctx = TeradataSQLParser.Create_replace_authorization_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_create_replace_authorization_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2822
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2823
            self.match(TeradataSQLParser.AUTHORIZATION)
            self.state = 2824
            localctx.authorization_name = self.object_name()
            self.state = 2828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 2825
                self.match(TeradataSQLParser.AS)
                self.state = 2826
                _la = self._input.LA(1)
                if not(_la==624 or _la==713):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2827
                self.match(TeradataSQLParser.TRUSTED)


            self.state = 2830
            self.match(TeradataSQLParser.USER)
            self.state = 2831
            localctx.authorization_user_name = self.char_string_literal()
            self.state = 2832
            self.match(TeradataSQLParser.PASSWORD)
            self.state = 2833
            localctx.authorization_password = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_replace_sql_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_sql_function_statContext,0)


        def create_replace_table_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_table_function_statContext,0)


        def create_replace_external_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_external_function_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_replace_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_function_stat" ):
                listener.enterCreate_replace_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_function_stat" ):
                listener.exitCreate_replace_function_stat(self)




    def create_replace_function_stat(self):

        localctx = TeradataSQLParser.Create_replace_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_create_replace_function_stat)
        try:
            self.state = 2838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2835
                self.create_replace_sql_function_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2836
                self.create_replace_table_function_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2837
                self.create_replace_external_function_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_sql_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_data_type = None # Data_typeContext
            self.return_expr = None # Scalar_exprContext

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def COLLATION(self):
            return self.getToken(TeradataSQLParser.COLLATION, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLParser.INVOKER, 0)

        def INLINE(self):
            return self.getToken(TeradataSQLParser.INLINE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLParser.UNSIGNED_INTEGER, 0)

        def RETURN(self):
            return self.getToken(TeradataSQLParser.RETURN, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLParser.REPLACE, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def sql_function_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sql_function_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sql_function_parameter_specContext,i)


        def sql_function_language_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sql_function_language_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sql_function_language_specContext,i)


        def sql_function_access_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sql_function_access_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sql_function_access_specContext,i)


        def sql_function_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sql_function_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sql_function_attrContext,i)


        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLParser.SECURITY, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLParser.DEFINER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_replace_sql_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_sql_function_stat" ):
                listener.enterCreate_replace_sql_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_sql_function_stat" ):
                listener.exitCreate_replace_sql_function_stat(self)




    def create_replace_sql_function_stat(self):

        localctx = TeradataSQLParser.Create_replace_sql_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_create_replace_sql_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2840
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2841
            self.match(TeradataSQLParser.FUNCTION)
            self.state = 2842
            self.function_name()
            self.state = 2843
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 2852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 2844
                self.sql_function_parameter_spec()
                self.state = 2849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2845
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2846
                    self.sql_function_parameter_spec()
                    self.state = 2851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2854
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 2855
            self.match(TeradataSQLParser.RETURNS)
            self.state = 2856
            localctx.return_data_type = self.data_type()
            self.state = 2861
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2859
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [214]:
                        self.state = 2857
                        self.sql_function_language_spec()
                        pass
                    elif token in [77]:
                        self.state = 2858
                        self.sql_function_access_spec()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2863
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

            self.state = 2867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2864
                    self.sql_function_attr() 
                self.state = 2869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

            self.state = 2874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==77 or _la==214:
                self.state = 2872
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [214]:
                    self.state = 2870
                    self.sql_function_language_spec()
                    pass
                elif token in [77]:
                    self.state = 2871
                    self.sql_function_access_spec()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==117 or _la==272 or _la==352 or _la==384 or _la==559:
                self.state = 2877
                self.sql_function_attr()
                self.state = 2882
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 2883
                self.match(TeradataSQLParser.SQL)
                self.state = 2884
                self.match(TeradataSQLParser.SECURITY)
                self.state = 2885
                self.match(TeradataSQLParser.DEFINER)


            self.state = 2888
            self.match(TeradataSQLParser.COLLATION)
            self.state = 2889
            self.match(TeradataSQLParser.INVOKER)
            self.state = 2890
            self.match(TeradataSQLParser.INLINE)
            self.state = 2891
            self.match(TeradataSQLParser.TYPE)
            self.state = 2892
            self.match(TeradataSQLParser.UNSIGNED_INTEGER)
            self.state = 2893
            self.match(TeradataSQLParser.RETURN)
            self.state = 2894
            localctx.return_expr = self.scalar_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_table_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.glob_set_name = None # Object_nameContext
            self.external_function_name = None # Function_nameContext
            self.code_or_jar_spec = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def function_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Function_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_specContext,0)


        def EXTERNAL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EXTERNAL)
            else:
                return self.getToken(TeradataSQLParser.EXTERNAL, i)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLParser.REPLACE, 0)

        def table_function_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_function_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_function_parameter_specContext,i)


        def table_function_language_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_function_language_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_function_language_specContext,i)


        def no_sql(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.No_sqlContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.No_sqlContext,i)


        def table_function_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_function_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_function_attrContext,i)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def NAME(self):
            return self.getToken(TeradataSQLParser.NAME, 0)

        def table_function_parameter_style(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_function_parameter_styleContext,0)


        def SECURITY(self):
            return self.getToken(TeradataSQLParser.SECURITY, 0)

        def EXECUTE(self):
            return self.getToken(TeradataSQLParser.EXECUTE, 0)

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Map_specContext,0)


        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,i)


        def DEFINER(self):
            return self.getToken(TeradataSQLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLParser.INVOKER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def GLOP(self):
            return self.getToken(TeradataSQLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_replace_table_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_table_function_stat" ):
                listener.enterCreate_replace_table_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_table_function_stat" ):
                listener.exitCreate_replace_table_function_stat(self)




    def create_replace_table_function_stat(self):

        localctx = TeradataSQLParser.Create_replace_table_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_create_replace_table_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2896
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2897
            self.match(TeradataSQLParser.FUNCTION)
            self.state = 2898
            self.function_name()
            self.state = 2899
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 2908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3299071754241) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554417) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 2900
                self.table_function_parameter_spec()
                self.state = 2905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2901
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2902
                    self.table_function_parameter_spec()
                    self.state = 2907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2910
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 2911
            self.match(TeradataSQLParser.RETURNS)
            self.state = 2912
            self.match(TeradataSQLParser.TABLE)
            self.state = 2913
            self.table_spec()
            self.state = 2918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2916
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [214]:
                        self.state = 2914
                        self.table_function_language_spec()
                        pass
                    elif token in [268]:
                        self.state = 2915
                        self.no_sql()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

            self.state = 2924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2921
                    self.table_function_attr() 
                self.state = 2926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

            self.state = 2931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==214 or _la==268:
                self.state = 2929
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [214]:
                    self.state = 2927
                    self.table_function_language_spec()
                    pass
                elif token in [268]:
                    self.state = 2928
                    self.no_sql()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==117 or _la==272 or _la==298 or _la==384 or _la==559:
                self.state = 2934
                self.table_function_attr()
                self.state = 2939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 2940
                self.match(TeradataSQLParser.USING)
                self.state = 2943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 2941
                    self.match(TeradataSQLParser.GLOP)
                    self.state = 2942
                    self.match(TeradataSQLParser.SET)


                self.state = 2945
                localctx.glob_set_name = self.object_name()


            self.state = 2948
            self.match(TeradataSQLParser.EXTERNAL)
            self.state = 2954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==789:
                self.state = 2949
                self.match(TeradataSQLParser.NAME)
                self.state = 2952
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                if la_ == 1:
                    self.state = 2950
                    localctx.external_function_name = self.function_name()
                    pass

                elif la_ == 2:
                    self.state = 2951
                    localctx.code_or_jar_spec = self.char_string_literal()
                    pass




            self.state = 2957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==298:
                self.state = 2956
                self.table_function_parameter_style()


            self.state = 2968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 2959
                self.match(TeradataSQLParser.EXTERNAL)
                self.state = 2960
                self.match(TeradataSQLParser.SECURITY)
                self.state = 2966
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [624]:
                    self.state = 2961
                    self.match(TeradataSQLParser.DEFINER)
                    self.state = 2963
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 2962
                        localctx.authorization_name = self.object_name()


                    pass
                elif token in [713]:
                    self.state = 2965
                    self.match(TeradataSQLParser.INVOKER)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 2970
                self.match(TeradataSQLParser.EXECUTE)
                self.state = 2971
                self.map_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_external_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_data_type = None # External_function_data_typeContext
            self.from_data_type = None # External_function_data_typeContext
            self.glob_set_name = None # Object_nameContext
            self.external_function_name = None # Function_nameContext
            self.code_or_jar_spec = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def function_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Function_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def EXTERNAL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EXTERNAL)
            else:
                return self.getToken(TeradataSQLParser.EXTERNAL, i)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLParser.REPLACE, 0)

        def external_function_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.External_function_data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.External_function_data_typeContext,i)


        def external_function_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.External_function_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.External_function_parameter_specContext,i)


        def CAST(self):
            return self.getToken(TeradataSQLParser.CAST, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def external_function_language_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.External_function_language_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.External_function_language_specContext,i)


        def no_sql(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.No_sqlContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.No_sqlContext,i)


        def external_function_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.External_function_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.External_function_attrContext,i)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def NAME(self):
            return self.getToken(TeradataSQLParser.NAME, 0)

        def external_function_parameter_style(self):
            return self.getTypedRuleContext(TeradataSQLParser.External_function_parameter_styleContext,0)


        def SECURITY(self):
            return self.getToken(TeradataSQLParser.SECURITY, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,i)


        def DEFINER(self):
            return self.getToken(TeradataSQLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLParser.INVOKER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_replace_external_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_external_function_stat" ):
                listener.enterCreate_replace_external_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_external_function_stat" ):
                listener.exitCreate_replace_external_function_stat(self)




    def create_replace_external_function_stat(self):

        localctx = TeradataSQLParser.Create_replace_external_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_create_replace_external_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2974
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2975
            self.match(TeradataSQLParser.FUNCTION)
            self.state = 2976
            self.function_name()
            self.state = 2977
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 2986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3299071754241) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554417) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 2978
                self.external_function_parameter_spec()
                self.state = 2983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 2979
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 2980
                    self.external_function_parameter_spec()
                    self.state = 2985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2988
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 2989
            self.match(TeradataSQLParser.RETURNS)
            self.state = 2990
            localctx.return_data_type = self.external_function_data_type()
            self.state = 2994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 2991
                self.match(TeradataSQLParser.CAST)
                self.state = 2992
                self.match(TeradataSQLParser.FROM)
                self.state = 2993
                localctx.from_data_type = self.external_function_data_type()


            self.state = 3000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2998
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [214]:
                        self.state = 2996
                        self.external_function_language_spec()
                        pass
                    elif token in [268]:
                        self.state = 2997
                        self.no_sql()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 3002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

            self.state = 3006
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,263,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3003
                    self.external_function_attr() 
                self.state = 3008
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

            self.state = 3013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==214 or _la==268:
                self.state = 3011
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [214]:
                    self.state = 3009
                    self.external_function_language_spec()
                    pass
                elif token in [268]:
                    self.state = 3010
                    self.no_sql()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61 or _la==117 or _la==159 or _la==272 or _la==298 or _la==352 or _la==384 or _la==559:
                self.state = 3016
                self.external_function_attr()
                self.state = 3021
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 3022
                self.match(TeradataSQLParser.USING)
                self.state = 3023
                self.match(TeradataSQLParser.GLOP)
                self.state = 3024
                self.match(TeradataSQLParser.SET)
                self.state = 3025
                localctx.glob_set_name = self.object_name()


            self.state = 3028
            self.match(TeradataSQLParser.EXTERNAL)
            self.state = 3034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==789:
                self.state = 3029
                self.match(TeradataSQLParser.NAME)
                self.state = 3032
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 3030
                    localctx.external_function_name = self.function_name()
                    pass

                elif la_ == 2:
                    self.state = 3031
                    localctx.code_or_jar_spec = self.char_string_literal()
                    pass




            self.state = 3037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==298:
                self.state = 3036
                self.external_function_parameter_style()


            self.state = 3048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 3039
                self.match(TeradataSQLParser.EXTERNAL)
                self.state = 3040
                self.match(TeradataSQLParser.SECURITY)
                self.state = 3046
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [624]:
                    self.state = 3041
                    self.match(TeradataSQLParser.DEFINER)
                    self.state = 3043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 3042
                        localctx.authorization_name = self.object_name()


                    pass
                elif token in [713]:
                    self.state = 3045
                    self.match(TeradataSQLParser.INVOKER)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_function_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Parameter_nameContext,0)


        def variable_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_data_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sql_function_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_function_parameter_spec" ):
                listener.enterSql_function_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_function_parameter_spec" ):
                listener.exitSql_function_parameter_spec(self)




    def sql_function_parameter_spec(self):

        localctx = TeradataSQLParser.Sql_function_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_sql_function_parameter_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3050
            self.parameter_name()
            self.state = 3051
            self.variable_data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_function_language_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(TeradataSQLParser.LANGUAGE, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sql_function_language_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_function_language_spec" ):
                listener.enterSql_function_language_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_function_language_spec" ):
                listener.exitSql_function_language_spec(self)




    def sql_function_language_spec(self):

        localctx = TeradataSQLParser.Sql_function_language_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_sql_function_language_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3053
            self.match(TeradataSQLParser.LANGUAGE)
            self.state = 3054
            self.match(TeradataSQLParser.SQL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_function_access_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINS(self):
            return self.getToken(TeradataSQLParser.CONTAINS, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sql_function_access_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_function_access_spec" ):
                listener.enterSql_function_access_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_function_access_spec" ):
                listener.exitSql_function_access_spec(self)




    def sql_function_access_spec(self):

        localctx = TeradataSQLParser.Sql_function_access_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_sql_function_access_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3056
            self.match(TeradataSQLParser.CONTAINS)
            self.state = 3057
            self.match(TeradataSQLParser.SQL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_function_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def DETERMINISTIC(self):
            return self.getToken(TeradataSQLParser.DETERMINISTIC, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLParser.CALLED, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.NULL)
            else:
                return self.getToken(TeradataSQLParser.NULL, i)

        def INPUT(self):
            return self.getToken(TeradataSQLParser.INPUT, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sql_function_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_function_attr" ):
                listener.enterSql_function_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_function_attr" ):
                listener.exitSql_function_attr(self)




    def sql_function_attr(self):

        localctx = TeradataSQLParser.Sql_function_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_sql_function_attr)
        self._la = 0 # Token type
        try:
            self.state = 3074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3059
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 3060
                self.function_name()
                pass
            elif token in [117, 272]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 3061
                    self.match(TeradataSQLParser.NOT)


                self.state = 3064
                self.match(TeradataSQLParser.DETERMINISTIC)
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3065
                self.match(TeradataSQLParser.CALLED)
                self.state = 3066
                self.match(TeradataSQLParser.ON)
                self.state = 3067
                self.match(TeradataSQLParser.NULL)
                self.state = 3068
                self.match(TeradataSQLParser.INPUT)
                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3069
                self.match(TeradataSQLParser.RETURNS)
                self.state = 3070
                self.match(TeradataSQLParser.NULL)
                self.state = 3071
                self.match(TeradataSQLParser.ON)
                self.state = 3072
                self.match(TeradataSQLParser.NULL)
                self.state = 3073
                self.match(TeradataSQLParser.INPUT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.maximum_output_columns = None # Token

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def VARYING(self):
            return self.getToken(TeradataSQLParser.VARYING, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLParser.COLUMNS, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLParser.UNSIGNED_INTEGER, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_spec" ):
                listener.enterTable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_spec" ):
                listener.exitTable_spec(self)




    def table_spec(self):

        localctx = TeradataSQLParser.Table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_table_spec)
        self._la = 0 # Token type
        try:
            self.state = 3099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3076
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 3077
                self.column_spec()
                self.state = 3082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3078
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3079
                    self.column_spec()
                    self.state = 3084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3085
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [467]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3087
                self.match(TeradataSQLParser.VARYING)
                self.state = 3097
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [579]:
                    self.state = 3088
                    self.match(TeradataSQLParser.COLUMNS)
                    self.state = 3089
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 3090
                    localctx.maximum_output_columns = self.match(TeradataSQLParser.UNSIGNED_INTEGER)
                    self.state = 3091
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass
                elif token in [457]:
                    self.state = 3092
                    self.match(TeradataSQLParser.USING)
                    self.state = 3093
                    self.match(TeradataSQLParser.FUNCTION)
                    self.state = 3095
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
                    if la_ == 1:
                        self.state = 3094
                        self.function_name()


                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def external_function_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.External_function_data_typeContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Parameter_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_function_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_parameter_spec" ):
                listener.enterTable_function_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_parameter_spec" ):
                listener.exitTable_function_parameter_spec(self)




    def table_function_parameter_spec(self):

        localctx = TeradataSQLParser.Table_function_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_table_function_parameter_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 3101
                self.parameter_name()


            self.state = 3104
            self.external_function_data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_language_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(TeradataSQLParser.LANGUAGE, 0)

        def C(self):
            return self.getToken(TeradataSQLParser.C, 0)

        def CPP(self):
            return self.getToken(TeradataSQLParser.CPP, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLParser.JAVA, 0)

        def SAS(self):
            return self.getToken(TeradataSQLParser.SAS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_function_language_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_language_spec" ):
                listener.enterTable_function_language_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_language_spec" ):
                listener.exitTable_function_language_spec(self)




    def table_function_language_spec(self):

        localctx = TeradataSQLParser.Table_function_language_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_table_function_language_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3106
            self.match(TeradataSQLParser.LANGUAGE)
            self.state = 3107
            _la = self._input.LA(1)
            if not(_la==557 or _la==598 or _la==718 or _la==1085):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def DETERMINISTIC(self):
            return self.getToken(TeradataSQLParser.DETERMINISTIC, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLParser.CALLED, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def INPUT(self):
            return self.getToken(TeradataSQLParser.INPUT, 0)

        def table_function_parameter_style(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_function_parameter_styleContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_function_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_attr" ):
                listener.enterTable_function_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_attr" ):
                listener.exitTable_function_attr(self)




    def table_function_attr(self):

        localctx = TeradataSQLParser.Table_function_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_table_function_attr)
        self._la = 0 # Token type
        try:
            self.state = 3120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3109
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 3110
                self.function_name()
                pass
            elif token in [117, 272]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 3111
                    self.match(TeradataSQLParser.NOT)


                self.state = 3114
                self.match(TeradataSQLParser.DETERMINISTIC)
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3115
                self.match(TeradataSQLParser.CALLED)
                self.state = 3116
                self.match(TeradataSQLParser.ON)
                self.state = 3117
                self.match(TeradataSQLParser.NULL)
                self.state = 3118
                self.match(TeradataSQLParser.INPUT)
                pass
            elif token in [298]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3119
                self.table_function_parameter_style()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_parameter_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETER(self):
            return self.getToken(TeradataSQLParser.PARAMETER, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLParser.STYLE, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLParser.JAVA, 0)

        def SQLTABLE(self):
            return self.getToken(TeradataSQLParser.SQLTABLE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_function_parameter_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_parameter_style" ):
                listener.enterTable_function_parameter_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_parameter_style" ):
                listener.exitTable_function_parameter_style(self)




    def table_function_parameter_style(self):

        localctx = TeradataSQLParser.Table_function_parameter_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_table_function_parameter_style)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3122
            self.match(TeradataSQLParser.PARAMETER)
            self.state = 3123
            self.match(TeradataSQLParser.STYLE)
            self.state = 3124
            _la = self._input.LA(1)
            if not(_la==386 or _la==718 or _la==1086):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def external_function_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.External_function_data_typeContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Parameter_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_external_function_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_parameter_spec" ):
                listener.enterExternal_function_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_parameter_spec" ):
                listener.exitExternal_function_parameter_spec(self)




    def external_function_parameter_spec(self):

        localctx = TeradataSQLParser.External_function_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_external_function_parameter_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 3126
                self.parameter_name()


            self.state = 3129
            self.external_function_data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_language_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(TeradataSQLParser.LANGUAGE, 0)

        def C(self):
            return self.getToken(TeradataSQLParser.C, 0)

        def CPP(self):
            return self.getToken(TeradataSQLParser.CPP, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLParser.JAVA, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_external_function_language_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_language_spec" ):
                listener.enterExternal_function_language_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_language_spec" ):
                listener.exitExternal_function_language_spec(self)




    def external_function_language_spec(self):

        localctx = TeradataSQLParser.External_function_language_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_external_function_language_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3131
            self.match(TeradataSQLParser.LANGUAGE)
            self.state = 3132
            _la = self._input.LA(1)
            if not(_la==557 or _la==598 or _la==718):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.interim_size = None # Token

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def CLASS(self):
            return self.getToken(TeradataSQLParser.CLASS, 0)

        def AGGREGATE(self):
            return self.getToken(TeradataSQLParser.AGGREGATE, 0)

        def AG(self):
            return self.getToken(TeradataSQLParser.AG, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLParser.UNSIGNED_INTEGER, 0)

        def external_function_parameter_style(self):
            return self.getTypedRuleContext(TeradataSQLParser.External_function_parameter_styleContext,0)


        def DETERMINISTIC(self):
            return self.getToken(TeradataSQLParser.DETERMINISTIC, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLParser.CALLED, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.NULL)
            else:
                return self.getToken(TeradataSQLParser.NULL, i)

        def INPUT(self):
            return self.getToken(TeradataSQLParser.INPUT, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLParser.COMPRESS, 0)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.DECOMPRESS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_external_function_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_attr" ):
                listener.enterExternal_function_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_attr" ):
                listener.exitExternal_function_attr(self)




    def external_function_attr(self):

        localctx = TeradataSQLParser.External_function_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_external_function_attr)
        self._la = 0 # Token type
        try:
            self.state = 3159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3134
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 3135
                self.function_name()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3136
                self.match(TeradataSQLParser.CLASS)
                self.state = 3137
                _la = self._input.LA(1)
                if not(_la==12 or _la==493):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 3138
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 3139
                    localctx.interim_size = self.match(TeradataSQLParser.UNSIGNED_INTEGER)
                    self.state = 3140
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass
            elif token in [298]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3143
                self.external_function_parameter_style()
                pass
            elif token in [117, 272]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 3144
                    self.match(TeradataSQLParser.NOT)


                self.state = 3147
                self.match(TeradataSQLParser.DETERMINISTIC)
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3148
                self.match(TeradataSQLParser.CALLED)
                self.state = 3149
                self.match(TeradataSQLParser.ON)
                self.state = 3150
                self.match(TeradataSQLParser.NULL)
                self.state = 3151
                self.match(TeradataSQLParser.INPUT)
                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3152
                self.match(TeradataSQLParser.RETURNS)
                self.state = 3153
                self.match(TeradataSQLParser.NULL)
                self.state = 3154
                self.match(TeradataSQLParser.ON)
                self.state = 3155
                self.match(TeradataSQLParser.NULL)
                self.state = 3156
                self.match(TeradataSQLParser.INPUT)
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3157
                self.match(TeradataSQLParser.FOR)
                self.state = 3158
                _la = self._input.LA(1)
                if not(_la==72 or _la==623):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_parameter_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETER(self):
            return self.getToken(TeradataSQLParser.PARAMETER, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLParser.STYLE, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLParser.JAVA, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLParser.TD_GENERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_external_function_parameter_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_parameter_style" ):
                listener.enterExternal_function_parameter_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_parameter_style" ):
                listener.exitExternal_function_parameter_style(self)




    def external_function_parameter_style(self):

        localctx = TeradataSQLParser.External_function_parameter_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_external_function_parameter_style)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3161
            self.match(TeradataSQLParser.PARAMETER)
            self.state = 3162
            self.match(TeradataSQLParser.STYLE)
            self.state = 3163
            _la = self._input.LA(1)
            if not(_la==386 or _la==718 or _la==961):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class No_sqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_no_sql

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNo_sql" ):
                listener.enterNo_sql(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNo_sql" ):
                listener.exitNo_sql(self)




    def no_sql(self):

        localctx = TeradataSQLParser.No_sqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_no_sql)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3165
            self.match(TeradataSQLParser.NO)
            self.state = 3166
            self.match(TeradataSQLParser.SQL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_macro_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Macro_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLParser.MACRO, 0)

        def CM(self):
            return self.getToken(TeradataSQLParser.CM, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLParser.REPLACE, 0)

        def macro_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Macro_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Macro_parameterContext,i)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.SEMICOLON)
            else:
                return self.getToken(TeradataSQLParser.SEMICOLON, i)

        def dml_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Dml_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Dml_statContext,i)


        def ddl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Ddl_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Ddl_statContext,i)


        def dcl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Dcl_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Dcl_statContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def using_request_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Using_request_modifierContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Using_request_modifierContext,i)


        def locking_request_modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Locking_request_modifierContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_replace_macro_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_macro_stat" ):
                listener.enterCreate_replace_macro_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_macro_stat" ):
                listener.exitCreate_replace_macro_stat(self)




    def create_replace_macro_stat(self):

        localctx = TeradataSQLParser.Create_replace_macro_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_create_replace_macro_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 3168
                self.match(TeradataSQLParser.CREATE)
                self.state = 3169
                self.match(TeradataSQLParser.MACRO)
                pass
            elif token in [65]:
                self.state = 3170
                self.match(TeradataSQLParser.CM)
                pass
            elif token in [340]:
                self.state = 3171
                self.match(TeradataSQLParser.REPLACE)
                self.state = 3172
                self.match(TeradataSQLParser.MACRO)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3175
            self.macro_name()
            self.state = 3187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 3176
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 3177
                self.macro_parameter()
                self.state = 3182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3178
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3179
                    self.macro_parameter()
                    self.state = 3184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3185
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 3189
            self.match(TeradataSQLParser.AS)
            self.state = 3190
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 3204 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                if la_ == 1:
                    self.state = 3191
                    self.using_request_modifier()


                self.state = 3195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 3194
                    self.locking_request_modifier()


                self.state = 3200
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                if la_ == 1:
                    self.state = 3197
                    self.dml_stat()
                    pass

                elif la_ == 2:
                    self.state = 3198
                    self.ddl_stat()
                    pass

                elif la_ == 3:
                    self.state = 3199
                    self.dcl_stat()
                    pass


                self.state = 3202
                self.match(TeradataSQLParser.SEMICOLON)
                self.state = 3206 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 1155244789856223234) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -3457075492125933463) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & -9205351041006016495) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & 144150378353524739) != 0) or _la==270 or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 9007497756082309) != 0) or ((((_la - 452)) & ~0x3f) == 0 and ((1 << (_la - 452)) & 4194339) != 0) or _la==703 or _la==938 or _la==1206 or _la==1213):
                    break

            self.state = 3208
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Parameter_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_type_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_macro_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_parameter" ):
                listener.enterMacro_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_parameter" ):
                listener.exitMacro_parameter(self)




    def macro_parameter(self):

        localctx = TeradataSQLParser.Macro_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_macro_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3210
            self.parameter_name()
            self.state = 3223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36, 37, 38, 43, 44, 52, 55, 62, 104, 108, 109, 124, 157, 173, 201, 202, 205, 231, 277, 278, 323, 381, 421, 422, 463, 464, 465, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 3211
                self.data_type()
                pass
            elif token in [1213]:
                self.state = 3212
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 3213
                self.data_type()
                self.state = 3218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3214
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3215
                    self.data_type_attribute()
                    self.state = 3220
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3221
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 3225
                self.data_type_attribute()
                self.state = 3230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_procedure_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_replace_procedure_sql_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_procedure_sql_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_replace_procedure_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_procedure_stat" ):
                listener.enterCreate_replace_procedure_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_procedure_stat" ):
                listener.exitCreate_replace_procedure_stat(self)




    def create_replace_procedure_stat(self):

        localctx = TeradataSQLParser.Create_replace_procedure_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_create_replace_procedure_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3231
            self.create_replace_procedure_sql_form_stat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_procedure_sql_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def procedure_body(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_bodyContext,0)


        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLParser.REPLACE, 0)

        def parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Parameter_specContext,i)


        def sql_data_access_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sql_data_access_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sql_data_access_optionContext,i)


        def dynamic_result_sets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Dynamic_result_setsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Dynamic_result_setsContext,i)


        def sql_security_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sql_security_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sql_security_optionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_replace_procedure_sql_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_procedure_sql_form_stat" ):
                listener.enterCreate_replace_procedure_sql_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_procedure_sql_form_stat" ):
                listener.exitCreate_replace_procedure_sql_form_stat(self)




    def create_replace_procedure_sql_form_stat(self):

        localctx = TeradataSQLParser.Create_replace_procedure_sql_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_create_replace_procedure_sql_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3233
            _la = self._input.LA(1)
            if not(_la==86 or _la==340):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3234
            self.match(TeradataSQLParser.PROCEDURE)
            self.state = 3235
            self.procedure_name()
            self.state = 3236
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 3245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190 or _la==195 or _la==293 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3237
                self.parameter_spec()
                self.state = 3242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3238
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3239
                    self.parameter_spec()
                    self.state = 3244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3247
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 3253
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3251
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [77, 253, 322]:
                        self.state = 3248
                        self.sql_data_access_option()
                        pass
                    elif token in [128]:
                        self.state = 3249
                        self.dynamic_result_sets()
                        pass
                    elif token in [386]:
                        self.state = 3250
                        self.sql_security_option()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 3255
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

            self.state = 3256
            self.procedure_body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Parameter_nameContext,0)


        def variable_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_type_attributeContext,i)


        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def OUT(self):
            return self.getToken(TeradataSQLParser.OUT, 0)

        def INOUT(self):
            return self.getToken(TeradataSQLParser.INOUT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_spec" ):
                listener.enterParameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_spec" ):
                listener.exitParameter_spec(self)




    def parameter_spec(self):

        localctx = TeradataSQLParser.Parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190 or _la==195 or _la==293:
                self.state = 3258
                _la = self._input.LA(1)
                if not(_la==190 or _la==195 or _la==293):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3261
            self.parameter_name()
            self.state = 3262
            self.variable_data_type()
            self.state = 3266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 3263
                self.data_type_attribute()
                self.state = 3268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_data_access_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINS(self):
            return self.getToken(TeradataSQLParser.CONTAINS, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def MODIFIES(self):
            return self.getToken(TeradataSQLParser.MODIFIES, 0)

        def DATA(self):
            return self.getToken(TeradataSQLParser.DATA, 0)

        def READS(self):
            return self.getToken(TeradataSQLParser.READS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sql_data_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_data_access_option" ):
                listener.enterSql_data_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_data_access_option" ):
                listener.exitSql_data_access_option(self)




    def sql_data_access_option(self):

        localctx = TeradataSQLParser.Sql_data_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sql_data_access_option)
        try:
            self.state = 3277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [77]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3269
                self.match(TeradataSQLParser.CONTAINS)
                self.state = 3270
                self.match(TeradataSQLParser.SQL)
                pass
            elif token in [253]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3271
                self.match(TeradataSQLParser.MODIFIES)
                self.state = 3272
                self.match(TeradataSQLParser.SQL)
                self.state = 3273
                self.match(TeradataSQLParser.DATA)
                pass
            elif token in [322]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3274
                self.match(TeradataSQLParser.READS)
                self.state = 3275
                self.match(TeradataSQLParser.SQL)
                self.state = 3276
                self.match(TeradataSQLParser.DATA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dynamic_result_setsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_of_sets = None # Integer_literalContext

        def DYNAMIC(self):
            return self.getToken(TeradataSQLParser.DYNAMIC, 0)

        def RESULT(self):
            return self.getToken(TeradataSQLParser.RESULT, 0)

        def SETS(self):
            return self.getToken(TeradataSQLParser.SETS, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_dynamic_result_sets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamic_result_sets" ):
                listener.enterDynamic_result_sets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamic_result_sets" ):
                listener.exitDynamic_result_sets(self)




    def dynamic_result_sets(self):

        localctx = TeradataSQLParser.Dynamic_result_setsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_dynamic_result_sets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3279
            self.match(TeradataSQLParser.DYNAMIC)
            self.state = 3280
            self.match(TeradataSQLParser.RESULT)
            self.state = 3281
            self.match(TeradataSQLParser.SETS)
            self.state = 3282
            localctx.number_of_sets = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_security_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLParser.SECURITY, 0)

        def CREATOR(self):
            return self.getToken(TeradataSQLParser.CREATOR, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLParser.INVOKER, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLParser.OWNER, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sql_security_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_security_option" ):
                listener.enterSql_security_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_security_option" ):
                listener.exitSql_security_option(self)




    def sql_security_option(self):

        localctx = TeradataSQLParser.Sql_security_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_sql_security_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3284
            self.match(TeradataSQLParser.SQL)
            self.state = 3285
            self.match(TeradataSQLParser.SECURITY)
            self.state = 3286
            _la = self._input.LA(1)
            if not(_la==602 or _la==624 or _la==713 or _la==834):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedure_data_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_data_statContext,0)


        def compound_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Compound_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_procedure_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_body" ):
                listener.enterProcedure_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_body" ):
                listener.exitProcedure_body(self)




    def procedure_body(self):

        localctx = TeradataSQLParser.Procedure_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_procedure_body)
        try:
            self.state = 3290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3288
                self.procedure_data_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3289
                self.compound_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(TeradataSQLParser.SEMICOLON, 0)

        def procedure_data_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_data_statContext,0)


        def compound_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Compound_statContext,0)


        def procedure_cursor_control_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_cursor_control_statContext,0)


        def assignment_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Assignment_statContext,0)


        def condition_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Condition_statContext,0)


        def iteration_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Iteration_statContext,0)


        def diagnostic_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Diagnostic_statContext,0)


        def print_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Print_statContext,0)


        def ITERATE(self):
            return self.getToken(TeradataSQLParser.ITERATE, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Label_nameContext,i)


        def LEAVE(self):
            return self.getToken(TeradataSQLParser.LEAVE, 0)

        def BEGIN(self):
            return self.getToken(TeradataSQLParser.BEGIN, 0)

        def REQUEST(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.REQUEST)
            else:
                return self.getToken(TeradataSQLParser.REQUEST, i)

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def COLON(self):
            return self.getToken(TeradataSQLParser.COLON, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_procedure_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_stat" ):
                listener.enterProcedure_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_stat" ):
                listener.exitProcedure_stat(self)




    def procedure_stat(self):

        localctx = TeradataSQLParser.Procedure_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_procedure_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 3292
                self.procedure_data_stat()
                pass

            elif la_ == 2:
                self.state = 3293
                self.compound_stat()
                pass

            elif la_ == 3:
                self.state = 3294
                self.procedure_cursor_control_stat()
                pass

            elif la_ == 4:
                self.state = 3295
                self.assignment_stat()
                pass

            elif la_ == 5:
                self.state = 3296
                self.condition_stat()
                pass

            elif la_ == 6:
                self.state = 3300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 3297
                    self.label_name()
                    self.state = 3298
                    self.match(TeradataSQLParser.COLON)


                self.state = 3302
                self.iteration_stat()
                self.state = 3304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 3303
                    self.label_name()


                pass

            elif la_ == 7:
                self.state = 3306
                self.diagnostic_stat()
                pass

            elif la_ == 8:
                self.state = 3307
                self.print_stat()
                pass

            elif la_ == 9:
                self.state = 3308
                self.match(TeradataSQLParser.ITERATE)
                self.state = 3309
                self.label_name()
                pass

            elif la_ == 10:
                self.state = 3310
                self.match(TeradataSQLParser.LEAVE)
                self.state = 3311
                self.label_name()
                pass

            elif la_ == 11:
                self.state = 3312
                self.match(TeradataSQLParser.BEGIN)
                self.state = 3313
                self.match(TeradataSQLParser.REQUEST)
                self.state = 3315 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3314
                        self.procedure_stat()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3317 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

                self.state = 3319
                self.match(TeradataSQLParser.END)
                self.state = 3320
                self.match(TeradataSQLParser.REQUEST)
                pass


            self.state = 3324
            self.match(TeradataSQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_data_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedure_dml_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_dml_statContext,0)


        def procedure_ddl_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_ddl_statContext,0)


        def procedure_dcl_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_dcl_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_procedure_data_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_data_stat" ):
                listener.enterProcedure_data_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_data_stat" ):
                listener.exitProcedure_data_stat(self)




    def procedure_data_stat(self):

        localctx = TeradataSQLParser.Procedure_data_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_procedure_data_stat)
        try:
            self.state = 3329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3326
                self.procedure_dml_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3327
                self.procedure_ddl_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3328
                self.procedure_dcl_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_dml_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abort_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Abort_statContext,0)


        def begin_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Begin_transaction_statContext,0)


        def end_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.End_transaction_statContext,0)


        def call_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Call_statContext,0)


        def collect_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collect_statistics_qcd_form_statContext,0)


        def commit_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Commit_statContext,0)


        def delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Delete_statContext,0)


        def drop_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_statistics_qcd_form_statContext,0)


        def insert_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Insert_statContext,0)


        def merge_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Merge_statContext,0)


        def rollback_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rollback_statContext,0)


        def select_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Select_statContext,0)


        def select_and_consume_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Select_and_consume_statContext,0)


        def update_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Update_statContext,0)


        def locking_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_procedure_dml_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_dml_stat" ):
                listener.enterProcedure_dml_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_dml_stat" ):
                listener.exitProcedure_dml_stat(self)




    def procedure_dml_stat(self):

        localctx = TeradataSQLParser.Procedure_dml_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_procedure_dml_stat)
        try:
            self.state = 3346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3331
                self.abort_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3332
                self.begin_transaction_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3333
                self.end_transaction_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3334
                self.call_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3335
                self.collect_statistics_qcd_form_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3336
                self.commit_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3337
                self.delete_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3338
                self.drop_statistics_qcd_form_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3339
                self.insert_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3340
                self.merge_stat()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3341
                self.rollback_stat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3342
                self.select_stat()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3343
                self.select_and_consume_stat()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3344
                self.update_stat()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3345
                self.locking_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_ddl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_function_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_function_statContext,0)


        def alter_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alter_table_statContext,0)


        def begin_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Begin_logging_statContext,0)


        def collect_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collect_statistics_optimizer_form_statContext,0)


        def comment_placing_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Comment_placing_statContext,0)


        def create_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_database_statContext,0)


        def create_error_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_error_table_statContext,0)


        def create_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_index_statContext,0)


        def create_foreign_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_foreign_table_statContext,0)


        def create_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_join_index_statContext,0)


        def create_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_hash_index_statContext,0)


        def create_replace_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_macro_statContext,0)


        def create_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_profile_statContext,0)


        def create_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_role_statContext,0)


        def create_table_as_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_table_as_statContext,0)


        def create_table_primary_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_table_primary_form_statContext,0)


        def create_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_user_statContext,0)


        def create_replace_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_replace_view_statContext,0)


        def delete_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Delete_database_statContext,0)


        def delete_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Delete_user_statContext,0)


        def drop_cast_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_cast_statContext,0)


        def drop_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_database_statContext,0)


        def drop_error_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_error_table_statContext,0)


        def drop_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_index_statContext,0)


        def drop_join_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_join_index_statContext,0)


        def drop_hash_index_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_hash_index_statContext,0)


        def drop_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_macro_statContext,0)


        def drop_ordering_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_ordering_statContext,0)


        def drop_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_procedure_statContext,0)


        def drop_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_profile_statContext,0)


        def drop_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_role_statContext,0)


        def drop_statistics_optimizer_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_statistics_optimizer_form_statContext,0)


        def drop_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_table_statContext,0)


        def drop_transform_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_transform_statContext,0)


        def drop_trigger_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_trigger_statContext,0)


        def drop_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_user_statContext,0)


        def drop_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_view_statContext,0)


        def end_logging_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.End_logging_statContext,0)


        def modify_database_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Modify_database_statContext,0)


        def modify_profile_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Modify_profile_statContext,0)


        def modify_user_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Modify_user_statContext,0)


        def rename_macro_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_macro_statContext,0)


        def rename_procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_procedure_statContext,0)


        def rename_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_table_statContext,0)


        def rename_trigger_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_trigger_statContext,0)


        def rename_view_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rename_view_statContext,0)


        def set_query_band_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Set_query_band_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_procedure_ddl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_ddl_stat" ):
                listener.enterProcedure_ddl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_ddl_stat" ):
                listener.exitProcedure_ddl_stat(self)




    def procedure_ddl_stat(self):

        localctx = TeradataSQLParser.Procedure_ddl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_procedure_ddl_stat)
        try:
            self.state = 3395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3348
                self.alter_function_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3349
                self.alter_table_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3350
                self.begin_logging_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3351
                self.collect_statistics_optimizer_form_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3352
                self.comment_placing_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3353
                self.create_database_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3354
                self.create_error_table_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3355
                self.create_index_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3356
                self.create_foreign_table_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3357
                self.create_join_index_stat()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3358
                self.create_hash_index_stat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3359
                self.create_replace_macro_stat()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3360
                self.create_profile_stat()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3361
                self.create_role_stat()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3362
                self.create_table_as_stat()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3363
                self.create_table_primary_form_stat()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3364
                self.create_user_stat()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3365
                self.create_replace_view_stat()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3366
                self.delete_database_stat()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 3367
                self.delete_user_stat()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 3368
                self.drop_cast_stat()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 3369
                self.drop_database_stat()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 3370
                self.drop_error_table_stat()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 3371
                self.drop_index_stat()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 3372
                self.drop_join_index_stat()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 3373
                self.drop_hash_index_stat()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 3374
                self.drop_macro_stat()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 3375
                self.drop_ordering_stat()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 3376
                self.drop_procedure_stat()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 3377
                self.drop_profile_stat()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 3378
                self.drop_role_stat()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 3379
                self.drop_statistics_optimizer_form_stat()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 3380
                self.drop_table_stat()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 3381
                self.drop_transform_stat()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 3382
                self.drop_trigger_stat()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 3383
                self.drop_user_stat()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 3384
                self.drop_view_stat()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 3385
                self.end_logging_stat()
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 3386
                self.modify_database_stat()
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 3387
                self.modify_profile_stat()
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 3388
                self.modify_user_stat()
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 3389
                self.rename_macro_stat()
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 3390
                self.rename_procedure_stat()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 3391
                self.rename_table_stat()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 3392
                self.rename_trigger_stat()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 3393
                self.rename_view_stat()
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 3394
                self.set_query_band_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_dcl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def give_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Give_statContext,0)


        def grant_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_statContext,0)


        def revoke_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_procedure_dcl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_dcl_stat" ):
                listener.enterProcedure_dcl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_dcl_stat" ):
                listener.exitProcedure_dcl_stat(self)




    def procedure_dcl_stat(self):

        localctx = TeradataSQLParser.Procedure_dcl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_procedure_dcl_stat)
        try:
            self.state = 3400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3397
                self.give_stat()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3398
                self.grant_stat()
                pass
            elif token in [354]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3399
                self.revoke_stat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLParser.BEGIN, 0)

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def label_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Label_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Label_nameContext,i)


        def COLON(self):
            return self.getToken(TeradataSQLParser.COLON, 0)

        def local_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Local_declarationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Local_declarationContext,i)


        def cursor_declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Cursor_declarationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Cursor_declarationContext,i)


        def condition_handler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Condition_handlerContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Condition_handlerContext,i)


        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_compound_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stat" ):
                listener.enterCompound_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stat" ):
                listener.exitCompound_stat(self)




    def compound_stat(self):

        localctx = TeradataSQLParser.Compound_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_compound_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3402
                self.label_name()
                self.state = 3403
                self.match(TeradataSQLParser.COLON)


            self.state = 3407
            self.match(TeradataSQLParser.BEGIN)
            self.state = 3411
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3408
                    self.local_declaration() 
                self.state = 3413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

            self.state = 3417
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,315,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3414
                    self.cursor_declaration() 
                self.state = 3419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,315,self._ctx)

            self.state = 3423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==110:
                self.state = 3420
                self.condition_handler()
                self.state = 3425
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3426
                    self.procedure_stat() 
                self.state = 3431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

            self.state = 3432
            self.match(TeradataSQLParser.END)
            self.state = 3434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3433
                self.label_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_cursor_control_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def allocate_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Allocate_statContext,0)


        def close_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Close_statContext,0)


        def deallocate_prepare_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Deallocate_prepare_statContext,0)


        def positioned_delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Positioned_delete_statContext,0)


        def positioned_update_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Positioned_update_statContext,0)


        def execute_statement_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Execute_statement_statContext,0)


        def execute_immediate_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Execute_immediate_statContext,0)


        def fetch_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Fetch_statContext,0)


        def open_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Open_statContext,0)


        def prepare_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Prepare_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_procedure_cursor_control_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_cursor_control_stat" ):
                listener.enterProcedure_cursor_control_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_cursor_control_stat" ):
                listener.exitProcedure_cursor_control_stat(self)




    def procedure_cursor_control_stat(self):

        localctx = TeradataSQLParser.Procedure_cursor_control_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_procedure_cursor_control_stat)
        try:
            self.state = 3446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3436
                self.allocate_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3437
                self.close_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3438
                self.deallocate_prepare_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3439
                self.positioned_delete_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3440
                self.positioned_update_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3441
                self.execute_statement_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3442
                self.execute_immediate_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3443
                self.fetch_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3444
                self.open_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3445
                self.prepare_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assignment_target = None # Variable_nameContext
            self.assignment_source = None # Scalar_exprContext

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_assignment_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_stat" ):
                listener.enterAssignment_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_stat" ):
                listener.exitAssignment_stat(self)




    def assignment_stat(self):

        localctx = TeradataSQLParser.Assignment_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_assignment_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3448
            self.match(TeradataSQLParser.SET)
            self.state = 3449
            localctx.assignment_target = self.variable_name()
            self.state = 3450
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 3451
            localctx.assignment_source = self.scalar_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Case_statContext,0)


        def if_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.If_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_condition_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_stat" ):
                listener.enterCondition_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_stat" ):
                listener.exitCondition_stat(self)




    def condition_stat(self):

        localctx = TeradataSQLParser.Condition_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_condition_stat)
        try:
            self.state = 3455
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3453
                self.case_stat()
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3454
                self.if_stat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Iteration_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def while_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.While_statContext,0)


        def loop_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Loop_statContext,0)


        def for_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.For_statContext,0)


        def repeat_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Repeat_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_iteration_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIteration_stat" ):
                listener.enterIteration_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIteration_stat" ):
                listener.exitIteration_stat(self)




    def iteration_stat(self):

        localctx = TeradataSQLParser.Iteration_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_iteration_stat)
        try:
            self.state = 3461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [472]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3457
                self.while_stat()
                pass
            elif token in [232]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3458
                self.loop_stat()
                pass
            elif token in [159]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3459
                self.for_stat()
                pass
            elif token in [339]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3460
                self.repeat_stat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition_number = None # Integer_literalContext
            self.condition_variable = None # Variable_nameContext

        def SIGNAL(self):
            return self.getToken(TeradataSQLParser.SIGNAL, 0)

        def signal_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Signal_specContext,0)


        def RESIGNAL(self):
            return self.getToken(TeradataSQLParser.RESIGNAL, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def condition_information_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Condition_information_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Condition_information_itemContext,i)


        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLParser.EQUALS_SIGN, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def GET(self):
            return self.getToken(TeradataSQLParser.GET, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TeradataSQLParser.DIAGNOSTICS, 0)

        def diagnostic_statement_assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Diagnostic_statement_assignmentContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Diagnostic_statement_assignmentContext,i)


        def EXCEPTION(self):
            return self.getToken(TeradataSQLParser.EXCEPTION, 0)

        def diagnostic_condition_assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Diagnostic_condition_assignmentContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Diagnostic_condition_assignmentContext,i)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_diagnostic_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_stat" ):
                listener.enterDiagnostic_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_stat" ):
                listener.exitDiagnostic_stat(self)




    def diagnostic_stat(self):

        localctx = TeradataSQLParser.Diagnostic_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_diagnostic_stat)
        self._la = 0 # Token type
        try:
            self.state = 3512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3469
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [377]:
                    self.state = 3463
                    self.match(TeradataSQLParser.SIGNAL)
                    self.state = 3464
                    self.signal_spec()
                    pass
                elif token in [344]:
                    self.state = 3465
                    self.match(TeradataSQLParser.RESIGNAL)
                    self.state = 3467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 3466
                        self.signal_spec()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==372:
                    self.state = 3471
                    self.match(TeradataSQLParser.SET)
                    self.state = 3472
                    self.condition_information_item()
                    self.state = 3473
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 3474
                    self.scalar_expr(0)
                    self.state = 3482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 3475
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 3476
                        self.condition_information_item()
                        self.state = 3477
                        self.match(TeradataSQLParser.EQUALS_SIGN)
                        self.state = 3478
                        self.scalar_expr(0)
                        self.state = 3484
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3487
                self.match(TeradataSQLParser.GET)
                self.state = 3488
                self.match(TeradataSQLParser.DIAGNOSTICS)
                self.state = 3489
                self.diagnostic_statement_assignment()
                self.state = 3494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3490
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3491
                    self.diagnostic_statement_assignment()
                    self.state = 3496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3497
                self.match(TeradataSQLParser.GET)
                self.state = 3498
                self.match(TeradataSQLParser.DIAGNOSTICS)
                self.state = 3499
                self.match(TeradataSQLParser.EXCEPTION)
                self.state = 3502
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1194]:
                    self.state = 3500
                    localctx.condition_number = self.integer_literal()
                    pass
                elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 3501
                    localctx.condition_variable = self.variable_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3504
                self.diagnostic_condition_assignment()
                self.state = 3509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3505
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3506
                    self.diagnostic_condition_assignment()
                    self.state = 3511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(TeradataSQLParser.PRINT, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_print_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_stat" ):
                listener.enterPrint_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_stat" ):
                listener.exitPrint_stat(self)




    def print_stat(self):

        localctx = TeradataSQLParser.Print_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_print_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3514
            self.match(TeradataSQLParser.PRINT)
            self.state = 3515
            self.scalar_expr(0)
            self.state = 3520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3516
                self.match(TeradataSQLParser.COMMA)
                self.state = 3517
                self.scalar_expr(0)
                self.state = 3522
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(TeradataSQLParser.DECLARE, 0)

        def SEMICOLON(self):
            return self.getToken(TeradataSQLParser.SEMICOLON, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,i)


        def variable_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_data_typeContext,0)


        def condition_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Condition_nameContext,0)


        def CONDITION(self):
            return self.getToken(TeradataSQLParser.CONDITION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_type_attributeContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def sqlstate_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Sqlstate_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_local_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_declaration" ):
                listener.enterLocal_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_declaration" ):
                listener.exitLocal_declaration(self)




    def local_declaration(self):

        localctx = TeradataSQLParser.Local_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_local_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3523
            self.match(TeradataSQLParser.DECLARE)
            self.state = 3545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 3524
                self.variable_name()
                self.state = 3529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3525
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3526
                    self.variable_name()
                    self.state = 3531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3532
                self.variable_data_type()
                self.state = 3536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                    self.state = 3533
                    self.data_type_attribute()
                    self.state = 3538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3539
                self.condition_name()
                self.state = 3540
                self.match(TeradataSQLParser.CONDITION)
                self.state = 3543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 3541
                    self.match(TeradataSQLParser.FOR)
                    self.state = 3542
                    self.sqlstate_spec()


                pass


            self.state = 3547
            self.match(TeradataSQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prepared_statement_name = None # Statement_nameContext
            self.statement_string = None # Char_string_literalContext
            self.statement_string_variable = None # Variable_nameContext

        def DECLARE(self):
            return self.getToken(TeradataSQLParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(TeradataSQLParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.FOR)
            else:
                return self.getToken(TeradataSQLParser.FOR, i)

        def SEMICOLON(self):
            return self.getToken(TeradataSQLParser.SEMICOLON, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_exprContext,0)


        def statement_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Statement_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Statement_nameContext,i)


        def SCROLL(self):
            return self.getToken(TeradataSQLParser.SCROLL, 0)

        def WITHOUT(self):
            return self.getToken(TeradataSQLParser.WITHOUT, 0)

        def RETURN(self):
            return self.getToken(TeradataSQLParser.RETURN, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def PREPARE(self):
            return self.getToken(TeradataSQLParser.PREPARE, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_request_modifierContext,0)


        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def ONLY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ONLY)
            else:
                return self.getToken(TeradataSQLParser.ONLY, i)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def CALLER(self):
            return self.getToken(TeradataSQLParser.CALLER, 0)

        def CLIENT(self):
            return self.getToken(TeradataSQLParser.CLIENT, 0)

        def READ(self):
            return self.getToken(TeradataSQLParser.READ, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_cursor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_declaration" ):
                listener.enterCursor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_declaration" ):
                listener.exitCursor_declaration(self)




    def cursor_declaration(self):

        localctx = TeradataSQLParser.Cursor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_cursor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3549
            self.match(TeradataSQLParser.DECLARE)
            self.state = 3550
            self.cursor_name()
            self.state = 3555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268 or _la==367:
                self.state = 3552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 3551
                    self.match(TeradataSQLParser.NO)


                self.state = 3554
                self.match(TeradataSQLParser.SCROLL)


            self.state = 3557
            self.match(TeradataSQLParser.CURSOR)
            self.state = 3569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [475]:
                self.state = 3558
                self.match(TeradataSQLParser.WITHOUT)
                self.state = 3559
                self.match(TeradataSQLParser.RETURN)
                pass
            elif token in [474]:
                self.state = 3560
                self.match(TeradataSQLParser.WITH)
                self.state = 3561
                self.match(TeradataSQLParser.RETURN)
                self.state = 3563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==287:
                    self.state = 3562
                    self.match(TeradataSQLParser.ONLY)


                self.state = 3567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==426:
                    self.state = 3565
                    self.match(TeradataSQLParser.TO)
                    self.state = 3566
                    _la = self._input.LA(1)
                    if not(_la==560 or _la==575):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [159]:
                pass
            else:
                pass
            self.state = 3571
            self.match(TeradataSQLParser.FOR)
            self.state = 3588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226, 227, 369, 370, 474, 1213]:
                self.state = 3573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==226 or _la==227:
                    self.state = 3572
                    self.locking_request_modifier()


                self.state = 3576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 3575
                    self.with_request_modifier()


                self.state = 3578
                self.query_expr(0)
                self.state = 3585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 3579
                    self.match(TeradataSQLParser.FOR)
                    self.state = 3583
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [877]:
                        self.state = 3580
                        self.match(TeradataSQLParser.READ)
                        self.state = 3581
                        self.match(TeradataSQLParser.ONLY)
                        pass
                    elif token in [453]:
                        self.state = 3582
                        self.match(TeradataSQLParser.UPDATE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 3587
                self.statement_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 3590
                self.match(TeradataSQLParser.PREPARE)
                self.state = 3591
                localctx.prepared_statement_name = self.statement_name()
                self.state = 3592
                self.match(TeradataSQLParser.FROM)
                self.state = 3595
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,345,self._ctx)
                if la_ == 1:
                    self.state = 3593
                    localctx.statement_string = self.char_string_literal()
                    pass

                elif la_ == 2:
                    self.state = 3594
                    localctx.statement_string_variable = self.variable_name()
                    pass




            self.state = 3599
            self.match(TeradataSQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_handlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.handler_action_statement = None # Procedure_statContext

        def DECLARE(self):
            return self.getToken(TeradataSQLParser.DECLARE, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def procedure_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,0)


        def HANDLER(self):
            return self.getToken(TeradataSQLParser.HANDLER, 0)

        def condition_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Condition_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Condition_nameContext,i)


        def CONDITION(self):
            return self.getToken(TeradataSQLParser.CONDITION, 0)

        def sqlstate_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sqlstate_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sqlstate_specContext,i)


        def CONTINUE(self):
            return self.getToken(TeradataSQLParser.CONTINUE, 0)

        def EXIT(self):
            return self.getToken(TeradataSQLParser.EXIT, 0)

        def SQLEXCEPTION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.SQLEXCEPTION)
            else:
                return self.getToken(TeradataSQLParser.SQLEXCEPTION, i)

        def SQLWARNING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.SQLWARNING)
            else:
                return self.getToken(TeradataSQLParser.SQLWARNING, i)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.NOT)
            else:
                return self.getToken(TeradataSQLParser.NOT, i)

        def FOUND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.FOUND)
            else:
                return self.getToken(TeradataSQLParser.FOUND, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_condition_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_handler" ):
                listener.enterCondition_handler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_handler" ):
                listener.exitCondition_handler(self)




    def condition_handler(self):

        localctx = TeradataSQLParser.Condition_handlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_condition_handler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3601
            self.match(TeradataSQLParser.DECLARE)
            self.state = 3607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 146]:
                self.state = 3602
                _la = self._input.LA(1)
                if not(_la==78 or _la==146):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3603
                self.match(TeradataSQLParser.HANDLER)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 3604
                self.condition_name()
                self.state = 3605
                self.match(TeradataSQLParser.CONDITION)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3609
            self.match(TeradataSQLParser.FOR)
            self.state = 3638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.state = 3610
                self.sqlstate_spec()
                self.state = 3615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3611
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3612
                    self.sqlstate_spec()
                    self.state = 3617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3623
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [387]:
                    self.state = 3618
                    self.match(TeradataSQLParser.SQLEXCEPTION)
                    pass
                elif token in [389]:
                    self.state = 3619
                    self.match(TeradataSQLParser.SQLWARNING)
                    pass
                elif token in [272]:
                    self.state = 3620
                    self.match(TeradataSQLParser.NOT)
                    self.state = 3621
                    self.match(TeradataSQLParser.FOUND)
                    pass
                elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 3622
                    self.condition_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3625
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3631
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [387]:
                        self.state = 3626
                        self.match(TeradataSQLParser.SQLEXCEPTION)
                        pass
                    elif token in [389]:
                        self.state = 3627
                        self.match(TeradataSQLParser.SQLWARNING)
                        pass
                    elif token in [272]:
                        self.state = 3628
                        self.match(TeradataSQLParser.NOT)
                        self.state = 3629
                        self.match(TeradataSQLParser.FOUND)
                        pass
                    elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                        self.state = 3630
                        self.condition_name()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 3637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 3640
            localctx.handler_action_statement = self.procedure_stat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Allocate_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALLOCATE(self):
            return self.getToken(TeradataSQLParser.ALLOCATE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(TeradataSQLParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_allocate_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllocate_stat" ):
                listener.enterAllocate_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllocate_stat" ):
                listener.exitAllocate_stat(self)




    def allocate_stat(self):

        localctx = TeradataSQLParser.Allocate_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_allocate_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3642
            self.match(TeradataSQLParser.ALLOCATE)
            self.state = 3643
            self.cursor_name()
            self.state = 3644
            self.match(TeradataSQLParser.CURSOR)
            self.state = 3645
            self.match(TeradataSQLParser.FOR)
            self.state = 3646
            self.match(TeradataSQLParser.PROCEDURE)
            self.state = 3647
            self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Close_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(TeradataSQLParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cursor_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_close_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose_stat" ):
                listener.enterClose_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose_stat" ):
                listener.exitClose_stat(self)




    def close_stat(self):

        localctx = TeradataSQLParser.Close_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_close_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3649
            self.match(TeradataSQLParser.CLOSE)
            self.state = 3650
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Deallocate_prepare_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEALLOCATE(self):
            return self.getToken(TeradataSQLParser.DEALLOCATE, 0)

        def PREPARE(self):
            return self.getToken(TeradataSQLParser.PREPARE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Statement_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_deallocate_prepare_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate_prepare_stat" ):
                listener.enterDeallocate_prepare_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate_prepare_stat" ):
                listener.exitDeallocate_prepare_stat(self)




    def deallocate_prepare_stat(self):

        localctx = TeradataSQLParser.Deallocate_prepare_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_deallocate_prepare_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3652
            self.match(TeradataSQLParser.DEALLOCATE)
            self.state = 3653
            self.match(TeradataSQLParser.PREPARE)
            self.state = 3654
            self.statement_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positioned_delete_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def WHERE(self):
            return self.getToken(TeradataSQLParser.WHERE, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TeradataSQLParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cursor_nameContext,0)


        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def DEL(self):
            return self.getToken(TeradataSQLParser.DEL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_positioned_delete_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositioned_delete_stat" ):
                listener.enterPositioned_delete_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositioned_delete_stat" ):
                listener.exitPositioned_delete_stat(self)




    def positioned_delete_stat(self):

        localctx = TeradataSQLParser.Positioned_delete_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_positioned_delete_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3656
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3657
            self.match(TeradataSQLParser.FROM)
            self.state = 3658
            self.table_name()
            self.state = 3659
            self.match(TeradataSQLParser.WHERE)
            self.state = 3660
            self.match(TeradataSQLParser.CURRENT)
            self.state = 3661
            self.match(TeradataSQLParser.OF)
            self.state = 3662
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positioned_update_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Set_specContext,i)


        def WHERE(self):
            return self.getToken(TeradataSQLParser.WHERE, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLParser.CURRENT, 0)

        def OF(self):
            return self.getToken(TeradataSQLParser.OF, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cursor_nameContext,0)


        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLParser.UPD, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_positioned_update_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositioned_update_stat" ):
                listener.enterPositioned_update_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositioned_update_stat" ):
                listener.exitPositioned_update_stat(self)




    def positioned_update_stat(self):

        localctx = TeradataSQLParser.Positioned_update_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_positioned_update_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3664
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3665
            self.table_name()
            self.state = 3670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 3666
                    self.match(TeradataSQLParser.AS)


                self.state = 3669
                self.alias_name()


            self.state = 3672
            self.match(TeradataSQLParser.SET)
            self.state = 3673
            self.set_spec()
            self.state = 3678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3674
                self.match(TeradataSQLParser.COMMA)
                self.state = 3675
                self.set_spec()
                self.state = 3680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3681
            self.match(TeradataSQLParser.WHERE)
            self.state = 3682
            self.match(TeradataSQLParser.CURRENT)
            self.state = 3683
            self.match(TeradataSQLParser.OF)
            self.state = 3684
            self.cursor_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statement_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(TeradataSQLParser.EXECUTE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Statement_nameContext,0)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_execute_statement_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_stat" ):
                listener.enterExecute_statement_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_stat" ):
                listener.exitExecute_statement_stat(self)




    def execute_statement_stat(self):

        localctx = TeradataSQLParser.Execute_statement_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_execute_statement_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3686
            self.match(TeradataSQLParser.EXECUTE)
            self.state = 3687
            self.statement_name()
            self.state = 3697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 3688
                self.match(TeradataSQLParser.USING)
                self.state = 3689
                self.variable_name()
                self.state = 3694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3690
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3691
                    self.variable_name()
                    self.state = 3696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_immediate_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(TeradataSQLParser.EXECUTE, 0)

        def IMMEDIATE(self):
            return self.getToken(TeradataSQLParser.IMMEDIATE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Statement_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_execute_immediate_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_immediate_stat" ):
                listener.enterExecute_immediate_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_immediate_stat" ):
                listener.exitExecute_immediate_stat(self)




    def execute_immediate_stat(self):

        localctx = TeradataSQLParser.Execute_immediate_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_execute_immediate_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3699
            self.match(TeradataSQLParser.EXECUTE)
            self.state = 3700
            self.match(TeradataSQLParser.IMMEDIATE)
            self.state = 3701
            self.statement_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fetch_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(TeradataSQLParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cursor_nameContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,i)


        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def NEXT(self):
            return self.getToken(TeradataSQLParser.NEXT, 0)

        def FIRST(self):
            return self.getToken(TeradataSQLParser.FIRST, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_fetch_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_stat" ):
                listener.enterFetch_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_stat" ):
                listener.exitFetch_stat(self)




    def fetch_stat(self):

        localctx = TeradataSQLParser.Fetch_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_fetch_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3703
            self.match(TeradataSQLParser.FETCH)
            self.state = 3708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156 or _la==164 or _la==267:
                self.state = 3705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==156 or _la==267:
                    self.state = 3704
                    _la = self._input.LA(1)
                    if not(_la==156 or _la==267):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3707
                self.match(TeradataSQLParser.FROM)


            self.state = 3710
            self.cursor_name()
            self.state = 3711
            self.match(TeradataSQLParser.INTO)
            self.state = 3712
            self.variable_name()
            self.state = 3717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3713
                self.match(TeradataSQLParser.COMMA)
                self.state = 3714
                self.variable_name()
                self.state = 3719
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(TeradataSQLParser.OPEN, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cursor_nameContext,0)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_open_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_stat" ):
                listener.enterOpen_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_stat" ):
                listener.exitOpen_stat(self)




    def open_stat(self):

        localctx = TeradataSQLParser.Open_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_open_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3720
            self.match(TeradataSQLParser.OPEN)
            self.state = 3721
            self.cursor_name()
            self.state = 3731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 3722
                self.match(TeradataSQLParser.USING)
                self.state = 3723
                self.variable_name()
                self.state = 3728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 3724
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 3725
                    self.variable_name()
                    self.state = 3730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prepare_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.statement_string = None # Char_string_literalContext
            self.statement_string_variable = None # Variable_nameContext

        def PREPARE(self):
            return self.getToken(TeradataSQLParser.PREPARE, 0)

        def statement_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Statement_nameContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_prepare_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepare_stat" ):
                listener.enterPrepare_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepare_stat" ):
                listener.exitPrepare_stat(self)




    def prepare_stat(self):

        localctx = TeradataSQLParser.Prepare_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_prepare_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3733
            self.match(TeradataSQLParser.PREPARE)
            self.state = 3734
            self.statement_name()
            self.state = 3735
            self.match(TeradataSQLParser.FROM)
            self.state = 3738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 3736
                localctx.statement_string = self.char_string_literal()
                pass

            elif la_ == 2:
                self.state = 3737
                localctx.statement_string_variable = self.variable_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.operand_1 = None # Scalar_exprContext

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CASE)
            else:
                return self.getToken(TeradataSQLParser.CASE, i)

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def ELSE(self):
            return self.getToken(TeradataSQLParser.ELSE, 0)

        def when_operand_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.When_operand_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.When_operand_clauseContext,i)


        def when_condition_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.When_condition_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.When_condition_clauseContext,i)


        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_case_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_stat" ):
                listener.enterCase_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_stat" ):
                listener.exitCase_stat(self)




    def case_stat(self):

        localctx = TeradataSQLParser.Case_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_case_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3740
            self.match(TeradataSQLParser.CASE)
            self.state = 3752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 3741
                localctx.operand_1 = self.scalar_expr(0)
                self.state = 3743 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3742
                    self.when_operand_clause()
                    self.state = 3745 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==470):
                        break

                pass
            elif token in [470]:
                self.state = 3748 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3747
                    self.when_condition_clause()
                    self.state = 3750 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==470):
                        break

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 3754
                self.match(TeradataSQLParser.ELSE)
                self.state = 3756 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3755
                        self.procedure_stat()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3758 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,367,self._ctx)



            self.state = 3762
            self.match(TeradataSQLParser.END)
            self.state = 3763
            self.match(TeradataSQLParser.CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_operand_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.operand = None # Scalar_exprContext

        def WHEN(self):
            return self.getToken(TeradataSQLParser.WHEN, 0)

        def THEN(self):
            return self.getToken(TeradataSQLParser.THEN, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_when_operand_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_operand_clause" ):
                listener.enterWhen_operand_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_operand_clause" ):
                listener.exitWhen_operand_clause(self)




    def when_operand_clause(self):

        localctx = TeradataSQLParser.When_operand_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_when_operand_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3765
            self.match(TeradataSQLParser.WHEN)
            self.state = 3766
            localctx.operand = self.scalar_expr(0)
            self.state = 3767
            self.match(TeradataSQLParser.THEN)
            self.state = 3769 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3768
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3771 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_condition_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TeradataSQLParser.WHEN, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def THEN(self):
            return self.getToken(TeradataSQLParser.THEN, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_when_condition_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_condition_clause" ):
                listener.enterWhen_condition_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_condition_clause" ):
                listener.exitWhen_condition_clause(self)




    def when_condition_clause(self):

        localctx = TeradataSQLParser.When_condition_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_when_condition_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3773
            self.match(TeradataSQLParser.WHEN)
            self.state = 3774
            self.logical_expr(0)
            self.state = 3775
            self.match(TeradataSQLParser.THEN)
            self.state = 3777 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3776
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3779 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,370,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.IF)
            else:
                return self.getToken(TeradataSQLParser.IF, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.THEN)
            else:
                return self.getToken(TeradataSQLParser.THEN, i)

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def ELSEIF(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ELSEIF)
            else:
                return self.getToken(TeradataSQLParser.ELSEIF, i)

        def ELSE(self):
            return self.getToken(TeradataSQLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_if_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stat" ):
                listener.enterIf_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stat" ):
                listener.exitIf_stat(self)




    def if_stat(self):

        localctx = TeradataSQLParser.If_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_if_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3781
            self.match(TeradataSQLParser.IF)
            self.state = 3782
            self.logical_expr(0)
            self.state = 3783
            self.match(TeradataSQLParser.THEN)
            self.state = 3785 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3784
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3787 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,371,self._ctx)

            self.state = 3799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==132:
                self.state = 3789
                self.match(TeradataSQLParser.ELSEIF)
                self.state = 3790
                self.logical_expr(0)
                self.state = 3791
                self.match(TeradataSQLParser.THEN)
                self.state = 3793 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3792
                        self.procedure_stat()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3795 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

                self.state = 3801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 3802
                self.match(TeradataSQLParser.ELSE)
                self.state = 3804 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3803
                        self.procedure_stat()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3806 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,374,self._ctx)



            self.state = 3810
            self.match(TeradataSQLParser.END)
            self.state = 3811
            self.match(TeradataSQLParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.WHILE)
            else:
                return self.getToken(TeradataSQLParser.WHILE, i)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def DO(self):
            return self.getToken(TeradataSQLParser.DO, 0)

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_while_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stat" ):
                listener.enterWhile_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stat" ):
                listener.exitWhile_stat(self)




    def while_stat(self):

        localctx = TeradataSQLParser.While_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_while_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3813
            self.match(TeradataSQLParser.WHILE)
            self.state = 3814
            self.logical_expr(0)
            self.state = 3815
            self.match(TeradataSQLParser.DO)
            self.state = 3817 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3816
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3819 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,376,self._ctx)

            self.state = 3821
            self.match(TeradataSQLParser.END)
            self.state = 3822
            self.match(TeradataSQLParser.WHILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.LOOP)
            else:
                return self.getToken(TeradataSQLParser.LOOP, i)

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_loop_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop_stat" ):
                listener.enterLoop_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop_stat" ):
                listener.exitLoop_stat(self)




    def loop_stat(self):

        localctx = TeradataSQLParser.Loop_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_loop_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3824
            self.match(TeradataSQLParser.LOOP)
            self.state = 3826 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3825
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3828 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,377,self._ctx)

            self.state = 3830
            self.match(TeradataSQLParser.END)
            self.state = 3831
            self.match(TeradataSQLParser.LOOP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.FOR)
            else:
                return self.getToken(TeradataSQLParser.FOR, i)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_exprContext,0)


        def DO(self):
            return self.getToken(TeradataSQLParser.DO, 0)

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(TeradataSQLParser.CURSOR, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_request_modifierContext,0)


        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_for_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stat" ):
                listener.enterFor_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stat" ):
                listener.exitFor_stat(self)




    def for_stat(self):

        localctx = TeradataSQLParser.For_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_for_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3833
            self.match(TeradataSQLParser.FOR)
            self.state = 3834
            self.variable_name()
            self.state = 3835
            self.match(TeradataSQLParser.AS)
            self.state = 3840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3836
                self.cursor_name()
                self.state = 3837
                self.match(TeradataSQLParser.CURSOR)
                self.state = 3838
                self.match(TeradataSQLParser.FOR)


            self.state = 3843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 3842
                self.locking_request_modifier()


            self.state = 3846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 3845
                self.with_request_modifier()


            self.state = 3848
            self.query_expr(0)
            self.state = 3849
            self.match(TeradataSQLParser.DO)
            self.state = 3851 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3850
                    self.procedure_stat()

                else:
                    raise NoViableAltException(self)
                self.state = 3853 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,381,self._ctx)

            self.state = 3855
            self.match(TeradataSQLParser.END)
            self.state = 3856
            self.match(TeradataSQLParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeat_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.REPEAT)
            else:
                return self.getToken(TeradataSQLParser.REPEAT, i)

        def UNTIL(self):
            return self.getToken(TeradataSQLParser.UNTIL, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def procedure_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_statContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_statContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_repeat_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat_stat" ):
                listener.enterRepeat_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat_stat" ):
                listener.exitRepeat_stat(self)




    def repeat_stat(self):

        localctx = TeradataSQLParser.Repeat_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_repeat_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3858
            self.match(TeradataSQLParser.REPEAT)
            self.state = 3860 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3859
                self.procedure_stat()
                self.state = 3862 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -9220908014117044222) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -8068757249945763735) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -9205357157273238399) != 0) or ((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 72075204210197505) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & 68719738881) != 0) or ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & 573379248199) != 0) or ((((_la - 452)) & ~0x3f) == 0 and ((1 << (_la - 452)) & -68714233821) != 0) or ((((_la - 516)) & ~0x3f) == 0 and ((1 << (_la - 516)) & -1) != 0) or ((((_la - 580)) & ~0x3f) == 0 and ((1 << (_la - 580)) & -1) != 0) or ((((_la - 644)) & ~0x3f) == 0 and ((1 << (_la - 644)) & -1) != 0) or ((((_la - 708)) & ~0x3f) == 0 and ((1 << (_la - 708)) & -1) != 0) or ((((_la - 772)) & ~0x3f) == 0 and ((1 << (_la - 772)) & -1) != 0) or ((((_la - 836)) & ~0x3f) == 0 and ((1 << (_la - 836)) & -1) != 0) or ((((_la - 900)) & ~0x3f) == 0 and ((1 << (_la - 900)) & -1) != 0) or ((((_la - 964)) & ~0x3f) == 0 and ((1 << (_la - 964)) & -1) != 0) or ((((_la - 1028)) & ~0x3f) == 0 and ((1 << (_la - 1028)) & -1) != 0) or ((((_la - 1092)) & ~0x3f) == 0 and ((1 << (_la - 1092)) & -1) != 0) or ((((_la - 1156)) & ~0x3f) == 0 and ((1 << (_la - 1156)) & 144115462953762815) != 0)):
                    break

            self.state = 3864
            self.match(TeradataSQLParser.UNTIL)
            self.state = 3865
            self.logical_expr(0)
            self.state = 3866
            self.match(TeradataSQLParser.END)
            self.state = 3867
            self.match(TeradataSQLParser.REPEAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_statement_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def statement_information_item(self):
            return self.getTypedRuleContext(TeradataSQLParser.Statement_information_itemContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_diagnostic_statement_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_statement_assignment" ):
                listener.enterDiagnostic_statement_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_statement_assignment" ):
                listener.exitDiagnostic_statement_assignment(self)




    def diagnostic_statement_assignment(self):

        localctx = TeradataSQLParser.Diagnostic_statement_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_diagnostic_statement_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3869
            self.variable_name()
            self.state = 3870
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 3871
            self.statement_information_item()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diagnostic_condition_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def condition_information_item(self):
            return self.getTypedRuleContext(TeradataSQLParser.Condition_information_itemContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_diagnostic_condition_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnostic_condition_assignment" ):
                listener.enterDiagnostic_condition_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnostic_condition_assignment" ):
                listener.exitDiagnostic_condition_assignment(self)




    def diagnostic_condition_assignment(self):

        localctx = TeradataSQLParser.Diagnostic_condition_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_diagnostic_condition_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3873
            self.variable_name()
            self.state = 3874
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 3875
            self.condition_information_item()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_information_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_ORIGIN(self):
            return self.getToken(TeradataSQLParser.CLASS_ORIGIN, 0)

        def CONDITION_IDENTIFIER(self):
            return self.getToken(TeradataSQLParser.CONDITION_IDENTIFIER, 0)

        def CONDITION_NUMBER(self):
            return self.getToken(TeradataSQLParser.CONDITION_NUMBER, 0)

        def MESSAGE_LENGTH(self):
            return self.getToken(TeradataSQLParser.MESSAGE_LENGTH, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(TeradataSQLParser.MESSAGE_TEXT, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(TeradataSQLParser.RETURNED_SQLSTATE, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(TeradataSQLParser.SUBCLASS_ORIGIN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_condition_information_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_information_item" ):
                listener.enterCondition_information_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_information_item" ):
                listener.exitCondition_information_item(self)




    def condition_information_item(self):

        localctx = TeradataSQLParser.Condition_information_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_condition_information_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3877
            _la = self._input.LA(1)
            if not(((((_la - 573)) & ~0x3f) == 0 and ((1 << (_la - 573)) & 196609) != 0) or _la==768 or _la==769 or _la==888 or _la==946):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_information_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMAND_FUNCTION(self):
            return self.getToken(TeradataSQLParser.COMMAND_FUNCTION, 0)

        def COMMAND_FUNCTION_CODE(self):
            return self.getToken(TeradataSQLParser.COMMAND_FUNCTION_CODE, 0)

        def MORE_(self):
            return self.getToken(TeradataSQLParser.MORE_, 0)

        def NUMBER(self):
            return self.getToken(TeradataSQLParser.NUMBER, 0)

        def ROW_COUNT(self):
            return self.getToken(TeradataSQLParser.ROW_COUNT, 0)

        def TRANSACTION_ACTIVE(self):
            return self.getToken(TeradataSQLParser.TRANSACTION_ACTIVE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_statement_information_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_information_item" ):
                listener.enterStatement_information_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_information_item" ):
                listener.exitStatement_information_item(self)




    def statement_information_item(self):

        localctx = TeradataSQLParser.Statement_information_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_statement_information_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3879
            _la = self._input.LA(1)
            if not(_la==277 or _la==582 or _la==583 or _la==787 or _la==895 or _la==1002):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signal_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Condition_nameContext,0)


        def sqlstate_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Sqlstate_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_signal_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignal_spec" ):
                listener.enterSignal_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignal_spec" ):
                listener.exitSignal_spec(self)




    def signal_spec(self):

        localctx = TeradataSQLParser.Signal_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_signal_spec)
        try:
            self.state = 3883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3881
                self.condition_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3882
                self.sqlstate_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sqlstate_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sqlstate_code = None # Char_string_literalContext

        def SQLSTATE(self):
            return self.getToken(TeradataSQLParser.SQLSTATE, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def VALUE(self):
            return self.getToken(TeradataSQLParser.VALUE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sqlstate_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlstate_spec" ):
                listener.enterSqlstate_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlstate_spec" ):
                listener.exitSqlstate_spec(self)




    def sqlstate_spec(self):

        localctx = TeradataSQLParser.Sqlstate_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_sqlstate_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3885
            self.match(TeradataSQLParser.SQLSTATE)
            self.state = 3887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==459:
                self.state = 3886
                self.match(TeradataSQLParser.VALUE)


            self.state = 3889
            localctx.sqlstate_code = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_replace_view_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_exprContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)

        def CV(self):
            return self.getToken(TeradataSQLParser.CV, 0)

        def REPLACE(self):
            return self.getToken(TeradataSQLParser.REPLACE, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def as_of_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.As_of_clauseContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_request_modifierContext,0)


        def RECURSIVE(self):
            return self.getToken(TeradataSQLParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_replace_view_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_replace_view_stat" ):
                listener.enterCreate_replace_view_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_replace_view_stat" ):
                listener.exitCreate_replace_view_stat(self)




    def create_replace_view_stat(self):

        localctx = TeradataSQLParser.Create_replace_view_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_create_replace_view_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 3891
                self.match(TeradataSQLParser.CREATE)
                self.state = 3893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==324:
                    self.state = 3892
                    self.match(TeradataSQLParser.RECURSIVE)


                self.state = 3895
                self.match(TeradataSQLParser.VIEW)
                pass
            elif token in [100]:
                self.state = 3896
                self.match(TeradataSQLParser.CV)
                pass
            elif token in [340]:
                self.state = 3897
                self.match(TeradataSQLParser.REPLACE)
                self.state = 3899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==324:
                    self.state = 3898
                    self.match(TeradataSQLParser.RECURSIVE)


                self.state = 3901
                self.match(TeradataSQLParser.VIEW)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3904
            localctx.view_name = self.table_name()
            self.state = 3906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 3905
                self.column_list()


            self.state = 3908
            self.match(TeradataSQLParser.AS)
            self.state = 3910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 3909
                self.locking_request_modifier()


            self.state = 3913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 3912
                self.as_of_clause()


            self.state = 3916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 3915
                self.with_request_modifier()


            self.state = 3918
            self.query_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_of_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.system_calendar_name = None # Object_nameContext

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def OF(self):
            return self.getToken(TeradataSQLParser.OF, 0)

        def calendar_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Calendar_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def DATE(self):
            return self.getToken(TeradataSQLParser.DATE, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.TIMESTAMP, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def AT(self):
            return self.getToken(TeradataSQLParser.AT, 0)

        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_time_zoneContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_as_of_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_of_clause" ):
                listener.enterAs_of_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_of_clause" ):
                listener.exitAs_of_clause(self)




    def as_of_clause(self):

        localctx = TeradataSQLParser.As_of_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_as_of_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3920
            self.match(TeradataSQLParser.AS)
            self.state = 3921
            self.match(TeradataSQLParser.OF)
            self.state = 3922
            self.calendar_function()
            self.state = 3923
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 3934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.state = 3924
                self.match(TeradataSQLParser.DATE)
                self.state = 3928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==24:
                    self.state = 3925
                    self.match(TeradataSQLParser.AT)
                    self.state = 3926
                    self.match(TeradataSQLParser.TIME)
                    self.state = 3927
                    self.match(TeradataSQLParser.ZONE)


                pass
            elif token in [422]:
                self.state = 3930
                self.match(TeradataSQLParser.TIMESTAMP)
                self.state = 3932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 3931
                    self.with_time_zone()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 3936
            self.scalar_expr(0)
            self.state = 3939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 3937
                self.match(TeradataSQLParser.COMMA)
                self.state = 3938
                localctx.system_calendar_name = self.object_name()


            self.state = 3941
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.from_database_name = None # Database_nameContext

        def database_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,i)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def database_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Database_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Database_attributeContext,i)


        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def CD(self):
            return self.getToken(TeradataSQLParser.CD, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_stat" ):
                listener.enterCreate_database_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_stat" ):
                listener.exitCreate_database_stat(self)




    def create_database_stat(self):

        localctx = TeradataSQLParser.Create_database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_create_database_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 3943
                self.match(TeradataSQLParser.CREATE)
                self.state = 3944
                self.match(TeradataSQLParser.DATABASE)
                pass
            elif token in [51]:
                self.state = 3945
                self.match(TeradataSQLParser.CD)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3948
            self.database_name()
            self.state = 3951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 3949
                self.match(TeradataSQLParser.FROM)
                self.state = 3950
                localctx.from_database_name = self.database_name()


            self.state = 3953
            self.match(TeradataSQLParser.AS)
            self.state = 3954
            self.database_attribute()
            self.state = 3959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3955
                self.match(TeradataSQLParser.COMMA)
                self.state = 3956
                self.database_attribute()
                self.state = 3961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.account_name = None # Char_string_literalContext

        def database_size_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_size_specContext,0)


        def ACCOUNT(self):
            return self.getToken(TeradataSQLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_default_mapContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLParser.Fallback_protectionContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.After_journalContext,0)


        def default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLParser.Default_journal_tableContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_database_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_attribute" ):
                listener.enterDatabase_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_attribute" ):
                listener.exitDatabase_attribute(self)




    def database_attribute(self):

        localctx = TeradataSQLParser.Database_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_database_attribute)
        try:
            self.state = 3971
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3962
                self.database_size_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3963
                self.match(TeradataSQLParser.ACCOUNT)
                self.state = 3964
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 3965
                localctx.account_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3966
                self.database_default_map()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3967
                self.fallback_protection()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3968
                self.before_journal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3969
                self.after_journal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3970
                self.default_journal_table()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def index_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Index_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Index_specContext,i)


        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stat" ):
                listener.enterCreate_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stat" ):
                listener.exitCreate_index_stat(self)




    def create_index_stat(self):

        localctx = TeradataSQLParser.Create_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_create_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3973
            self.match(TeradataSQLParser.CREATE)
            self.state = 3974
            self.index_spec()
            self.state = 3979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 3975
                self.match(TeradataSQLParser.COMMA)
                self.state = 3976
                self.index_spec()
                self.state = 3981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3982
            self.match(TeradataSQLParser.ON)
            self.state = 3984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 3983
                self.match(TeradataSQLParser.TEMPORARY)


            self.state = 3986
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Unqualified_nameContext
            self.index_column_name = None # Unqualified_nameContext

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def UNIQUE(self):
            return self.getToken(TeradataSQLParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def index_ordering(self):
            return self.getTypedRuleContext(TeradataSQLParser.Index_orderingContext,0)


        def index_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.Index_loadingContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_index_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_spec" ):
                listener.enterIndex_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_spec" ):
                listener.exitIndex_spec(self)




    def index_spec(self):

        localctx = TeradataSQLParser.Index_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_index_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==448:
                self.state = 3988
                self.match(TeradataSQLParser.UNIQUE)


            self.state = 3991
            self.match(TeradataSQLParser.INDEX)
            self.state = 3993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 3992
                localctx.index_name = self.unqualified_name()


            self.state = 3996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 3995
                self.match(TeradataSQLParser.ALL)


            self.state = 3998
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 3999
            localctx.index_column_name = self.unqualified_name()
            self.state = 4004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4000
                self.match(TeradataSQLParser.COMMA)
                self.state = 4001
                localctx.index_column_name = self.unqualified_name()
                self.state = 4006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4007
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 4009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 4008
                self.index_ordering()


            self.state = 4012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 4011
                self.index_loading()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_join_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def JOIN(self):
            return self.getToken(TeradataSQLParser.JOIN, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def table_option_index_form(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_option_index_formContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_option_index_formContext,i)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def join_index_select_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Join_index_select_clauseContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def index_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Index_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Index_definitionContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_join_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_join_index_stat" ):
                listener.enterCreate_join_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_join_index_stat" ):
                listener.exitCreate_join_index_stat(self)




    def create_join_index_stat(self):

        localctx = TeradataSQLParser.Create_join_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_create_join_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4014
            self.match(TeradataSQLParser.CREATE)
            self.state = 4015
            self.match(TeradataSQLParser.JOIN)
            self.state = 4016
            self.match(TeradataSQLParser.INDEX)
            self.state = 4017
            localctx.join_index_name = self.table_name()
            self.state = 4018
            self.table_option_index_form()
            self.state = 4023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4019
                self.match(TeradataSQLParser.COMMA)
                self.state = 4020
                self.table_option_index_form()
                self.state = 4025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4026
            self.match(TeradataSQLParser.AS)
            self.state = 4027
            self.join_index_select_clause()
            self.state = 4038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192 or _la==268 or _la==308 or _la==448 or _la==840:
                self.state = 4028
                self.index_definition()
                self.state = 4035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==192 or _la==268 or _la==308 or _la==448 or _la==840 or _la==1208:
                    self.state = 4030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4029
                        self.match(TeradataSQLParser.COMMA)


                    self.state = 4032
                    self.index_definition()
                    self.state = 4037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_index_select_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.grouping_spec = None # Ji_grouping_or_ordering_specContext
            self.ordering_spec = None # Ji_grouping_or_ordering_specContext

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def ji_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Ji_sourceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Ji_sourceContext,i)


        def GROUP(self):
            return self.getToken(TeradataSQLParser.GROUP, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.BY)
            else:
                return self.getToken(TeradataSQLParser.BY, i)

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def SEL(self):
            return self.getToken(TeradataSQLParser.SEL, 0)

        def SELECT(self):
            return self.getToken(TeradataSQLParser.SELECT, 0)

        def ji_grouping_or_ordering_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Ji_grouping_or_ordering_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Ji_grouping_or_ordering_specContext,i)


        def ji_selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Ji_selectionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Ji_selectionContext,i)


        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Where_clauseContext,0)


        def AUTO(self):
            return self.getToken(TeradataSQLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLParser.COMPRESS, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLParser.ROW, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_join_index_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_index_select_clause" ):
                listener.enterJoin_index_select_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_index_select_clause" ):
                listener.exitJoin_index_select_clause(self)




    def join_index_select_clause(self):

        localctx = TeradataSQLParser.Join_index_select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_join_index_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4040
            _la = self._input.LA(1)
            if not(_la==369 or _la==370):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                self.state = 4041
                self.ji_selection()
                self.state = 4046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4042
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4043
                    self.ji_selection()
                    self.state = 4048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 4049
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4050
                self.ji_selection()
                self.state = 4055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4051
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4052
                    self.ji_selection()
                    self.state = 4057
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4058
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 4059
                self.match(TeradataSQLParser.COMMA)
                self.state = 4060
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4061
                self.ji_selection()
                self.state = 4066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4062
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4063
                    self.ji_selection()
                    self.state = 4068
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4069
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.state = 4072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==361:
                    self.state = 4071
                    _la = self._input.LA(1)
                    if not(_la==69 or _la==361):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4074
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4075
                self.ji_selection()
                self.state = 4080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4076
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4077
                    self.ji_selection()
                    self.state = 4082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4083
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 4089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 4085
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 4084
                        self.match(TeradataSQLParser.NO)


                    self.state = 4087
                    self.match(TeradataSQLParser.AUTO)
                    self.state = 4088
                    self.match(TeradataSQLParser.COMPRESS)


                pass


            self.state = 4093
            self.match(TeradataSQLParser.FROM)
            self.state = 4094
            self.ji_source()
            self.state = 4099
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,420,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4095
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4096
                    self.ji_source() 
                self.state = 4101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,420,self._ctx)

            self.state = 4103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
            if la_ == 1:
                self.state = 4102
                self.where_clause()


            self.state = 4105
            self.matchWildcard()
            self.state = 4106
            self.match(TeradataSQLParser.GROUP)
            self.state = 4107
            self.match(TeradataSQLParser.BY)
            self.state = 4108
            localctx.grouping_spec = self.ji_grouping_or_ordering_spec()
            self.state = 4109
            self.match(TeradataSQLParser.ORDER)
            self.state = 4110
            self.match(TeradataSQLParser.BY)
            self.state = 4111
            localctx.ordering_spec = self.ji_grouping_or_ordering_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ji_selectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def aggregation_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Aggregation_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_ji_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJi_selection" ):
                listener.enterJi_selection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJi_selection" ):
                listener.exitJi_selection(self)




    def ji_selection(self):

        localctx = TeradataSQLParser.Ji_selectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_ji_selection)
        try:
            self.state = 4115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4113
                self.column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4114
                self.aggregation_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregation_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def SUM(self):
            return self.getToken(TeradataSQLParser.SUM, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def EXTRACT(self):
            return self.getToken(TeradataSQLParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def COUNT(self):
            return self.getToken(TeradataSQLParser.COUNT, 0)

        def MIN(self):
            return self.getToken(TeradataSQLParser.MIN, 0)

        def MAX(self):
            return self.getToken(TeradataSQLParser.MAX, 0)

        def YEAR(self):
            return self.getToken(TeradataSQLParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLParser.MONTH, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_aggregation_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregation_clause" ):
                listener.enterAggregation_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregation_clause" ):
                listener.exitAggregation_clause(self)




    def aggregation_clause(self):

        localctx = TeradataSQLParser.Aggregation_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_aggregation_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
            if la_ == 1:
                self.state = 4117
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.state = 4118
                self.match(TeradataSQLParser.SUM)
                self.state = 4119
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4120
                self.scalar_expr(0)
                self.state = 4121
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.state = 4123
                _la = self._input.LA(1)
                if not(_la==83 or _la==238 or _la==244):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4124
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4125
                self.scalar_expr(0)
                self.state = 4126
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.state = 4128
                self.match(TeradataSQLParser.EXTRACT)
                self.state = 4129
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4130
                _la = self._input.LA(1)
                if not(_la==258 or _la==478):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4131
                self.match(TeradataSQLParser.FROM)
                self.state = 4132
                self.scalar_expr(0)
                self.state = 4133
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


            self.state = 4141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 4138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 4137
                    self.match(TeradataSQLParser.AS)


                self.state = 4140
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ji_sourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def ji_joined_table(self):
            return self.getTypedRuleContext(TeradataSQLParser.Ji_joined_tableContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_ji_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJi_source" ):
                listener.enterJi_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJi_source" ):
                listener.exitJi_source(self)




    def ji_source(self):

        localctx = TeradataSQLParser.Ji_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_ji_source)
        self._la = 0 # Token type
        try:
            self.state = 4151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4143
                self.table_name()
                self.state = 4148
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
                if la_ == 1:
                    self.state = 4145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 4144
                        self.match(TeradataSQLParser.AS)


                    self.state = 4147
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4150
                self.ji_joined_table(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ji_joined_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def ji_joined_table(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Ji_joined_tableContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Ji_joined_tableContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def JOIN(self):
            return self.getToken(TeradataSQLParser.JOIN, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def INNER(self):
            return self.getToken(TeradataSQLParser.INNER, 0)

        def LEFT(self):
            return self.getToken(TeradataSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLParser.RIGHT, 0)

        def OUTER(self):
            return self.getToken(TeradataSQLParser.OUTER, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_ji_joined_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJi_joined_table" ):
                listener.enterJi_joined_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJi_joined_table" ):
                listener.exitJi_joined_table(self)



    def ji_joined_table(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLParser.Ji_joined_tableContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 278
        self.enterRecursionRule(localctx, 278, self.RULE_ji_joined_table, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.state = 4154
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4155
                self.ji_joined_table(0)
                self.state = 4156
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 4158
                self.table_name()
                self.state = 4163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,430,self._ctx)
                if la_ == 1:
                    self.state = 4160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 4159
                        self.match(TeradataSQLParser.AS)


                    self.state = 4162
                    self.alias_name()


                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 4182
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,434,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TeradataSQLParser.Ji_joined_tableContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_ji_joined_table)
                    self.state = 4167
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 4173
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [194]:
                        self.state = 4168
                        self.match(TeradataSQLParser.INNER)
                        pass
                    elif token in [219, 355]:
                        self.state = 4169
                        _la = self._input.LA(1)
                        if not(_la==219 or _la==355):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 4171
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==294:
                            self.state = 4170
                            self.match(TeradataSQLParser.OUTER)


                        pass
                    elif token in [210]:
                        pass
                    else:
                        pass
                    self.state = 4175
                    self.match(TeradataSQLParser.JOIN)
                    self.state = 4176
                    self.ji_joined_table(0)
                    self.state = 4177
                    self.match(TeradataSQLParser.ON)
                    self.state = 4178
                    self.logical_expr(0) 
                self.state = 4184
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,434,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Ji_grouping_or_ordering_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_ji_grouping_or_ordering_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJi_grouping_or_ordering_spec" ):
                listener.enterJi_grouping_or_ordering_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJi_grouping_or_ordering_spec" ):
                listener.exitJi_grouping_or_ordering_spec(self)




    def ji_grouping_or_ordering_spec(self):

        localctx = TeradataSQLParser.Ji_grouping_or_ordering_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_ji_grouping_or_ordering_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4185
            self.scalar_expr(0)
            self.state = 4190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4186
                self.match(TeradataSQLParser.COMMA)
                self.state = 4187
                self.scalar_expr(0)
                self.state = 4192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_profile_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Profile_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def profile_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Profile_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Profile_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_profile_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_profile_stat" ):
                listener.enterCreate_profile_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_profile_stat" ):
                listener.exitCreate_profile_stat(self)




    def create_profile_stat(self):

        localctx = TeradataSQLParser.Create_profile_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_create_profile_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4193
            self.match(TeradataSQLParser.CREATE)
            self.state = 4194
            self.match(TeradataSQLParser.PROFILE)
            self.state = 4195
            self.profile_name()
            self.state = 4205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 4196
                self.match(TeradataSQLParser.AS)
                self.state = 4197
                self.profile_attribute()
                self.state = 4202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4198
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4199
                    self.profile_attribute()
                    self.state = 4204
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.account_string = list() # of Char_string_literalContexts
            self.size = None # Scalar_exprContext
            self.band_spec = None # Char_string_literalContext
            self.ignore_band_spec = None # Char_string_literalContext
            self.cost_profile_name = None # Unqualified_nameContext

        def ACCOUNT(self):
            return self.getToken(TeradataSQLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_default_mapContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def SPOOL(self):
            return self.getToken(TeradataSQLParser.SPOOL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def BYTES(self):
            return self.getToken(TeradataSQLParser.BYTES, 0)

        def PASSWORD(self):
            return self.getToken(TeradataSQLParser.PASSWORD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def password_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Password_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Password_attributeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLParser.ATTRIBUTES, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLParser.QUERY_BAND, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLParser.IGNORE, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLParser.VALUES, 0)

        def TRANSFORM(self):
            return self.getToken(TeradataSQLParser.TRANSFORM, 0)

        def transform_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Transform_specificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Transform_specificationContext,i)


        def COST(self):
            return self.getToken(TeradataSQLParser.COST, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def user_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_constraintContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_constraintContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_profile_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_attribute" ):
                listener.enterProfile_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_attribute" ):
                listener.exitProfile_attribute(self)




    def profile_attribute(self):

        localctx = TeradataSQLParser.Profile_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_profile_attribute)
        self._la = 0 # Token type
        try:
            self.state = 4299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4207
                self.match(TeradataSQLParser.ACCOUNT)
                self.state = 4208
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4218
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 4209
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.account_string.append(localctx._char_string_literal)
                    self.state = 4214
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,438,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 4210
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 4211
                            localctx._char_string_literal = self.char_string_literal()
                            localctx.account_string.append(localctx._char_string_literal) 
                        self.state = 4216
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,438,self._ctx)

                    pass
                elif token in [274]:
                    self.state = 4217
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4220
                self.database_default_map()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4221
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 4222
                self.match(TeradataSQLParser.DATABASE)
                self.state = 4223
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4224
                self.database_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4225
                _la = self._input.LA(1)
                if not(_la==385 or _la==417):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4226
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4232
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
                if la_ == 1:
                    self.state = 4227
                    localctx.size = self.scalar_expr(0)
                    self.state = 4229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==45:
                        self.state = 4228
                        self.match(TeradataSQLParser.BYTES)


                    pass

                elif la_ == 2:
                    self.state = 4231
                    self.match(TeradataSQLParser.NULL)
                    pass


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4234
                self.match(TeradataSQLParser.PASSWORD)
                self.state = 4236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==539:
                    self.state = 4235
                    self.match(TeradataSQLParser.ATTRIBUTES)


                self.state = 4238
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4251
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1213]:
                    self.state = 4239
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 4240
                    self.password_attribute()
                    self.state = 4245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4241
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 4242
                        self.password_attribute()
                        self.state = 4247
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4248
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass
                elif token in [274]:
                    self.state = 4250
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4253
                self.match(TeradataSQLParser.QUERY_BAND)
                self.state = 4254
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4255
                localctx.band_spec = self.char_string_literal()
                self.state = 4262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 4256
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 4258
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==272:
                        self.state = 4257
                        self.match(TeradataSQLParser.NOT)


                    self.state = 4260
                    self.match(TeradataSQLParser.DEFAULT)
                    self.state = 4261
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4264
                self.match(TeradataSQLParser.IGNORE)
                self.state = 4265
                self.match(TeradataSQLParser.QUERY_BAND)
                self.state = 4266
                self.match(TeradataSQLParser.VALUES)
                self.state = 4267
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4268
                localctx.ignore_band_spec = self.char_string_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4269
                self.match(TeradataSQLParser.TRANSFORM)
                self.state = 4270
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                    self.state = 4271
                    self.transform_specification()
                    self.state = 4276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4272
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 4273
                        self.transform_specification()
                        self.state = 4278
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 4281
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4282
                self.match(TeradataSQLParser.COST)
                self.state = 4283
                self.match(TeradataSQLParser.PROFILE)
                self.state = 4284
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4287
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 4285
                    localctx.cost_profile_name = self.unqualified_name()
                    pass
                elif token in [274]:
                    self.state = 4286
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4289
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 4290
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4291
                self.user_constraint()
                self.state = 4296
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,450,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4292
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 4293
                        self.user_constraint() 
                    self.state = 4298
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,450,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Password_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.n = None # Scalar_exprContext
            self.c = None # Unqualified_nameContext

        def EXPIRE(self):
            return self.getToken(TeradataSQLParser.EXPIRE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def MINCHAR(self):
            return self.getToken(TeradataSQLParser.MINCHAR, 0)

        def MAXCHAR(self):
            return self.getToken(TeradataSQLParser.MAXCHAR, 0)

        def DIGITS(self):
            return self.getToken(TeradataSQLParser.DIGITS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def SPECCHAR(self):
            return self.getToken(TeradataSQLParser.SPECCHAR, 0)

        def MAXLOGONATTEMPTS(self):
            return self.getToken(TeradataSQLParser.MAXLOGONATTEMPTS, 0)

        def LOCKEDUSEREXPIRE(self):
            return self.getToken(TeradataSQLParser.LOCKEDUSEREXPIRE, 0)

        def REUSE(self):
            return self.getToken(TeradataSQLParser.REUSE, 0)

        def RESTRICTWORDS(self):
            return self.getToken(TeradataSQLParser.RESTRICTWORDS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_password_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassword_attribute" ):
                listener.enterPassword_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassword_attribute" ):
                listener.exitPassword_attribute(self)




    def password_attribute(self):

        localctx = TeradataSQLParser.Password_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_password_attribute)
        try:
            self.state = 4355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [663]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4301
                self.match(TeradataSQLParser.EXPIRE)
                self.state = 4302
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
                if la_ == 1:
                    self.state = 4303
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4304
                    self.match(TeradataSQLParser.NULL)
                    pass


                pass
            elif token in [771]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4307
                self.match(TeradataSQLParser.MINCHAR)
                self.state = 4308
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4311
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                if la_ == 1:
                    self.state = 4309
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4310
                    self.match(TeradataSQLParser.NULL)
                    pass


                pass
            elif token in [758]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4313
                self.match(TeradataSQLParser.MAXCHAR)
                self.state = 4314
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                if la_ == 1:
                    self.state = 4315
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4316
                    self.match(TeradataSQLParser.NULL)
                    pass


                pass
            elif token in [634]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4319
                self.match(TeradataSQLParser.DIGITS)
                self.state = 4320
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4323
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 4321
                    localctx.c = self.unqualified_name()
                    pass
                elif token in [274]:
                    self.state = 4322
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [932]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4325
                self.match(TeradataSQLParser.SPECCHAR)
                self.state = 4326
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4329
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 4327
                    localctx.c = self.unqualified_name()
                    pass
                elif token in [274]:
                    self.state = 4328
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [760]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4331
                self.match(TeradataSQLParser.MAXLOGONATTEMPTS)
                self.state = 4332
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4335
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 4333
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4334
                    self.match(TeradataSQLParser.NULL)
                    pass


                pass
            elif token in [744]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4337
                self.match(TeradataSQLParser.LOCKEDUSEREXPIRE)
                self.state = 4338
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4341
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 4339
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4340
                    self.match(TeradataSQLParser.NULL)
                    pass


                pass
            elif token in [890]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4343
                self.match(TeradataSQLParser.REUSE)
                self.state = 4344
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
                if la_ == 1:
                    self.state = 4345
                    localctx.n = self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 4346
                    self.match(TeradataSQLParser.NULL)
                    pass


                pass
            elif token in [886]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4349
                self.match(TeradataSQLParser.RESTRICTWORDS)
                self.state = 4350
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4353
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 4351
                    localctx.c = self.unqualified_name()
                    pass
                elif token in [274]:
                    self.state = 4352
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_foreign_server_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_name = None # Unqualified_nameContext

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLParser.SERVER, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_server_dbContext,0)


        def foreign_server_external_security_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_external_security_clauseContext,0)


        def foreign_server_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_using_clauseContext,0)


        def do_import_with(self):
            return self.getTypedRuleContext(TeradataSQLParser.Do_import_withContext,0)


        def do_export_with(self):
            return self.getTypedRuleContext(TeradataSQLParser.Do_export_withContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_foreign_server_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_foreign_server_stat" ):
                listener.enterCreate_foreign_server_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_foreign_server_stat" ):
                listener.exitCreate_foreign_server_stat(self)




    def create_foreign_server_stat(self):

        localctx = TeradataSQLParser.Create_foreign_server_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_create_foreign_server_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4357
            self.match(TeradataSQLParser.CREATE)
            self.state = 4358
            self.match(TeradataSQLParser.FOREIGN)
            self.state = 4359
            self.match(TeradataSQLParser.SERVER)
            self.state = 4361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
            if la_ == 1:
                self.state = 4360
                self.td_server_db()


            self.state = 4363
            localctx.server_name = self.unqualified_name()
            self.state = 4365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 4364
                self.foreign_server_external_security_clause()


            self.state = 4368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 4367
                self.foreign_server_using_clause()


            self.state = 4380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.state = 4370
                self.do_import_with()
                self.state = 4373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4371
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4372
                    self.do_export_with()



            elif la_ == 2:
                self.state = 4375
                self.do_export_with()
                self.state = 4378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4376
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4377
                    self.do_import_with()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_external_security_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext

        def EXTERNAL(self):
            return self.getToken(TeradataSQLParser.EXTERNAL, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLParser.SECURITY, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLParser.TRUSTED, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def INVOKER(self):
            return self.getToken(TeradataSQLParser.INVOKER, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLParser.DEFINER, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_server_external_security_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_external_security_clause" ):
                listener.enterForeign_server_external_security_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_external_security_clause" ):
                listener.exitForeign_server_external_security_clause(self)




    def foreign_server_external_security_clause(self):

        localctx = TeradataSQLParser.Foreign_server_external_security_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_foreign_server_external_security_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4382
            self.match(TeradataSQLParser.EXTERNAL)
            self.state = 4383
            self.match(TeradataSQLParser.SECURITY)
            self.state = 4385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==624 or _la==713:
                self.state = 4384
                _la = self._input.LA(1)
                if not(_la==624 or _la==713):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4387
            self.match(TeradataSQLParser.TRUSTED)
            self.state = 4388
            localctx.authorization_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def foreign_server_using_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Foreign_server_using_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_using_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_server_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_using_clause" ):
                listener.enterForeign_server_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_using_clause" ):
                listener.exitForeign_server_using_clause(self)




    def foreign_server_using_clause(self):

        localctx = TeradataSQLParser.Foreign_server_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_foreign_server_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4390
            self.match(TeradataSQLParser.USING)
            self.state = 4392 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4391
                self.foreign_server_using_option()
                self.state = 4394 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1023 or _la==1192):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_using_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.foreign_option_value = None # Scalar_exprContext

        def foreign_server_option_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_option_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_server_using_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_using_option" ):
                listener.enterForeign_server_using_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_using_option" ):
                listener.exitForeign_server_using_option(self)




    def foreign_server_using_option(self):

        localctx = TeradataSQLParser.Foreign_server_using_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_foreign_server_using_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4396
            self.foreign_server_option_name()
            self.state = 4397
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 4398
            localctx.foreign_option_value = self.scalar_expr(0)
            self.state = 4399
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_operator_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def foreign_server_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_using_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_server_operator_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_operator_option" ):
                listener.enterForeign_server_operator_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_operator_option" ):
                listener.exitForeign_server_operator_option(self)




    def foreign_server_operator_option(self):

        localctx = TeradataSQLParser.Foreign_server_operator_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_foreign_server_operator_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4401
            self.function_name()
            self.state = 4403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 4402
                self.foreign_server_using_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_import_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(TeradataSQLParser.DO, 0)

        def IMPORT(self):
            return self.getToken(TeradataSQLParser.IMPORT, 0)

        def foreign_server_with_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_with_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_do_import_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_import_with" ):
                listener.enterDo_import_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_import_with" ):
                listener.exitDo_import_with(self)




    def do_import_with(self):

        localctx = TeradataSQLParser.Do_import_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_do_import_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4405
            self.match(TeradataSQLParser.DO)
            self.state = 4406
            self.match(TeradataSQLParser.IMPORT)
            self.state = 4407
            self.foreign_server_with_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Do_export_withContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(TeradataSQLParser.DO, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLParser.EXPORT, 0)

        def foreign_server_with_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_with_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_do_export_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_export_with" ):
                listener.enterDo_export_with(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_export_with" ):
                listener.exitDo_export_with(self)




    def do_export_with(self):

        localctx = TeradataSQLParser.Do_export_withContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_do_export_with)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4409
            self.match(TeradataSQLParser.DO)
            self.state = 4410
            self.match(TeradataSQLParser.EXPORT)
            self.state = 4411
            self.foreign_server_with_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_with_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def foreign_server_operator_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_server_operator_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_server_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_with_clause" ):
                listener.enterForeign_server_with_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_with_clause" ):
                listener.exitForeign_server_with_clause(self)




    def foreign_server_with_clause(self):

        localctx = TeradataSQLParser.Foreign_server_with_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_foreign_server_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4413
            self.match(TeradataSQLParser.WITH)
            self.state = 4414
            self.foreign_server_operator_option()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_server_option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINK(self):
            return self.getToken(TeradataSQLParser.LINK, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLParser.VERSION, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_server_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_server_option_name" ):
                listener.enterForeign_server_option_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_server_option_name" ):
                listener.exitForeign_server_option_name(self)




    def foreign_server_option_name(self):

        localctx = TeradataSQLParser.Foreign_server_option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_foreign_server_option_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4416
            _la = self._input.LA(1)
            if not(_la==1023 or _la==1192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_hash_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hash_index_name = None # Table_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts
            self.by_column_name = list() # of Unqualified_nameContexts
            self.order_column_name = list() # of Unqualified_nameContexts

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def HASH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.HASH)
            else:
                return self.getToken(TeradataSQLParser.HASH, i)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def table_option_index_form(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_option_index_formContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_option_index_formContext,i)


        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.BY)
            else:
                return self.getToken(TeradataSQLParser.BY, i)

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLParser.VALUES, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_hash_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_hash_index_stat" ):
                listener.enterCreate_hash_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_hash_index_stat" ):
                listener.exitCreate_hash_index_stat(self)




    def create_hash_index_stat(self):

        localctx = TeradataSQLParser.Create_hash_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_create_hash_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4418
            self.match(TeradataSQLParser.CREATE)
            self.state = 4419
            self.match(TeradataSQLParser.HASH)
            self.state = 4420
            self.match(TeradataSQLParser.INDEX)
            self.state = 4421
            localctx.hash_index_name = self.table_name()
            self.state = 4426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4422
                self.match(TeradataSQLParser.COMMA)
                self.state = 4423
                self.table_option_index_form()
                self.state = 4428
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4429
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 4430
            localctx._unqualified_name = self.unqualified_name()
            localctx.index_column_name.append(localctx._unqualified_name)
            self.state = 4435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4431
                self.match(TeradataSQLParser.COMMA)
                self.state = 4432
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 4437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4438
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 4439
            self.match(TeradataSQLParser.ON)
            self.state = 4440
            self.table_name()
            self.state = 4451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 4441
                self.match(TeradataSQLParser.BY)
                self.state = 4442
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4443
                localctx._unqualified_name = self.unqualified_name()
                localctx.by_column_name.append(localctx._unqualified_name)
                self.state = 4448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4444
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4445
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.by_column_name.append(localctx._unqualified_name)
                    self.state = 4450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 4453
                self.match(TeradataSQLParser.ORDER)
                self.state = 4454
                self.match(TeradataSQLParser.BY)
                self.state = 4470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,477,self._ctx)
                if la_ == 1:
                    self.state = 4455
                    self.match(TeradataSQLParser.VALUES)
                    pass

                elif la_ == 2:
                    self.state = 4457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==178 or _la==460:
                        self.state = 4456
                        _la = self._input.LA(1)
                        if not(_la==178 or _la==460):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4459
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 4460
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.order_column_name.append(localctx._unqualified_name)
                    self.state = 4465
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4461
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 4462
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.order_column_name.append(localctx._unqualified_name)
                        self.state = 4467
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4468
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,0)


        def EXTERNAL(self):
            return self.getToken(TeradataSQLParser.EXTERNAL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_role_stat" ):
                listener.enterCreate_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_role_stat" ):
                listener.exitCreate_role_stat(self)




    def create_role_stat(self):

        localctx = TeradataSQLParser.Create_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_create_role_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4474
            self.match(TeradataSQLParser.CREATE)
            self.state = 4476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 4475
                self.match(TeradataSQLParser.EXTERNAL)


            self.state = 4478
            self.match(TeradataSQLParser.ROLE)
            self.state = 4479
            self.role_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_table_primary_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_table_primary_form_statContext,0)


        def create_table_as_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_table_as_statContext,0)


        def create_queue_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_queue_table_statContext,0)


        def create_global_temporary_trace_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_global_temporary_trace_table_statContext,0)


        def create_foreign_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_foreign_table_statContext,0)


        def create_error_table_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_error_table_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stat" ):
                listener.enterCreate_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stat" ):
                listener.exitCreate_table_stat(self)




    def create_table_stat(self):

        localctx = TeradataSQLParser.Create_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_create_table_stat)
        try:
            self.state = 4487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,480,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4481
                self.create_table_primary_form_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4482
                self.create_table_as_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4483
                self.create_queue_table_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4484
                self.create_global_temporary_trace_table_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4485
                self.create_foreign_table_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4486
                self.create_error_table_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_primary_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_definitionContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def CT(self):
            return self.getToken(TeradataSQLParser.CT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_optionContext,i)


        def index_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Index_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Index_definitionContext,i)


        def table_preservation(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_preservationContext,0)


        def table_kind(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_kindContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_table_primary_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_primary_form_stat" ):
                listener.enterCreate_table_primary_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_primary_form_stat" ):
                listener.exitCreate_table_primary_form_stat(self)




    def create_table_primary_form_stat(self):

        localctx = TeradataSQLParser.Create_table_primary_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_create_table_primary_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 4489
                self.match(TeradataSQLParser.CREATE)
                self.state = 4491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261 or _la==372 or _la==469 or _la==687:
                    self.state = 4490
                    self.table_kind()


                self.state = 4493
                self.match(TeradataSQLParser.TABLE)
                pass
            elif token in [90]:
                self.state = 4494
                self.match(TeradataSQLParser.CT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4497
            self.table_name()
            self.state = 4502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4498
                self.match(TeradataSQLParser.COMMA)
                self.state = 4499
                self.table_option()
                self.state = 4504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4505
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 4506
            self.column_definition()
            self.state = 4511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4507
                self.match(TeradataSQLParser.COMMA)
                self.state = 4508
                self.column_definition()
                self.state = 4513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4514
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 4525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192 or _la==268 or _la==308 or _la==448 or _la==840:
                self.state = 4515
                self.index_definition()
                self.state = 4522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==192 or _la==268 or _la==308 or _la==448 or _la==840 or _la==1208:
                    self.state = 4517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4516
                        self.match(TeradataSQLParser.COMMA)


                    self.state = 4519
                    self.index_definition()
                    self.state = 4524
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 4527
                self.table_preservation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_as_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_table_name = None # Table_nameContext

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def DATA(self):
            return self.getToken(TeradataSQLParser.DATA, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def CT(self):
            return self.getToken(TeradataSQLParser.CT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_exprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_optionContext,i)


        def ctas_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Ctas_column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Ctas_column_definitionContext,i)


        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.NO)
            else:
                return self.getToken(TeradataSQLParser.NO, i)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def index_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Index_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Index_definitionContext,i)


        def table_preservation(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_preservationContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLParser.STAT, 0)

        def table_kind(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_kindContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_table_as_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_as_stat" ):
                listener.enterCreate_table_as_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_as_stat" ):
                listener.exitCreate_table_as_stat(self)




    def create_table_as_stat(self):

        localctx = TeradataSQLParser.Create_table_as_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_create_table_as_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 4530
                self.match(TeradataSQLParser.CREATE)
                self.state = 4532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261 or _la==372 or _la==469 or _la==687:
                    self.state = 4531
                    self.table_kind()


                self.state = 4534
                self.match(TeradataSQLParser.TABLE)
                pass
            elif token in [90]:
                self.state = 4535
                self.match(TeradataSQLParser.CT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4538
            self.table_name()
            self.state = 4543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4539
                self.match(TeradataSQLParser.COMMA)
                self.state = 4540
                self.table_option()
                self.state = 4545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4546
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4547
                self.ctas_column_definition()
                self.state = 4552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4548
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4549
                    self.ctas_column_definition()
                    self.state = 4554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4555
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 4559
            self.match(TeradataSQLParser.AS)
            self.state = 4568
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 4560
                localctx.source_table_name = self.table_name()
                pass
            elif token in [1213]:
                self.state = 4561
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4562
                    self.with_request_modifier()


                self.state = 4565
                self.query_expr(0)
                self.state = 4566
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4570
            self.match(TeradataSQLParser.WITH)
            self.state = 4572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 4571
                self.match(TeradataSQLParser.NO)


            self.state = 4574
            self.match(TeradataSQLParser.DATA)
            self.state = 4580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 4575
                self.match(TeradataSQLParser.AND)
                self.state = 4577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 4576
                    self.match(TeradataSQLParser.NO)


                self.state = 4579
                _la = self._input.LA(1)
                if not(_la==395 or _la==937 or _la==939):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4592
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192 or _la==268 or _la==308 or _la==448 or _la==840:
                self.state = 4582
                self.index_definition()
                self.state = 4589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==192 or _la==268 or _la==308 or _la==448 or _la==840 or _la==1208:
                    self.state = 4584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4583
                        self.match(TeradataSQLParser.COMMA)


                    self.state = 4586
                    self.index_definition()
                    self.state = 4591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 4594
                self.table_preservation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_queue_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def QUEUE(self):
            return self.getToken(TeradataSQLParser.QUEUE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def qits_definition(self):
            return self.getTypedRuleContext(TeradataSQLParser.Qits_definitionContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def CT(self):
            return self.getToken(TeradataSQLParser.CT, 0)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_optionContext,i)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_definitionContext,i)


        def column_constraint_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_constraint_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_constraint_attributeContext,i)


        def index_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Index_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Index_definitionContext,i)


        def table_kind(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_kindContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_queue_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_queue_table_stat" ):
                listener.enterCreate_queue_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_queue_table_stat" ):
                listener.exitCreate_queue_table_stat(self)




    def create_queue_table_stat(self):

        localctx = TeradataSQLParser.Create_queue_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_create_queue_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.state = 4597
                self.match(TeradataSQLParser.CREATE)
                self.state = 4599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261 or _la==372 or _la==469 or _la==687:
                    self.state = 4598
                    self.table_kind()


                self.state = 4601
                self.match(TeradataSQLParser.TABLE)
                pass
            elif token in [90]:
                self.state = 4602
                self.match(TeradataSQLParser.CT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4605
            self.table_name()
            self.state = 4606
            self.match(TeradataSQLParser.COMMA)
            self.state = 4607
            self.match(TeradataSQLParser.QUEUE)
            self.state = 4612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4608
                self.match(TeradataSQLParser.COMMA)
                self.state = 4609
                self.table_option()
                self.state = 4614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4615
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 4616
            self.qits_definition()
            self.state = 4621
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,506,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4617
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4618
                    self.column_definition() 
                self.state = 4623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,506,self._ctx)

            self.state = 4628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4624
                self.match(TeradataSQLParser.COMMA)
                self.state = 4625
                self.column_constraint_attribute()
                self.state = 4630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4631
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 4642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==192 or _la==268 or _la==308 or _la==448 or _la==840:
                self.state = 4632
                self.index_definition()
                self.state = 4639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==192 or _la==268 or _la==308 or _la==448 or _la==840 or _la==1208:
                    self.state = 4634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 4633
                        self.match(TeradataSQLParser.COMMA)


                    self.state = 4636
                    self.index_definition()
                    self.state = 4641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_global_temporary_trace_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def TRACE(self):
            return self.getToken(TeradataSQLParser.TRACE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def PROC_ID(self):
            return self.getToken(TeradataSQLParser.PROC_ID, 0)

        def BYTE(self):
            return self.getToken(TeradataSQLParser.BYTE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLParser.SEQUENCE, 0)

        def INTEGER(self):
            return self.getToken(TeradataSQLParser.INTEGER, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_optionContext,i)


        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,0)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_definitionContext,i)


        def table_preservation(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_preservationContext,0)


        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def MULTISET(self):
            return self.getToken(TeradataSQLParser.MULTISET, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_global_temporary_trace_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_global_temporary_trace_table_stat" ):
                listener.enterCreate_global_temporary_trace_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_global_temporary_trace_table_stat" ):
                listener.exitCreate_global_temporary_trace_table_stat(self)




    def create_global_temporary_trace_table_stat(self):

        localctx = TeradataSQLParser.Create_global_temporary_trace_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_create_global_temporary_trace_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4644
            self.match(TeradataSQLParser.CREATE)
            self.state = 4646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261 or _la==372:
                self.state = 4645
                _la = self._input.LA(1)
                if not(_la==261 or _la==372):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4648
            self.match(TeradataSQLParser.GLOBAL)
            self.state = 4649
            self.match(TeradataSQLParser.TEMPORARY)
            self.state = 4650
            self.match(TeradataSQLParser.TRACE)
            self.state = 4651
            self.match(TeradataSQLParser.TABLE)
            self.state = 4652
            self.table_name()
            self.state = 4657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4653
                self.match(TeradataSQLParser.COMMA)
                self.state = 4654
                self.table_option()
                self.state = 4659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4660
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 4661
            self.match(TeradataSQLParser.PROC_ID)
            self.state = 4662
            self.match(TeradataSQLParser.BYTE)
            self.state = 4664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4663
                self.type_precision()


            self.state = 4666
            self.match(TeradataSQLParser.COMMA)
            self.state = 4667
            self.match(TeradataSQLParser.SEQUENCE)
            self.state = 4668
            self.match(TeradataSQLParser.INTEGER)
            self.state = 4673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 4669
                self.match(TeradataSQLParser.COMMA)
                self.state = 4670
                self.column_definition()
                self.state = 4675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4676
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 4678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 4677
                self.table_preservation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_foreign_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def MULTISET(self):
            return self.getToken(TeradataSQLParser.MULTISET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_optionContext,i)


        def foreign_table_external_security_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_table_external_security_clauseContext,0)


        def location_column(self):
            return self.getTypedRuleContext(TeradataSQLParser.Location_columnContext,0)


        def foreign_table_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Foreign_table_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Foreign_table_optionContext,i)


        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLParser.PRIMARY, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def payload_column(self):
            return self.getTypedRuleContext(TeradataSQLParser.Payload_columnContext,0)


        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_definitionContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_foreign_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_foreign_table_stat" ):
                listener.enterCreate_foreign_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_foreign_table_stat" ):
                listener.exitCreate_foreign_table_stat(self)




    def create_foreign_table_stat(self):

        localctx = TeradataSQLParser.Create_foreign_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_create_foreign_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4680
            self.match(TeradataSQLParser.CREATE)
            self.state = 4682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 4681
                self.match(TeradataSQLParser.MULTISET)


            self.state = 4684
            self.match(TeradataSQLParser.FOREIGN)
            self.state = 4685
            self.match(TeradataSQLParser.TABLE)
            self.state = 4686
            self.table_name()
            self.state = 4691
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,517,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4687
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4688
                    self.table_option() 
                self.state = 4693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,517,self._ctx)

            self.state = 4696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 4694
                self.match(TeradataSQLParser.COMMA)
                self.state = 4695
                self.foreign_table_external_security_clause()


            self.state = 4714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4698
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4699
                self.location_column()
                self.state = 4700
                self.match(TeradataSQLParser.COMMA)
                self.state = 4710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,520,self._ctx)
                if la_ == 1:
                    self.state = 4701
                    self.payload_column()
                    pass

                elif la_ == 2:
                    self.state = 4702
                    self.column_definition()
                    self.state = 4707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4703
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 4704
                        self.column_definition()
                        self.state = 4709
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 4712
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 4716
            self.match(TeradataSQLParser.USING)
            self.state = 4717
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 4718
            self.location()
            self.state = 4722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1131)) & ~0x3f) == 0 and ((1 << (_la - 1131)) & 127) != 0):
                self.state = 4719
                self.foreign_table_option()
                self.state = 4724
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4725
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 4732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,524,self._ctx)
            if la_ == 1:
                self.state = 4727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4726
                    self.match(TeradataSQLParser.COMMA)


                self.state = 4729
                self.match(TeradataSQLParser.NO)
                self.state = 4730
                self.match(TeradataSQLParser.PRIMARY)
                self.state = 4731
                self.match(TeradataSQLParser.INDEX)


            self.state = 4740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840 or _la==1208:
                self.state = 4735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 4734
                    self.match(TeradataSQLParser.COMMA)


                self.state = 4737
                self.match(TeradataSQLParser.PARTITION)
                self.state = 4738
                self.match(TeradataSQLParser.BY)
                self.state = 4739
                self.match(TeradataSQLParser.COLUMN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_error_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.error_table_name = None # Table_nameContext
            self.data_table_name = None # Table_nameContext

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLParser.ERROR, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def RLS(self):
            return self.getToken(TeradataSQLParser.RLS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_error_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_error_table_stat" ):
                listener.enterCreate_error_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_error_table_stat" ):
                listener.exitCreate_error_table_stat(self)




    def create_error_table_stat(self):

        localctx = TeradataSQLParser.Create_error_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_create_error_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4742
            self.match(TeradataSQLParser.CREATE)
            self.state = 4743
            self.match(TeradataSQLParser.ERROR)
            self.state = 4744
            self.match(TeradataSQLParser.TABLE)
            self.state = 4746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 4745
                localctx.error_table_name = self.table_name()


            self.state = 4748
            self.match(TeradataSQLParser.FOR)
            self.state = 4749
            localctx.data_table_name = self.table_name()
            self.state = 4752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 4750
                self.match(TeradataSQLParser.NO)
                self.state = 4751
                self.match(TeradataSQLParser.RLS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def MULTISET(self):
            return self.getToken(TeradataSQLParser.MULTISET, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLParser.GLOBAL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def VOLATILE(self):
            return self.getToken(TeradataSQLParser.VOLATILE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_kind" ):
                listener.enterTable_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_kind" ):
                listener.exitTable_kind(self)




    def table_kind(self):

        localctx = TeradataSQLParser.Table_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_table_kind)
        self._la = 0 # Token type
        try:
            self.state = 4772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4754
                _la = self._input.LA(1)
                if not(_la==261 or _la==372):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4758
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [687]:
                    self.state = 4755
                    self.match(TeradataSQLParser.GLOBAL)
                    self.state = 4756
                    self.match(TeradataSQLParser.TEMPORARY)
                    pass
                elif token in [469]:
                    self.state = 4757
                    self.match(TeradataSQLParser.VOLATILE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4763
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [687]:
                    self.state = 4760
                    self.match(TeradataSQLParser.GLOBAL)
                    self.state = 4761
                    self.match(TeradataSQLParser.TEMPORARY)
                    pass
                elif token in [469]:
                    self.state = 4762
                    self.match(TeradataSQLParser.VOLATILE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4765
                _la = self._input.LA(1)
                if not(_la==261 or _la==372):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4766
                _la = self._input.LA(1)
                if not(_la==261 or _la==372):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4770
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [687]:
                    self.state = 4767
                    self.match(TeradataSQLParser.GLOBAL)
                    self.state = 4768
                    self.match(TeradataSQLParser.TEMPORARY)
                    pass
                elif token in [469]:
                    self.state = 4769
                    self.match(TeradataSQLParser.VOLATILE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table_name = None # Table_nameContext

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Map_specContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLParser.Fallback_protectionContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLParser.JOURNAL, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def LOG(self):
            return self.getToken(TeradataSQLParser.LOG, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.After_journalContext,0)


        def CHECKSUM(self):
            return self.getToken(TeradataSQLParser.CHECKSUM, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def OFF(self):
            return self.getToken(TeradataSQLParser.OFF, 0)

        def FREESPACE(self):
            return self.getToken(TeradataSQLParser.FREESPACE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLParser.PERCENT, 0)

        def mergeblockratio(self):
            return self.getTypedRuleContext(TeradataSQLParser.MergeblockratioContext,0)


        def datablocksize(self):
            return self.getTypedRuleContext(TeradataSQLParser.DatablocksizeContext,0)


        def block_compression(self):
            return self.getTypedRuleContext(TeradataSQLParser.Block_compressionContext,0)


        def table_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_isolated_loadingContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_option" ):
                listener.enterTable_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_option" ):
                listener.exitTable_option(self)




    def table_option(self):

        localctx = TeradataSQLParser.Table_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_table_option)
        self._la = 0 # Token type
        try:
            self.state = 4800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4774
                self.map_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4775
                self.fallback_protection()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4776
                self.match(TeradataSQLParser.WITH)
                self.state = 4777
                self.match(TeradataSQLParser.JOURNAL)
                self.state = 4778
                self.match(TeradataSQLParser.TABLE)
                self.state = 4779
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4780
                localctx.journal_table_name = self.table_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 4781
                    self.match(TeradataSQLParser.NO)


                self.state = 4784
                self.match(TeradataSQLParser.LOG)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4785
                self.before_journal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4786
                self.after_journal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 4787
                self.match(TeradataSQLParser.CHECKSUM)
                self.state = 4788
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4789
                _la = self._input.LA(1)
                if not(_la==111 or _la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 4790
                self.match(TeradataSQLParser.FREESPACE)
                self.state = 4791
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 4792
                self.integer_literal()
                self.state = 4794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 4793
                    self.match(TeradataSQLParser.PERCENT)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 4796
                self.mergeblockratio()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 4797
                self.datablocksize()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 4798
                self.block_compression()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 4799
                self.table_isolated_loading()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.period_name = None # Unqualified_nameContext
            self.period_begin_column = None # Unqualified_nameContext
            self.period_end_column = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def column_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_attributeContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLParser.ROW, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLParser.COMPRESS, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLParser.PERIOD, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def normalize_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Normalize_optionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)




    def column_definition(self):

        localctx = TeradataSQLParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.state = 4851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4802
                localctx.name = self.unqualified_name()
                self.state = 4806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,536,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4803
                        self.column_attribute() 
                    self.state = 4808
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,536,self._ctx)

                self.state = 4809
                self.data_type()
                self.state = 4813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 4810
                    self.column_attribute()
                    self.state = 4815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4816
                _la = self._input.LA(1)
                if not(_la==69 or _la==361):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4817
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4818
                localctx.name = self.unqualified_name()
                self.state = 4822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,538,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4819
                        self.column_attribute() 
                    self.state = 4824
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,538,self._ctx)

                self.state = 4825
                self.data_type()
                self.state = 4829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 4826
                    self.column_attribute()
                    self.state = 4831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4832
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 4838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 4834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 4833
                        self.match(TeradataSQLParser.NO)


                    self.state = 4836
                    self.match(TeradataSQLParser.AUTO)
                    self.state = 4837
                    self.match(TeradataSQLParser.COMPRESS)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4840
                self.match(TeradataSQLParser.PERIOD)
                self.state = 4841
                self.match(TeradataSQLParser.FOR)
                self.state = 4842
                localctx.period_name = self.unqualified_name()
                self.state = 4843
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4844
                localctx.period_begin_column = self.unqualified_name()
                self.state = 4845
                self.match(TeradataSQLParser.COMMA)
                self.state = 4846
                localctx.period_end_column = self.unqualified_name()
                self.state = 4847
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4849
                self.normalize_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4850
                self.table_constraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ctas_column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def column_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_attributeContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLParser.ROW, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLParser.COMPRESS, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def table_constraint(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_ctas_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtas_column_definition" ):
                listener.enterCtas_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtas_column_definition" ):
                listener.exitCtas_column_definition(self)




    def ctas_column_definition(self):

        localctx = TeradataSQLParser.Ctas_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_ctas_column_definition)
        self._la = 0 # Token type
        try:
            self.state = 4878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4853
                localctx.name = self.unqualified_name()
                self.state = 4857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 4854
                    self.column_attribute()
                    self.state = 4859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [69, 361]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4860
                _la = self._input.LA(1)
                if not(_la==69 or _la==361):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4861
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4862
                localctx.name = self.unqualified_name()
                self.state = 4866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 49)) & ~0x3f) == 0 and ((1 << (_la - 49)) & 4611686568225145929) != 0) or _la==161 or _la==169 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 144116287587483729) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & -9222809085819215871) != 0) or ((((_la - 489)) & ~0x3f) == 0 and ((1 << (_la - 489)) & -1) != 0) or ((((_la - 553)) & ~0x3f) == 0 and ((1 << (_la - 553)) & -1) != 0) or ((((_la - 617)) & ~0x3f) == 0 and ((1 << (_la - 617)) & -1) != 0) or ((((_la - 681)) & ~0x3f) == 0 and ((1 << (_la - 681)) & -1) != 0) or ((((_la - 745)) & ~0x3f) == 0 and ((1 << (_la - 745)) & -1) != 0) or ((((_la - 809)) & ~0x3f) == 0 and ((1 << (_la - 809)) & -1) != 0) or ((((_la - 873)) & ~0x3f) == 0 and ((1 << (_la - 873)) & -1) != 0) or ((((_la - 937)) & ~0x3f) == 0 and ((1 << (_la - 937)) & -1) != 0) or ((((_la - 1001)) & ~0x3f) == 0 and ((1 << (_la - 1001)) & -1) != 0) or ((((_la - 1065)) & ~0x3f) == 0 and ((1 << (_la - 1065)) & -1) != 0) or ((((_la - 1129)) & ~0x3f) == 0 and ((1 << (_la - 1129)) & -1) != 0) or _la==1193 or _la==1211:
                    self.state = 4863
                    self.column_attribute()
                    self.state = 4868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4869
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 4875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 4871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 4870
                        self.match(TeradataSQLParser.NO)


                    self.state = 4873
                    self.match(TeradataSQLParser.AUTO)
                    self.state = 4874
                    self.match(TeradataSQLParser.COMPRESS)


                pass
            elif token in [59, 74, 160, 308, 448]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4877
                self.table_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def UNIQUE(self):
            return self.getToken(TeradataSQLParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLParser.PRIMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def AMP(self):
            return self.getToken(TeradataSQLParser.AMP, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def partitioning_level(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Partitioning_levelContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Partitioning_levelContext,i)


        def index_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.Index_loadingContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def index_ordering(self):
            return self.getTypedRuleContext(TeradataSQLParser.Index_orderingContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_index_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_definition" ):
                listener.enterIndex_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_definition" ):
                listener.exitIndex_definition(self)




    def index_definition(self):

        localctx = TeradataSQLParser.Index_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_index_definition)
        self._la = 0 # Token type
        try:
            self.state = 4981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 4880
                    self.match(TeradataSQLParser.UNIQUE)


                self.state = 4884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==308:
                    self.state = 4883
                    self.match(TeradataSQLParser.PRIMARY)


                self.state = 4886
                self.match(TeradataSQLParser.INDEX)
                self.state = 4888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 4887
                    localctx.index_name = self.unqualified_name()


                self.state = 4890
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4891
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 4896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4892
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4893
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 4898
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4899
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4901
                self.match(TeradataSQLParser.NO)
                self.state = 4902
                self.match(TeradataSQLParser.PRIMARY)
                self.state = 4903
                self.match(TeradataSQLParser.INDEX)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4904
                self.match(TeradataSQLParser.PRIMARY)
                self.state = 4905
                self.match(TeradataSQLParser.AMP)
                self.state = 4907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==192:
                    self.state = 4906
                    self.match(TeradataSQLParser.INDEX)


                self.state = 4910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 4909
                    localctx.index_name = self.unqualified_name()


                self.state = 4912
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4913
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 4918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4914
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4915
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 4920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4921
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4923
                self.match(TeradataSQLParser.PARTITION)
                self.state = 4924
                self.match(TeradataSQLParser.BY)
                self.state = 4937
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [48, 69, 320]:
                    self.state = 4925
                    self.partitioning_level()
                    pass
                elif token in [1213]:
                    self.state = 4926
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 4927
                    self.partitioning_level()
                    self.state = 4932
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4928
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 4929
                        self.partitioning_level()
                        self.state = 4934
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4935
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4939
                self.match(TeradataSQLParser.UNIQUE)
                self.state = 4940
                self.match(TeradataSQLParser.INDEX)
                self.state = 4942
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
                if la_ == 1:
                    self.state = 4941
                    localctx.index_name = self.unqualified_name()


                self.state = 4955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 4944
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 4945
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 4950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 4946
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 4947
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.index_column_name.append(localctx._unqualified_name)
                        self.state = 4952
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 4953
                    self.match(TeradataSQLParser.CLOSE_PAR)


                self.state = 4958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4957
                    self.index_loading()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 4960
                self.match(TeradataSQLParser.INDEX)
                self.state = 4962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 4961
                    localctx.index_name = self.unqualified_name()


                self.state = 4964
                self.match(TeradataSQLParser.ALL)
                self.state = 4965
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 4966
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 4971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 4967
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 4968
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 4973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4974
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 4976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 4975
                    self.index_ordering()


                self.state = 4979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 4978
                    self.index_loading()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qits_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qits_column_name = None # Column_nameContext

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.TIMESTAMP, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.CURRENT_TIMESTAMP, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def type_precision(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Type_precisionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,i)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_time_zoneContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_qits_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQits_definition" ):
                listener.enterQits_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQits_definition" ):
                listener.exitQits_definition(self)




    def qits_definition(self):

        localctx = TeradataSQLParser.Qits_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_qits_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4983
            localctx.qits_column_name = self.column_name()
            self.state = 4984
            self.match(TeradataSQLParser.TIMESTAMP)
            self.state = 4986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4985
                self.type_precision()


            self.state = 4989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 4988
                self.with_time_zone()


            self.state = 4991
            self.match(TeradataSQLParser.NOT)
            self.state = 4992
            self.match(TeradataSQLParser.NULL)
            self.state = 4993
            self.match(TeradataSQLParser.DEFAULT)
            self.state = 4994
            self.match(TeradataSQLParser.CURRENT_TIMESTAMP)
            self.state = 4996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 4995
                self.type_precision()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_external_security_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext

        def EXTERNAL(self):
            return self.getToken(TeradataSQLParser.EXTERNAL, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLParser.SECURITY, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def TRUSTED(self):
            return self.getToken(TeradataSQLParser.TRUSTED, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLParser.INVOKER, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLParser.DEFINER, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_table_external_security_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_external_security_clause" ):
                listener.enterForeign_table_external_security_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_external_security_clause" ):
                listener.exitForeign_table_external_security_clause(self)




    def foreign_table_external_security_clause(self):

        localctx = TeradataSQLParser.Foreign_table_external_security_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_foreign_table_external_security_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4998
            self.match(TeradataSQLParser.EXTERNAL)
            self.state = 4999
            self.match(TeradataSQLParser.SECURITY)
            self.state = 5002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,569,self._ctx)
            if la_ == 1:
                self.state = 5000
                _la = self._input.LA(1)
                if not(_la==624 or _la==713):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5001
                self.match(TeradataSQLParser.TRUSTED)


            self.state = 5004
            localctx.authorization_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Location_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(TeradataSQLParser.LOCATION, 0)

        def VARCHAR(self):
            return self.getToken(TeradataSQLParser.VARCHAR, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,0)


        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLParser.UNICODE, 0)

        def CASESPECIFIC(self):
            return self.getToken(TeradataSQLParser.CASESPECIFIC, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_location_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocation_column" ):
                listener.enterLocation_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocation_column" ):
                listener.exitLocation_column(self)




    def location_column(self):

        localctx = TeradataSQLParser.Location_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_location_column)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5006
            self.match(TeradataSQLParser.LOCATION)
            self.state = 5007
            self.match(TeradataSQLParser.VARCHAR)
            self.state = 5008
            self.type_precision()
            self.state = 5009
            self.match(TeradataSQLParser.CHARACTER)
            self.state = 5010
            self.match(TeradataSQLParser.SET)
            self.state = 5011
            self.match(TeradataSQLParser.UNICODE)
            self.state = 5012
            self.match(TeradataSQLParser.CASESPECIFIC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Payload_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PAYLOAD(self):
            return self.getToken(TeradataSQLParser.PAYLOAD, 0)

        def JSON(self):
            return self.getToken(TeradataSQLParser.JSON, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,0)


        def inline_length(self):
            return self.getTypedRuleContext(TeradataSQLParser.Inline_lengthContext,0)


        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLParser.DATASET, 0)

        def STORAGE(self):
            return self.getToken(TeradataSQLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLParser.FORMAT, 0)

        def CSV(self):
            return self.getToken(TeradataSQLParser.CSV, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLParser.UNICODE, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLParser.LATIN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_payload_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPayload_column" ):
                listener.enterPayload_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPayload_column" ):
                listener.exitPayload_column(self)




    def payload_column(self):

        localctx = TeradataSQLParser.Payload_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_payload_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5014
            self.match(TeradataSQLParser.PAYLOAD)
            self.state = 5032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [720]:
                self.state = 5015
                self.match(TeradataSQLParser.JSON)
                self.state = 5016
                self.type_precision()
                self.state = 5017
                self.inline_length()
                self.state = 5018
                self.match(TeradataSQLParser.CHARACTER)
                self.state = 5019
                self.match(TeradataSQLParser.SET)
                self.state = 5020
                _la = self._input.LA(1)
                if not(_la==735 or _la==1015):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [607]:
                self.state = 5022
                self.match(TeradataSQLParser.DATASET)
                self.state = 5023
                self.type_precision()
                self.state = 5024
                self.inline_length()
                self.state = 5025
                self.match(TeradataSQLParser.STORAGE)
                self.state = 5026
                self.match(TeradataSQLParser.FORMAT)
                self.state = 5027
                self.match(TeradataSQLParser.CSV)
                self.state = 5028
                self.match(TeradataSQLParser.CHARACTER)
                self.state = 5029
                self.match(TeradataSQLParser.SET)
                self.state = 5030
                _la = self._input.LA(1)
                if not(_la==735 or _la==1015):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.path_pattern = None # Token
            self.manifest = None # Token
            self.encoding_format = None # Token
            self.stored_as = None # Token
            self.header = None # Token
            self.strip_exterior_spaces = None # Token
            self.strip_enclosing_char = None # Token

        def PATHPATTERN(self):
            return self.getToken(TeradataSQLParser.PATHPATTERN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def CHAR_STRING(self):
            return self.getToken(TeradataSQLParser.CHAR_STRING, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLParser.ROWFORMAT, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLParser.STOREDAS, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLParser.HEADER, 0)

        def STRIP_EXTERIOR_SPACES(self):
            return self.getToken(TeradataSQLParser.STRIP_EXTERIOR_SPACES, 0)

        def STRIP_ENCLOSING_CHAR(self):
            return self.getToken(TeradataSQLParser.STRIP_ENCLOSING_CHAR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_table_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_option" ):
                listener.enterForeign_table_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_option" ):
                listener.exitForeign_table_option(self)




    def foreign_table_option(self):

        localctx = TeradataSQLParser.Foreign_table_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_foreign_table_option)
        try:
            self.state = 5062
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1131]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5034
                self.match(TeradataSQLParser.PATHPATTERN)
                self.state = 5035
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5036
                localctx.path_pattern = self.match(TeradataSQLParser.CHAR_STRING)
                self.state = 5037
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5038
                self.match(TeradataSQLParser.MANIFEST)
                self.state = 5039
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5040
                localctx.manifest = self.match(TeradataSQLParser.CHAR_STRING)
                self.state = 5041
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1133]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5042
                self.match(TeradataSQLParser.ROWFORMAT)
                self.state = 5043
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5044
                localctx.encoding_format = self.match(TeradataSQLParser.CHAR_STRING)
                self.state = 5045
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5046
                self.match(TeradataSQLParser.STOREDAS)
                self.state = 5047
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5048
                localctx.stored_as = self.match(TeradataSQLParser.CHAR_STRING)
                self.state = 5049
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1135]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5050
                self.match(TeradataSQLParser.HEADER)
                self.state = 5051
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5052
                localctx.header = self.match(TeradataSQLParser.CHAR_STRING)
                self.state = 5053
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1136]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5054
                self.match(TeradataSQLParser.STRIP_EXTERIOR_SPACES)
                self.state = 5055
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5056
                localctx.strip_exterior_spaces = self.match(TeradataSQLParser.CHAR_STRING)
                self.state = 5057
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1137]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5058
                self.match(TeradataSQLParser.STRIP_ENCLOSING_CHAR)
                self.state = 5059
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5060
                localctx.strip_enclosing_char = self.match(TeradataSQLParser.CHAR_STRING)
                self.state = 5061
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_preservationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def COMMIT(self):
            return self.getToken(TeradataSQLParser.COMMIT, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLParser.ROWS, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLParser.PRESERVE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_preservation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_preservation" ):
                listener.enterTable_preservation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_preservation" ):
                listener.exitTable_preservation(self)




    def table_preservation(self):

        localctx = TeradataSQLParser.Table_preservationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_table_preservation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5064
            self.match(TeradataSQLParser.ON)
            self.state = 5065
            self.match(TeradataSQLParser.COMMIT)
            self.state = 5066
            _la = self._input.LA(1)
            if not(_la==115 or _la==307):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5067
            self.match(TeradataSQLParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MergeblockratioContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def MERGEBLOCKRATIO(self):
            return self.getToken(TeradataSQLParser.MERGEBLOCKRATIO, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLParser.PERCENT, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_mergeblockratio

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMergeblockratio" ):
                listener.enterMergeblockratio(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMergeblockratio" ):
                listener.exitMergeblockratio(self)




    def mergeblockratio(self):

        localctx = TeradataSQLParser.MergeblockratioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_mergeblockratio)
        self._la = 0 # Token type
        try:
            self.state = 5079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5069
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 5070
                self.match(TeradataSQLParser.MERGEBLOCKRATIO)
                pass
            elif token in [767]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5071
                self.match(TeradataSQLParser.MERGEBLOCKRATIO)
                self.state = 5072
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5073
                self.integer_literal()
                self.state = 5075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==300:
                    self.state = 5074
                    self.match(TeradataSQLParser.PERCENT)


                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5077
                self.match(TeradataSQLParser.NO)
                self.state = 5078
                self.match(TeradataSQLParser.MERGEBLOCKRATIO)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DatablocksizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data_block_size = None # Integer_literalContext

        def DATABLOCKSIZE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DATABLOCKSIZE)
            else:
                return self.getToken(TeradataSQLParser.DATABLOCKSIZE, i)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def MINIMUM(self):
            return self.getToken(TeradataSQLParser.MINIMUM, 0)

        def MAXIMUM(self):
            return self.getToken(TeradataSQLParser.MAXIMUM, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def BYTES(self):
            return self.getToken(TeradataSQLParser.BYTES, 0)

        def KBYTES(self):
            return self.getToken(TeradataSQLParser.KBYTES, 0)

        def KILOBYTES(self):
            return self.getToken(TeradataSQLParser.KILOBYTES, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_datablocksize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatablocksize" ):
                listener.enterDatablocksize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatablocksize" ):
                listener.exitDatablocksize(self)




    def datablocksize(self):

        localctx = TeradataSQLParser.DatablocksizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_datablocksize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5081
            self.match(TeradataSQLParser.DATABLOCKSIZE)
            self.state = 5082
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 5089
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 5083
                localctx.data_block_size = self.integer_literal()
                self.state = 5085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45 or _la==727 or _la==729:
                    self.state = 5084
                    _la = self._input.LA(1)
                    if not(_la==45 or _la==727 or _la==729):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [111, 239, 246]:
                self.state = 5087
                _la = self._input.LA(1)
                if not(_la==111 or _la==239 or _la==246):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5088
                self.match(TeradataSQLParser.DATABLOCKSIZE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_compressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Integer_literalContext

        def BLOCKCOMPRESSION(self):
            return self.getToken(TeradataSQLParser.BLOCKCOMPRESSION, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLParser.EQUALS_SIGN, i)

        def AUTOTEMP(self):
            return self.getToken(TeradataSQLParser.AUTOTEMP, 0)

        def MANUAL(self):
            return self.getToken(TeradataSQLParser.MANUAL, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLParser.ALWAYS, 0)

        def NEVER(self):
            return self.getToken(TeradataSQLParser.NEVER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def BLOCKCOMPRESSIONALGORITHM(self):
            return self.getToken(TeradataSQLParser.BLOCKCOMPRESSIONALGORITHM, 0)

        def BLOCKCOMPRESSIONLEVEL(self):
            return self.getToken(TeradataSQLParser.BLOCKCOMPRESSIONLEVEL, 0)

        def ZLIB(self):
            return self.getToken(TeradataSQLParser.ZLIB, 0)

        def ELZS_H(self):
            return self.getToken(TeradataSQLParser.ELZS_H, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DEFAULT)
            else:
                return self.getToken(TeradataSQLParser.DEFAULT, i)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_block_compression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_compression" ):
                listener.enterBlock_compression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_compression" ):
                listener.exitBlock_compression(self)




    def block_compression(self):

        localctx = TeradataSQLParser.Block_compressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_block_compression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5091
            self.match(TeradataSQLParser.BLOCKCOMPRESSION)
            self.state = 5092
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 5093
            _la = self._input.LA(1)
            if not(_la==502 or _la==544 or _la==754 or _la==791):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,576,self._ctx)
            if la_ == 1:
                self.state = 5094
                self.match(TeradataSQLParser.COMMA)
                self.state = 5095
                self.match(TeradataSQLParser.BLOCKCOMPRESSIONALGORITHM)
                self.state = 5096
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5097
                _la = self._input.LA(1)
                if not(_la==111 or _la==647 or _la==1065):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,578,self._ctx)
            if la_ == 1:
                self.state = 5100
                self.match(TeradataSQLParser.COMMA)
                self.state = 5101
                self.match(TeradataSQLParser.BLOCKCOMPRESSIONLEVEL)
                self.state = 5102
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5105
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1194]:
                    self.state = 5103
                    localctx.value = self.integer_literal()
                    pass
                elif token in [111]:
                    self.state = 5104
                    self.match(TeradataSQLParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_isolated_loadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_isolated_loadingContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def NONE(self):
            return self.getToken(TeradataSQLParser.NONE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_isolated_loading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_isolated_loading" ):
                listener.enterTable_isolated_loading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_isolated_loading" ):
                listener.exitTable_isolated_loading(self)




    def table_isolated_loading(self):

        localctx = TeradataSQLParser.Table_isolated_loadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_table_isolated_loading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5109
            self.with_isolated_loading()
            self.state = 5112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 5110
                self.match(TeradataSQLParser.FOR)
                self.state = 5111
                _la = self._input.LA(1)
                if not(_la==13 or _la==198 or _la==269):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Uppercase_phraseContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Casespecific_phraseContext,0)


        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Format_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Title_phraseContext,0)


        def default_value_control_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Default_value_control_phraseContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Character_set_phraseContext,0)


        def column_storage_attribute(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_storage_attributeContext,0)


        def column_constraint_attribute(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_constraint_attributeContext,0)


        def auto_column_attribute(self):
            return self.getTypedRuleContext(TeradataSQLParser.Auto_column_attributeContext,0)


        def identity_column_attribute(self):
            return self.getTypedRuleContext(TeradataSQLParser.Identity_column_attributeContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_column_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_attribute" ):
                listener.enterColumn_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_attribute" ):
                listener.exitColumn_attribute(self)




    def column_attribute(self):

        localctx = TeradataSQLParser.Column_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_column_attribute)
        try:
            self.state = 5124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,580,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5114
                self.uppercase_phrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5115
                self.casespecific_phrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5116
                self.format_phrase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5117
                self.title_phrase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5118
                self.default_value_control_phrase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5119
                self.character_set_phrase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5120
                self.column_storage_attribute()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5121
                self.column_constraint_attribute()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5122
                self.auto_column_attribute()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5123
                self.identity_column_attribute()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_storage_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.compress_udf = None # Table_nameContext
            self.decompress_udf = None # Table_nameContext

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLParser.COMPRESS, 0)

        def compressed_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Compressed_valueContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Compressed_valueContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def USING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.USING)
            else:
                return self.getToken(TeradataSQLParser.USING, i)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.DECOMPRESS, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_column_storage_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_storage_attribute" ):
                listener.enterColumn_storage_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_storage_attribute" ):
                listener.exitColumn_storage_attribute(self)




    def column_storage_attribute(self):

        localctx = TeradataSQLParser.Column_storage_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_column_storage_attribute)
        self._la = 0 # Token type
        try:
            self.state = 5150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,582,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5126
                self.match(TeradataSQLParser.NO)
                self.state = 5127
                self.match(TeradataSQLParser.COMPRESS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5128
                self.match(TeradataSQLParser.COMPRESS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5129
                self.match(TeradataSQLParser.COMPRESS)
                self.state = 5130
                self.compressed_value()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5131
                self.match(TeradataSQLParser.COMPRESS)
                self.state = 5132
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5133
                self.compressed_value()
                self.state = 5138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5134
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5135
                    self.compressed_value()
                    self.state = 5140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5141
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5143
                self.match(TeradataSQLParser.COMPRESS)
                self.state = 5144
                self.match(TeradataSQLParser.USING)
                self.state = 5145
                localctx.compress_udf = self.table_name()
                self.state = 5146
                self.match(TeradataSQLParser.DECOMPRESS)
                self.state = 5147
                self.match(TeradataSQLParser.USING)
                self.state = 5148
                localctx.decompress_udf = self.table_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compressed_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Float_literalContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.LiteralContext,0)


        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_compressed_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompressed_value" ):
                listener.enterCompressed_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompressed_value" ):
                listener.exitCompressed_value(self)




    def compressed_value(self):

        localctx = TeradataSQLParser.Compressed_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_compressed_value)
        try:
            self.state = 5158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,583,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5152
                self.match(TeradataSQLParser.MINUS_SIGN)
                self.state = 5153
                self.integer_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5154
                self.match(TeradataSQLParser.MINUS_SIGN)
                self.state = 5155
                self.float_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5156
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5157
                self.match(TeradataSQLParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraint_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.row_level_security_constraint_column_name = list() # of Unqualified_nameContexts

        def UNIQUE(self):
            return self.getToken(TeradataSQLParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(TeradataSQLParser.KEY, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLParser.CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def references(self):
            return self.getTypedRuleContext(TeradataSQLParser.ReferencesContext,0)


        def CONSTRAINT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CONSTRAINT)
            else:
                return self.getToken(TeradataSQLParser.CONSTRAINT, i)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_column_constraint_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint_attribute" ):
                listener.enterColumn_constraint_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint_attribute" ):
                listener.exitColumn_constraint_attribute(self)




    def column_constraint_attribute(self):

        localctx = TeradataSQLParser.Column_constraint_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_column_constraint_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 5160
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 5161
                localctx.constraint_name = self.unqualified_name()


            self.state = 5183
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [448]:
                self.state = 5164
                self.match(TeradataSQLParser.UNIQUE)
                pass
            elif token in [308]:
                self.state = 5165
                self.match(TeradataSQLParser.PRIMARY)
                self.state = 5166
                self.match(TeradataSQLParser.KEY)
                pass
            elif token in [59]:
                self.state = 5167
                self.match(TeradataSQLParser.CHECK)
                self.state = 5168
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5169
                self.logical_expr(0)
                self.state = 5170
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [325]:
                self.state = 5172
                self.references()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 5173
                localctx._unqualified_name = self.unqualified_name()
                localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                self.state = 5178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5174
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5175
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.row_level_security_constraint_column_name.append(localctx._unqualified_name)
                    self.state = 5180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5181
                self.match(TeradataSQLParser.CONSTRAINT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Auto_column_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO(self):
            return self.getToken(TeradataSQLParser.AUTO, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_auto_column_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_column_attribute" ):
                listener.enterAuto_column_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_column_attribute" ):
                listener.exitAuto_column_attribute(self)




    def auto_column_attribute(self):

        localctx = TeradataSQLParser.Auto_column_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_auto_column_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272:
                self.state = 5185
                self.match(TeradataSQLParser.NOT)


            self.state = 5188
            self.match(TeradataSQLParser.AUTO)
            self.state = 5189
            self.match(TeradataSQLParser.COLUMN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Identity_column_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.start_with = None # Id_column_valueContext
            self.increment_by = None # Id_column_valueContext
            self.minvalue = None # Id_column_valueContext
            self.maxvalue = None # Id_column_valueContext

        def GENERATED(self):
            return self.getToken(TeradataSQLParser.GENERATED, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def IDENTITY(self):
            return self.getToken(TeradataSQLParser.IDENTITY, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLParser.ALWAYS, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.BY)
            else:
                return self.getToken(TeradataSQLParser.BY, i)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def START(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.START)
            else:
                return self.getToken(TeradataSQLParser.START, i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.WITH)
            else:
                return self.getToken(TeradataSQLParser.WITH, i)

        def INCREMENT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.INCREMENT)
            else:
                return self.getToken(TeradataSQLParser.INCREMENT, i)

        def MINVALUE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.MINVALUE)
            else:
                return self.getToken(TeradataSQLParser.MINVALUE, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.NO)
            else:
                return self.getToken(TeradataSQLParser.NO, i)

        def MAXVALUE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.MAXVALUE)
            else:
                return self.getToken(TeradataSQLParser.MAXVALUE, i)

        def CYCLE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CYCLE)
            else:
                return self.getToken(TeradataSQLParser.CYCLE, i)

        def id_column_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Id_column_valueContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Id_column_valueContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_identity_column_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentity_column_attribute" ):
                listener.enterIdentity_column_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentity_column_attribute" ):
                listener.exitIdentity_column_attribute(self)




    def identity_column_attribute(self):

        localctx = TeradataSQLParser.Identity_column_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_identity_column_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5191
            self.match(TeradataSQLParser.GENERATED)
            self.state = 5195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [502]:
                self.state = 5192
                self.match(TeradataSQLParser.ALWAYS)
                pass
            elif token in [42]:
                self.state = 5193
                self.match(TeradataSQLParser.BY)
                self.state = 5194
                self.match(TeradataSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5197
            self.match(TeradataSQLParser.AS)
            self.state = 5198
            self.match(TeradataSQLParser.IDENTITY)
            self.state = 5199
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 5218 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5218
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,590,self._ctx)
                if la_ == 1:
                    self.state = 5200
                    self.match(TeradataSQLParser.START)
                    self.state = 5201
                    self.match(TeradataSQLParser.WITH)
                    self.state = 5202
                    localctx.start_with = self.id_column_value()
                    pass

                elif la_ == 2:
                    self.state = 5203
                    self.match(TeradataSQLParser.INCREMENT)
                    self.state = 5204
                    self.match(TeradataSQLParser.BY)
                    self.state = 5205
                    localctx.increment_by = self.id_column_value()
                    pass

                elif la_ == 3:
                    self.state = 5206
                    self.match(TeradataSQLParser.MINVALUE)
                    self.state = 5207
                    localctx.minvalue = self.id_column_value()
                    pass

                elif la_ == 4:
                    self.state = 5208
                    self.match(TeradataSQLParser.NO)
                    self.state = 5209
                    self.match(TeradataSQLParser.MINVALUE)
                    pass

                elif la_ == 5:
                    self.state = 5210
                    self.match(TeradataSQLParser.MAXVALUE)
                    self.state = 5211
                    localctx.maxvalue = self.id_column_value()
                    pass

                elif la_ == 6:
                    self.state = 5212
                    self.match(TeradataSQLParser.NO)
                    self.state = 5213
                    self.match(TeradataSQLParser.MAXVALUE)
                    pass

                elif la_ == 7:
                    self.state = 5215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 5214
                        self.match(TeradataSQLParser.NO)


                    self.state = 5217
                    self.match(TeradataSQLParser.CYCLE)
                    pass


                self.state = 5220 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==101 or _la==268 or _la==392 or _la==702 or _la==761 or _la==772):
                    break

            self.state = 5222
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_column_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLParser.PLUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_id_column_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_column_value" ):
                listener.enterId_column_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_column_value" ):
                listener.exitId_column_value(self)




    def id_column_value(self):

        localctx = TeradataSQLParser.Id_column_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_id_column_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1221 or _la==1222:
                self.state = 5224
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5227
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Normalize_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unqualified_name = None # Unqualified_nameContext
            self.normalize_ignore_column_name = list() # of Unqualified_nameContexts
            self.normalize_column = None # Unqualified_nameContext

        def NORMALIZE(self):
            return self.getToken(TeradataSQLParser.NORMALIZE, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ON)
            else:
                return self.getToken(TeradataSQLParser.ON, i)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def BUT(self):
            return self.getToken(TeradataSQLParser.BUT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLParser.MEETS, 0)

        def OR(self):
            return self.getToken(TeradataSQLParser.OR, 0)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLParser.OVERLAPS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_normalize_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize_option" ):
                listener.enterNormalize_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize_option" ):
                listener.exitNormalize_option(self)




    def normalize_option(self):

        localctx = TeradataSQLParser.Normalize_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_normalize_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5229
            self.match(TeradataSQLParser.NORMALIZE)
            self.state = 5243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 5230
                self.match(TeradataSQLParser.ALL)
                self.state = 5231
                self.match(TeradataSQLParser.BUT)
                self.state = 5232
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5233
                localctx._unqualified_name = self.unqualified_name()
                localctx.normalize_ignore_column_name.append(localctx._unqualified_name)
                self.state = 5238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5234
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5235
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.normalize_ignore_column_name.append(localctx._unqualified_name)
                    self.state = 5240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5241
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 5245
            self.match(TeradataSQLParser.ON)
            self.state = 5246
            localctx.normalize_column = self.unqualified_name()
            self.state = 5258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 5247
                self.match(TeradataSQLParser.ON)
                self.state = 5256
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [765]:
                    self.state = 5248
                    self.match(TeradataSQLParser.MEETS)
                    self.state = 5249
                    self.match(TeradataSQLParser.OR)
                    self.state = 5250
                    self.match(TeradataSQLParser.OVERLAPS)
                    pass
                elif token in [296]:
                    self.state = 5251
                    self.match(TeradataSQLParser.OVERLAPS)
                    self.state = 5254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==290:
                        self.state = 5252
                        self.match(TeradataSQLParser.OR)
                        self.state = 5253
                        self.match(TeradataSQLParser.MEETS)


                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.constrained_column_name = list() # of Unqualified_nameContexts
            self.referencing_column = list() # of Unqualified_nameContexts

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLParser.CHECK, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(TeradataSQLParser.KEY, 0)

        def references(self):
            return self.getTypedRuleContext(TeradataSQLParser.ReferencesContext,0)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def UNIQUE(self):
            return self.getToken(TeradataSQLParser.UNIQUE, 0)

        def PRIMARY(self):
            return self.getToken(TeradataSQLParser.PRIMARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = TeradataSQLParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 5260
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 5261
                localctx.constraint_name = self.unqualified_name()


            self.state = 5299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [308, 448]:
                self.state = 5267
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [448]:
                    self.state = 5264
                    self.match(TeradataSQLParser.UNIQUE)
                    pass
                elif token in [308]:
                    self.state = 5265
                    self.match(TeradataSQLParser.PRIMARY)
                    self.state = 5266
                    self.match(TeradataSQLParser.KEY)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5269
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5270
                localctx._unqualified_name = self.unqualified_name()
                localctx.constrained_column_name.append(localctx._unqualified_name)
                self.state = 5275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5271
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5272
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.constrained_column_name.append(localctx._unqualified_name)
                    self.state = 5277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5278
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [59]:
                self.state = 5280
                self.match(TeradataSQLParser.CHECK)
                self.state = 5281
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5282
                self.logical_expr(0)
                self.state = 5283
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [160]:
                self.state = 5285
                self.match(TeradataSQLParser.FOREIGN)
                self.state = 5286
                self.match(TeradataSQLParser.KEY)
                self.state = 5287
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5288
                localctx._unqualified_name = self.unqualified_name()
                localctx.referencing_column.append(localctx._unqualified_name)
                self.state = 5293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5289
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5290
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.referencing_column.append(localctx._unqualified_name)
                    self.state = 5295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5296
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 5297
                self.references()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.referenced_table_name = None # Table_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.referenced_column_name = list() # of Unqualified_nameContexts

        def REFERENCES(self):
            return self.getToken(TeradataSQLParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLParser.OPTION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferences" ):
                listener.enterReferences(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferences" ):
                listener.exitReferences(self)




    def references(self):

        localctx = TeradataSQLParser.ReferencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_references)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5301
            self.match(TeradataSQLParser.REFERENCES)
            self.state = 5308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 5302
                self.match(TeradataSQLParser.WITH)
                self.state = 5304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 5303
                    self.match(TeradataSQLParser.NO)


                self.state = 5306
                self.match(TeradataSQLParser.CHECK)
                self.state = 5307
                self.match(TeradataSQLParser.OPTION)


            self.state = 5310
            localctx.referenced_table_name = self.table_name()
            self.state = 5322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,606,self._ctx)
            if la_ == 1:
                self.state = 5311
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5312
                localctx._unqualified_name = self.unqualified_name()
                localctx.referenced_column_name.append(localctx._unqualified_name)
                self.state = 5317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5313
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5314
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.referenced_column_name.append(localctx._unqualified_name)
                    self.state = 5319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5320
                self.match(TeradataSQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_levelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constant = None # LiteralContext

        def partitioning_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Partitioning_exprContext,0)


        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def column_partition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_partitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_partitionContext,i)


        def ADD(self):
            return self.getToken(TeradataSQLParser.ADD, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.LiteralContext,0)


        def AUTO(self):
            return self.getToken(TeradataSQLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLParser.COMPRESS, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def BUT(self):
            return self.getToken(TeradataSQLParser.BUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_partitioning_level

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioning_level" ):
                listener.enterPartitioning_level(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioning_level" ):
                listener.exitPartitioning_level(self)




    def partitioning_level(self):

        localctx = TeradataSQLParser.Partitioning_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_partitioning_level)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,613,self._ctx)
            if la_ == 1:
                self.state = 5324
                self.partitioning_expr()
                pass

            elif la_ == 2:
                self.state = 5325
                self.match(TeradataSQLParser.COLUMN)
                self.state = 5331
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,608,self._ctx)
                if la_ == 1:
                    self.state = 5327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 5326
                        self.match(TeradataSQLParser.NO)


                    self.state = 5329
                    self.match(TeradataSQLParser.AUTO)
                    self.state = 5330
                    self.match(TeradataSQLParser.COMPRESS)


                pass

            elif la_ == 3:
                self.state = 5333
                self.match(TeradataSQLParser.COLUMN)
                self.state = 5339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268 or _la==543:
                    self.state = 5335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 5334
                        self.match(TeradataSQLParser.NO)


                    self.state = 5337
                    self.match(TeradataSQLParser.AUTO)
                    self.state = 5338
                    self.match(TeradataSQLParser.COMPRESS)


                self.state = 5343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 5341
                    self.match(TeradataSQLParser.ALL)
                    self.state = 5342
                    self.match(TeradataSQLParser.BUT)


                self.state = 5345
                self.column_partition()
                self.state = 5350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,612,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5346
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 5347
                        self.column_partition() 
                    self.state = 5352
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,612,self._ctx)

                pass


            self.state = 5357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 5355
                self.match(TeradataSQLParser.ADD)
                self.state = 5356
                localctx.constant = self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_partitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unqualified_name = None # Unqualified_nameContext
            self.partitioning_column_name = list() # of Unqualified_nameContexts

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def AUTO(self):
            return self.getToken(TeradataSQLParser.AUTO, 0)

        def COMPRESS(self):
            return self.getToken(TeradataSQLParser.COMPRESS, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def ROW(self):
            return self.getToken(TeradataSQLParser.ROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_column_partition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_partition" ):
                listener.enterColumn_partition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_partition" ):
                listener.exitColumn_partition(self)




    def column_partition(self):

        localctx = TeradataSQLParser.Column_partitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_column_partition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5359
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 5361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==361:
                self.state = 5360
                _la = self._input.LA(1)
                if not(_la==69 or _la==361):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 5363
                localctx._unqualified_name = self.unqualified_name()
                localctx.partitioning_column_name.append(localctx._unqualified_name)
                pass
            elif token in [1213]:
                self.state = 5364
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5365
                localctx._unqualified_name = self.unqualified_name()
                localctx.partitioning_column_name.append(localctx._unqualified_name)
                self.state = 5370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5366
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5367
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.partitioning_column_name.append(localctx._unqualified_name)
                    self.state = 5372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5373
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268 or _la==543:
                self.state = 5378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 5377
                    self.match(TeradataSQLParser.NO)


                self.state = 5380
                self.match(TeradataSQLParser.AUTO)
                self.state = 5381
                self.match(TeradataSQLParser.COMPRESS)


            self.state = 5384
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_type_structured_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_type_structured_form_statContext,0)


        def create_type_distinct_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_type_distinct_form_statContext,0)


        def create_type_array_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_type_array_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_type_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_stat" ):
                listener.enterCreate_type_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_stat" ):
                listener.exitCreate_type_stat(self)




    def create_type_stat(self):

        localctx = TeradataSQLParser.Create_type_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_create_type_stat)
        try:
            self.state = 5389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,620,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5386
                self.create_type_structured_form_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5387
                self.create_type_distinct_form_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5388
                self.create_type_array_form_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_structured_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def type_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Type_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Type_attribute_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def FINAL(self):
            return self.getToken(TeradataSQLParser.FINAL, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def INSTANTIABLE(self):
            return self.getToken(TeradataSQLParser.INSTANTIABLE, 0)

        def structured_method_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Structured_method_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Structured_method_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_type_structured_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_structured_form_stat" ):
                listener.enterCreate_type_structured_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_structured_form_stat" ):
                listener.exitCreate_type_structured_form_stat(self)




    def create_type_structured_form_stat(self):

        localctx = TeradataSQLParser.Create_type_structured_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_create_type_structured_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5391
            self.match(TeradataSQLParser.CREATE)
            self.state = 5392
            self.match(TeradataSQLParser.TYPE)
            self.state = 5394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,621,self._ctx)
            if la_ == 1:
                self.state = 5393
                self.sysudtlib()


            self.state = 5396
            self.udt_name()
            self.state = 5397
            self.match(TeradataSQLParser.AS)
            self.state = 5398
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 5399
            self.type_attribute_spec()
            self.state = 5404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 5400
                self.match(TeradataSQLParser.COMMA)
                self.state = 5401
                self.type_attribute_spec()
                self.state = 5406
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5407
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 5409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==710:
                self.state = 5408
                self.match(TeradataSQLParser.INSTANTIABLE)


            self.state = 5411
            self.match(TeradataSQLParser.NOT)
            self.state = 5412
            self.match(TeradataSQLParser.FINAL)
            self.state = 5421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199 or _la==243:
                self.state = 5413
                self.structured_method_spec()
                self.state = 5418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5414
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5415
                    self.structured_method_spec()
                    self.state = 5420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_distinct_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def FINAL(self):
            return self.getToken(TeradataSQLParser.FINAL, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def distinct_method_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Distinct_method_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_type_distinct_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_distinct_form_stat" ):
                listener.enterCreate_type_distinct_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_distinct_form_stat" ):
                listener.exitCreate_type_distinct_form_stat(self)




    def create_type_distinct_form_stat(self):

        localctx = TeradataSQLParser.Create_type_distinct_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_create_type_distinct_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5423
            self.match(TeradataSQLParser.CREATE)
            self.state = 5424
            self.match(TeradataSQLParser.TYPE)
            self.state = 5426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,626,self._ctx)
            if la_ == 1:
                self.state = 5425
                self.sysudtlib()


            self.state = 5428
            self.udt_name()
            self.state = 5429
            self.match(TeradataSQLParser.AS)
            self.state = 5430
            self.data_type()
            self.state = 5431
            self.match(TeradataSQLParser.FINAL)
            self.state = 5433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==199 or _la==243:
                self.state = 5432
                self.distinct_method_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_array_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_type_one_dimensional_array_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_type_one_dimensional_array_form_statContext,0)


        def create_type_one_dimensional_varray_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_type_one_dimensional_varray_form_statContext,0)


        def create_type_multidimensional_array_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_type_multidimensional_array_form_statContext,0)


        def create_type_multidimensional_varray_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Create_type_multidimensional_varray_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_type_array_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_array_form_stat" ):
                listener.enterCreate_type_array_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_array_form_stat" ):
                listener.exitCreate_type_array_form_stat(self)




    def create_type_array_form_stat(self):

        localctx = TeradataSQLParser.Create_type_array_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_create_type_array_form_stat)
        try:
            self.state = 5439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,628,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5435
                self.create_type_one_dimensional_array_form_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5436
                self.create_type_one_dimensional_varray_form_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5437
                self.create_type_multidimensional_array_form_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5438
                self.create_type_multidimensional_varray_form_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_one_dimensional_array_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_of_elements = None # Integer_literalContext

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def ARRAY(self):
            return self.getToken(TeradataSQLParser.ARRAY, 0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.OPEN_SQ_BRACKET, 0)

        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.CLOSE_SQ_BRACKET, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_type_one_dimensional_array_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_one_dimensional_array_form_stat" ):
                listener.enterCreate_type_one_dimensional_array_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_one_dimensional_array_form_stat" ):
                listener.exitCreate_type_one_dimensional_array_form_stat(self)




    def create_type_one_dimensional_array_form_stat(self):

        localctx = TeradataSQLParser.Create_type_one_dimensional_array_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_create_type_one_dimensional_array_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5441
            self.match(TeradataSQLParser.CREATE)
            self.state = 5442
            self.match(TeradataSQLParser.TYPE)
            self.state = 5444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,629,self._ctx)
            if la_ == 1:
                self.state = 5443
                self.sysudtlib()


            self.state = 5446
            self.udt_name()
            self.state = 5447
            self.match(TeradataSQLParser.AS)
            self.state = 5448
            self.data_type()
            self.state = 5449
            self.match(TeradataSQLParser.ARRAY)
            self.state = 5450
            self.match(TeradataSQLParser.OPEN_SQ_BRACKET)
            self.state = 5451
            localctx.number_of_elements = self.integer_literal()
            self.state = 5452
            self.match(TeradataSQLParser.CLOSE_SQ_BRACKET)
            self.state = 5455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 5453
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 5454
                self.match(TeradataSQLParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_one_dimensional_varray_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_of_elements = None # Integer_literalContext

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def OF(self):
            return self.getToken(TeradataSQLParser.OF, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def VARYING(self):
            return self.getToken(TeradataSQLParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLParser.ARRAY, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLParser.VARRAY, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_type_one_dimensional_varray_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_one_dimensional_varray_form_stat" ):
                listener.enterCreate_type_one_dimensional_varray_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_one_dimensional_varray_form_stat" ):
                listener.exitCreate_type_one_dimensional_varray_form_stat(self)




    def create_type_one_dimensional_varray_form_stat(self):

        localctx = TeradataSQLParser.Create_type_one_dimensional_varray_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_create_type_one_dimensional_varray_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5457
            self.match(TeradataSQLParser.CREATE)
            self.state = 5458
            self.match(TeradataSQLParser.TYPE)
            self.state = 5460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,631,self._ctx)
            if la_ == 1:
                self.state = 5459
                self.sysudtlib()


            self.state = 5462
            self.udt_name()
            self.state = 5463
            self.match(TeradataSQLParser.AS)
            self.state = 5467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [467]:
                self.state = 5464
                self.match(TeradataSQLParser.VARYING)
                self.state = 5465
                self.match(TeradataSQLParser.ARRAY)
                pass
            elif token in [1021]:
                self.state = 5466
                self.match(TeradataSQLParser.VARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5469
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 5470
            localctx.number_of_elements = self.integer_literal()
            self.state = 5471
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 5472
            self.match(TeradataSQLParser.OF)
            self.state = 5473
            self.data_type()
            self.state = 5476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 5474
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 5475
                self.match(TeradataSQLParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_multidimensional_array_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def ARRAY(self):
            return self.getToken(TeradataSQLParser.ARRAY, 0)

        def multidimensional_array_dimension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Multidimensional_array_dimensionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Multidimensional_array_dimensionContext,i)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_type_multidimensional_array_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_multidimensional_array_form_stat" ):
                listener.enterCreate_type_multidimensional_array_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_multidimensional_array_form_stat" ):
                listener.exitCreate_type_multidimensional_array_form_stat(self)




    def create_type_multidimensional_array_form_stat(self):

        localctx = TeradataSQLParser.Create_type_multidimensional_array_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_create_type_multidimensional_array_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5478
            self.match(TeradataSQLParser.CREATE)
            self.state = 5479
            self.match(TeradataSQLParser.TYPE)
            self.state = 5481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,634,self._ctx)
            if la_ == 1:
                self.state = 5480
                self.sysudtlib()


            self.state = 5483
            self.udt_name()
            self.state = 5484
            self.match(TeradataSQLParser.AS)
            self.state = 5485
            self.data_type()
            self.state = 5486
            self.match(TeradataSQLParser.ARRAY)
            self.state = 5487
            self.multidimensional_array_dimension()
            self.state = 5489 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5488
                self.multidimensional_array_dimension()
                self.state = 5491 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1215):
                    break

            self.state = 5495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 5493
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 5494
                self.match(TeradataSQLParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_type_multidimensional_varray_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def multidimensional_varray_dimension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Multidimensional_varray_dimensionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Multidimensional_varray_dimensionContext,i)


        def OF(self):
            return self.getToken(TeradataSQLParser.OF, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def VARYING(self):
            return self.getToken(TeradataSQLParser.VARYING, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLParser.ARRAY, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLParser.VARRAY, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_type_multidimensional_varray_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type_multidimensional_varray_form_stat" ):
                listener.enterCreate_type_multidimensional_varray_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type_multidimensional_varray_form_stat" ):
                listener.exitCreate_type_multidimensional_varray_form_stat(self)




    def create_type_multidimensional_varray_form_stat(self):

        localctx = TeradataSQLParser.Create_type_multidimensional_varray_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_create_type_multidimensional_varray_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5497
            self.match(TeradataSQLParser.CREATE)
            self.state = 5498
            self.match(TeradataSQLParser.TYPE)
            self.state = 5500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,637,self._ctx)
            if la_ == 1:
                self.state = 5499
                self.sysudtlib()


            self.state = 5502
            self.udt_name()
            self.state = 5503
            self.match(TeradataSQLParser.AS)
            self.state = 5507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [467]:
                self.state = 5504
                self.match(TeradataSQLParser.VARYING)
                self.state = 5505
                self.match(TeradataSQLParser.ARRAY)
                pass
            elif token in [1021]:
                self.state = 5506
                self.match(TeradataSQLParser.VARRAY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5509
            self.multidimensional_varray_dimension()
            self.state = 5511 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5510
                self.multidimensional_varray_dimension()
                self.state = 5513 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1213):
                    break

            self.state = 5515
            self.match(TeradataSQLParser.OF)
            self.state = 5516
            self.data_type()
            self.state = 5519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 5517
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 5518
                self.match(TeradataSQLParser.NULL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_attribute_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Attribute_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_type_attribute_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_attribute_spec" ):
                listener.enterType_attribute_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_attribute_spec" ):
                listener.exitType_attribute_spec(self)




    def type_attribute_spec(self):

        localctx = TeradataSQLParser.Type_attribute_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_type_attribute_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5521
            self.attribute_name()
            self.state = 5522
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Structured_method_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cast_from_data_type = None # Data_typeContext
            self.specific_method_name = None # Method_nameContext

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def returns_parameter_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Returns_parameter_specContext,0)


        def method_language_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_language_specContext,0)


        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,i)


        def method_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_parameter_specContext,i)


        def CAST(self):
            return self.getToken(TeradataSQLParser.CAST, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def SELF(self):
            return self.getToken(TeradataSQLParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.AS)
            else:
                return self.getToken(TeradataSQLParser.AS, i)

        def RESULT(self):
            return self.getToken(TeradataSQLParser.RESULT, 0)

        def INSTANCE(self):
            return self.getToken(TeradataSQLParser.INSTANCE, 0)

        def CONSTRUCTOR(self):
            return self.getToken(TeradataSQLParser.CONSTRUCTOR, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def method_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_attrContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def LOCATOR(self):
            return self.getToken(TeradataSQLParser.LOCATOR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_structured_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructured_method_spec" ):
                listener.enterStructured_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructured_method_spec" ):
                listener.exitStructured_method_spec(self)




    def structured_method_spec(self):

        localctx = TeradataSQLParser.Structured_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_structured_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199:
                self.state = 5524
                _la = self._input.LA(1)
                if not(_la==75 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5527
            self.match(TeradataSQLParser.METHOD)
            self.state = 5529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.state = 5528
                self.sysudtlib()


            self.state = 5531
            self.method_name()
            self.state = 5532
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 5541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 5533
                self.method_parameter_spec()
                self.state = 5538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5534
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5535
                    self.method_parameter_spec()
                    self.state = 5540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5543
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 5544
            self.match(TeradataSQLParser.RETURNS)
            self.state = 5545
            self.returns_parameter_spec()
            self.state = 5553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 5546
                self.match(TeradataSQLParser.CAST)
                self.state = 5547
                self.match(TeradataSQLParser.FROM)
                self.state = 5548
                localctx.cast_from_data_type = self.data_type()
                self.state = 5551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5549
                    self.match(TeradataSQLParser.AS)
                    self.state = 5550
                    self.match(TeradataSQLParser.LOCATOR)




            self.state = 5560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,648,self._ctx)
            if la_ == 1:
                self.state = 5555
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 5557
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,647,self._ctx)
                if la_ == 1:
                    self.state = 5556
                    self.sysudtlib()


                self.state = 5559
                localctx.specific_method_name = self.method_name()


            self.state = 5565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==912:
                self.state = 5562
                self.match(TeradataSQLParser.SELF)
                self.state = 5563
                self.match(TeradataSQLParser.AS)
                self.state = 5564
                self.match(TeradataSQLParser.RESULT)


            self.state = 5591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,654,self._ctx)
            if la_ == 1:
                self.state = 5570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 5567
                    self.method_attr()
                    self.state = 5572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5573
                self.method_language_spec()
                self.state = 5575 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5574
                    self.method_attr()
                    self.state = 5577 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                pass

            elif la_ == 2:
                self.state = 5580 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5579
                    self.method_attr()
                    self.state = 5582 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                self.state = 5584
                self.method_language_spec()
                self.state = 5588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 5585
                    self.method_attr()
                    self.state = 5590
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distinct_method_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cast_from_data_type = None # Data_typeContext
            self.specific_method_name = None # Method_nameContext

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def method_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def returns_parameter_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Returns_parameter_specContext,0)


        def method_language_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_language_specContext,0)


        def INSTANCE(self):
            return self.getToken(TeradataSQLParser.INSTANCE, 0)

        def sysudtlib(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.SysudtlibContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,i)


        def method_parameter_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_parameter_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_parameter_specContext,i)


        def CAST(self):
            return self.getToken(TeradataSQLParser.CAST, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def SELF(self):
            return self.getToken(TeradataSQLParser.SELF, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.AS)
            else:
                return self.getToken(TeradataSQLParser.AS, i)

        def RESULT(self):
            return self.getToken(TeradataSQLParser.RESULT, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def method_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Method_attrContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Method_attrContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def LOCATOR(self):
            return self.getToken(TeradataSQLParser.LOCATOR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_distinct_method_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinct_method_spec" ):
                listener.enterDistinct_method_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinct_method_spec" ):
                listener.exitDistinct_method_spec(self)




    def distinct_method_spec(self):

        localctx = TeradataSQLParser.Distinct_method_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_distinct_method_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==199:
                self.state = 5593
                self.match(TeradataSQLParser.INSTANCE)


            self.state = 5596
            self.match(TeradataSQLParser.METHOD)
            self.state = 5598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,656,self._ctx)
            if la_ == 1:
                self.state = 5597
                self.sysudtlib()


            self.state = 5600
            self.method_name()
            self.state = 5601
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 5610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                self.state = 5602
                self.method_parameter_spec()
                self.state = 5607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5603
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5604
                    self.method_parameter_spec()
                    self.state = 5609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 5612
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 5613
            self.match(TeradataSQLParser.RETURNS)
            self.state = 5614
            self.returns_parameter_spec()
            self.state = 5622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 5615
                self.match(TeradataSQLParser.CAST)
                self.state = 5616
                self.match(TeradataSQLParser.FROM)
                self.state = 5617
                localctx.cast_from_data_type = self.data_type()
                self.state = 5620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 5618
                    self.match(TeradataSQLParser.AS)
                    self.state = 5619
                    self.match(TeradataSQLParser.LOCATOR)




            self.state = 5629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
            if la_ == 1:
                self.state = 5624
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 5626
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
                if la_ == 1:
                    self.state = 5625
                    self.sysudtlib()


                self.state = 5628
                localctx.specific_method_name = self.method_name()


            self.state = 5634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==912:
                self.state = 5631
                self.match(TeradataSQLParser.SELF)
                self.state = 5632
                self.match(TeradataSQLParser.AS)
                self.state = 5633
                self.match(TeradataSQLParser.RESULT)


            self.state = 5660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,668,self._ctx)
            if la_ == 1:
                self.state = 5639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 5636
                    self.method_attr()
                    self.state = 5641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5642
                self.method_language_spec()
                self.state = 5644 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5643
                    self.method_attr()
                    self.state = 5646 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                pass

            elif la_ == 2:
                self.state = 5649 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5648
                    self.method_attr()
                    self.state = 5651 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559):
                        break

                self.state = 5653
                self.method_language_spec()
                self.state = 5657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==117 or ((((_la - 268)) & ~0x3f) == 0 and ((1 << (_la - 268)) & 1073741841) != 0) or _la==352 or _la==384 or _la==559:
                    self.state = 5654
                    self.method_attr()
                    self.state = 5659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Parameter_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLParser.LOCATOR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_method_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_parameter_spec" ):
                listener.enterMethod_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_parameter_spec" ):
                listener.exitMethod_parameter_spec(self)




    def method_parameter_spec(self):

        localctx = TeradataSQLParser.Method_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_method_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,669,self._ctx)
            if la_ == 1:
                self.state = 5662
                self.parameter_name()


            self.state = 5665
            self.data_type()
            self.state = 5668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5666
                self.match(TeradataSQLParser.AS)
                self.state = 5667
                self.match(TeradataSQLParser.LOCATOR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_parameter_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLParser.LOCATOR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_returns_parameter_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_parameter_spec" ):
                listener.enterReturns_parameter_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_parameter_spec" ):
                listener.exitReturns_parameter_spec(self)




    def returns_parameter_spec(self):

        localctx = TeradataSQLParser.Returns_parameter_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_returns_parameter_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5670
            self.data_type()
            self.state = 5673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 5671
                self.match(TeradataSQLParser.AS)
                self.state = 5672
                self.match(TeradataSQLParser.LOCATOR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_language_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGUAGE(self):
            return self.getToken(TeradataSQLParser.LANGUAGE, 0)

        def C(self):
            return self.getToken(TeradataSQLParser.C, 0)

        def CPP(self):
            return self.getToken(TeradataSQLParser.CPP, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_method_language_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_language_spec" ):
                listener.enterMethod_language_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_language_spec" ):
                listener.exitMethod_language_spec(self)




    def method_language_spec(self):

        localctx = TeradataSQLParser.Method_language_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_method_language_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5675
            self.match(TeradataSQLParser.LANGUAGE)
            self.state = 5676
            _la = self._input.LA(1)
            if not(_la==557 or _la==598):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.specific_method_name = None # Method_nameContext

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def PARAMETER(self):
            return self.getToken(TeradataSQLParser.PARAMETER, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLParser.STYLE, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLParser.TD_GENERAL, 0)

        def DETERMINISTIC(self):
            return self.getToken(TeradataSQLParser.DETERMINISTIC, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLParser.CALLED, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.NULL)
            else:
                return self.getToken(TeradataSQLParser.NULL, i)

        def INPUT(self):
            return self.getToken(TeradataSQLParser.INPUT, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_method_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_attr" ):
                listener.enterMethod_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_attr" ):
                listener.exitMethod_attr(self)




    def method_attr(self):

        localctx = TeradataSQLParser.Method_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_method_attr)
        self._la = 0 # Token type
        try:
            self.state = 5701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5678
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 5680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,672,self._ctx)
                if la_ == 1:
                    self.state = 5679
                    self.sysudtlib()


                self.state = 5682
                localctx.specific_method_name = self.method_name()
                pass
            elif token in [298]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5683
                self.match(TeradataSQLParser.PARAMETER)
                self.state = 5684
                self.match(TeradataSQLParser.STYLE)
                self.state = 5685
                _la = self._input.LA(1)
                if not(_la==386 or _la==961):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [117, 272]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 5686
                    self.match(TeradataSQLParser.NOT)


                self.state = 5689
                self.match(TeradataSQLParser.DETERMINISTIC)
                pass
            elif token in [559]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5690
                self.match(TeradataSQLParser.CALLED)
                self.state = 5691
                self.match(TeradataSQLParser.ON)
                self.state = 5692
                self.match(TeradataSQLParser.NULL)
                self.state = 5693
                self.match(TeradataSQLParser.INPUT)
                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5694
                self.match(TeradataSQLParser.RETURNS)
                self.state = 5695
                self.match(TeradataSQLParser.NULL)
                self.state = 5696
                self.match(TeradataSQLParser.ON)
                self.state = 5697
                self.match(TeradataSQLParser.NULL)
                self.state = 5698
                self.match(TeradataSQLParser.INPUT)
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5699
                self.match(TeradataSQLParser.NO)
                self.state = 5700
                self.match(TeradataSQLParser.SQL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multidimensional_array_dimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.maximum_size = list() # of Integer_literalContexts

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.OPEN_SQ_BRACKET, 0)

        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.CLOSE_SQ_BRACKET, 0)

        def array_bounds(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_boundsContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_multidimensional_array_dimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultidimensional_array_dimension" ):
                listener.enterMultidimensional_array_dimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultidimensional_array_dimension" ):
                listener.exitMultidimensional_array_dimension(self)




    def multidimensional_array_dimension(self):

        localctx = TeradataSQLParser.Multidimensional_array_dimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_multidimensional_array_dimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5703
            self.match(TeradataSQLParser.OPEN_SQ_BRACKET)
            self.state = 5706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,675,self._ctx)
            if la_ == 1:
                self.state = 5704
                self.array_bounds()
                pass

            elif la_ == 2:
                self.state = 5705
                localctx._integer_literal = self.integer_literal()
                localctx.maximum_size.append(localctx._integer_literal)
                pass


            self.state = 5708
            self.match(TeradataSQLParser.CLOSE_SQ_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multidimensional_varray_dimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.maximum_size = list() # of Integer_literalContexts

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def array_bounds(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_boundsContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_multidimensional_varray_dimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultidimensional_varray_dimension" ):
                listener.enterMultidimensional_varray_dimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultidimensional_varray_dimension" ):
                listener.exitMultidimensional_varray_dimension(self)




    def multidimensional_varray_dimension(self):

        localctx = TeradataSQLParser.Multidimensional_varray_dimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_multidimensional_varray_dimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5710
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 5713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,676,self._ctx)
            if la_ == 1:
                self.state = 5711
                self.array_bounds()
                pass

            elif la_ == 2:
                self.state = 5712
                localctx._integer_literal = self.integer_literal()
                localctx.maximum_size.append(localctx._integer_literal)
                pass


            self.state = 5715
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_boundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lower_bound = None # BoundContext
            self.upper_bound = None # BoundContext

        def COLON(self):
            return self.getToken(TeradataSQLParser.COLON, 0)

        def bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.BoundContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.BoundContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_array_bounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_bounds" ):
                listener.enterArray_bounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_bounds" ):
                listener.exitArray_bounds(self)




    def array_bounds(self):

        localctx = TeradataSQLParser.Array_boundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_array_bounds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5717
            localctx.lower_bound = self.bound()
            self.state = 5718
            self.match(TeradataSQLParser.COLON)
            self.state = 5719
            localctx.upper_bound = self.bound()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBound" ):
                listener.enterBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBound" ):
                listener.exitBound(self)




    def bound(self):

        localctx = TeradataSQLParser.BoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_bound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1222:
                self.state = 5721
                self.match(TeradataSQLParser.MINUS_SIGN)


            self.state = 5724
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_user_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.from_database_name = None # Database_nameContext
            self.expire = None # Integer_literalContext

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def PASSWORD(self):
            return self.getToken(TeradataSQLParser.PASSWORD, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLParser.EQUALS_SIGN, i)

        def password(self):
            return self.getTypedRuleContext(TeradataSQLParser.PasswordContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLParser.EXPIRE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def user_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_create_user_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_user_stat" ):
                listener.enterCreate_user_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_user_stat" ):
                listener.exitCreate_user_stat(self)




    def create_user_stat(self):

        localctx = TeradataSQLParser.Create_user_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_create_user_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5726
            self.match(TeradataSQLParser.CREATE)
            self.state = 5727
            self.match(TeradataSQLParser.USER)
            self.state = 5728
            self.user_name()
            self.state = 5731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 5729
                self.match(TeradataSQLParser.FROM)
                self.state = 5730
                localctx.from_database_name = self.database_name()


            self.state = 5733
            self.match(TeradataSQLParser.AS)
            self.state = 5742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8589936672) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 576478619367374977) != 0) or _la==153 or _la==211 or ((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & 299067162755073) != 0) or ((((_la - 302)) & ~0x3f) == 0 and ((1 << (_la - 302)) & 515) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & 140810502799617) != 0) or _la==617 or _la==665:
                self.state = 5734
                self.user_attribute()
                self.state = 5739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,679,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5735
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 5736
                        self.user_attribute() 
                    self.state = 5741
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,679,self._ctx)



            self.state = 5745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 5744
                self.match(TeradataSQLParser.COMMA)


            self.state = 5747
            self.match(TeradataSQLParser.PASSWORD)
            self.state = 5748
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 5756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193, 1205]:
                self.state = 5749
                self.password()
                pass
            elif token in [1213]:
                self.state = 5750
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5751
                self.match(TeradataSQLParser.EXPIRE)
                self.state = 5752
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5753
                localctx.expire = self.integer_literal()
                self.state = 5754
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 5758
                self.match(TeradataSQLParser.COMMA)


            self.state = 5769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8589936672) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 576478619367374977) != 0) or _la==153 or _la==211 or ((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & 299067162755073) != 0) or ((((_la - 302)) & ~0x3f) == 0 and ((1 << (_la - 302)) & 515) != 0) or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & 140810502799617) != 0) or _la==617 or _la==665:
                self.state = 5761
                self.user_attribute()
                self.state = 5766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5762
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5763
                    self.user_attribute()
                    self.state = 5768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.startup_string = None # Char_string_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.account_string = list() # of Char_string_literalContexts
            self.timezone_string = None # Char_string_literalContext

        def STARTUP(self):
            return self.getToken(TeradataSQLParser.STARTUP, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def database_size_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_size_specContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def COLLATION(self):
            return self.getToken(TeradataSQLParser.COLLATION, 0)

        def collation_sequence(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collation_sequenceContext,0)


        def ACCOUNT(self):
            return self.getToken(TeradataSQLParser.ACCOUNT, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_default_mapContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLParser.Fallback_protectionContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.After_journalContext,0)


        def default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLParser.Default_journal_tableContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def DATEFORM(self):
            return self.getToken(TeradataSQLParser.DATEFORM, 0)

        def INTEGERDATE(self):
            return self.getToken(TeradataSQLParser.INTEGERDATE, 0)

        def ANSIDATE(self):
            return self.getToken(TeradataSQLParser.ANSIDATE, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLParser.UNICODE, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLParser.KANJISJIS, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,0)


        def NONE(self):
            return self.getToken(TeradataSQLParser.NONE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Profile_nameContext,0)


        def TRANSFORM(self):
            return self.getToken(TeradataSQLParser.TRANSFORM, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def transform_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Transform_specificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Transform_specificationContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def DBA(self):
            return self.getToken(TeradataSQLParser.DBA, 0)

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def user_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_constraintContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_constraintContext,i)


        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLParser.EXPORTWIDTH, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_user_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_attribute" ):
                listener.enterUser_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_attribute" ):
                listener.exitUser_attribute(self)




    def user_attribute(self):

        localctx = TeradataSQLParser.User_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_user_attribute)
        self._la = 0 # Token type
        try:
            self.state = 5862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,695,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5771
                self.match(TeradataSQLParser.STARTUP)
                self.state = 5772
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5773
                localctx.startup_string = self.char_string_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5774
                self.database_size_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5775
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 5776
                self.match(TeradataSQLParser.DATABASE)
                self.state = 5777
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5778
                self.database_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5779
                self.match(TeradataSQLParser.COLLATION)
                self.state = 5780
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5781
                self.collation_sequence()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5782
                self.match(TeradataSQLParser.ACCOUNT)
                self.state = 5783
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5793
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 5784
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.account_string.append(localctx._char_string_literal)
                    self.state = 5789
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,686,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5785
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 5786
                            localctx._char_string_literal = self.char_string_literal()
                            localctx.account_string.append(localctx._char_string_literal) 
                        self.state = 5791
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,686,self._ctx)

                    pass
                elif token in [274]:
                    self.state = 5792
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5795
                self.database_default_map()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5796
                self.fallback_protection()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5797
                self.before_journal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5798
                self.after_journal()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5799
                self.default_journal_table()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5800
                self.match(TeradataSQLParser.TIME)
                self.state = 5801
                self.match(TeradataSQLParser.ZONE)
                self.state = 5802
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5809
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 5803
                    self.match(TeradataSQLParser.LOCAL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203, 1221, 1222]:
                    self.state = 5805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1221 or _la==1222:
                        self.state = 5804
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 5807
                    localctx.timezone_string = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 5808
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5811
                self.match(TeradataSQLParser.DATEFORM)
                self.state = 5812
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5813
                _la = self._input.LA(1)
                if not(_la==17 or _la==203 or _la==274):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5814
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 5815
                self.match(TeradataSQLParser.CHARACTER)
                self.state = 5816
                self.match(TeradataSQLParser.SET)
                self.state = 5817
                _la = self._input.LA(1)
                if not(_la==725 or _la==735 or _la==1015):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5818
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 5819
                self.match(TeradataSQLParser.ROLE)
                self.state = 5820
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5825
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 5821
                    self.role_name()
                    pass
                elif token in [269]:
                    self.state = 5822
                    self.match(TeradataSQLParser.NONE)
                    pass
                elif token in [274]:
                    self.state = 5823
                    self.match(TeradataSQLParser.NULL)
                    pass
                elif token in [13]:
                    self.state = 5824
                    self.match(TeradataSQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5827
                self.match(TeradataSQLParser.PROFILE)
                self.state = 5828
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5831
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 5829
                    self.profile_name()
                    pass
                elif token in [274]:
                    self.state = 5830
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5833
                self.match(TeradataSQLParser.TRANSFORM)
                self.state = 5834
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5835
                self.transform_specification()
                self.state = 5840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5836
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5837
                    self.transform_specification()
                    self.state = 5842
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5843
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5845
                self.match(TeradataSQLParser.DBA)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5846
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 5847
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5848
                self.user_constraint()
                self.state = 5853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,693,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5849
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 5850
                        self.user_constraint() 
                    self.state = 5855
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,693,self._ctx)

                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5856
                self.match(TeradataSQLParser.EXPORTWIDTH)
                self.state = 5857
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 5860
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 5858
                    self.char_string_literal()
                    pass
                elif token in [111]:
                    self.state = 5859
                    self.match(TeradataSQLParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transform_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.group_name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_transform_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransform_specification" ):
                listener.enterTransform_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransform_specification" ):
                listener.exitTransform_specification(self)




    def transform_specification(self):

        localctx = TeradataSQLParser.Transform_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_transform_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5864
            self.data_type()
            self.state = 5865
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 5866
            localctx.group_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_level_security_constraint_column_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.level_name = list() # of Unqualified_nameContexts
            self.category_name = list() # of Unqualified_nameContexts

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DEFAULT)
            else:
                return self.getToken(TeradataSQLParser.DEFAULT, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_user_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_constraint" ):
                listener.enterUser_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_constraint" ):
                listener.exitUser_constraint(self)




    def user_constraint(self):

        localctx = TeradataSQLParser.User_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_user_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5868
            localctx.row_level_security_constraint_column_name = self.unqualified_name()
            self.state = 5895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,701,self._ctx)
            if la_ == 1:
                self.state = 5869
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,697,self._ctx)
                if la_ == 1:
                    self.state = 5870
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.level_name.append(localctx._unqualified_name)
                    self.state = 5872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==111:
                        self.state = 5871
                        self.match(TeradataSQLParser.DEFAULT)


                    pass

                elif la_ == 2:
                    self.state = 5874
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.category_name.append(localctx._unqualified_name)
                    pass


                self.state = 5887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5877
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5883
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,699,self._ctx)
                    if la_ == 1:
                        self.state = 5878
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.level_name.append(localctx._unqualified_name)
                        self.state = 5880
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==111:
                            self.state = 5879
                            self.match(TeradataSQLParser.DEFAULT)


                        pass

                    elif la_ == 2:
                        self.state = 5882
                        localctx._unqualified_name = self.unqualified_name()
                        localctx.category_name.append(localctx._unqualified_name)
                        pass


                    self.state = 5889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5890
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 5892
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5893
                self.match(TeradataSQLParser.NULL)
                self.state = 5894
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_stat" ):
                listener.enterDatabase_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_stat" ):
                listener.exitDatabase_stat(self)




    def database_stat(self):

        localctx = TeradataSQLParser.Database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_database_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5897
            self.match(TeradataSQLParser.DATABASE)
            self.state = 5898
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def DEL(self):
            return self.getToken(TeradataSQLParser.DEL, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_delete_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_database_stat" ):
                listener.enterDelete_database_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_database_stat" ):
                listener.exitDelete_database_stat(self)




    def delete_database_stat(self):

        localctx = TeradataSQLParser.Delete_database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_delete_database_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5900
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5901
            self.match(TeradataSQLParser.DATABASE)
            self.state = 5902
            self.database_name()
            self.state = 5904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 5903
                self.match(TeradataSQLParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_user_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,0)


        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def DEL(self):
            return self.getToken(TeradataSQLParser.DEL, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_delete_user_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_user_stat" ):
                listener.enterDelete_user_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_user_stat" ):
                listener.exitDelete_user_stat(self)




    def delete_user_stat(self):

        localctx = TeradataSQLParser.Delete_user_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_delete_user_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5906
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5907
            self.match(TeradataSQLParser.USER)
            self.state = 5908
            self.user_name()
            self.state = 5910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 5909
                self.match(TeradataSQLParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_authorization_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLParser.AUTHORIZATION, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_authorization_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_authorization_stat" ):
                listener.enterDrop_authorization_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_authorization_stat" ):
                listener.exitDrop_authorization_stat(self)




    def drop_authorization_stat(self):

        localctx = TeradataSQLParser.Drop_authorization_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_drop_authorization_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5912
            self.match(TeradataSQLParser.DROP)
            self.state = 5913
            self.match(TeradataSQLParser.AUTHORIZATION)
            self.state = 5914
            localctx.authorization_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_cast_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_data_type = None # Data_typeContext
            self.target_data_type = None # Data_typeContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def CAST(self):
            return self.getToken(TeradataSQLParser.CAST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,i)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_cast_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_cast_stat" ):
                listener.enterDrop_cast_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_cast_stat" ):
                listener.exitDrop_cast_stat(self)




    def drop_cast_stat(self):

        localctx = TeradataSQLParser.Drop_cast_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_drop_cast_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5916
            self.match(TeradataSQLParser.DROP)
            self.state = 5917
            self.match(TeradataSQLParser.CAST)
            self.state = 5921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 5918
                self.database_name()
                self.state = 5919
                self.match(TeradataSQLParser.DOT_)


            self.state = 5923
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 5924
            localctx.source_data_type = self.data_type()
            self.state = 5925
            self.match(TeradataSQLParser.AS)
            self.state = 5926
            localctx.target_data_type = self.data_type()
            self.state = 5927
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_constraint_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_constraint_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_constraint_stat" ):
                listener.enterDrop_constraint_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_constraint_stat" ):
                listener.exitDrop_constraint_stat(self)




    def drop_constraint_stat(self):

        localctx = TeradataSQLParser.Drop_constraint_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_drop_constraint_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5929
            self.match(TeradataSQLParser.DROP)
            self.state = 5930
            self.match(TeradataSQLParser.CONSTRAINT)
            self.state = 5931
            localctx.constraint_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database_stat" ):
                listener.enterDrop_database_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database_stat" ):
                listener.exitDrop_database_stat(self)




    def drop_database_stat(self):

        localctx = TeradataSQLParser.Drop_database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_drop_database_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5933
            self.match(TeradataSQLParser.DROP)
            self.state = 5934
            self.match(TeradataSQLParser.DATABASE)
            self.state = 5935
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_error_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data_table_name = None # Table_nameContext
            self.error_table_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLParser.ERROR, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_error_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_error_table_stat" ):
                listener.enterDrop_error_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_error_table_stat" ):
                listener.exitDrop_error_table_stat(self)




    def drop_error_table_stat(self):

        localctx = TeradataSQLParser.Drop_error_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_drop_error_table_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5937
            self.match(TeradataSQLParser.DROP)
            self.state = 5938
            self.match(TeradataSQLParser.ERROR)
            self.state = 5939
            self.match(TeradataSQLParser.TABLE)
            self.state = 5943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [159]:
                self.state = 5940
                self.match(TeradataSQLParser.FOR)
                self.state = 5941
                localctx.data_table_name = self.table_name()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 5942
                localctx.error_table_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_foreign_server_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLParser.SERVER, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_server_dbContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_foreign_server_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_foreign_server_stat" ):
                listener.enterDrop_foreign_server_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_foreign_server_stat" ):
                listener.exitDrop_foreign_server_stat(self)




    def drop_foreign_server_stat(self):

        localctx = TeradataSQLParser.Drop_foreign_server_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_drop_foreign_server_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5945
            self.match(TeradataSQLParser.DROP)
            self.state = 5946
            self.match(TeradataSQLParser.FOREIGN)
            self.state = 5947
            self.match(TeradataSQLParser.SERVER)
            self.state = 5949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
            if la_ == 1:
                self.state = 5948
                self.td_server_db()


            self.state = 5951
            localctx.server_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function_stat" ):
                listener.enterDrop_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function_stat" ):
                listener.exitDrop_function_stat(self)




    def drop_function_stat(self):

        localctx = TeradataSQLParser.Drop_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_drop_function_stat)
        self._la = 0 # Token type
        try:
            self.state = 5973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,709,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5953
                self.match(TeradataSQLParser.DROP)
                self.state = 5954
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 5955
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 5956
                self.function_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5957
                self.match(TeradataSQLParser.DROP)
                self.state = 5958
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 5959
                self.function_name()
                self.state = 5971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 5960
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 5961
                    self.data_type()
                    self.state = 5966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 5962
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 5963
                        self.data_type()
                        self.state = 5968
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 5969
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_function_mapping_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functin_mapping_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def MAPPING(self):
            return self.getToken(TeradataSQLParser.MAPPING, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_function_mapping_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function_mapping_stat" ):
                listener.enterDrop_function_mapping_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function_mapping_stat" ):
                listener.exitDrop_function_mapping_stat(self)




    def drop_function_mapping_stat(self):

        localctx = TeradataSQLParser.Drop_function_mapping_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_drop_function_mapping_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5975
            self.match(TeradataSQLParser.DROP)
            self.state = 5976
            self.match(TeradataSQLParser.FUNCTION)
            self.state = 5977
            self.match(TeradataSQLParser.MAPPING)
            self.state = 5978
            localctx.functin_mapping_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._unqualified_name = None # Unqualified_nameContext
            self.index_column_name = list() # of Unqualified_nameContexts
            self.index_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def index_ordering(self):
            return self.getTypedRuleContext(TeradataSQLParser.Index_orderingContext,0)


        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index_stat" ):
                listener.enterDrop_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index_stat" ):
                listener.exitDrop_index_stat(self)




    def drop_index_stat(self):

        localctx = TeradataSQLParser.Drop_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_drop_index_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5980
            self.match(TeradataSQLParser.DROP)
            self.state = 5981
            self.match(TeradataSQLParser.INDEX)
            self.state = 5994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.state = 5982
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 5983
                localctx._unqualified_name = self.unqualified_name()
                localctx.index_column_name.append(localctx._unqualified_name)
                self.state = 5988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 5984
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 5985
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.index_column_name.append(localctx._unqualified_name)
                    self.state = 5990
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5991
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 5993
                localctx.index_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 5996
                self.index_ordering()


            self.state = 5999
            self.match(TeradataSQLParser.ON)
            self.state = 6001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 6000
                self.match(TeradataSQLParser.TEMPORARY)


            self.state = 6003
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_glop_set_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.glop_set_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_glop_set_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_glop_set_stat" ):
                listener.enterDrop_glop_set_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_glop_set_stat" ):
                listener.exitDrop_glop_set_stat(self)




    def drop_glop_set_stat(self):

        localctx = TeradataSQLParser.Drop_glop_set_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_drop_glop_set_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6005
            self.match(TeradataSQLParser.DROP)
            self.state = 6006
            self.match(TeradataSQLParser.GLOP)
            self.state = 6007
            self.match(TeradataSQLParser.SET)
            self.state = 6008
            localctx.glop_set_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_join_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def JOIN(self):
            return self.getToken(TeradataSQLParser.JOIN, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_join_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_join_index_stat" ):
                listener.enterDrop_join_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_join_index_stat" ):
                listener.exitDrop_join_index_stat(self)




    def drop_join_index_stat(self):

        localctx = TeradataSQLParser.Drop_join_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_drop_join_index_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6010
            self.match(TeradataSQLParser.DROP)
            self.state = 6011
            self.match(TeradataSQLParser.JOIN)
            self.state = 6012
            self.match(TeradataSQLParser.INDEX)
            self.state = 6013
            localctx.join_index_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_hash_index_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_index_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def HASH(self):
            return self.getToken(TeradataSQLParser.HASH, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_hash_index_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_hash_index_stat" ):
                listener.enterDrop_hash_index_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_hash_index_stat" ):
                listener.exitDrop_hash_index_stat(self)




    def drop_hash_index_stat(self):

        localctx = TeradataSQLParser.Drop_hash_index_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_drop_hash_index_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6015
            self.match(TeradataSQLParser.DROP)
            self.state = 6016
            self.match(TeradataSQLParser.HASH)
            self.state = 6017
            self.match(TeradataSQLParser.INDEX)
            self.state = 6018
            localctx.join_index_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_macro_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLParser.MACRO, 0)

        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Macro_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_macro_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_macro_stat" ):
                listener.enterDrop_macro_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_macro_stat" ):
                listener.exitDrop_macro_stat(self)




    def drop_macro_stat(self):

        localctx = TeradataSQLParser.Drop_macro_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_drop_macro_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6020
            self.match(TeradataSQLParser.DROP)
            self.state = 6021
            self.match(TeradataSQLParser.MACRO)
            self.state = 6022
            self.macro_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_map_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def MAP(self):
            return self.getToken(TeradataSQLParser.MAP, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_map_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_map_stat" ):
                listener.enterDrop_map_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_map_stat" ):
                listener.exitDrop_map_stat(self)




    def drop_map_stat(self):

        localctx = TeradataSQLParser.Drop_map_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_drop_map_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6024
            self.match(TeradataSQLParser.DROP)
            self.state = 6025
            self.match(TeradataSQLParser.MAP)
            self.state = 6026
            localctx.map_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_method_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_method_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_method_stat" ):
                listener.enterDrop_method_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_method_stat" ):
                listener.exitDrop_method_stat(self)




    def drop_method_stat(self):

        localctx = TeradataSQLParser.Drop_method_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_drop_method_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6028
            self.match(TeradataSQLParser.DROP)
            self.state = 6029
            self.match(TeradataSQLParser.METHOD)
            self.state = 6031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,714,self._ctx)
            if la_ == 1:
                self.state = 6030
                self.sysudtlib()


            self.state = 6033
            self.method_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_ordering_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def ORDERING(self):
            return self.getToken(TeradataSQLParser.ORDERING, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_ordering_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_ordering_stat" ):
                listener.enterDrop_ordering_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_ordering_stat" ):
                listener.exitDrop_ordering_stat(self)




    def drop_ordering_stat(self):

        localctx = TeradataSQLParser.Drop_ordering_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_drop_ordering_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6035
            self.match(TeradataSQLParser.DROP)
            self.state = 6036
            self.match(TeradataSQLParser.ORDERING)
            self.state = 6037
            self.match(TeradataSQLParser.FOR)
            self.state = 6038
            self.udt_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_procedure_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_procedure_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure_stat" ):
                listener.enterDrop_procedure_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure_stat" ):
                listener.exitDrop_procedure_stat(self)




    def drop_procedure_stat(self):

        localctx = TeradataSQLParser.Drop_procedure_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_drop_procedure_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6040
            self.match(TeradataSQLParser.DROP)
            self.state = 6041
            self.match(TeradataSQLParser.PROCEDURE)
            self.state = 6042
            self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_profile_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Profile_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_profile_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_profile_stat" ):
                listener.enterDrop_profile_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_profile_stat" ):
                listener.exitDrop_profile_stat(self)




    def drop_profile_stat(self):

        localctx = TeradataSQLParser.Drop_profile_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_drop_profile_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6044
            self.match(TeradataSQLParser.DROP)
            self.state = 6045
            self.match(TeradataSQLParser.PROFILE)
            self.state = 6046
            self.profile_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_replication_group_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def REPLICATION(self):
            return self.getToken(TeradataSQLParser.REPLICATION, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLParser.GROUP, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_replication_group_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_replication_group_stat" ):
                listener.enterDrop_replication_group_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_replication_group_stat" ):
                listener.exitDrop_replication_group_stat(self)




    def drop_replication_group_stat(self):

        localctx = TeradataSQLParser.Drop_replication_group_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_drop_replication_group_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6048
            self.match(TeradataSQLParser.DROP)
            self.state = 6049
            self.match(TeradataSQLParser.REPLICATION)
            self.state = 6050
            self.match(TeradataSQLParser.GROUP)
            self.state = 6051
            localctx.name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_replication_ruleset_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.replication_group_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def REPLICATION(self):
            return self.getToken(TeradataSQLParser.REPLICATION, 0)

        def RULESET(self):
            return self.getToken(TeradataSQLParser.RULESET, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_replication_ruleset_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_replication_ruleset_stat" ):
                listener.enterDrop_replication_ruleset_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_replication_ruleset_stat" ):
                listener.exitDrop_replication_ruleset_stat(self)




    def drop_replication_ruleset_stat(self):

        localctx = TeradataSQLParser.Drop_replication_ruleset_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_drop_replication_ruleset_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6053
            self.match(TeradataSQLParser.DROP)
            self.state = 6054
            self.match(TeradataSQLParser.REPLICATION)
            self.state = 6055
            self.match(TeradataSQLParser.RULESET)
            self.state = 6056
            localctx.name = self.unqualified_name()
            self.state = 6057
            self.match(TeradataSQLParser.FOR)
            self.state = 6058
            localctx.replication_group_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_role_stat" ):
                listener.enterDrop_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_role_stat" ):
                listener.exitDrop_role_stat(self)




    def drop_role_stat(self):

        localctx = TeradataSQLParser.Drop_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_drop_role_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6060
            self.match(TeradataSQLParser.DROP)
            self.state = 6061
            self.match(TeradataSQLParser.ROLE)
            self.state = 6062
            self.role_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_schema_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.storage_format = None # Unqualified_nameContext
            self.schema_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLParser.SCHEMA, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_schema_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_schema_stat" ):
                listener.enterDrop_schema_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_schema_stat" ):
                listener.exitDrop_schema_stat(self)




    def drop_schema_stat(self):

        localctx = TeradataSQLParser.Drop_schema_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_drop_schema_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6064
            self.match(TeradataSQLParser.DROP)
            self.state = 6065
            localctx.storage_format = self.unqualified_name()
            self.state = 6066
            self.match(TeradataSQLParser.SCHEMA)
            self.state = 6068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,715,self._ctx)
            if la_ == 1:
                self.state = 6067
                self.sysudtlib()


            self.state = 6070
            localctx.schema_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statistics_optimizer_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def STAT(self):
            return self.getToken(TeradataSQLParser.STAT, 0)

        def STATS(self):
            return self.getToken(TeradataSQLParser.STATS, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def collection_source(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collection_sourceContext,0)


        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def stats_target_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Stats_target_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Stats_target_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_statistics_optimizer_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics_optimizer_form_stat" ):
                listener.enterDrop_statistics_optimizer_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics_optimizer_form_stat" ):
                listener.exitDrop_statistics_optimizer_form_stat(self)




    def drop_statistics_optimizer_form_stat(self):

        localctx = TeradataSQLParser.Drop_statistics_optimizer_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_drop_statistics_optimizer_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6072
            self.match(TeradataSQLParser.DROP)
            self.state = 6073
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,721,self._ctx)
            if la_ == 1:
                self.state = 6075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 6074
                    self.match(TeradataSQLParser.ON)


                self.state = 6077
                self.collection_source()
                self.state = 6086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==192 or _la==308 or _la==448:
                    self.state = 6078
                    self.stats_target_spec()
                    self.state = 6083
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6079
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 6080
                        self.stats_target_spec()
                        self.state = 6085
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 2:
                self.state = 6096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69 or _la==192 or _la==308 or _la==448:
                    self.state = 6088
                    self.stats_target_spec()
                    self.state = 6093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6089
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 6090
                        self.stats_target_spec()
                        self.state = 6095
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6098
                self.match(TeradataSQLParser.ON)
                self.state = 6099
                self.collection_source()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table_stat" ):
                listener.enterDrop_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table_stat" ):
                listener.exitDrop_table_stat(self)




    def drop_table_stat(self):

        localctx = TeradataSQLParser.Drop_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_drop_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6102
            self.match(TeradataSQLParser.DROP)
            self.state = 6104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 6103
                self.match(TeradataSQLParser.TEMPORARY)


            self.state = 6107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==160:
                self.state = 6106
                self.match(TeradataSQLParser.FOREIGN)


            self.state = 6109
            self.match(TeradataSQLParser.TABLE)
            self.state = 6110
            self.table_name()
            self.state = 6112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 6111
                self.match(TeradataSQLParser.ALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_transform_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.transform_group_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def TRANSFORM(self):
            return self.getToken(TeradataSQLParser.TRANSFORM, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_transform_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_transform_stat" ):
                listener.enterDrop_transform_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_transform_stat" ):
                listener.exitDrop_transform_stat(self)




    def drop_transform_stat(self):

        localctx = TeradataSQLParser.Drop_transform_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_drop_transform_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6114
            self.match(TeradataSQLParser.DROP)
            self.state = 6115
            self.match(TeradataSQLParser.TRANSFORM)
            self.state = 6119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,725,self._ctx)
            if la_ == 1:
                self.state = 6116
                self.database_name()
                self.state = 6117
                self.match(TeradataSQLParser.DOT_)


            self.state = 6123
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 6121
                localctx.transform_group_name = self.unqualified_name()
                pass
            elif token in [13]:
                self.state = 6122
                self.match(TeradataSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 6125
            self.match(TeradataSQLParser.FOR)
            self.state = 6126
            self.udt_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_trigger_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.trigger_name = None # Object_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLParser.TRIGGER, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_trigger_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger_stat" ):
                listener.enterDrop_trigger_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger_stat" ):
                listener.exitDrop_trigger_stat(self)




    def drop_trigger_stat(self):

        localctx = TeradataSQLParser.Drop_trigger_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_drop_trigger_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6128
            self.match(TeradataSQLParser.DROP)
            self.state = 6129
            self.match(TeradataSQLParser.TRIGGER)
            self.state = 6130
            localctx.trigger_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_type_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_type_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type_stat" ):
                listener.enterDrop_type_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type_stat" ):
                listener.exitDrop_type_stat(self)




    def drop_type_stat(self):

        localctx = TeradataSQLParser.Drop_type_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_drop_type_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6132
            self.match(TeradataSQLParser.DROP)
            self.state = 6133
            self.match(TeradataSQLParser.TYPE)
            self.state = 6134
            self.udt_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_user_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_user_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_user_stat" ):
                listener.enterDrop_user_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_user_stat" ):
                listener.exitDrop_user_stat(self)




    def drop_user_stat(self):

        localctx = TeradataSQLParser.Drop_user_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_drop_user_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6136
            self.match(TeradataSQLParser.DROP)
            self.state = 6137
            self.match(TeradataSQLParser.USER)
            self.state = 6138
            self.user_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_view_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_view_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view_stat" ):
                listener.enterDrop_view_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view_stat" ):
                listener.exitDrop_view_stat(self)




    def drop_view_stat(self):

        localctx = TeradataSQLParser.Drop_view_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_drop_view_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6140
            self.match(TeradataSQLParser.DROP)
            self.state = 6141
            self.match(TeradataSQLParser.VIEW)
            self.state = 6142
            localctx.view_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_zone_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.zone_name = None # Unqualified_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_zone_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_zone_stat" ):
                listener.enterDrop_zone_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_zone_stat" ):
                listener.exitDrop_zone_stat(self)




    def drop_zone_stat(self):

        localctx = TeradataSQLParser.Drop_zone_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_drop_zone_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6144
            self.match(TeradataSQLParser.DROP)
            self.state = 6145
            self.match(TeradataSQLParser.ZONE)
            self.state = 6146
            localctx.zone_name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_isolated_loading_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_band = None # Char_string_literalContext

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLParser.LOADING, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLParser.QUERY_BAND, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def CONCURRENT(self):
            return self.getToken(TeradataSQLParser.CONCURRENT, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLParser.OVERRIDE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLParser.SESSION, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_end_isolated_loading_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_isolated_loading_stat" ):
                listener.enterEnd_isolated_loading_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_isolated_loading_stat" ):
                listener.exitEnd_isolated_loading_stat(self)




    def end_isolated_loading_stat(self):

        localctx = TeradataSQLParser.End_isolated_loading_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_end_isolated_loading_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6148
            self.match(TeradataSQLParser.END)
            self.state = 6150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==587:
                self.state = 6149
                self.match(TeradataSQLParser.CONCURRENT)


            self.state = 6152
            self.match(TeradataSQLParser.ISOLATED)
            self.state = 6153
            self.match(TeradataSQLParser.LOADING)
            self.state = 6154
            self.match(TeradataSQLParser.FOR)
            self.state = 6155
            self.match(TeradataSQLParser.QUERY_BAND)
            self.state = 6156
            localctx.query_band = self.char_string_literal()
            self.state = 6159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==297:
                self.state = 6157
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 6158
                self.match(TeradataSQLParser.SESSION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint_name = None # Object_nameContext

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ON)
            else:
                return self.getToken(TeradataSQLParser.ON, i)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.OperationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.OperationContext,i)


        def DENIALS(self):
            return self.getToken(TeradataSQLParser.DENIALS, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLParser.TEXT, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.FOR)
            else:
                return self.getToken(TeradataSQLParser.FOR, i)

        def CONSTRAINT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CONSTRAINT)
            else:
                return self.getToken(TeradataSQLParser.CONSTRAINT, i)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,i)


        def logging_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Logging_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Logging_itemContext,i)


        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_end_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_logging_stat" ):
                listener.enterEnd_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_logging_stat" ):
                listener.exitEnd_logging_stat(self)




    def end_logging_stat(self):

        localctx = TeradataSQLParser.End_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_end_logging_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6161
            self.match(TeradataSQLParser.END)
            self.state = 6162
            self.match(TeradataSQLParser.LOGGING)
            self.state = 6164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==628:
                self.state = 6163
                self.match(TeradataSQLParser.DENIALS)


            self.state = 6168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6166
                self.match(TeradataSQLParser.WITH)
                self.state = 6167
                self.match(TeradataSQLParser.TEXT)


            self.state = 6170
            self.match(TeradataSQLParser.ON)
            self.state = 6180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 6171
                self.match(TeradataSQLParser.ALL)
                pass
            elif token in [14, 60, 86, 102, 115, 125, 127, 144, 172, 192, 198, 235, 297, 310, 325, 346, 358, 359, 370, 406, 435, 441, 442, 443, 453, 456, 468]:
                self.state = 6172
                self.operation()
                self.state = 6177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6173
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6174
                    self.operation()
                    self.state = 6179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 6185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,733,self._ctx)
            if la_ == 1:
                self.state = 6182
                self.match(TeradataSQLParser.FOR)
                self.state = 6183
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 6184
                localctx.constraint_name = self.object_name()


            self.state = 6190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 6187
                self.match(TeradataSQLParser.FOR)
                self.state = 6188
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 6189
                localctx.constraint_name = self.object_name()


            self.state = 6201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 6192
                self.match(TeradataSQLParser.BY)
                self.state = 6193
                self.user_name()
                self.state = 6198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6194
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6195
                    self.user_name()
                    self.state = 6200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 6203
                self.match(TeradataSQLParser.ON)
                self.state = 6204
                self.logging_item()
                self.state = 6209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6205
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6206
                    self.logging_item()
                    self.state = 6211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_query_capture_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLParser.CAPTURE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_end_query_capture_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_query_capture_stat" ):
                listener.enterEnd_query_capture_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_query_capture_stat" ):
                listener.exitEnd_query_capture_stat(self)




    def end_query_capture_stat(self):

        localctx = TeradataSQLParser.End_query_capture_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_end_query_capture_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6214
            self.match(TeradataSQLParser.END)
            self.state = 6215
            self.match(TeradataSQLParser.QUERY)
            self.state = 6216
            self.match(TeradataSQLParser.CAPTURE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def end_query_logging_on_items(self):
            return self.getTypedRuleContext(TeradataSQLParser.End_query_logging_on_itemsContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_end_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_query_logging_stat" ):
                listener.enterEnd_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_query_logging_stat" ):
                listener.exitEnd_query_logging_stat(self)




    def end_query_logging_stat(self):

        localctx = TeradataSQLParser.End_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_end_query_logging_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6218
            self.match(TeradataSQLParser.END)
            self.state = 6219
            self.match(TeradataSQLParser.QUERY)
            self.state = 6220
            self.match(TeradataSQLParser.LOGGING)
            self.state = 6221
            self.match(TeradataSQLParser.ON)
            self.state = 6222
            self.end_query_logging_on_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_query_logging_on_itemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def end_query_logging_all_rules(self):
            return self.getTypedRuleContext(TeradataSQLParser.End_query_logging_all_rulesContext,0)


        def query_logging_on_all(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_logging_on_allContext,0)


        def query_logging_on_users(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_logging_on_usersContext,0)


        def query_logging_on_application(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_logging_on_applicationContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_end_query_logging_on_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_query_logging_on_items" ):
                listener.enterEnd_query_logging_on_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_query_logging_on_items" ):
                listener.exitEnd_query_logging_on_items(self)




    def end_query_logging_on_items(self):

        localctx = TeradataSQLParser.End_query_logging_on_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_end_query_logging_on_items)
        try:
            self.state = 6228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,739,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6224
                self.end_query_logging_all_rules()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6225
                self.query_logging_on_all()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6226
                self.query_logging_on_users()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6227
                self.query_logging_on_application()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_query_logging_all_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def RULES(self):
            return self.getToken(TeradataSQLParser.RULES, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_end_query_logging_all_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_query_logging_all_rules" ):
                listener.enterEnd_query_logging_all_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_query_logging_all_rules" ):
                listener.exitEnd_query_logging_all_rules(self)




    def end_query_logging_all_rules(self):

        localctx = TeradataSQLParser.End_query_logging_all_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_end_query_logging_all_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6230
            self.match(TeradataSQLParser.ALL)
            self.state = 6231
            self.match(TeradataSQLParser.RULES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flush_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLUSH(self):
            return self.getToken(TeradataSQLParser.FLUSH, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def flush_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Flush_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_flush_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlush_query_logging_stat" ):
                listener.enterFlush_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlush_query_logging_stat" ):
                listener.exitFlush_query_logging_stat(self)




    def flush_query_logging_stat(self):

        localctx = TeradataSQLParser.Flush_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_flush_query_logging_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6233
            self.match(TeradataSQLParser.FLUSH)
            self.state = 6234
            self.match(TeradataSQLParser.QUERY)
            self.state = 6235
            self.match(TeradataSQLParser.LOGGING)
            self.state = 6236
            self.match(TeradataSQLParser.WITH)
            self.state = 6237
            self.flush_option()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flush_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def ALLDBQL(self):
            return self.getToken(TeradataSQLParser.ALLDBQL, 0)

        def ALLTDWM(self):
            return self.getToken(TeradataSQLParser.ALLTDWM, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLParser.EXPLAIN, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLParser.LOCK, 0)

        def OBJECTS(self):
            return self.getToken(TeradataSQLParser.OBJECTS, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLParser.PARAMINFO, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLParser.STATSUSAGE, 0)

        def STEPINFO(self):
            return self.getToken(TeradataSQLParser.STEPINFO, 0)

        def SUMMARY(self):
            return self.getToken(TeradataSQLParser.SUMMARY, 0)

        def TDWMEVENT(self):
            return self.getToken(TeradataSQLParser.TDWMEVENT, 0)

        def TDWMEXCEPTION(self):
            return self.getToken(TeradataSQLParser.TDWMEXCEPTION, 0)

        def TDWMHISTORY(self):
            return self.getToken(TeradataSQLParser.TDWMHISTORY, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLParser.USECOUNT, 0)

        def XMLPLAN(self):
            return self.getToken(TeradataSQLParser.XMLPLAN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_flush_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlush_option" ):
                listener.enterFlush_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlush_option" ):
                listener.exitFlush_option(self)




    def flush_option(self):

        localctx = TeradataSQLParser.Flush_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_flush_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6239
            _la = self._input.LA(1)
            if not(_la==13 or _la==111 or _la==150 or _la==226 or _la==280 or ((((_la - 386)) & ~0x3f) == 0 and ((1 << (_la - 386)) & 266241) != 0) or ((((_la - 477)) & ~0x3f) == 0 and ((1 << (_la - 477)) & 17301505) != 0) or _la==838 or ((((_la - 940)) & ~0x3f) == 0 and ((1 << (_la - 940)) & 962072674305) != 0) or _la==1019):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Help_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_help_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HelpHashIndexStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.hash_index_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def HASH(self):
            return self.getToken(TeradataSQLParser.HASH, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpHashIndexStat" ):
                listener.enterHelpHashIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpHashIndexStat" ):
                listener.exitHelpHashIndexStat(self)


    class HelpForeignServerContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.server_name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)
        def SERVER(self):
            return self.getToken(TeradataSQLParser.SERVER, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)

        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_server_dbContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpForeignServer" ):
                listener.enterHelpForeignServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpForeignServer" ):
                listener.exitHelpForeignServer(self)


    class HelpErrorTableStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.data_table_name = None # Table_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def ERROR(self):
            return self.getToken(TeradataSQLParser.ERROR, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)
        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpErrorTableStat" ):
                listener.enterHelpErrorTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpErrorTableStat" ):
                listener.exitHelpErrorTableStat(self)


    class HelpTriggerStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.trigger_or_table_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def TRIGGER(self):
            return self.getToken(TeradataSQLParser.TRIGGER, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpTriggerStat" ):
                listener.enterHelpTriggerStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpTriggerStat" ):
                listener.exitHelpTriggerStat(self)


    class HelpTypeStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLParser.ATTRIBUTE, 0)
        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpTypeStat" ):
                listener.enterHelpTypeStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpTypeStat" ):
                listener.exitHelpTypeStat(self)


    class HelpTransformStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def TRANSFORM(self):
            return self.getToken(TeradataSQLParser.TRANSFORM, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpTransformStat" ):
                listener.enterHelpTransformStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpTransformStat" ):
                listener.exitHelpTransformStat(self)


    class HelpProcedureStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)
        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLParser.ATTRIBUTES, 0)
        def ATTRS(self):
            return self.getToken(TeradataSQLParser.ATTRS, 0)
        def ATTR(self):
            return self.getToken(TeradataSQLParser.ATTR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpProcedureStat" ):
                listener.enterHelpProcedureStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpProcedureStat" ):
                listener.exitHelpProcedureStat(self)


    class HelpConstraintStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.constraint_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpConstraintStat" ):
                listener.enterHelpConstraintStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpConstraintStat" ):
                listener.exitHelpConstraintStat(self)


    class HelpForeignFunctionContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Server_name_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpForeignFunction" ):
                listener.enterHelpForeignFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpForeignFunction" ):
                listener.exitHelpForeignFunction(self)


    class HelpUserStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)
        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpUserStat" ):
                listener.enterHelpUserStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpUserStat" ):
                listener.exitHelpUserStat(self)


    class HelpSpecificMethodStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)
        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpSpecificMethodStat" ):
                listener.enterHelpSpecificMethodStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpSpecificMethodStat" ):
                listener.exitHelpSpecificMethodStat(self)


    class HelpTableStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpTableStat" ):
                listener.enterHelpTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpTableStat" ):
                listener.exitHelpTableStat(self)


    class HelpMethodStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def method(self):
            return self.getTypedRuleContext(TeradataSQLParser.MethodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpMethodStat" ):
                listener.enterHelpMethodStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpMethodStat" ):
                listener.exitHelpMethodStat(self)


    class HelpDatabaseStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)
        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpDatabaseStat" ):
                listener.enterHelpDatabaseStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpDatabaseStat" ):
                listener.exitHelpDatabaseStat(self)


    class HelpForeignDatabaseContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)
        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)
        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Server_name_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpForeignDatabase" ):
                listener.enterHelpForeignDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpForeignDatabase" ):
                listener.exitHelpForeignDatabase(self)


    class HelpColumnAllFromStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)
        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)
        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpColumnAllFromStat" ):
                listener.enterHelpColumnAllFromStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpColumnAllFromStat" ):
                listener.exitHelpColumnAllFromStat(self)


    class HelpFunctionStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def variable_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Variable_data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Variable_data_typeContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpFunctionStat" ):
                listener.enterHelpFunctionStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpFunctionStat" ):
                listener.exitHelpFunctionStat(self)


    class HelpViewStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.view_name = None # Table_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpViewStat" ):
                listener.enterHelpViewStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpViewStat" ):
                listener.exitHelpViewStat(self)


    class HelpJoinIndexStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.join_index_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def JOIN(self):
            return self.getToken(TeradataSQLParser.JOIN, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpJoinIndexStat" ):
                listener.enterHelpJoinIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpJoinIndexStat" ):
                listener.exitHelpJoinIndexStat(self)


    class HelpColumnListStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.table_name_for_all_columns = None # Table_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DOT_)
            else:
                return self.getToken(TeradataSQLParser.DOT_, i)
        def MUL_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.MUL_SIGN)
            else:
                return self.getToken(TeradataSQLParser.MUL_SIGN, i)
        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpColumnListStat" ):
                listener.enterHelpColumnListStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpColumnListStat" ):
                listener.exitHelpColumnListStat(self)


    class HelpColumnFromStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)
        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,i)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)
        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpColumnFromStat" ):
                listener.enterHelpColumnFromStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpColumnFromStat" ):
                listener.exitHelpColumnFromStat(self)


    class HelpSpecificFunctionStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpSpecificFunctionStat" ):
                listener.enterHelpSpecificFunctionStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpSpecificFunctionStat" ):
                listener.exitHelpSpecificFunctionStat(self)


    class HelpStorageFormatSchemaStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.schema_name = None # Udt_typeContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLParser.Dataset_storage_formatContext,0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLParser.SCHEMA, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStorageFormatSchemaStat" ):
                listener.enterHelpStorageFormatSchemaStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStorageFormatSchemaStat" ):
                listener.exitHelpStorageFormatSchemaStat(self)


    class HelpForeignTableContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Server_name_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpForeignTable" ):
                listener.enterHelpForeignTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpForeignTable" ):
                listener.exitHelpForeignTable(self)


    class HelpColumnFromErrorTableStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.data_table_name = None # Table_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)
        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)
        def ERROR(self):
            return self.getToken(TeradataSQLParser.ERROR, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)
        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpColumnFromErrorTableStat" ):
                listener.enterHelpColumnFromErrorTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpColumnFromErrorTableStat" ):
                listener.exitHelpColumnFromErrorTableStat(self)


    class HelpOnlineStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.request = None # Token
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def CHAR_STRING(self):
            return self.getToken(TeradataSQLParser.CHAR_STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpOnlineStat" ):
                listener.enterHelpOnlineStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpOnlineStat" ):
                listener.exitHelpOnlineStat(self)


    class HelpIndexStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.indexed_object_name = None # Object_nameContext
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpIndexStat" ):
                listener.enterHelpIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpIndexStat" ):
                listener.exitHelpIndexStat(self)


    class HelpCastStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def CAST(self):
            return self.getToken(TeradataSQLParser.CAST, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)

        def SOURCE(self):
            return self.getToken(TeradataSQLParser.SOURCE, 0)
        def TARGET(self):
            return self.getToken(TeradataSQLParser.TARGET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpCastStat" ):
                listener.enterHelpCastStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpCastStat" ):
                listener.exitHelpCastStat(self)


    class HelpVolatileTableStatContext(Help_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Help_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)
        def VOLATILE(self):
            return self.getToken(TeradataSQLParser.VOLATILE, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpVolatileTableStat" ):
                listener.enterHelpVolatileTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpVolatileTableStat" ):
                listener.exitHelpVolatileTableStat(self)



    def help_stat(self):

        localctx = TeradataSQLParser.Help_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_help_stat)
        self._la = 0 # Token type
        try:
            self.state = 6440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,757,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLParser.HelpOnlineStatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6241
                self.match(TeradataSQLParser.HELP)
                self.state = 6242
                localctx.request = self.match(TeradataSQLParser.CHAR_STRING)
                pass

            elif la_ == 2:
                localctx = TeradataSQLParser.HelpColumnListStatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6243
                self.match(TeradataSQLParser.HELP)
                self.state = 6244
                self.match(TeradataSQLParser.COLUMN)
                self.state = 6250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,740,self._ctx)
                if la_ == 1:
                    self.state = 6245
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 6246
                    localctx.table_name_for_all_columns = self.table_name()
                    self.state = 6247
                    self.match(TeradataSQLParser.DOT_)
                    self.state = 6248
                    self.match(TeradataSQLParser.MUL_SIGN)
                    pass


                self.state = 6262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6252
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6258
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
                    if la_ == 1:
                        self.state = 6253
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 6254
                        localctx.table_name_for_all_columns = self.table_name()
                        self.state = 6255
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 6256
                        self.match(TeradataSQLParser.MUL_SIGN)
                        pass


                    self.state = 6264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = TeradataSQLParser.HelpColumnFromStatContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6265
                self.match(TeradataSQLParser.HELP)
                self.state = 6266
                self.match(TeradataSQLParser.COLUMN)
                self.state = 6267
                self.column_name()
                self.state = 6272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6268
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6269
                    self.column_name()
                    self.state = 6274
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6275
                self.match(TeradataSQLParser.FROM)
                self.state = 6276
                self.table_name()
                self.state = 6281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6277
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6278
                    self.table_name()
                    self.state = 6283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                localctx = TeradataSQLParser.HelpColumnAllFromStatContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6284
                self.match(TeradataSQLParser.HELP)
                self.state = 6285
                self.match(TeradataSQLParser.COLUMN)
                self.state = 6286
                self.match(TeradataSQLParser.MUL_SIGN)
                self.state = 6287
                self.match(TeradataSQLParser.FROM)
                self.state = 6288
                self.table_name()
                self.state = 6293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6289
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6290
                    self.table_name()
                    self.state = 6295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = TeradataSQLParser.HelpColumnFromErrorTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6296
                self.match(TeradataSQLParser.HELP)
                self.state = 6297
                self.match(TeradataSQLParser.COLUMN)
                self.state = 6298
                self.column_name()
                self.state = 6299
                self.match(TeradataSQLParser.FROM)
                self.state = 6300
                self.match(TeradataSQLParser.ERROR)
                self.state = 6301
                self.match(TeradataSQLParser.TABLE)
                self.state = 6302
                self.match(TeradataSQLParser.FOR)
                self.state = 6303
                localctx.data_table_name = self.table_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLParser.HelpConstraintStatContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6305
                self.match(TeradataSQLParser.HELP)
                self.state = 6306
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 6307
                localctx.constraint_name = self.object_name()
                pass

            elif la_ == 7:
                localctx = TeradataSQLParser.HelpTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 6308
                self.match(TeradataSQLParser.HELP)
                self.state = 6309
                self.match(TeradataSQLParser.TABLE)
                self.state = 6310
                self.table_name()
                pass

            elif la_ == 8:
                localctx = TeradataSQLParser.HelpErrorTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 6311
                self.match(TeradataSQLParser.HELP)
                self.state = 6312
                self.match(TeradataSQLParser.ERROR)
                self.state = 6313
                self.match(TeradataSQLParser.TABLE)
                self.state = 6314
                self.match(TeradataSQLParser.FOR)
                self.state = 6315
                localctx.data_table_name = self.table_name()
                pass

            elif la_ == 9:
                localctx = TeradataSQLParser.HelpVolatileTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 6316
                self.match(TeradataSQLParser.HELP)
                self.state = 6317
                self.match(TeradataSQLParser.VOLATILE)
                self.state = 6318
                self.match(TeradataSQLParser.TABLE)
                self.state = 6319
                self.table_name()
                pass

            elif la_ == 10:
                localctx = TeradataSQLParser.HelpViewStatContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 6320
                self.match(TeradataSQLParser.HELP)
                self.state = 6321
                self.match(TeradataSQLParser.VIEW)
                self.state = 6322
                localctx.view_name = self.table_name()
                pass

            elif la_ == 11:
                localctx = TeradataSQLParser.HelpIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 6323
                self.match(TeradataSQLParser.HELP)
                self.state = 6324
                self.match(TeradataSQLParser.INDEX)
                self.state = 6326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==417:
                    self.state = 6325
                    self.match(TeradataSQLParser.TEMPORARY)


                self.state = 6328
                localctx.indexed_object_name = self.object_name()
                self.state = 6340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 6329
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 6330
                    self.column_name()
                    self.state = 6335
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6331
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 6332
                        self.column_name()
                        self.state = 6337
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 6338
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass

            elif la_ == 12:
                localctx = TeradataSQLParser.HelpJoinIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 6342
                self.match(TeradataSQLParser.HELP)
                self.state = 6343
                self.match(TeradataSQLParser.JOIN)
                self.state = 6344
                self.match(TeradataSQLParser.INDEX)
                self.state = 6345
                localctx.join_index_name = self.object_name()
                pass

            elif la_ == 13:
                localctx = TeradataSQLParser.HelpHashIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 6346
                self.match(TeradataSQLParser.HELP)
                self.state = 6347
                self.match(TeradataSQLParser.HASH)
                self.state = 6348
                self.match(TeradataSQLParser.INDEX)
                self.state = 6349
                localctx.hash_index_name = self.object_name()
                pass

            elif la_ == 14:
                localctx = TeradataSQLParser.HelpProcedureStatContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 6350
                self.match(TeradataSQLParser.HELP)
                self.state = 6351
                self.match(TeradataSQLParser.PROCEDURE)
                self.state = 6352
                self.procedure_name()
                self.state = 6354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 537)) & ~0x3f) == 0 and ((1 << (_la - 537)) & 21) != 0):
                    self.state = 6353
                    _la = self._input.LA(1)
                    if not(((((_la - 537)) & ~0x3f) == 0 and ((1 << (_la - 537)) & 21) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 15:
                localctx = TeradataSQLParser.HelpFunctionStatContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 6356
                self.match(TeradataSQLParser.HELP)
                self.state = 6357
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 6358
                self.function_name()
                self.state = 6371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 6359
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 6368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                        self.state = 6360
                        self.variable_data_type()
                        self.state = 6365
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 6361
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 6362
                            self.variable_data_type()
                            self.state = 6367
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 6370
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass

            elif la_ == 16:
                localctx = TeradataSQLParser.HelpSpecificFunctionStatContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 6373
                self.match(TeradataSQLParser.HELP)
                self.state = 6374
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 6375
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 6376
                self.function_name()
                pass

            elif la_ == 17:
                localctx = TeradataSQLParser.HelpMethodStatContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 6377
                self.match(TeradataSQLParser.HELP)
                self.state = 6378
                self.method()
                pass

            elif la_ == 18:
                localctx = TeradataSQLParser.HelpSpecificMethodStatContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 6379
                self.match(TeradataSQLParser.HELP)
                self.state = 6380
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 6381
                self.match(TeradataSQLParser.METHOD)
                self.state = 6383
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,753,self._ctx)
                if la_ == 1:
                    self.state = 6382
                    self.sysudtlib()


                self.state = 6385
                self.method_name()
                pass

            elif la_ == 19:
                localctx = TeradataSQLParser.HelpTypeStatContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 6386
                self.match(TeradataSQLParser.HELP)
                self.state = 6387
                self.match(TeradataSQLParser.TYPE)
                self.state = 6388
                self.udt_type()
                self.state = 6390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243 or _la==538:
                    self.state = 6389
                    _la = self._input.LA(1)
                    if not(_la==243 or _la==538):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 20:
                localctx = TeradataSQLParser.HelpStorageFormatSchemaStatContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 6392
                self.match(TeradataSQLParser.HELP)
                self.state = 6393
                self.dataset_storage_format()
                self.state = 6394
                self.match(TeradataSQLParser.SCHEMA)
                self.state = 6395
                localctx.schema_name = self.udt_type()
                pass

            elif la_ == 21:
                localctx = TeradataSQLParser.HelpCastStatContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 6397
                self.match(TeradataSQLParser.HELP)
                self.state = 6398
                self.match(TeradataSQLParser.CAST)
                self.state = 6399
                self.udt_type()
                self.state = 6401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==930 or _la==954:
                    self.state = 6400
                    _la = self._input.LA(1)
                    if not(_la==930 or _la==954):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 22:
                localctx = TeradataSQLParser.HelpTransformStatContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 6403
                self.match(TeradataSQLParser.HELP)
                self.state = 6404
                self.match(TeradataSQLParser.TRANSFORM)
                self.state = 6405
                self.udt_type()
                pass

            elif la_ == 23:
                localctx = TeradataSQLParser.HelpDatabaseStatContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 6406
                self.match(TeradataSQLParser.HELP)
                self.state = 6407
                self.match(TeradataSQLParser.DATABASE)
                self.state = 6408
                self.database_name()
                pass

            elif la_ == 24:
                localctx = TeradataSQLParser.HelpUserStatContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 6409
                self.match(TeradataSQLParser.HELP)
                self.state = 6410
                self.match(TeradataSQLParser.USER)
                self.state = 6411
                self.user_name()
                pass

            elif la_ == 25:
                localctx = TeradataSQLParser.HelpTriggerStatContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 6412
                self.match(TeradataSQLParser.HELP)
                self.state = 6413
                self.match(TeradataSQLParser.TRIGGER)
                self.state = 6414
                localctx.trigger_or_table_name = self.object_name()
                pass

            elif la_ == 26:
                localctx = TeradataSQLParser.HelpForeignServerContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 6415
                self.match(TeradataSQLParser.HELP)
                self.state = 6416
                self.match(TeradataSQLParser.FOREIGN)
                self.state = 6417
                self.match(TeradataSQLParser.SERVER)
                self.state = 6419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,756,self._ctx)
                if la_ == 1:
                    self.state = 6418
                    self.td_server_db()


                self.state = 6421
                localctx.server_name = self.unqualified_name()
                pass

            elif la_ == 27:
                localctx = TeradataSQLParser.HelpForeignDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 6422
                self.match(TeradataSQLParser.HELP)
                self.state = 6423
                self.match(TeradataSQLParser.FOREIGN)
                self.state = 6424
                self.match(TeradataSQLParser.DATABASE)
                self.state = 6425
                self.database_name()
                self.state = 6426
                self.server_name_reference()
                pass

            elif la_ == 28:
                localctx = TeradataSQLParser.HelpForeignTableContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 6428
                self.match(TeradataSQLParser.HELP)
                self.state = 6429
                self.match(TeradataSQLParser.FOREIGN)
                self.state = 6430
                self.match(TeradataSQLParser.TABLE)
                self.state = 6431
                self.table_name()
                self.state = 6432
                self.server_name_reference()
                pass

            elif la_ == 29:
                localctx = TeradataSQLParser.HelpForeignFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 6434
                self.match(TeradataSQLParser.HELP)
                self.state = 6435
                self.match(TeradataSQLParser.FOREIGN)
                self.state = 6436
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 6437
                self.function_name()
                self.state = 6438
                self.server_name_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Help_statistics_optimimizer_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def CURRENT(self):
            return self.getToken(TeradataSQLParser.CURRENT, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_help_statistics_optimimizer_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelp_statistics_optimimizer_form_stat" ):
                listener.enterHelp_statistics_optimimizer_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelp_statistics_optimimizer_form_stat" ):
                listener.exitHelp_statistics_optimimizer_form_stat(self)




    def help_statistics_optimimizer_form_stat(self):

        localctx = TeradataSQLParser.Help_statistics_optimimizer_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_help_statistics_optimimizer_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6442
            self.match(TeradataSQLParser.HELP)
            self.state = 6444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 6443
                self.match(TeradataSQLParser.CURRENT)


            self.state = 6446
            self.match(TeradataSQLParser.STATISTICS)
            self.state = 6448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 6447
                self.match(TeradataSQLParser.ON)


            self.state = 6451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==417:
                self.state = 6450
                self.match(TeradataSQLParser.TEMPORARY)


            self.state = 6453
            self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Help_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext
            self.query_id = None # Integer_literalContext
            self.statistics_id = None # Integer_literalContext

        def HELP(self):
            return self.getToken(TeradataSQLParser.HELP, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def CURRENT(self):
            return self.getToken(TeradataSQLParser.CURRENT, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def SAMPLEID(self):
            return self.getToken(TeradataSQLParser.SAMPLEID, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLParser.MODIFIED, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_help_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelp_statistics_qcd_form_stat" ):
                listener.enterHelp_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelp_statistics_qcd_form_stat" ):
                listener.exitHelp_statistics_qcd_form_stat(self)




    def help_statistics_qcd_form_stat(self):

        localctx = TeradataSQLParser.Help_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_help_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6455
            self.match(TeradataSQLParser.HELP)
            self.state = 6457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 6456
                self.match(TeradataSQLParser.CURRENT)


            self.state = 6459
            self.match(TeradataSQLParser.STATISTICS)
            self.state = 6461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 6460
                self.match(TeradataSQLParser.ON)


            self.state = 6463
            self.object_name()
            self.state = 6464
            self.match(TeradataSQLParser.FROM)
            self.state = 6465
            localctx.qcd_name = self.database_name()
            self.state = 6469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 6466
                self.match(TeradataSQLParser.FOR)
                self.state = 6467
                self.match(TeradataSQLParser.QUERY)
                self.state = 6468
                localctx.query_id = self.integer_literal()


            self.state = 6473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 6471
                self.match(TeradataSQLParser.SAMPLEID)
                self.state = 6472
                localctx.statistics_id = self.integer_literal()


            self.state = 6477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 6475
                self.match(TeradataSQLParser.USING)
                self.state = 6476
                self.match(TeradataSQLParser.MODIFIED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Incremental_restore_allow_write_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLParser.INCREMENTAL, 0)

        def RESTORE(self):
            return self.getToken(TeradataSQLParser.RESTORE, 0)

        def ALLOW(self):
            return self.getToken(TeradataSQLParser.ALLOW, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLParser.WRITE, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_incremental_restore_allow_write_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncremental_restore_allow_write_stat" ):
                listener.enterIncremental_restore_allow_write_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncremental_restore_allow_write_stat" ):
                listener.exitIncremental_restore_allow_write_stat(self)




    def incremental_restore_allow_write_stat(self):

        localctx = TeradataSQLParser.Incremental_restore_allow_write_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_incremental_restore_allow_write_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6479
            self.match(TeradataSQLParser.INCREMENTAL)
            self.state = 6480
            self.match(TeradataSQLParser.RESTORE)
            self.state = 6481
            self.match(TeradataSQLParser.ALLOW)
            self.state = 6482
            self.match(TeradataSQLParser.WRITE)
            self.state = 6483
            self.match(TeradataSQLParser.FOR)
            self.state = 6484
            self.object_name()
            self.state = 6489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6485
                self.match(TeradataSQLParser.COMMA)
                self.state = 6486
                self.object_name()
                self.state = 6491
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_incremental_archive_off_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLParser.INCREMENTAL, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLParser.ARCHIVE, 0)

        def OFF(self):
            return self.getToken(TeradataSQLParser.OFF, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_logging_incremental_archive_off_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_incremental_archive_off_stat" ):
                listener.enterLogging_incremental_archive_off_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_incremental_archive_off_stat" ):
                listener.exitLogging_incremental_archive_off_stat(self)




    def logging_incremental_archive_off_stat(self):

        localctx = TeradataSQLParser.Logging_incremental_archive_off_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_logging_incremental_archive_off_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6492
            self.match(TeradataSQLParser.LOGGING)
            self.state = 6493
            self.match(TeradataSQLParser.INCREMENTAL)
            self.state = 6494
            self.match(TeradataSQLParser.ARCHIVE)
            self.state = 6495
            self.match(TeradataSQLParser.OFF)
            self.state = 6496
            self.match(TeradataSQLParser.FOR)
            self.state = 6497
            self.object_name()
            self.state = 6502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6498
                self.match(TeradataSQLParser.COMMA)
                self.state = 6499
                self.object_name()
                self.state = 6504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_incremental_archive_on_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLParser.INCREMENTAL, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLParser.ARCHIVE, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def LOG(self):
            return self.getToken(TeradataSQLParser.LOG, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLParser.ROWS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_logging_incremental_archive_on_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_incremental_archive_on_stat" ):
                listener.enterLogging_incremental_archive_on_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_incremental_archive_on_stat" ):
                listener.exitLogging_incremental_archive_on_stat(self)




    def logging_incremental_archive_on_stat(self):

        localctx = TeradataSQLParser.Logging_incremental_archive_on_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_logging_incremental_archive_on_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6505
            self.match(TeradataSQLParser.LOGGING)
            self.state = 6506
            self.match(TeradataSQLParser.INCREMENTAL)
            self.state = 6507
            self.match(TeradataSQLParser.ARCHIVE)
            self.state = 6508
            self.match(TeradataSQLParser.ON)
            self.state = 6509
            self.match(TeradataSQLParser.FOR)
            self.state = 6510
            self.object_name()
            self.state = 6515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6511
                self.match(TeradataSQLParser.COMMA)
                self.state = 6512
                self.object_name()
                self.state = 6517
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==115:
                self.state = 6518
                self.match(TeradataSQLParser.DELETE)
                self.state = 6519
                self.match(TeradataSQLParser.LOG)
                self.state = 6520
                self.match(TeradataSQLParser.ROWS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_database_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(TeradataSQLParser.MODIFY, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def modified_database_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Modified_database_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Modified_database_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_modify_database_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_database_stat" ):
                listener.enterModify_database_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_database_stat" ):
                listener.exitModify_database_stat(self)




    def modify_database_stat(self):

        localctx = TeradataSQLParser.Modify_database_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_modify_database_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6523
            self.match(TeradataSQLParser.MODIFY)
            self.state = 6524
            self.match(TeradataSQLParser.DATABASE)
            self.state = 6525
            self.database_name()
            self.state = 6526
            self.match(TeradataSQLParser.AS)
            self.state = 6527
            self.modified_database_attribute()
            self.state = 6532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6528
                self.match(TeradataSQLParser.COMMA)
                self.state = 6529
                self.modified_database_attribute()
                self.state = 6534
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modified_database_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.account_name = None # Char_string_literalContext

        def database_size_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_size_specContext,0)


        def ACCOUNT(self):
            return self.getToken(TeradataSQLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_default_mapContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLParser.Fallback_protectionContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.After_journalContext,0)


        def default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLParser.Default_journal_tableContext,0)


        def drop_default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_default_journal_tableContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_modified_database_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModified_database_attribute" ):
                listener.enterModified_database_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModified_database_attribute" ):
                listener.exitModified_database_attribute(self)




    def modified_database_attribute(self):

        localctx = TeradataSQLParser.Modified_database_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_modified_database_attribute)
        try:
            self.state = 6545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,771,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6535
                self.database_size_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6536
                self.match(TeradataSQLParser.ACCOUNT)
                self.state = 6537
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6538
                localctx.account_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6539
                self.database_default_map()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6540
                self.fallback_protection()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6541
                self.before_journal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6542
                self.after_journal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6543
                self.default_journal_table()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6544
                self.drop_default_journal_table()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_profile_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(TeradataSQLParser.MODIFY, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Profile_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def profile_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Profile_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Profile_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_modify_profile_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_profile_stat" ):
                listener.enterModify_profile_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_profile_stat" ):
                listener.exitModify_profile_stat(self)




    def modify_profile_stat(self):

        localctx = TeradataSQLParser.Modify_profile_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_modify_profile_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6547
            self.match(TeradataSQLParser.MODIFY)
            self.state = 6548
            self.match(TeradataSQLParser.PROFILE)
            self.state = 6549
            self.profile_name()
            self.state = 6550
            self.match(TeradataSQLParser.AS)
            self.state = 6551
            self.profile_attribute()
            self.state = 6556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6552
                self.match(TeradataSQLParser.COMMA)
                self.state = 6553
                self.profile_attribute()
                self.state = 6558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_user_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODIFY(self):
            return self.getToken(TeradataSQLParser.MODIFY, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def user_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def modify_user_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Modify_user_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Modify_user_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_modify_user_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_user_stat" ):
                listener.enterModify_user_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_user_stat" ):
                listener.exitModify_user_stat(self)




    def modify_user_stat(self):

        localctx = TeradataSQLParser.Modify_user_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_modify_user_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6559
            self.match(TeradataSQLParser.MODIFY)
            self.state = 6560
            self.match(TeradataSQLParser.USER)
            self.state = 6561
            self.user_name()
            self.state = 6562
            self.match(TeradataSQLParser.AS)
            self.state = 6563
            self.modify_user_attribute()
            self.state = 6568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 6564
                self.match(TeradataSQLParser.COMMA)
                self.state = 6565
                self.modify_user_attribute()
                self.state = 6570
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Modify_user_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.startup_string = None # Char_string_literalContext
            self.expire = None # Integer_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.account_string = list() # of Char_string_literalContexts
            self.timezone_string = None # Char_string_literalContext

        def database_size_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_size_specContext,0)


        def STARTUP(self):
            return self.getToken(TeradataSQLParser.STARTUP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLParser.EQUALS_SIGN, i)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def PASSWORD(self):
            return self.getToken(TeradataSQLParser.PASSWORD, 0)

        def password(self):
            return self.getTypedRuleContext(TeradataSQLParser.PasswordContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLParser.EXPIRE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def RELEASE(self):
            return self.getToken(TeradataSQLParser.RELEASE, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLParser.LOCK, 0)

        def ACCOUNT(self):
            return self.getToken(TeradataSQLParser.ACCOUNT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def database_default_map(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_default_mapContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def COLLATION(self):
            return self.getToken(TeradataSQLParser.COLLATION, 0)

        def collation_sequence(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collation_sequenceContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLParser.Fallback_protectionContext,0)


        def before_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Before_journalContext,0)


        def after_journal(self):
            return self.getTypedRuleContext(TeradataSQLParser.After_journalContext,0)


        def default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLParser.Default_journal_tableContext,0)


        def drop_default_journal_table(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_default_journal_tableContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLParser.PLUS_SIGN, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def DATEFORM(self):
            return self.getToken(TeradataSQLParser.DATEFORM, 0)

        def INTEGERDATE(self):
            return self.getToken(TeradataSQLParser.INTEGERDATE, 0)

        def ANSIDATE(self):
            return self.getToken(TeradataSQLParser.ANSIDATE, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLParser.UNICODE, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLParser.KANJISJIS, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,0)


        def NONE(self):
            return self.getToken(TeradataSQLParser.NONE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Profile_nameContext,0)


        def TRANSFORM(self):
            return self.getToken(TeradataSQLParser.TRANSFORM, 0)

        def transform_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Transform_specificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Transform_specificationContext,i)


        def DBA(self):
            return self.getToken(TeradataSQLParser.DBA, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLParser.EXPORTWIDTH, 0)

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def user_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_constraintContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_constraintContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_modify_user_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModify_user_attribute" ):
                listener.enterModify_user_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModify_user_attribute" ):
                listener.exitModify_user_attribute(self)




    def modify_user_attribute(self):

        localctx = TeradataSQLParser.Modify_user_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_modify_user_attribute)
        self._la = 0 # Token type
        try:
            self.state = 6688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,788,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6571
                self.database_size_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6572
                self.match(TeradataSQLParser.STARTUP)
                self.state = 6573
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6576
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 6574
                    localctx.startup_string = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 6575
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6578
                self.match(TeradataSQLParser.PASSWORD)
                self.state = 6579
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6587
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1193, 1205]:
                    self.state = 6580
                    self.password()
                    pass
                elif token in [1213]:
                    self.state = 6581
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 6582
                    self.match(TeradataSQLParser.EXPIRE)
                    self.state = 6583
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 6584
                    localctx.expire = self.integer_literal()
                    self.state = 6585
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159:
                    self.state = 6589
                    self.match(TeradataSQLParser.FOR)
                    self.state = 6590
                    self.match(TeradataSQLParser.USER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6593
                self.match(TeradataSQLParser.RELEASE)
                self.state = 6594
                self.match(TeradataSQLParser.PASSWORD)
                self.state = 6595
                self.match(TeradataSQLParser.LOCK)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6596
                self.match(TeradataSQLParser.ACCOUNT)
                self.state = 6597
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6607
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 6598
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.account_string.append(localctx._char_string_literal)
                    self.state = 6603
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,777,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 6599
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 6600
                            localctx._char_string_literal = self.char_string_literal()
                            localctx.account_string.append(localctx._char_string_literal) 
                        self.state = 6605
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,777,self._ctx)

                    pass
                elif token in [274]:
                    self.state = 6606
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6609
                self.database_default_map()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6610
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 6611
                self.match(TeradataSQLParser.DATABASE)
                self.state = 6612
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6613
                self.database_name()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6614
                self.match(TeradataSQLParser.COLLATION)
                self.state = 6615
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6616
                self.collation_sequence()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6617
                self.fallback_protection()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6618
                self.before_journal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6619
                self.after_journal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6620
                self.default_journal_table()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6621
                self.drop_default_journal_table()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6622
                self.match(TeradataSQLParser.TIME)
                self.state = 6623
                self.match(TeradataSQLParser.ZONE)
                self.state = 6624
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6631
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 6625
                    self.match(TeradataSQLParser.LOCAL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203, 1221, 1222]:
                    self.state = 6627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1221 or _la==1222:
                        self.state = 6626
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 6629
                    localctx.timezone_string = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 6630
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6633
                self.match(TeradataSQLParser.DATEFORM)
                self.state = 6634
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6635
                _la = self._input.LA(1)
                if not(_la==17 or _la==203 or _la==274):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6636
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 6637
                self.match(TeradataSQLParser.CHARACTER)
                self.state = 6638
                self.match(TeradataSQLParser.SET)
                self.state = 6639
                _la = self._input.LA(1)
                if not(_la==725 or _la==735 or _la==1015):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 6640
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 6641
                self.match(TeradataSQLParser.ROLE)
                self.state = 6642
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6647
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 6643
                    self.role_name()
                    pass
                elif token in [269]:
                    self.state = 6644
                    self.match(TeradataSQLParser.NONE)
                    pass
                elif token in [274]:
                    self.state = 6645
                    self.match(TeradataSQLParser.NULL)
                    pass
                elif token in [13]:
                    self.state = 6646
                    self.match(TeradataSQLParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 6649
                self.match(TeradataSQLParser.PROFILE)
                self.state = 6650
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6653
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 6651
                    self.profile_name()
                    pass
                elif token in [274]:
                    self.state = 6652
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 6655
                self.match(TeradataSQLParser.TRANSFORM)
                self.state = 6656
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 6665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                    self.state = 6657
                    self.transform_specification()
                    self.state = 6662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6658
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 6659
                        self.transform_specification()
                        self.state = 6664
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6667
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 6669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 6668
                    self.match(TeradataSQLParser.NOT)


                self.state = 6671
                self.match(TeradataSQLParser.DBA)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 6672
                self.match(TeradataSQLParser.EXPORTWIDTH)
                self.state = 6673
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6676
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 6674
                    self.char_string_literal()
                    pass
                elif token in [111]:
                    self.state = 6675
                    self.match(TeradataSQLParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 6678
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 6679
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6680
                self.user_constraint()
                self.state = 6685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,787,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6681
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 6682
                        self.user_constraint() 
                    self.state = 6687
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,787,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_function_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_specific_function_name = None # Function_nameContext
            self.new_specific_function_name = None # Function_nameContext
            self.old_function_name = None # Function_nameContext
            self.new_function_name = None # Function_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLParser.RENAME, 0)

        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def function_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Function_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_rename_function_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_function_stat" ):
                listener.enterRename_function_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_function_stat" ):
                listener.exitRename_function_stat(self)




    def rename_function_stat(self):

        localctx = TeradataSQLParser.Rename_function_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_rename_function_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6690
            self.match(TeradataSQLParser.RENAME)
            self.state = 6715
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [384]:
                self.state = 6691
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 6692
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 6693
                localctx.old_specific_function_name = self.function_name()
                self.state = 6694
                _la = self._input.LA(1)
                if not(_la==20 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6695
                localctx.new_specific_function_name = self.function_name()
                pass
            elif token in [166]:
                self.state = 6697
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 6698
                localctx.old_function_name = self.function_name()
                self.state = 6710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 6699
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 6700
                    self.data_type()
                    self.state = 6705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 6701
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 6702
                        self.data_type()
                        self.state = 6707
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 6708
                    self.match(TeradataSQLParser.CLOSE_PAR)


                self.state = 6712
                _la = self._input.LA(1)
                if not(_la==20 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6713
                localctx.new_function_name = self.function_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_procedure_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_procedure_name = None # Procedure_nameContext
            self.new_procedure_name = None # Procedure_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLParser.RENAME, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def procedure_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Procedure_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_rename_procedure_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_procedure_stat" ):
                listener.enterRename_procedure_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_procedure_stat" ):
                listener.exitRename_procedure_stat(self)




    def rename_procedure_stat(self):

        localctx = TeradataSQLParser.Rename_procedure_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_rename_procedure_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6717
            self.match(TeradataSQLParser.RENAME)
            self.state = 6718
            self.match(TeradataSQLParser.PROCEDURE)
            self.state = 6719
            localctx.old_procedure_name = self.procedure_name()
            self.state = 6720
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6721
            localctx.new_procedure_name = self.procedure_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_macro_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_macro_name = None # Macro_nameContext
            self.new_macro_name = None # Macro_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLParser.RENAME, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLParser.MACRO, 0)

        def macro_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Macro_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Macro_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_rename_macro_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_macro_stat" ):
                listener.enterRename_macro_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_macro_stat" ):
                listener.exitRename_macro_stat(self)




    def rename_macro_stat(self):

        localctx = TeradataSQLParser.Rename_macro_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_rename_macro_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6723
            self.match(TeradataSQLParser.RENAME)
            self.state = 6724
            self.match(TeradataSQLParser.MACRO)
            self.state = 6725
            localctx.old_macro_name = self.macro_name()
            self.state = 6726
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6727
            localctx.new_macro_name = self.macro_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_table_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_table_name = None # Table_nameContext
            self.new_table_name = None # Table_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_rename_table_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_table_stat" ):
                listener.enterRename_table_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_table_stat" ):
                listener.exitRename_table_stat(self)




    def rename_table_stat(self):

        localctx = TeradataSQLParser.Rename_table_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_rename_table_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6729
            self.match(TeradataSQLParser.RENAME)
            self.state = 6730
            self.match(TeradataSQLParser.TABLE)
            self.state = 6731
            localctx.old_table_name = self.table_name()
            self.state = 6732
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6733
            localctx.new_table_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_trigger_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_trigger_name = None # Object_nameContext
            self.new_trigger_name = None # Object_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLParser.RENAME, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLParser.TRIGGER, 0)

        def object_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Object_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_rename_trigger_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_trigger_stat" ):
                listener.enterRename_trigger_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_trigger_stat" ):
                listener.exitRename_trigger_stat(self)




    def rename_trigger_stat(self):

        localctx = TeradataSQLParser.Rename_trigger_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_rename_trigger_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6735
            self.match(TeradataSQLParser.RENAME)
            self.state = 6736
            self.match(TeradataSQLParser.TRIGGER)
            self.state = 6737
            localctx.old_trigger_name = self.object_name()
            self.state = 6738
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6739
            localctx.new_trigger_name = self.object_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_view_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_view_name = None # Table_nameContext
            self.new_view_name = None # Table_nameContext

        def RENAME(self):
            return self.getToken(TeradataSQLParser.RENAME, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_rename_view_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_view_stat" ):
                listener.enterRename_view_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_view_stat" ):
                listener.exitRename_view_stat(self)




    def rename_view_stat(self):

        localctx = TeradataSQLParser.Rename_view_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_rename_view_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6741
            self.match(TeradataSQLParser.RENAME)
            self.state = 6742
            self.match(TeradataSQLParser.VIEW)
            self.state = 6743
            localctx.old_view_name = self.table_name()
            self.state = 6744
            _la = self._input.LA(1)
            if not(_la==20 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6745
            localctx.new_view_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Replace_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.m = None # Integer_literalContext

        def REPLACE(self):
            return self.getToken(TeradataSQLParser.REPLACE, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def query_logging_on_items(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_logging_on_itemsContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def query_logging_with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Query_logging_with_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Query_logging_with_itemContext,i)


        def MODE(self):
            return self.getToken(TeradataSQLParser.MODE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLParser.LIMIT, 0)

        def query_logging_limit_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Query_logging_limit_itemContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Query_logging_limit_itemContext,i)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_replace_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplace_query_logging_stat" ):
                listener.enterReplace_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplace_query_logging_stat" ):
                listener.exitReplace_query_logging_stat(self)




    def replace_query_logging_stat(self):

        localctx = TeradataSQLParser.Replace_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_replace_query_logging_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6747
            self.match(TeradataSQLParser.REPLACE)
            self.state = 6748
            self.match(TeradataSQLParser.QUERY)
            self.state = 6749
            self.match(TeradataSQLParser.LOGGING)
            self.state = 6759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 6750
                self.match(TeradataSQLParser.WITH)
                self.state = 6751
                self.query_logging_with_item()
                self.state = 6756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6752
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6753
                    self.query_logging_with_item()
                    self.state = 6758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 6764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 6761
                self.match(TeradataSQLParser.MODE)
                self.state = 6762
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6763
                localctx.m = self.integer_literal()


            self.state = 6772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 6766
                self.match(TeradataSQLParser.LIMIT)
                self.state = 6767
                self.query_logging_limit_item()
                self.state = 6770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 6768
                    self.match(TeradataSQLParser.AND)
                    self.state = 6769
                    self.query_logging_limit_item()




            self.state = 6774
            self.match(TeradataSQLParser.ON)
            self.state = 6775
            self.query_logging_on_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_session_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.account_string = None # Char_string_literalContext
            self.calendar_name = None # Unqualified_nameContext
            self._table_name = None # Table_nameContext
            self.udf_name = list() # of Table_nameContexts

        def ACCOUNT(self):
            return self.getToken(TeradataSQLParser.ACCOUNT, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLParser.EQUALS_SIGN, i)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def SESSION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.SESSION)
            else:
                return self.getToken(TeradataSQLParser.SESSION, i)

        def REQUEST(self):
            return self.getToken(TeradataSQLParser.REQUEST, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.SET)
            else:
                return self.getToken(TeradataSQLParser.SET, i)

        def SS(self):
            return self.getToken(TeradataSQLParser.SS, 0)

        def CALENDAR(self):
            return self.getToken(TeradataSQLParser.CALENDAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLParser.UNICODE, 0)

        def PASS(self):
            return self.getToken(TeradataSQLParser.PASS, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLParser.THROUGH, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def OFF(self):
            return self.getToken(TeradataSQLParser.OFF, 0)

        def COLLATION(self):
            return self.getToken(TeradataSQLParser.COLLATION, 0)

        def collation_sequence(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collation_sequenceContext,0)


        def session_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Session_constraintContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Session_constraintContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def database_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,i)


        def DATEFORM(self):
            return self.getToken(TeradataSQLParser.DATEFORM, 0)

        def ANSIDATE(self):
            return self.getToken(TeradataSQLParser.ANSIDATE, 0)

        def INTEGERDATE(self):
            return self.getToken(TeradataSQLParser.INTEGERDATE, 0)

        def DEBUG(self):
            return self.getToken(TeradataSQLParser.DEBUG, 0)

        def session_debug_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Session_debug_specContext,0)


        def DOT(self):
            return self.getToken(TeradataSQLParser.DOT, 0)

        def NOTATION(self):
            return self.getToken(TeradataSQLParser.NOTATION, 0)

        def ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ERROR)
            else:
                return self.getToken(TeradataSQLParser.ERROR, i)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def LIST(self):
            return self.getToken(TeradataSQLParser.LIST, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLParser.LOADING, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLParser.CONCURRENT, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def TRACE(self):
            return self.getToken(TeradataSQLParser.TRACE, 0)

        def trace_enabling_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Trace_enabling_specContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLParser.JSON, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLParser.IGNORE, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLParser.ERRORS, 0)

        def SEARCHUIFDBPATH(self):
            return self.getToken(TeradataSQLParser.SEARCHUIFDBPATH, 0)

        def CHARACTERISTICS(self):
            return self.getToken(TeradataSQLParser.CHARACTERISTICS, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(TeradataSQLParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(TeradataSQLParser.LEVEL, 0)

        def isolation_level(self):
            return self.getTypedRuleContext(TeradataSQLParser.Isolation_levelContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def UDFSEARCHPATH(self):
            return self.getToken(TeradataSQLParser.UDFSEARCHPATH, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_set_session_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_session_stat" ):
                listener.enterSet_session_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_session_stat" ):
                listener.exitSet_session_stat(self)




    def set_session_stat(self):

        localctx = TeradataSQLParser.Set_session_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_set_session_stat)
        self._la = 0 # Token type
        try:
            self.state = 6955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,820,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6780
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6777
                    self.match(TeradataSQLParser.SET)
                    self.state = 6778
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6779
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6782
                self.match(TeradataSQLParser.ACCOUNT)
                self.state = 6783
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6784
                localctx.account_string = self.char_string_literal()
                self.state = 6785
                self.match(TeradataSQLParser.FOR)
                self.state = 6786
                _la = self._input.LA(1)
                if not(_la==343 or _la==371):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6791
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6788
                    self.match(TeradataSQLParser.SET)
                    self.state = 6789
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6790
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6793
                self.match(TeradataSQLParser.CALENDAR)
                self.state = 6794
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6795
                localctx.calendar_name = self.unqualified_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6799
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6796
                    self.match(TeradataSQLParser.SET)
                    self.state = 6797
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6798
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6801
                self.match(TeradataSQLParser.CHARACTER)
                self.state = 6802
                self.match(TeradataSQLParser.SET)
                self.state = 6803
                self.match(TeradataSQLParser.UNICODE)
                self.state = 6804
                self.match(TeradataSQLParser.PASS)
                self.state = 6805
                self.match(TeradataSQLParser.THROUGH)
                self.state = 6806
                _la = self._input.LA(1)
                if not(_la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6810
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6807
                    self.match(TeradataSQLParser.SET)
                    self.state = 6808
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6809
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6812
                self.match(TeradataSQLParser.COLLATION)
                self.state = 6813
                self.collation_sequence()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6817
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6814
                    self.match(TeradataSQLParser.SET)
                    self.state = 6815
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6816
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6819
                self.session_constraint()
                self.state = 6824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6820
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6821
                    self.session_constraint()
                    self.state = 6826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6830
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6827
                    self.match(TeradataSQLParser.SET)
                    self.state = 6828
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6829
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6832
                self.match(TeradataSQLParser.DATABASE)
                self.state = 6833
                self.database_name()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6837
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6834
                    self.match(TeradataSQLParser.SET)
                    self.state = 6835
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6836
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6839
                self.match(TeradataSQLParser.DATEFORM)
                self.state = 6840
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6841
                _la = self._input.LA(1)
                if not(_la==17 or _la==203):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6845
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6842
                    self.match(TeradataSQLParser.SET)
                    self.state = 6843
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6844
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6847
                self.match(TeradataSQLParser.DEBUG)
                self.state = 6848
                self.session_debug_spec()
                self.state = 6849
                _la = self._input.LA(1)
                if not(_la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6854
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6851
                    self.match(TeradataSQLParser.SET)
                    self.state = 6852
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6853
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6856
                self.match(TeradataSQLParser.DOT)
                self.state = 6857
                self.match(TeradataSQLParser.NOTATION)
                self.state = 6858
                _la = self._input.LA(1)
                if not(_la==111 or _la==137 or _la==274 or _la==741):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6859
                self.match(TeradataSQLParser.ON)
                self.state = 6860
                self.match(TeradataSQLParser.ERROR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 6864
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6861
                    self.match(TeradataSQLParser.SET)
                    self.state = 6862
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6863
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6866
                self.match(TeradataSQLParser.FOR)
                self.state = 6868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 6867
                    self.match(TeradataSQLParser.NO)


                self.state = 6871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==587:
                    self.state = 6870
                    self.match(TeradataSQLParser.CONCURRENT)


                self.state = 6873
                self.match(TeradataSQLParser.ISOLATED)
                self.state = 6874
                self.match(TeradataSQLParser.LOADING)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 6878
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6875
                    self.match(TeradataSQLParser.SET)
                    self.state = 6876
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6877
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6880
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 6881
                self.match(TeradataSQLParser.TRACE)
                self.state = 6884
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [457]:
                    self.state = 6882
                    self.trace_enabling_spec()
                    pass
                elif token in [283]:
                    self.state = 6883
                    self.match(TeradataSQLParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 6889
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6886
                    self.match(TeradataSQLParser.SET)
                    self.state = 6887
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6888
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6891
                self.match(TeradataSQLParser.JSON)
                self.state = 6892
                self.match(TeradataSQLParser.IGNORE)
                self.state = 6893
                self.match(TeradataSQLParser.ERRORS)
                self.state = 6894
                _la = self._input.LA(1)
                if not(_la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 6898
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6895
                    self.match(TeradataSQLParser.SET)
                    self.state = 6896
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6897
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6900
                self.match(TeradataSQLParser.SEARCHUIFDBPATH)
                self.state = 6901
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6902
                self.database_name()
                self.state = 6907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6903
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6904
                    self.database_name()
                    self.state = 6909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 6913
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6910
                    self.match(TeradataSQLParser.SET)
                    self.state = 6911
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6912
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6915
                self.match(TeradataSQLParser.CHARACTERISTICS)
                self.state = 6916
                self.match(TeradataSQLParser.AS)
                self.state = 6917
                self.match(TeradataSQLParser.TRANSACTION)
                self.state = 6918
                self.match(TeradataSQLParser.ISOLATION)
                self.state = 6919
                self.match(TeradataSQLParser.LEVEL)
                self.state = 6920
                self.isolation_level()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 6921
                self.match(TeradataSQLParser.SET)
                self.state = 6922
                self.match(TeradataSQLParser.TIME)
                self.state = 6923
                self.match(TeradataSQLParser.ZONE)
                self.state = 6927
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
                if la_ == 1:
                    self.state = 6924
                    self.match(TeradataSQLParser.LOCAL)
                    pass

                elif la_ == 2:
                    self.state = 6925
                    self.match(TeradataSQLParser.USER)
                    pass

                elif la_ == 3:
                    self.state = 6926
                    self.scalar_expr(0)
                    pass


                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 6932
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [372]:
                    self.state = 6929
                    self.match(TeradataSQLParser.SET)
                    self.state = 6930
                    self.match(TeradataSQLParser.SESSION)
                    pass
                elif token in [391]:
                    self.state = 6931
                    self.match(TeradataSQLParser.SS)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6934
                self.match(TeradataSQLParser.UDFSEARCHPATH)
                self.state = 6935
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6936
                self.database_name()
                self.state = 6941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6937
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6938
                    self.database_name()
                    self.state = 6943
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 6944
                self.match(TeradataSQLParser.FOR)
                self.state = 6945
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 6946
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 6947
                localctx._table_name = self.table_name()
                localctx.udf_name.append(localctx._table_name)
                self.state = 6952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6948
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6949
                    localctx._table_name = self.table_name()
                    localctx.udf_name.append(localctx._table_name)
                    self.state = 6954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_sequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASCII(self):
            return self.getToken(TeradataSQLParser.ASCII, 0)

        def CHARSET_COLL(self):
            return self.getToken(TeradataSQLParser.CHARSET_COLL, 0)

        def EBCDIC(self):
            return self.getToken(TeradataSQLParser.EBCDIC, 0)

        def HOST(self):
            return self.getToken(TeradataSQLParser.HOST, 0)

        def JIS_COLL(self):
            return self.getToken(TeradataSQLParser.JIS_COLL, 0)

        def MULTINATIONAL(self):
            return self.getToken(TeradataSQLParser.MULTINATIONAL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_collation_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_sequence" ):
                listener.enterCollation_sequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_sequence" ):
                listener.exitCollation_sequence(self)




    def collation_sequence(self):

        localctx = TeradataSQLParser.Collation_sequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_collation_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6957
            _la = self._input.LA(1)
            if not(_la==535 or _la==570 or _la==642 or _la==691 or _la==719 or _la==788):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_level_security_constraint_name = None # Unqualified_nameContext
            self.level_name = None # Unqualified_nameContext
            self._unqualified_name = None # Unqualified_nameContext
            self.category_name = list() # of Unqualified_nameContexts

        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_session_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_constraint" ):
                listener.enterSession_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_constraint" ):
                listener.exitSession_constraint(self)




    def session_constraint(self):

        localctx = TeradataSQLParser.Session_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_session_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6959
            self.match(TeradataSQLParser.CONSTRAINT)
            self.state = 6960
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 6961
            localctx.row_level_security_constraint_name = self.unqualified_name()
            self.state = 6962
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 6973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,822,self._ctx)
            if la_ == 1:
                self.state = 6963
                localctx.level_name = self.unqualified_name()
                pass

            elif la_ == 2:
                self.state = 6964
                localctx._unqualified_name = self.unqualified_name()
                localctx.category_name.append(localctx._unqualified_name)
                self.state = 6969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 6965
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 6966
                    localctx._unqualified_name = self.unqualified_name()
                    localctx.category_name.append(localctx._unqualified_name)
                    self.state = 6971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 6972
                self.match(TeradataSQLParser.NULL)
                pass


            self.state = 6975
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isolation_levelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(TeradataSQLParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(TeradataSQLParser.UNCOMMITTED, 0)

        def RU(self):
            return self.getToken(TeradataSQLParser.RU, 0)

        def SERIALIZABLE(self):
            return self.getToken(TeradataSQLParser.SERIALIZABLE, 0)

        def SR(self):
            return self.getToken(TeradataSQLParser.SR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_isolation_level

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolation_level" ):
                listener.enterIsolation_level(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolation_level" ):
                listener.exitIsolation_level(self)




    def isolation_level(self):

        localctx = TeradataSQLParser.Isolation_levelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_isolation_level)
        try:
            self.state = 6982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [877]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6977
                self.match(TeradataSQLParser.READ)
                self.state = 6978
                self.match(TeradataSQLParser.UNCOMMITTED)
                pass
            elif token in [900]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6979
                self.match(TeradataSQLParser.RU)
                pass
            elif token in [916]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6980
                self.match(TeradataSQLParser.SERIALIZABLE)
                pass
            elif token in [935]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6981
                self.match(TeradataSQLParser.SR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Session_debug_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,0)


        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_session_debug_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSession_debug_spec" ):
                listener.enterSession_debug_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSession_debug_spec" ):
                listener.exitSession_debug_spec(self)




    def session_debug_spec(self):

        localctx = TeradataSQLParser.Session_debug_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_session_debug_spec)
        try:
            self.state = 6993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [166]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6984
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 6985
                self.function_name()
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6986
                self.match(TeradataSQLParser.PROCEDURE)
                self.state = 6987
                self.procedure_name()
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6988
                self.match(TeradataSQLParser.METHOD)
                self.state = 6990
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
                if la_ == 1:
                    self.state = 6989
                    self.sysudtlib()


                self.state = 6992
                self.method_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trace_enabling_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.mask_string = None # Char_string_literalContext

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def TRACE(self):
            return self.getToken(TeradataSQLParser.TRACE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_trace_enabling_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrace_enabling_spec" ):
                listener.enterTrace_enabling_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrace_enabling_spec" ):
                listener.exitTrace_enabling_spec(self)




    def trace_enabling_spec(self):

        localctx = TeradataSQLParser.Trace_enabling_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_trace_enabling_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6995
            self.match(TeradataSQLParser.USING)
            self.state = 6996
            localctx.mask_string = self.char_string_literal()
            self.state = 6997
            self.match(TeradataSQLParser.FOR)
            self.state = 6999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==428:
                self.state = 6998
                self.match(TeradataSQLParser.TRACE)


            self.state = 7001
            self.match(TeradataSQLParser.TABLE)
            self.state = 7002
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def role_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,0)


        def EXTERNAL(self):
            return self.getToken(TeradataSQLParser.EXTERNAL, 0)

        def NONE(self):
            return self.getToken(TeradataSQLParser.NONE, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_set_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_role_stat" ):
                listener.enterSet_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_role_stat" ):
                listener.exitSet_role_stat(self)




    def set_role_stat(self):

        localctx = TeradataSQLParser.Set_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_set_role_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7004
            self.match(TeradataSQLParser.SET)
            self.state = 7005
            self.match(TeradataSQLParser.ROLE)
            self.state = 7011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 7006
                self.role_name()
                pass
            elif token in [151]:
                self.state = 7007
                self.match(TeradataSQLParser.EXTERNAL)
                pass
            elif token in [269]:
                self.state = 7008
                self.match(TeradataSQLParser.NONE)
                pass
            elif token in [274]:
                self.state = 7009
                self.match(TeradataSQLParser.NULL)
                pass
            elif token in [13]:
                self.state = 7010
                self.match(TeradataSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_query_band_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.band_spec = None # Char_string_literalContext

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLParser.QUERY_BAND, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def NONE(self):
            return self.getToken(TeradataSQLParser.NONE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLParser.SESSION, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLParser.TRANSACTION, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def VOLATILE(self):
            return self.getToken(TeradataSQLParser.VOLATILE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_set_query_band_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_query_band_stat" ):
                listener.enterSet_query_band_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_query_band_stat" ):
                listener.exitSet_query_band_stat(self)




    def set_query_band_stat(self):

        localctx = TeradataSQLParser.Set_query_band_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_set_query_band_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7013
            self.match(TeradataSQLParser.SET)
            self.state = 7014
            self.match(TeradataSQLParser.QUERY_BAND)
            self.state = 7015
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 7018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 7016
                localctx.band_spec = self.char_string_literal()
                pass
            elif token in [269]:
                self.state = 7017
                self.match(TeradataSQLParser.NONE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 7020
                self.match(TeradataSQLParser.UPDATE)


            self.state = 7023
            self.match(TeradataSQLParser.FOR)
            self.state = 7029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [371]:
                self.state = 7024
                self.match(TeradataSQLParser.SESSION)
                self.state = 7026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==469:
                    self.state = 7025
                    self.match(TeradataSQLParser.VOLATILE)


                pass
            elif token in [430]:
                self.state = 7028
                self.match(TeradataSQLParser.TRANSACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_object_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_show_object_stat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowMethodStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def method(self):
            return self.getTypedRuleContext(TeradataSQLParser.MethodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMethodStat" ):
                listener.enterShowMethodStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMethodStat" ):
                listener.exitShowMethodStat(self)


    class ShowForeignServerContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.server_name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)
        def SERVER(self):
            return self.getToken(TeradataSQLParser.SERVER, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)
        def td_server_db(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_server_dbContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowForeignServer" ):
                listener.enterShowForeignServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowForeignServer" ):
                listener.exitShowForeignServer(self)


    class ShowSpecificFunctionStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSpecificFunctionStat" ):
                listener.enterShowSpecificFunctionStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSpecificFunctionStat" ):
                listener.exitShowSpecificFunctionStat(self)


    class ShowAuthorizationStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.authorization_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLParser.AUTHORIZATION, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowAuthorizationStat" ):
                listener.enterShowAuthorizationStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowAuthorizationStat" ):
                listener.exitShowAuthorizationStat(self)


    class ShowErrorTableStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.data_table_name = None # Table_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def ERROR(self):
            return self.getToken(TeradataSQLParser.ERROR, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)
        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowErrorTableStat" ):
                listener.enterShowErrorTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowErrorTableStat" ):
                listener.exitShowErrorTableStat(self)


    class ShowStorageFormatSchemaStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.schema_name = None # Udt_typeContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLParser.Dataset_storage_formatContext,0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLParser.SCHEMA, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)

        def with_schema(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_schemaContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowStorageFormatSchemaStat" ):
                listener.enterShowStorageFormatSchemaStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowStorageFormatSchemaStat" ):
                listener.exitShowStorageFormatSchemaStat(self)


    class ShowFileStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.uif_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def FILE(self):
            return self.getToken(TeradataSQLParser.FILE, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFileStat" ):
                listener.enterShowFileStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFileStat" ):
                listener.exitShowFileStat(self)


    class ShowHashIndexStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.hash_index_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def HASH(self):
            return self.getToken(TeradataSQLParser.HASH, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowHashIndexStat" ):
                listener.enterShowHashIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowHashIndexStat" ):
                listener.exitShowHashIndexStat(self)


    class ShowCastStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def CAST(self):
            return self.getToken(TeradataSQLParser.CAST, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCastStat" ):
                listener.enterShowCastStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCastStat" ):
                listener.exitShowCastStat(self)


    class ShowMacroStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def MACRO(self):
            return self.getToken(TeradataSQLParser.MACRO, 0)
        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Macro_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMacroStat" ):
                listener.enterShowMacroStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMacroStat" ):
                listener.exitShowMacroStat(self)


    class ShowGlopSetStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.glop_set_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def GLOP(self):
            return self.getToken(TeradataSQLParser.GLOP, 0)
        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlopSetStat" ):
                listener.enterShowGlopSetStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlopSetStat" ):
                listener.exitShowGlopSetStat(self)


    class ShowSpecificMethodStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)
        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSpecificMethodStat" ):
                listener.enterShowSpecificMethodStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSpecificMethodStat" ):
                listener.exitShowSpecificMethodStat(self)


    class ShowProcedureStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)
        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProcedureStat" ):
                listener.enterShowProcedureStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProcedureStat" ):
                listener.exitShowProcedureStat(self)


    class ShowConstraintStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.constraint_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowConstraintStat" ):
                listener.enterShowConstraintStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowConstraintStat" ):
                listener.exitShowConstraintStat(self)


    class ShowTypeStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)
        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTypeStat" ):
                listener.enterShowTypeStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTypeStat" ):
                listener.exitShowTypeStat(self)


    class ShowTableStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)
        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTableStat" ):
                listener.enterShowTableStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTableStat" ):
                listener.exitShowTableStat(self)


    class ShowJoinIndexStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.join_index_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def JOIN(self):
            return self.getToken(TeradataSQLParser.JOIN, 0)
        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowJoinIndexStat" ):
                listener.enterShowJoinIndexStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowJoinIndexStat" ):
                listener.exitShowJoinIndexStat(self)


    class ShowTriggerStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.trigger_name = None # Object_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def TRIGGER(self):
            return self.getToken(TeradataSQLParser.TRIGGER, 0)
        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTriggerStat" ):
                listener.enterShowTriggerStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTriggerStat" ):
                listener.exitShowTriggerStat(self)


    class ShowViewStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.view_name = None # Table_nameContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)
        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)
        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowViewStat" ):
                listener.enterShowViewStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowViewStat" ):
                listener.exitShowViewStat(self)


    class ShowFunctionStatContext(Show_object_statContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Show_object_statContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)
        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)
        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def variable_data_type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Variable_data_typeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Variable_data_typeContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFunctionStat" ):
                listener.enterShowFunctionStat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFunctionStat" ):
                listener.exitShowFunctionStat(self)



    def show_object_stat(self):

        localctx = TeradataSQLParser.Show_object_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_show_object_stat)
        self._la = 0 # Token type
        try:
            self.state = 7145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,843,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLParser.ShowHashIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 7031
                self.match(TeradataSQLParser.SHOW)
                self.state = 7034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7032
                    self.match(TeradataSQLParser.IN)
                    self.state = 7033
                    self.match(TeradataSQLParser.XML)


                self.state = 7036
                self.match(TeradataSQLParser.HASH)
                self.state = 7037
                self.match(TeradataSQLParser.INDEX)
                self.state = 7038
                localctx.hash_index_name = self.object_name()
                pass

            elif la_ == 2:
                localctx = TeradataSQLParser.ShowJoinIndexStatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 7039
                self.match(TeradataSQLParser.SHOW)
                self.state = 7042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7040
                    self.match(TeradataSQLParser.IN)
                    self.state = 7041
                    self.match(TeradataSQLParser.XML)


                self.state = 7044
                self.match(TeradataSQLParser.JOIN)
                self.state = 7045
                self.match(TeradataSQLParser.INDEX)
                self.state = 7046
                localctx.join_index_name = self.object_name()
                pass

            elif la_ == 3:
                localctx = TeradataSQLParser.ShowMacroStatContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 7047
                self.match(TeradataSQLParser.SHOW)
                self.state = 7048
                self.match(TeradataSQLParser.MACRO)
                self.state = 7049
                self.macro_name()
                pass

            elif la_ == 4:
                localctx = TeradataSQLParser.ShowTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 7050
                self.match(TeradataSQLParser.SHOW)
                self.state = 7053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7051
                    self.match(TeradataSQLParser.IN)
                    self.state = 7052
                    self.match(TeradataSQLParser.XML)


                self.state = 7056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==417:
                    self.state = 7055
                    self.match(TeradataSQLParser.TEMPORARY)


                self.state = 7058
                self.match(TeradataSQLParser.TABLE)
                self.state = 7059
                self.table_name()
                pass

            elif la_ == 5:
                localctx = TeradataSQLParser.ShowErrorTableStatContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 7060
                self.match(TeradataSQLParser.SHOW)
                self.state = 7061
                self.match(TeradataSQLParser.ERROR)
                self.state = 7062
                self.match(TeradataSQLParser.TABLE)
                self.state = 7063
                self.match(TeradataSQLParser.FOR)
                self.state = 7064
                localctx.data_table_name = self.table_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLParser.ShowTriggerStatContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 7065
                self.match(TeradataSQLParser.SHOW)
                self.state = 7066
                self.match(TeradataSQLParser.TRIGGER)
                self.state = 7067
                localctx.trigger_name = self.object_name()
                pass

            elif la_ == 7:
                localctx = TeradataSQLParser.ShowViewStatContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 7068
                self.match(TeradataSQLParser.SHOW)
                self.state = 7071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7069
                    self.match(TeradataSQLParser.IN)
                    self.state = 7070
                    self.match(TeradataSQLParser.XML)


                self.state = 7073
                self.match(TeradataSQLParser.VIEW)
                self.state = 7074
                localctx.view_name = self.table_name()
                pass

            elif la_ == 8:
                localctx = TeradataSQLParser.ShowProcedureStatContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 7075
                self.match(TeradataSQLParser.SHOW)
                self.state = 7076
                self.match(TeradataSQLParser.PROCEDURE)
                self.state = 7077
                self.procedure_name()
                pass

            elif la_ == 9:
                localctx = TeradataSQLParser.ShowSpecificFunctionStatContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 7078
                self.match(TeradataSQLParser.SHOW)
                self.state = 7079
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 7080
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 7081
                self.function_name()
                pass

            elif la_ == 10:
                localctx = TeradataSQLParser.ShowFunctionStatContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 7082
                self.match(TeradataSQLParser.SHOW)
                self.state = 7083
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 7084
                self.function_name()
                self.state = 7096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 7085
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 7086
                    self.variable_data_type()
                    self.state = 7091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 7087
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 7088
                        self.variable_data_type()
                        self.state = 7093
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 7094
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass

            elif la_ == 11:
                localctx = TeradataSQLParser.ShowSpecificMethodStatContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 7098
                self.match(TeradataSQLParser.SHOW)
                self.state = 7099
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 7100
                self.match(TeradataSQLParser.METHOD)
                self.state = 7102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,839,self._ctx)
                if la_ == 1:
                    self.state = 7101
                    self.sysudtlib()


                self.state = 7104
                self.method_name()
                pass

            elif la_ == 12:
                localctx = TeradataSQLParser.ShowMethodStatContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 7105
                self.match(TeradataSQLParser.SHOW)
                self.state = 7106
                self.method()
                pass

            elif la_ == 13:
                localctx = TeradataSQLParser.ShowCastStatContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 7107
                self.match(TeradataSQLParser.SHOW)
                self.state = 7108
                self.match(TeradataSQLParser.CAST)
                self.state = 7109
                self.udt_type()
                pass

            elif la_ == 14:
                localctx = TeradataSQLParser.ShowTypeStatContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 7110
                self.match(TeradataSQLParser.SHOW)
                self.state = 7111
                self.match(TeradataSQLParser.TYPE)
                self.state = 7112
                self.udt_type()
                pass

            elif la_ == 15:
                localctx = TeradataSQLParser.ShowStorageFormatSchemaStatContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 7113
                self.match(TeradataSQLParser.SHOW)
                self.state = 7114
                self.dataset_storage_format()
                self.state = 7116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 7115
                    self.with_schema()


                self.state = 7118
                self.match(TeradataSQLParser.SCHEMA)
                self.state = 7119
                localctx.schema_name = self.udt_type()
                pass

            elif la_ == 16:
                localctx = TeradataSQLParser.ShowFileStatContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 7121
                self.match(TeradataSQLParser.SHOW)
                self.state = 7122
                self.match(TeradataSQLParser.FILE)
                self.state = 7123
                localctx.uif_name = self.object_name()
                pass

            elif la_ == 17:
                localctx = TeradataSQLParser.ShowConstraintStatContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 7124
                self.match(TeradataSQLParser.SHOW)
                self.state = 7125
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 7126
                localctx.constraint_name = self.object_name()
                pass

            elif la_ == 18:
                localctx = TeradataSQLParser.ShowAuthorizationStatContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 7127
                self.match(TeradataSQLParser.SHOW)
                self.state = 7128
                self.match(TeradataSQLParser.AUTHORIZATION)
                self.state = 7129
                localctx.authorization_name = self.object_name()
                pass

            elif la_ == 19:
                localctx = TeradataSQLParser.ShowGlopSetStatContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 7130
                self.match(TeradataSQLParser.SHOW)
                self.state = 7131
                self.match(TeradataSQLParser.GLOP)
                self.state = 7132
                self.match(TeradataSQLParser.SET)
                self.state = 7133
                localctx.glop_set_name = self.object_name()
                pass

            elif la_ == 20:
                localctx = TeradataSQLParser.ShowForeignServerContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 7134
                self.match(TeradataSQLParser.SHOW)
                self.state = 7137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 7135
                    self.match(TeradataSQLParser.IN)
                    self.state = 7136
                    self.match(TeradataSQLParser.XML)


                self.state = 7139
                self.match(TeradataSQLParser.FOREIGN)
                self.state = 7140
                self.match(TeradataSQLParser.SERVER)
                self.state = 7142
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,842,self._ctx)
                if la_ == 1:
                    self.state = 7141
                    self.td_server_db()


                self.state = 7144
                localctx.server_name = self.unqualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_query_logging_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def query_logging_on_items(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_logging_on_itemsContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_show_query_logging_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_query_logging_stat" ):
                listener.enterShow_query_logging_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_query_logging_stat" ):
                listener.exitShow_query_logging_stat(self)




    def show_query_logging_stat(self):

        localctx = TeradataSQLParser.Show_query_logging_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_show_query_logging_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7147
            self.match(TeradataSQLParser.SHOW)
            self.state = 7148
            self.match(TeradataSQLParser.QUERY)
            self.state = 7149
            self.match(TeradataSQLParser.LOGGING)
            self.state = 7150
            self.match(TeradataSQLParser.ON)
            self.state = 7151
            self.query_logging_on_items()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_request_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)

        def dml_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Dml_statContext,0)


        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def QUALIFIED(self):
            return self.getToken(TeradataSQLParser.QUALIFIED, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_show_request_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_request_stat" ):
                listener.enterShow_request_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_request_stat" ):
                listener.exitShow_request_stat(self)




    def show_request_stat(self):

        localctx = TeradataSQLParser.Show_request_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_show_request_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7153
            self.match(TeradataSQLParser.SHOW)
            self.state = 7156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 7154
                self.match(TeradataSQLParser.IN)
                self.state = 7155
                self.match(TeradataSQLParser.XML)


            self.state = 7159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==314:
                self.state = 7158
                self.match(TeradataSQLParser.QUALIFIED)


            self.state = 7161
            self.dml_stat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_statistics_optimizer_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Table_nameContext

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLParser.STAT, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def SUMMARY(self):
            return self.getToken(TeradataSQLParser.SUMMARY, 0)

        def CURRENT(self):
            return self.getToken(TeradataSQLParser.CURRENT, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLParser.VALUES, 0)

        def show_stats_target_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Show_stats_target_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Show_stats_target_specContext,i)


        def SEQUENCED(self):
            return self.getToken(TeradataSQLParser.SEQUENCED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_show_statistics_optimizer_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_statistics_optimizer_form_stat" ):
                listener.enterShow_statistics_optimizer_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_statistics_optimizer_form_stat" ):
                listener.exitShow_statistics_optimizer_form_stat(self)




    def show_statistics_optimizer_form_stat(self):

        localctx = TeradataSQLParser.Show_statistics_optimizer_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_show_statistics_optimizer_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7163
            self.match(TeradataSQLParser.SHOW)
            self.state = 7166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 7164
                self.match(TeradataSQLParser.IN)
                self.state = 7165
                self.match(TeradataSQLParser.XML)


            self.state = 7169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==404:
                self.state = 7168
                self.match(TeradataSQLParser.SUMMARY)


            self.state = 7172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==93:
                self.state = 7171
                self.match(TeradataSQLParser.CURRENT)


            self.state = 7174
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==460:
                self.state = 7175
                self.match(TeradataSQLParser.VALUES)
                self.state = 7177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==915:
                    self.state = 7176
                    self.match(TeradataSQLParser.SEQUENCED)




            self.state = 7189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==192 or _la==448:
                self.state = 7181
                self.show_stats_target_spec()
                self.state = 7186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7182
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7183
                    self.show_stats_target_spec()
                    self.state = 7188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7191
            self.match(TeradataSQLParser.ON)
            self.state = 7195
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [417]:
                self.state = 7192
                self.match(TeradataSQLParser.TEMPORARY)
                self.state = 7193
                self.table_name()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 7194
                localctx.index_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext
            self.query_id = None # Integer_literalContext
            self.statistics_id = None # Integer_literalContext

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLParser.STAT, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLParser.VALUES, 0)

        def show_stats_target_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Show_stats_target_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Show_stats_target_specContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def SAMPLEID(self):
            return self.getToken(TeradataSQLParser.SAMPLEID, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLParser.MODIFIED, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def SEQUENCED(self):
            return self.getToken(TeradataSQLParser.SEQUENCED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_show_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_statistics_qcd_form_stat" ):
                listener.enterShow_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_statistics_qcd_form_stat" ):
                listener.exitShow_statistics_qcd_form_stat(self)




    def show_statistics_qcd_form_stat(self):

        localctx = TeradataSQLParser.Show_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_show_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7197
            self.match(TeradataSQLParser.SHOW)
            self.state = 7200
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 7198
                self.match(TeradataSQLParser.IN)
                self.state = 7199
                self.match(TeradataSQLParser.XML)


            self.state = 7202
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==460:
                self.state = 7203
                self.match(TeradataSQLParser.VALUES)
                self.state = 7205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==915:
                    self.state = 7204
                    self.match(TeradataSQLParser.SEQUENCED)




            self.state = 7217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==192 or _la==448:
                self.state = 7209
                self.show_stats_target_spec()
                self.state = 7214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7210
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7211
                    self.show_stats_target_spec()
                    self.state = 7216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7219
            self.match(TeradataSQLParser.ON)
            self.state = 7220
            self.object_name()
            self.state = 7221
            self.match(TeradataSQLParser.FROM)
            self.state = 7222
            localctx.qcd_name = self.database_name()
            self.state = 7226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 7223
                self.match(TeradataSQLParser.FOR)
                self.state = 7224
                self.match(TeradataSQLParser.QUERY)
                self.state = 7225
                localctx.query_id = self.integer_literal()


            self.state = 7230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 7228
                self.match(TeradataSQLParser.SAMPLEID)
                self.state = 7229
                localctx.statistics_id = self.integer_literal()


            self.state = 7234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 7232
                self.match(TeradataSQLParser.USING)
                self.state = 7233
                self.match(TeradataSQLParser.MODIFIED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_stats_target_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def stats_index_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Stats_index_specContext,0)


        def UNIQUE(self):
            return self.getToken(TeradataSQLParser.UNIQUE, 0)

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def stats_column_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Stats_column_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_show_stats_target_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_stats_target_spec" ):
                listener.enterShow_stats_target_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_stats_target_spec" ):
                listener.exitShow_stats_target_spec(self)




    def show_stats_target_spec(self):

        localctx = TeradataSQLParser.Show_stats_target_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_show_stats_target_spec)
        self._la = 0 # Token type
        try:
            self.state = 7243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [192, 448]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==448:
                    self.state = 7236
                    self.match(TeradataSQLParser.UNIQUE)


                self.state = 7239
                self.match(TeradataSQLParser.INDEX)
                self.state = 7240
                self.stats_index_spec()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7241
                self.match(TeradataSQLParser.COLUMN)
                self.state = 7242
                self.stats_column_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.for_udt_name = None # Udt_nameContext

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,0)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def udt_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Udt_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def INSTANCE(self):
            return self.getToken(TeradataSQLParser.INSTANCE, 0)

        def CONSTRUCTOR(self):
            return self.getToken(TeradataSQLParser.CONSTRUCTOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod" ):
                listener.enterMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod" ):
                listener.exitMethod(self)




    def method(self):

        localctx = TeradataSQLParser.MethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==199:
                self.state = 7245
                _la = self._input.LA(1)
                if not(_la==75 or _la==199):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7248
            self.match(TeradataSQLParser.METHOD)
            self.state = 7249
            self.method_name()
            self.state = 7262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 7250
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 7259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 7251
                    self.udt_name()
                    self.state = 7256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 7252
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 7253
                        self.udt_name()
                        self.state = 7258
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 7261
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 7264
            self.match(TeradataSQLParser.FOR)
            self.state = 7265
            localctx.for_udt_name = self.udt_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_loadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLParser.LOAD, 0)

        def IDENTITY(self):
            return self.getToken(TeradataSQLParser.IDENTITY, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_index_loading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_loading" ):
                listener.enterIndex_loading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_loading" ):
                listener.exitIndex_loading(self)




    def index_loading(self):

        localctx = TeradataSQLParser.Index_loadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_index_loading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7267
            self.match(TeradataSQLParser.WITH)
            self.state = 7269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 7268
                self.match(TeradataSQLParser.NO)


            self.state = 7271
            self.match(TeradataSQLParser.LOAD)
            self.state = 7272
            self.match(TeradataSQLParser.IDENTITY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_orderingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order_column_name = None # Unqualified_nameContext

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLParser.VALUES, 0)

        def HASH(self):
            return self.getToken(TeradataSQLParser.HASH, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_index_ordering

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_ordering" ):
                listener.enterIndex_ordering(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_ordering" ):
                listener.exitIndex_ordering(self)




    def index_ordering(self):

        localctx = TeradataSQLParser.Index_orderingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_index_ordering)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7274
            self.match(TeradataSQLParser.ORDER)
            self.state = 7275
            self.match(TeradataSQLParser.BY)
            self.state = 7276
            _la = self._input.LA(1)
            if not(_la==178 or _la==460):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 7277
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 7278
                localctx.order_column_name = self.unqualified_name()
                self.state = 7279
                self.match(TeradataSQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_option_index_formContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def map_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Map_specContext,0)


        def fallback_protection(self):
            return self.getTypedRuleContext(TeradataSQLParser.Fallback_protectionContext,0)


        def CHECKSUM(self):
            return self.getToken(TeradataSQLParser.CHECKSUM, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def OFF(self):
            return self.getToken(TeradataSQLParser.OFF, 0)

        def block_compression(self):
            return self.getTypedRuleContext(TeradataSQLParser.Block_compressionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_option_index_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_option_index_form" ):
                listener.enterTable_option_index_form(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_option_index_form" ):
                listener.exitTable_option_index_form(self)




    def table_option_index_form(self):

        localctx = TeradataSQLParser.Table_option_index_formContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_table_option_index_form)
        self._la = 0 # Token type
        try:
            self.state = 7289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [236]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7283
                self.map_spec()
                pass
            elif token in [153, 268]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7284
                self.fallback_protection()
                pass
            elif token in [571]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7285
                self.match(TeradataSQLParser.CHECKSUM)
                self.state = 7286
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 7287
                _la = self._input.LA(1)
                if not(_la==111 or _la==283 or _la==286):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [551]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7288
                self.block_compression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext
            self.colocation_name = None # Unqualified_nameContext

        def MAP(self):
            return self.getToken(TeradataSQLParser.MAP, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def unqualified_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unqualified_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,i)


        def COLOCATE(self):
            return self.getToken(TeradataSQLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_map_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_spec" ):
                listener.enterMap_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_spec" ):
                listener.exitMap_spec(self)




    def map_spec(self):

        localctx = TeradataSQLParser.Map_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_map_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7291
            self.match(TeradataSQLParser.MAP)
            self.state = 7292
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 7293
            localctx.map_name = self.unqualified_name()
            self.state = 7297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 7294
                self.match(TeradataSQLParser.COLOCATE)
                self.state = 7295
                self.match(TeradataSQLParser.USING)
                self.state = 7296
                localctx.colocation_name = self.unqualified_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_size_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.size = None # Scalar_exprContext

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def PERMANENT(self):
            return self.getToken(TeradataSQLParser.PERMANENT, 0)

        def PERM(self):
            return self.getToken(TeradataSQLParser.PERM, 0)

        def SPOOL(self):
            return self.getToken(TeradataSQLParser.SPOOL, 0)

        def TEMPORARY(self):
            return self.getToken(TeradataSQLParser.TEMPORARY, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def BYTES(self):
            return self.getToken(TeradataSQLParser.BYTES, 0)

        def skew_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Skew_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_database_size_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_size_spec" ):
                listener.enterDatabase_size_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_size_spec" ):
                listener.exitDatabase_size_spec(self)




    def database_size_spec(self):

        localctx = TeradataSQLParser.Database_size_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_database_size_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7299
            _la = self._input.LA(1)
            if not(_la==302 or _la==303 or _la==385 or _la==417):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7300
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 7301
            localctx.size = self.scalar_expr(0)
            self.state = 7303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 7302
                self.match(TeradataSQLParser.BYTES)


            self.state = 7306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==380:
                self.state = 7305
                self.skew_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Skew_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.skew_pct = None # Integer_literalContext

        def SKEW(self):
            return self.getToken(TeradataSQLParser.SKEW, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLParser.PERCENT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_skew_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkew_spec" ):
                listener.enterSkew_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkew_spec" ):
                listener.exitSkew_spec(self)




    def skew_spec(self):

        localctx = TeradataSQLParser.Skew_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_skew_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7308
            self.match(TeradataSQLParser.SKEW)
            self.state = 7309
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 7312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 7310
                localctx.skew_pct = self.integer_literal()
                pass
            elif token in [111]:
                self.state = 7311
                self.match(TeradataSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 7314
                self.match(TeradataSQLParser.PERCENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_default_mapContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def MAP(self):
            return self.getToken(TeradataSQLParser.MAP, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def OVERRIDE(self):
            return self.getToken(TeradataSQLParser.OVERRIDE, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLParser.ERROR, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_database_default_map

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_default_map" ):
                listener.enterDatabase_default_map(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_default_map" ):
                listener.exitDatabase_default_map(self)




    def database_default_map(self):

        localctx = TeradataSQLParser.Database_default_mapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_database_default_map)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7317
            self.match(TeradataSQLParser.DEFAULT)
            self.state = 7318
            self.match(TeradataSQLParser.MAP)
            self.state = 7319
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 7322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 7320
                localctx.map_name = self.unqualified_name()
                pass
            elif token in [274]:
                self.state = 7321
                self.match(TeradataSQLParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==297:
                self.state = 7324
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 7326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 7325
                    self.match(TeradataSQLParser.NOT)


                self.state = 7328
                self.match(TeradataSQLParser.ON)
                self.state = 7329
                self.match(TeradataSQLParser.ERROR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fallback_protectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALLBACK(self):
            return self.getToken(TeradataSQLParser.FALLBACK, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def PROTECTION(self):
            return self.getToken(TeradataSQLParser.PROTECTION, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_fallback_protection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFallback_protection" ):
                listener.enterFallback_protection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFallback_protection" ):
                listener.exitFallback_protection(self)




    def fallback_protection(self):

        localctx = TeradataSQLParser.Fallback_protectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_fallback_protection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 7332
                self.match(TeradataSQLParser.NO)


            self.state = 7335
            self.match(TeradataSQLParser.FALLBACK)
            self.state = 7337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==312:
                self.state = 7336
                self.match(TeradataSQLParser.PROTECTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Before_journalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOURNAL(self):
            return self.getToken(TeradataSQLParser.JOURNAL, 0)

        def BEFORE(self):
            return self.getToken(TeradataSQLParser.BEFORE, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def DUAL(self):
            return self.getToken(TeradataSQLParser.DUAL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_before_journal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBefore_journal" ):
                listener.enterBefore_journal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBefore_journal" ):
                listener.exitBefore_journal(self)




    def before_journal(self):

        localctx = TeradataSQLParser.Before_journalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_before_journal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126 or _la==268:
                self.state = 7339
                _la = self._input.LA(1)
                if not(_la==126 or _la==268):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 7342
                self.match(TeradataSQLParser.BEFORE)


            self.state = 7345
            self.match(TeradataSQLParser.JOURNAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class After_journalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(TeradataSQLParser.AFTER, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLParser.JOURNAL, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def DUAL(self):
            return self.getToken(TeradataSQLParser.DUAL, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_after_journal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAfter_journal" ):
                listener.enterAfter_journal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAfter_journal" ):
                listener.exitAfter_journal(self)




    def after_journal(self):

        localctx = TeradataSQLParser.After_journalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_after_journal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7353
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.state = 7347
                self.match(TeradataSQLParser.NO)
                pass
            elif token in [126]:
                self.state = 7348
                self.match(TeradataSQLParser.DUAL)
                pass
            elif token in [224, 272]:
                self.state = 7350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 7349
                    self.match(TeradataSQLParser.NOT)


                self.state = 7352
                self.match(TeradataSQLParser.LOCAL)
                pass
            elif token in [11]:
                pass
            else:
                pass
            self.state = 7355
            self.match(TeradataSQLParser.AFTER)
            self.state = 7356
            self.match(TeradataSQLParser.JOURNAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_journal_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table_name = None # Table_nameContext

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLParser.JOURNAL, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_default_journal_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_journal_table" ):
                listener.enterDefault_journal_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_journal_table" ):
                listener.exitDefault_journal_table(self)




    def default_journal_table(self):

        localctx = TeradataSQLParser.Default_journal_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_default_journal_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7358
            self.match(TeradataSQLParser.DEFAULT)
            self.state = 7359
            self.match(TeradataSQLParser.JOURNAL)
            self.state = 7360
            self.match(TeradataSQLParser.TABLE)
            self.state = 7361
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 7362
            localctx.journal_table_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_default_journal_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table_name = None # Table_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def JOURNAL(self):
            return self.getToken(TeradataSQLParser.JOURNAL, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_default_journal_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_default_journal_table" ):
                listener.enterDrop_default_journal_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_default_journal_table" ):
                listener.exitDrop_default_journal_table(self)




    def drop_default_journal_table(self):

        localctx = TeradataSQLParser.Drop_default_journal_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_drop_default_journal_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7364
            self.match(TeradataSQLParser.DROP)
            self.state = 7365
            self.match(TeradataSQLParser.DEFAULT)
            self.state = 7366
            self.match(TeradataSQLParser.JOURNAL)
            self.state = 7367
            self.match(TeradataSQLParser.TABLE)
            self.state = 7370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1224:
                self.state = 7368
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 7369
                localctx.journal_table_name = self.table_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD_STRING(self):
            return self.getToken(TeradataSQLParser.PASSWORD_STRING, 0)

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_password

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassword" ):
                listener.enterPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassword" ):
                listener.exitPassword(self)




    def password(self):

        localctx = TeradataSQLParser.PasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_password)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7372
            _la = self._input.LA(1)
            if not(_la==1193 or _la==1205):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dml_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Select_statContext,0)


        def select_and_consume_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Select_and_consume_statContext,0)


        def delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Delete_statContext,0)


        def insert_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Insert_statContext,0)


        def update_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Update_statContext,0)


        def merge_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Merge_statContext,0)


        def collect_demographics_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collect_demographics_statContext,0)


        def collect_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Collect_statistics_qcd_form_statContext,0)


        def drop_statistics_qcd_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Drop_statistics_qcd_form_statContext,0)


        def dump_explain_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Dump_explain_statContext,0)


        def initiate_index_analysis_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Initiate_index_analysis_statContext,0)


        def initiate_partition_analysis_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Initiate_partition_analysis_statContext,0)


        def insert_explain_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Insert_explain_statContext,0)


        def restart_index_analysis_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Restart_index_analysis_statContext,0)


        def call_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Call_statContext,0)


        def execute_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Execute_statContext,0)


        def commit_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Commit_statContext,0)


        def rollback_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rollback_statContext,0)


        def abort_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Abort_statContext,0)


        def begin_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Begin_transaction_statContext,0)


        def end_transaction_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.End_transaction_statContext,0)


        def locking_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_statContext,0)


        def comment_retrieving_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Comment_retrieving_statContext,0)


        def checkpoint_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Checkpoint_statContext,0)


        def echo_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Echo_statContext,0)


        def null_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Null_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_dml_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_stat" ):
                listener.enterDml_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_stat" ):
                listener.exitDml_stat(self)




    def dml_stat(self):

        localctx = TeradataSQLParser.Dml_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_dml_stat)
        try:
            self.state = 7400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,886,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7374
                self.select_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7375
                self.select_and_consume_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7376
                self.delete_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7377
                self.insert_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7378
                self.update_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7379
                self.merge_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7380
                self.collect_demographics_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7381
                self.collect_statistics_qcd_form_stat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 7382
                self.drop_statistics_qcd_form_stat()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 7383
                self.dump_explain_stat()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 7384
                self.initiate_index_analysis_stat()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 7385
                self.initiate_partition_analysis_stat()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 7386
                self.insert_explain_stat()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 7387
                self.restart_index_analysis_stat()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 7388
                self.call_stat()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 7389
                self.execute_stat()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 7390
                self.commit_stat()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 7391
                self.rollback_stat()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 7392
                self.abort_stat()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 7393
                self.begin_transaction_stat()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 7394
                self.end_transaction_stat()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 7395
                self.locking_stat()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 7396
                self.comment_retrieving_stat()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 7397
                self.checkpoint_stat()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 7398
                self.echo_stat()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 7399
                self.null_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_exprContext,0)


        def request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_select_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stat" ):
                listener.enterSelect_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stat" ):
                listener.exitSelect_stat(self)




    def select_stat(self):

        localctx = TeradataSQLParser.Select_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_select_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==150 or _la==226 or _la==227 or _la==457 or _la==474 or _la==938:
                self.state = 7402
                self.request_modifier()


            self.state = 7405
            self.query_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_and_consume_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token
            self.queue_table_name = None # Table_nameContext

        def SELECT(self):
            return self.getToken(TeradataSQLParser.SELECT, 0)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def CONSUME(self):
            return self.getToken(TeradataSQLParser.CONSUME, 0)

        def TOP(self):
            return self.getToken(TeradataSQLParser.TOP, 0)

        def selected_columns(self):
            return self.getTypedRuleContext(TeradataSQLParser.Selected_columnsContext,0)


        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLParser.UNSIGNED_INTEGER, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def into_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Into_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_select_and_consume_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_and_consume_stat" ):
                listener.enterSelect_and_consume_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_and_consume_stat" ):
                listener.exitSelect_and_consume_stat(self)




    def select_and_consume_stat(self):

        localctx = TeradataSQLParser.Select_and_consume_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_select_and_consume_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7407
            self.match(TeradataSQLParser.SELECT)
            self.state = 7408
            self.match(TeradataSQLParser.AND)
            self.state = 7409
            self.match(TeradataSQLParser.CONSUME)
            self.state = 7410
            self.match(TeradataSQLParser.TOP)
            self.state = 7411
            localctx.count = self.match(TeradataSQLParser.UNSIGNED_INTEGER)
            self.state = 7412
            self.selected_columns()
            self.state = 7414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 7413
                self.into_clause()


            self.state = 7416
            self.match(TeradataSQLParser.FROM)
            self.state = 7417
            localctx.queue_table_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext

        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def DEL(self):
            return self.getToken(TeradataSQLParser.DEL, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def delete_table_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Delete_table_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Delete_table_specContext,i)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_isolated_loadingContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Where_clauseContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_delete_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stat" ):
                listener.enterDelete_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stat" ):
                listener.exitDelete_stat(self)




    def delete_stat(self):

        localctx = TeradataSQLParser.Delete_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_delete_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7419
                self.locking_request_modifier()


            self.state = 7422
            _la = self._input.LA(1)
            if not(_la==114 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7423
                self.with_isolated_loading()


            self.state = 7446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,893,self._ctx)
            if la_ == 1:
                self.state = 7426
                localctx.target_table_name = self.table_name()
                pass

            elif la_ == 2:
                self.state = 7427
                self.match(TeradataSQLParser.FROM)
                self.state = 7428
                self.delete_table_spec()
                self.state = 7433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7429
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7430
                    self.delete_table_spec()
                    self.state = 7435
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 7436
                localctx.target_table_name = self.table_name()
                self.state = 7437
                self.match(TeradataSQLParser.FROM)
                self.state = 7438
                self.delete_table_spec()
                self.state = 7443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7439
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7440
                    self.delete_table_spec()
                    self.state = 7445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 7450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [471]:
                self.state = 7448
                self.where_clause()
                pass
            elif token in [13]:
                self.state = 7449
                self.match(TeradataSQLParser.ALL)
                pass
            elif token in [-1, 1206]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.correlation_name = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_delete_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_table_spec" ):
                listener.enterDelete_table_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_table_spec" ):
                listener.exitDelete_table_spec(self)




    def delete_table_spec(self):

        localctx = TeradataSQLParser.Delete_table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_delete_table_spec)
        self._la = 0 # Token type
        try:
            self.state = 7465
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7452
                self.table_name()
                self.state = 7457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 7454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 7453
                        self.match(TeradataSQLParser.AS)


                    self.state = 7456
                    localctx.correlation_name = self.alias_name()


                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7459
                self.subquery()
                self.state = 7461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7460
                    self.match(TeradataSQLParser.AS)


                self.state = 7463
                localctx.correlation_name = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.select_query = None # Query_exprContext
            self.json_string = None # Char_string_literalContext
            self.parametrized_sql = None # Token

        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def INS(self):
            return self.getToken(TeradataSQLParser.INS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def VALUES(self):
            return self.getToken(TeradataSQLParser.VALUES, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_list_comma_separatedContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLParser.JSON, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_isolated_loadingContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Server_name_referenceContext,0)


        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_exprContext,0)


        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_request_modifierContext,0)


        def hash_by(self):
            return self.getTypedRuleContext(TeradataSQLParser.Hash_byContext,0)


        def local_order_by(self):
            return self.getTypedRuleContext(TeradataSQLParser.Local_order_byContext,0)


        def logging_errors(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logging_errorsContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def QUESTION_MARK(self):
            return self.getToken(TeradataSQLParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_insert_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stat" ):
                listener.enterInsert_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stat" ):
                listener.exitInsert_stat(self)




    def insert_stat(self):

        localctx = TeradataSQLParser.Insert_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_insert_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7467
                self.locking_request_modifier()


            self.state = 7470
            _la = self._input.LA(1)
            if not(_la==197 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7471
                self.with_isolated_loading()


            self.state = 7475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 7474
                self.match(TeradataSQLParser.INTO)


            self.state = 7477
            localctx.target_table_name = self.table_name()
            self.state = 7479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1210:
                self.state = 7478
                self.server_name_reference()


            self.state = 7525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,913,self._ctx)
            if la_ == 1:
                self.state = 7482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==460:
                    self.state = 7481
                    self.match(TeradataSQLParser.VALUES)


                self.state = 7484
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 7486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                    self.state = 7485
                    self.scalar_expr(0)


                self.state = 7494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7488
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                        self.state = 7489
                        self.scalar_expr(0)


                    self.state = 7496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7497
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 7498
                self.column_list()
                self.state = 7499
                self.match(TeradataSQLParser.VALUES)
                self.state = 7500
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 3:
                self.state = 7503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,907,self._ctx)
                if la_ == 1:
                    self.state = 7502
                    self.column_list()


                self.state = 7506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 7505
                    self.with_request_modifier()


                self.state = 7508
                localctx.select_query = self.query_expr(0)
                self.state = 7510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 7509
                    self.hash_by()


                self.state = 7513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 7512
                    self.local_order_by()


                self.state = 7516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==229:
                    self.state = 7515
                    self.logging_errors()


                pass

            elif la_ == 4:
                self.state = 7518
                self.match(TeradataSQLParser.JSON)
                self.state = 7521
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 7519
                    localctx.json_string = self.char_string_literal()
                    pass
                elif token in [1212]:
                    self.state = 7520
                    localctx.parametrized_sql = self.match(TeradataSQLParser.QUESTION_MARK)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.state = 7523
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 7524
                self.match(TeradataSQLParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(TeradataSQLParser.HASH, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def RANDOM(self):
            return self.getToken(TeradataSQLParser.RANDOM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_hash_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_by" ):
                listener.enterHash_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_by" ):
                listener.exitHash_by(self)




    def hash_by(self):

        localctx = TeradataSQLParser.Hash_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_hash_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7527
            self.match(TeradataSQLParser.HASH)
            self.state = 7528
            self.match(TeradataSQLParser.BY)
            self.state = 7538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,915,self._ctx)
            if la_ == 1:
                self.state = 7529
                self.scalar_expr(0)
                self.state = 7534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7530
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7531
                    self.scalar_expr(0)
                    self.state = 7536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 7537
                self.match(TeradataSQLParser.RANDOM)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_order_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_local_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_order_by" ):
                listener.enterLocal_order_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_order_by" ):
                listener.exitLocal_order_by(self)




    def local_order_by(self):

        localctx = TeradataSQLParser.Local_order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_local_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7540
            self.match(TeradataSQLParser.LOCAL)
            self.state = 7541
            self.match(TeradataSQLParser.ORDER)
            self.state = 7542
            self.match(TeradataSQLParser.BY)
            self.state = 7543
            self.order_by_spec_full()
            self.state = 7548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7544
                self.match(TeradataSQLParser.COMMA)
                self.state = 7545
                self.order_by_spec_full()
                self.state = 7550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def update_basic_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Update_basic_form_statContext,0)


        def update_with_from_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Update_with_from_statContext,0)


        def update_upsert_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Update_upsert_form_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_update_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stat" ):
                listener.enterUpdate_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stat" ):
                listener.exitUpdate_stat(self)




    def update_stat(self):

        localctx = TeradataSQLParser.Update_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_update_stat)
        try:
            self.state = 7554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,917,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7551
                self.update_basic_form_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7552
                self.update_with_from_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7553
                self.update_upsert_form_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_basic_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.correlation_name = None # Alias_nameContext

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Set_specContext,i)


        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLParser.UPD, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_isolated_loadingContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Where_clauseContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_update_basic_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_basic_form_stat" ):
                listener.enterUpdate_basic_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_basic_form_stat" ):
                listener.exitUpdate_basic_form_stat(self)




    def update_basic_form_stat(self):

        localctx = TeradataSQLParser.Update_basic_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_update_basic_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7556
                self.locking_request_modifier()


            self.state = 7559
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7560
                self.with_isolated_loading()


            self.state = 7563
            localctx.target_table_name = self.table_name()
            self.state = 7568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 7565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7564
                    self.match(TeradataSQLParser.AS)


                self.state = 7567
                localctx.correlation_name = self.alias_name()


            self.state = 7570
            self.match(TeradataSQLParser.SET)
            self.state = 7571
            self.set_spec()
            self.state = 7576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7572
                self.match(TeradataSQLParser.COMMA)
                self.state = 7573
                self.set_spec()
                self.state = 7578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [471]:
                self.state = 7579
                self.where_clause()
                pass
            elif token in [13]:
                self.state = 7580
                self.match(TeradataSQLParser.ALL)
                pass
            elif token in [-1, 1206]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_with_from_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def update_table_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Update_table_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Update_table_specContext,i)


        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Set_specContext,i)


        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLParser.UPD, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_isolated_loadingContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Where_clauseContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_update_with_from_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_with_from_stat" ):
                listener.enterUpdate_with_from_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_with_from_stat" ):
                listener.exitUpdate_with_from_stat(self)




    def update_with_from_stat(self):

        localctx = TeradataSQLParser.Update_with_from_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_update_with_from_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7583
                self.locking_request_modifier()


            self.state = 7586
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7587
                self.with_isolated_loading()


            self.state = 7590
            localctx.target_table_name = self.table_name()
            self.state = 7591
            self.match(TeradataSQLParser.FROM)
            self.state = 7592
            self.update_table_spec()
            self.state = 7597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7593
                self.match(TeradataSQLParser.COMMA)
                self.state = 7594
                self.update_table_spec()
                self.state = 7599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7600
            self.match(TeradataSQLParser.SET)
            self.state = 7601
            self.set_spec()
            self.state = 7606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7602
                self.match(TeradataSQLParser.COMMA)
                self.state = 7603
                self.set_spec()
                self.state = 7608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [471]:
                self.state = 7609
                self.where_clause()
                pass
            elif token in [13]:
                self.state = 7610
                self.match(TeradataSQLParser.ALL)
                pass
            elif token in [-1, 1206]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_upsert_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.correlation_name = None # Alias_nameContext
            self.insert_table_name = None # Table_nameContext

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Set_specContext,i)


        def WHERE(self):
            return self.getToken(TeradataSQLParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def ELSE(self):
            return self.getToken(TeradataSQLParser.ELSE, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLParser.UPD, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def INS(self):
            return self.getToken(TeradataSQLParser.INS, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_list_comma_separatedContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLParser.VALUES, 0)

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_isolated_loadingContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_update_upsert_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_upsert_form_stat" ):
                listener.enterUpdate_upsert_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_upsert_form_stat" ):
                listener.exitUpdate_upsert_form_stat(self)




    def update_upsert_form_stat(self):

        localctx = TeradataSQLParser.Update_upsert_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_update_upsert_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7613
                self.locking_request_modifier()


            self.state = 7616
            _la = self._input.LA(1)
            if not(_la==452 or _la==453):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7617
                self.with_isolated_loading()


            self.state = 7620
            localctx.target_table_name = self.table_name()

            self.state = 7622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 7621
                self.match(TeradataSQLParser.AS)


            self.state = 7624
            localctx.correlation_name = self.alias_name()
            self.state = 7626
            self.match(TeradataSQLParser.SET)
            self.state = 7627
            self.set_spec()
            self.state = 7632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 7628
                self.match(TeradataSQLParser.COMMA)
                self.state = 7629
                self.set_spec()
                self.state = 7634
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 7635
            self.match(TeradataSQLParser.WHERE)
            self.state = 7636
            self.logical_expr(0)
            self.state = 7637
            self.match(TeradataSQLParser.ELSE)
            self.state = 7638
            _la = self._input.LA(1)
            if not(_la==197 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 7639
                self.match(TeradataSQLParser.INTO)


            self.state = 7642
            localctx.insert_table_name = self.table_name()
            self.state = 7655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,936,self._ctx)
            if la_ == 1:
                self.state = 7644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==460:
                    self.state = 7643
                    self.match(TeradataSQLParser.VALUES)


                self.state = 7646
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 2:
                self.state = 7647
                self.column_list()
                self.state = 7649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==460:
                    self.state = 7648
                    self.match(TeradataSQLParser.VALUES)


                self.state = 7651
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 3:
                self.state = 7653
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 7654
                self.match(TeradataSQLParser.VALUES)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_table_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.correlation_name = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_update_table_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_table_spec" ):
                listener.enterUpdate_table_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_table_spec" ):
                listener.exitUpdate_table_spec(self)




    def update_table_spec(self):

        localctx = TeradataSQLParser.Update_table_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_update_table_spec)
        self._la = 0 # Token type
        try:
            self.state = 7670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7657
                self.table_name()
                self.state = 7662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 7659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 7658
                        self.match(TeradataSQLParser.AS)


                    self.state = 7661
                    localctx.correlation_name = self.alias_name()


                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7664
                self.subquery()
                self.state = 7666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7665
                    self.match(TeradataSQLParser.AS)


                self.state = 7668
                localctx.correlation_name = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Merge_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.target_table_name = None # Table_nameContext
            self.target_correlation_name = None # Alias_nameContext
            self.source_table_name = None # Table_nameContext
            self.source_correlation_name = None # Alias_nameContext
            self.match_condition = None # Logical_exprContext

        def MERGE(self):
            return self.getToken(TeradataSQLParser.MERGE, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def alias_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Alias_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,i)


        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def VALUES(self):
            return self.getToken(TeradataSQLParser.VALUES, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_list_comma_separatedContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def when_matched(self):
            return self.getTypedRuleContext(TeradataSQLParser.When_matchedContext,0)


        def when_not_matched(self):
            return self.getTypedRuleContext(TeradataSQLParser.When_not_matchedContext,0)


        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def with_isolated_loading(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_isolated_loadingContext,0)


        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.AS)
            else:
                return self.getToken(TeradataSQLParser.AS, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def logging_errors(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logging_errorsContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_merge_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_stat" ):
                listener.enterMerge_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_stat" ):
                listener.exitMerge_stat(self)




    def merge_stat(self):

        localctx = TeradataSQLParser.Merge_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_merge_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226 or _la==227:
                self.state = 7672
                self.locking_request_modifier()


            self.state = 7675
            self.match(TeradataSQLParser.MERGE)
            self.state = 7677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7676
                self.with_isolated_loading()


            self.state = 7680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 7679
                self.match(TeradataSQLParser.INTO)


            self.state = 7682
            localctx.target_table_name = self.table_name()
            self.state = 7687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 7684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 7683
                    self.match(TeradataSQLParser.AS)


                self.state = 7686
                localctx.target_correlation_name = self.alias_name()


            self.state = 7689
            self.match(TeradataSQLParser.USING)
            self.state = 7694
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [460]:
                self.state = 7690
                self.match(TeradataSQLParser.VALUES)
                self.state = 7691
                self.scalar_expr_list_comma_separated()
                pass
            elif token in [1213]:
                self.state = 7692
                self.subquery()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 7693
                localctx.source_table_name = self.table_name()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 7696
                self.match(TeradataSQLParser.AS)


            self.state = 7699
            localctx.source_correlation_name = self.alias_name()
            self.state = 7701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 7700
                self.column_list()


            self.state = 7703
            self.match(TeradataSQLParser.ON)
            self.state = 7704
            localctx.match_condition = self.logical_expr(0)
            self.state = 7713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
            if la_ == 1:
                self.state = 7705
                self.when_matched()
                self.state = 7707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==470:
                    self.state = 7706
                    self.when_not_matched()


                pass

            elif la_ == 2:
                self.state = 7709
                self.when_not_matched()
                self.state = 7711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==470:
                    self.state = 7710
                    self.when_matched()


                pass


            self.state = 7716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==229:
                self.state = 7715
                self.logging_errors()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_matchedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TeradataSQLParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(TeradataSQLParser.THEN, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Set_specContext,i)


        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def UPD(self):
            return self.getToken(TeradataSQLParser.UPD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_when_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_matched" ):
                listener.enterWhen_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_matched" ):
                listener.exitWhen_matched(self)




    def when_matched(self):

        localctx = TeradataSQLParser.When_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_when_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7718
            self.match(TeradataSQLParser.WHEN)
            self.state = 7719
            self.match(TeradataSQLParser.MATCHED)
            self.state = 7720
            self.match(TeradataSQLParser.THEN)
            self.state = 7732
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [452, 453]:
                self.state = 7721
                _la = self._input.LA(1)
                if not(_la==452 or _la==453):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7722
                self.match(TeradataSQLParser.SET)
                self.state = 7723
                self.set_spec()
                self.state = 7728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7724
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7725
                    self.set_spec()
                    self.state = 7730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [115]:
                self.state = 7731
                self.match(TeradataSQLParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class When_not_matchedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(TeradataSQLParser.WHEN, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(TeradataSQLParser.THEN, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_list_comma_separatedContext,0)


        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def INS(self):
            return self.getToken(TeradataSQLParser.INS, 0)

        def VALUES(self):
            return self.getToken(TeradataSQLParser.VALUES, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_when_not_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen_not_matched" ):
                listener.enterWhen_not_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen_not_matched" ):
                listener.exitWhen_not_matched(self)




    def when_not_matched(self):

        localctx = TeradataSQLParser.When_not_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_when_not_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7734
            self.match(TeradataSQLParser.WHEN)
            self.state = 7735
            self.match(TeradataSQLParser.NOT)
            self.state = 7736
            self.match(TeradataSQLParser.MATCHED)
            self.state = 7737
            self.match(TeradataSQLParser.THEN)
            self.state = 7738
            _la = self._input.LA(1)
            if not(_la==197 or _la==198):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,955,self._ctx)
            if la_ == 1:
                self.state = 7739
                self.match(TeradataSQLParser.VALUES)

            elif la_ == 2:
                self.state = 7740
                self.column_list()
                self.state = 7741
                self.match(TeradataSQLParser.VALUES)


            self.state = 7745
            self.scalar_expr_list_comma_separated()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_demographics_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext

        def COLLECT(self):
            return self.getToken(TeradataSQLParser.COLLECT, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLParser.DEMOGRAPHICS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_collect_demographics_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_demographics_stat" ):
                listener.enterCollect_demographics_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_demographics_stat" ):
                listener.exitCollect_demographics_stat(self)




    def collect_demographics_stat(self):

        localctx = TeradataSQLParser.Collect_demographics_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_collect_demographics_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7747
            self.match(TeradataSQLParser.COLLECT)
            self.state = 7748
            self.match(TeradataSQLParser.DEMOGRAPHICS)
            self.state = 7749
            self.match(TeradataSQLParser.FOR)
            self.state = 7762
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 7750
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 7751
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 7752
                self.table_name()
                self.state = 7757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7753
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7754
                    self.table_name()
                    self.state = 7759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7760
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 7764
            self.match(TeradataSQLParser.INTO)
            self.state = 7765
            localctx.qcd_name = self.database_name()
            self.state = 7770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13]:
                self.state = 7766
                self.match(TeradataSQLParser.ALL)
                pass
            elif token in [474]:
                self.state = 7767
                self.match(TeradataSQLParser.WITH)
                self.state = 7768
                self.match(TeradataSQLParser.NO)
                self.state = 7769
                self.match(TeradataSQLParser.INDEX)
                pass
            elif token in [-1, 1206]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collect_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sample_percentage = None # Integer_literalContext
            self.qcd_name = None # Database_nameContext
            self.query_id = None # Integer_literalContext
            self.statistics_id = None # Integer_literalContext

        def COLLECT(self):
            return self.getToken(TeradataSQLParser.COLLECT, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def SAMPLE(self):
            return self.getToken(TeradataSQLParser.SAMPLE, 0)

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def qcd_stats_target_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Qcd_stats_target_specContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLParser.STAT, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLParser.PERCENT, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def SAMPLEID(self):
            return self.getToken(TeradataSQLParser.SAMPLEID, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLParser.MODIFIED, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_collect_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollect_statistics_qcd_form_stat" ):
                listener.enterCollect_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollect_statistics_qcd_form_stat" ):
                listener.exitCollect_statistics_qcd_form_stat(self)




    def collect_statistics_qcd_form_stat(self):

        localctx = TeradataSQLParser.Collect_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_collect_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7772
            self.match(TeradataSQLParser.COLLECT)
            self.state = 7773
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7774
            self.match(TeradataSQLParser.FOR)
            self.state = 7775
            self.match(TeradataSQLParser.SAMPLE)
            self.state = 7776
            localctx.sample_percentage = self.integer_literal()
            self.state = 7778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 7777
                self.match(TeradataSQLParser.PERCENT)


            self.state = 7780
            self.match(TeradataSQLParser.INTO)
            self.state = 7781
            localctx.qcd_name = self.database_name()
            self.state = 7785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==372:
                self.state = 7782
                self.match(TeradataSQLParser.SET)
                self.state = 7783
                self.match(TeradataSQLParser.QUERY)
                self.state = 7784
                localctx.query_id = self.integer_literal()


            self.state = 7789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 7787
                self.match(TeradataSQLParser.SAMPLEID)
                self.state = 7788
                localctx.statistics_id = self.integer_literal()


            self.state = 7793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==453:
                self.state = 7791
                self.match(TeradataSQLParser.UPDATE)
                self.state = 7792
                self.match(TeradataSQLParser.MODIFIED)


            self.state = 7796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 7795
                self.match(TeradataSQLParser.ON)


            self.state = 7798
            self.table_name()
            self.state = 7799
            self.qcd_stats_target_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qcd_stats_target_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index_name = None # Unqualified_nameContext

        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,i)


        def PARTITION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.PARTITION)
            else:
                return self.getToken(TeradataSQLParser.PARTITION, i)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_qcd_stats_target_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQcd_stats_target_spec" ):
                listener.enterQcd_stats_target_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQcd_stats_target_spec" ):
                listener.exitQcd_stats_target_spec(self)




    def qcd_stats_target_spec(self):

        localctx = TeradataSQLParser.Qcd_stats_target_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_qcd_stats_target_spec)
        self._la = 0 # Token type
        try:
            self.state = 7837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7801
                self.match(TeradataSQLParser.COLUMN)
                self.state = 7820
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
                if la_ == 1:
                    self.state = 7802
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 7803
                    self.match(TeradataSQLParser.PARTITION)
                    pass

                elif la_ == 3:
                    self.state = 7804
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 7807
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
                    if la_ == 1:
                        self.state = 7805
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 7806
                        self.match(TeradataSQLParser.PARTITION)
                        pass


                    self.state = 7816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 7809
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 7812
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,965,self._ctx)
                        if la_ == 1:
                            self.state = 7810
                            self.column_name()
                            pass

                        elif la_ == 2:
                            self.state = 7811
                            self.match(TeradataSQLParser.PARTITION)
                            pass


                        self.state = 7818
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 7819
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass


                pass
            elif token in [192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7822
                self.match(TeradataSQLParser.INDEX)
                self.state = 7835
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 7823
                    localctx.index_name = self.unqualified_name()
                    pass
                elif token in [1213]:
                    self.state = 7824
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 7825
                    self.column_name()
                    self.state = 7830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 7826
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 7827
                        self.column_name()
                        self.state = 7832
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 7833
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_statistics_qcd_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLParser.STAT, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def qcd_stats_target_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Qcd_stats_target_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_drop_statistics_qcd_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics_qcd_form_stat" ):
                listener.enterDrop_statistics_qcd_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics_qcd_form_stat" ):
                listener.exitDrop_statistics_qcd_form_stat(self)




    def drop_statistics_qcd_form_stat(self):

        localctx = TeradataSQLParser.Drop_statistics_qcd_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_drop_statistics_qcd_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7839
            self.match(TeradataSQLParser.DROP)
            self.state = 7840
            _la = self._input.LA(1)
            if not(_la==395 or _la==937 or _la==939):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 7841
            self.match(TeradataSQLParser.FROM)
            self.state = 7842
            localctx.qcd_name = self.database_name()
            self.state = 7844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 7843
                self.match(TeradataSQLParser.ON)


            self.state = 7846
            self.table_name()
            self.state = 7848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69 or _la==192:
                self.state = 7847
                self.qcd_stats_target_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dump_explain_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.qcd_name = None # Database_nameContext
            self.query_plan_name = None # Unqualified_nameContext

        def DUMP(self):
            return self.getToken(TeradataSQLParser.DUMP, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLParser.EXPLAIN, 0)

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def explained_sql_request(self):
            return self.getTypedRuleContext(TeradataSQLParser.Explained_sql_requestContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def limit_sql_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Limit_sql_clauseContext,0)


        def CHECK(self):
            return self.getToken(TeradataSQLParser.CHECK, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_dump_explain_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDump_explain_stat" ):
                listener.enterDump_explain_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDump_explain_stat" ):
                listener.exitDump_explain_stat(self)




    def dump_explain_stat(self):

        localctx = TeradataSQLParser.Dump_explain_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_dump_explain_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7850
            self.match(TeradataSQLParser.DUMP)
            self.state = 7851
            self.match(TeradataSQLParser.EXPLAIN)
            self.state = 7852
            self.match(TeradataSQLParser.INTO)
            self.state = 7853
            localctx.qcd_name = self.database_name()
            self.state = 7856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 7854
                self.match(TeradataSQLParser.AS)
                self.state = 7855
                localctx.query_plan_name = self.unqualified_name()


            self.state = 7859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 7858
                self.limit_sql_clause()


            self.state = 7863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 7861
                self.match(TeradataSQLParser.CHECK)
                self.state = 7862
                self.match(TeradataSQLParser.STATISTICS)


            self.state = 7865
            self.explained_sql_request()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initiate_index_analysis_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_name = None # Unqualified_nameContext
            self.qcd_name = None # Database_nameContext
            self.index_name_tag = None # Alias_nameContext
            self._integer_literal = None # Integer_literalContext
            self.index_type_number = list() # of Integer_literalContexts
            self.checkpoint_trigger = None # Integer_literalContext

        def INITIATE(self):
            return self.getToken(TeradataSQLParser.INITIATE, 0)

        def INDEX(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.INDEX)
            else:
                return self.getToken(TeradataSQLParser.INDEX, i)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLParser.ANALYSIS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def index_analysis_set_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Index_analysis_set_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Index_analysis_set_specContext,i)


        def KEEP(self):
            return self.getToken(TeradataSQLParser.KEEP, 0)

        def USE(self):
            return self.getToken(TeradataSQLParser.USE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLParser.MODIFIED, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLParser.CHECKPOINT, 0)

        def analysis_time_limit_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Analysis_time_limit_clauseContext,0)


        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def STATS(self):
            return self.getToken(TeradataSQLParser.STATS, 0)

        def STAT(self):
            return self.getToken(TeradataSQLParser.STAT, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_initiate_index_analysis_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitiate_index_analysis_stat" ):
                listener.enterInitiate_index_analysis_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitiate_index_analysis_stat" ):
                listener.exitInitiate_index_analysis_stat(self)




    def initiate_index_analysis_stat(self):

        localctx = TeradataSQLParser.Initiate_index_analysis_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_initiate_index_analysis_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7867
            self.match(TeradataSQLParser.INITIATE)
            self.state = 7868
            self.match(TeradataSQLParser.INDEX)
            self.state = 7869
            self.match(TeradataSQLParser.ANALYSIS)
            self.state = 7879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 7870
                self.match(TeradataSQLParser.ON)
                self.state = 7871
                self.table_name()
                self.state = 7876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7872
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7873
                    self.table_name()
                    self.state = 7878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7881
            self.match(TeradataSQLParser.FOR)
            self.state = 7882
            localctx.workload_name = self.unqualified_name()
            self.state = 7883
            self.match(TeradataSQLParser.IN)
            self.state = 7884
            localctx.qcd_name = self.database_name()
            self.state = 7885
            self.match(TeradataSQLParser.AS)
            self.state = 7886
            localctx.index_name_tag = self.alias_name()
            self.state = 7896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==372:
                self.state = 7887
                self.match(TeradataSQLParser.SET)
                self.state = 7888
                self.index_analysis_set_spec()
                self.state = 7893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7889
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7890
                    self.index_analysis_set_spec()
                    self.state = 7895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==728:
                self.state = 7898
                self.match(TeradataSQLParser.KEEP)
                self.state = 7899
                self.match(TeradataSQLParser.INDEX)


            self.state = 7905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1018:
                self.state = 7902
                self.match(TeradataSQLParser.USE)
                self.state = 7903
                self.match(TeradataSQLParser.MODIFIED)
                self.state = 7904
                _la = self._input.LA(1)
                if not(_la==395 or _la==937 or _la==939):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 7921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7907
                self.match(TeradataSQLParser.WITH)
                self.state = 7909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 7908
                    self.match(TeradataSQLParser.NO)


                self.state = 7911
                self.match(TeradataSQLParser.INDEX)
                self.state = 7912
                self.match(TeradataSQLParser.TYPE)
                self.state = 7913
                localctx._integer_literal = self.integer_literal()
                localctx.index_type_number.append(localctx._integer_literal)
                self.state = 7918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7914
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7915
                    localctx._integer_literal = self.integer_literal()
                    localctx.index_type_number.append(localctx._integer_literal)
                    self.state = 7920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 7923
                self.match(TeradataSQLParser.CHECKPOINT)
                self.state = 7924
                localctx.checkpoint_trigger = self.integer_literal()


            self.state = 7928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 7927
                self.analysis_time_limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_analysis_set_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Integer_literalContext

        def index_analysis_boundary_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Index_analysis_boundary_optionContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_index_analysis_set_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_analysis_set_spec" ):
                listener.enterIndex_analysis_set_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_analysis_set_spec" ):
                listener.exitIndex_analysis_set_spec(self)




    def index_analysis_set_spec(self):

        localctx = TeradataSQLParser.Index_analysis_set_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_index_analysis_set_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7930
            self.index_analysis_boundary_option()
            self.state = 7931
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 7932
            localctx.value = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_analysis_boundary_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGERATE(self):
            return self.getToken(TeradataSQLParser.CHANGERATE, 0)

        def COLUMNSPERINDEX(self):
            return self.getToken(TeradataSQLParser.COLUMNSPERINDEX, 0)

        def COLUMNSPERJOININDEX(self):
            return self.getToken(TeradataSQLParser.COLUMNSPERJOININDEX, 0)

        def INDEXMAINTMODE(self):
            return self.getToken(TeradataSQLParser.INDEXMAINTMODE, 0)

        def INDEXESPERTABLE(self):
            return self.getToken(TeradataSQLParser.INDEXESPERTABLE, 0)

        def SEARCHSPACE(self):
            return self.getToken(TeradataSQLParser.SEARCHSPACE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_index_analysis_boundary_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_analysis_boundary_option" ):
                listener.enterIndex_analysis_boundary_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_analysis_boundary_option" ):
                listener.exitIndex_analysis_boundary_option(self)




    def index_analysis_boundary_option(self):

        localctx = TeradataSQLParser.Index_analysis_boundary_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_index_analysis_boundary_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7934
            _la = self._input.LA(1)
            if not(((((_la - 567)) & ~0x3f) == 0 and ((1 << (_la - 567)) & 24577) != 0) or _la==705 or _la==706 or _la==908):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initiate_partition_analysis_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_name = None # Unqualified_nameContext
            self.qcd_name = None # Database_nameContext
            self.result_name_tag = None # Alias_nameContext

        def INITIATE(self):
            return self.getToken(TeradataSQLParser.INITIATE, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLParser.PARTITION, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLParser.ANALYSIS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def analysis_time_limit_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Analysis_time_limit_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_initiate_partition_analysis_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitiate_partition_analysis_stat" ):
                listener.enterInitiate_partition_analysis_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitiate_partition_analysis_stat" ):
                listener.exitInitiate_partition_analysis_stat(self)




    def initiate_partition_analysis_stat(self):

        localctx = TeradataSQLParser.Initiate_partition_analysis_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_initiate_partition_analysis_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7936
            self.match(TeradataSQLParser.INITIATE)
            self.state = 7937
            self.match(TeradataSQLParser.PARTITION)
            self.state = 7938
            self.match(TeradataSQLParser.ANALYSIS)
            self.state = 7948
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 7939
                self.match(TeradataSQLParser.ON)
                self.state = 7940
                self.table_name()
                self.state = 7945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7941
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7942
                    self.table_name()
                    self.state = 7947
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7950
            self.match(TeradataSQLParser.FOR)
            self.state = 7951
            localctx.workload_name = self.unqualified_name()
            self.state = 7952
            self.match(TeradataSQLParser.IN)
            self.state = 7953
            localctx.qcd_name = self.database_name()
            self.state = 7954
            self.match(TeradataSQLParser.AS)
            self.state = 7955
            localctx.result_name_tag = self.alias_name()
            self.state = 7957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 7956
                self.analysis_time_limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_explain_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sample_percentage = None # Integer_literalContext
            self.qcd_name = None # Database_nameContext
            self.query_plan_name = None # Unqualified_nameContext
            self.frequency = None # Integer_literalContext

        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def EXPLAIN(self):
            return self.getToken(TeradataSQLParser.EXPLAIN, 0)

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def explained_sql_request(self):
            return self.getTypedRuleContext(TeradataSQLParser.Explained_sql_requestContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def STATISTICS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.STATISTICS)
            else:
                return self.getToken(TeradataSQLParser.STATISTICS, i)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLParser.DEMOGRAPHICS, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.FOR)
            else:
                return self.getToken(TeradataSQLParser.FOR, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,i)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def limit_sql_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Limit_sql_clauseContext,0)


        def CHECK(self):
            return self.getToken(TeradataSQLParser.CHECK, 0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def SAMPLE(self):
            return self.getToken(TeradataSQLParser.SAMPLE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLParser.NODDLTEXT, 0)

        def PERCENT(self):
            return self.getToken(TeradataSQLParser.PERCENT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_insert_explain_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_explain_stat" ):
                listener.enterInsert_explain_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_explain_stat" ):
                listener.exitInsert_explain_stat(self)




    def insert_explain_stat(self):

        localctx = TeradataSQLParser.Insert_explain_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_insert_explain_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7959
            self.match(TeradataSQLParser.INSERT)
            self.state = 7960
            self.match(TeradataSQLParser.EXPLAIN)
            self.state = 7974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 7961
                self.match(TeradataSQLParser.WITH)
                self.state = 7963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==268:
                    self.state = 7962
                    self.match(TeradataSQLParser.NO)


                self.state = 7965
                self.match(TeradataSQLParser.STATISTICS)
                self.state = 7972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==457:
                    self.state = 7966
                    self.match(TeradataSQLParser.USING)
                    self.state = 7967
                    self.match(TeradataSQLParser.SAMPLE)
                    self.state = 7968
                    localctx.sample_percentage = self.integer_literal()
                    self.state = 7970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==300:
                        self.state = 7969
                        self.match(TeradataSQLParser.PERCENT)






            self.state = 7978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 7976
                self.match(TeradataSQLParser.AND)
                self.state = 7977
                self.match(TeradataSQLParser.DEMOGRAPHICS)


            self.state = 7989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 7980
                self.match(TeradataSQLParser.FOR)
                self.state = 7981
                self.table_name()
                self.state = 7986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 7982
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 7983
                    self.table_name()
                    self.state = 7988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 7991
            self.match(TeradataSQLParser.INTO)
            self.state = 7992
            localctx.qcd_name = self.database_name()
            self.state = 7995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 7993
                self.match(TeradataSQLParser.AS)
                self.state = 7994
                localctx.query_plan_name = self.unqualified_name()


            self.state = 7998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==221:
                self.state = 7997
                self.limit_sql_clause()


            self.state = 8002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159:
                self.state = 8000
                self.match(TeradataSQLParser.FOR)
                self.state = 8001
                localctx.frequency = self.integer_literal()


            self.state = 8006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 8004
                self.match(TeradataSQLParser.CHECK)
                self.state = 8005
                self.match(TeradataSQLParser.STATISTICS)


            self.state = 8013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 8008
                self.match(TeradataSQLParser.IN)
                self.state = 8009
                self.match(TeradataSQLParser.XML)
                self.state = 8011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==795:
                    self.state = 8010
                    self.match(TeradataSQLParser.NODDLTEXT)




            self.state = 8015
            self.explained_sql_request()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restart_index_analysis_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.workload_name = None # Unqualified_nameContext
            self.qcd_name = None # Database_nameContext
            self.index_name_tag = None # Alias_nameContext
            self.checkpoint_trigger = None # Integer_literalContext

        def RESTART(self):
            return self.getToken(TeradataSQLParser.RESTART, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLParser.ANALYSIS, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def CHECKPOINT(self):
            return self.getToken(TeradataSQLParser.CHECKPOINT, 0)

        def analysis_time_limit_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Analysis_time_limit_clauseContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_restart_index_analysis_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestart_index_analysis_stat" ):
                listener.enterRestart_index_analysis_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestart_index_analysis_stat" ):
                listener.exitRestart_index_analysis_stat(self)




    def restart_index_analysis_stat(self):

        localctx = TeradataSQLParser.Restart_index_analysis_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_restart_index_analysis_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8017
            self.match(TeradataSQLParser.RESTART)
            self.state = 8018
            self.match(TeradataSQLParser.INDEX)
            self.state = 8019
            self.match(TeradataSQLParser.ANALYSIS)
            self.state = 8020
            self.match(TeradataSQLParser.FOR)
            self.state = 8021
            localctx.workload_name = self.unqualified_name()
            self.state = 8022
            self.match(TeradataSQLParser.IN)
            self.state = 8023
            localctx.qcd_name = self.database_name()
            self.state = 8024
            self.match(TeradataSQLParser.AS)
            self.state = 8025
            localctx.index_name_tag = self.alias_name()
            self.state = 8028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 8026
                self.match(TeradataSQLParser.CHECKPOINT)
                self.state = 8027
                localctx.checkpoint_trigger = self.integer_literal()


            self.state = 8031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 8030
                self.analysis_time_limit_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Call_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(TeradataSQLParser.CALL, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_call_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_stat" ):
                listener.enterCall_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_stat" ):
                listener.exitCall_stat(self)




    def call_stat(self):

        localctx = TeradataSQLParser.Call_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_call_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8033
            self.match(TeradataSQLParser.CALL)
            self.state = 8034
            self.procedure_name()
            self.state = 8035
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 8044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1614061055) != 0):
                self.state = 8036
                self.argument()
                self.state = 8041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 8037
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 8038
                    self.argument()
                    self.state = 8043
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 8046
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Returns_clauseContext,0)


        def QUESTION_MARK(self):
            return self.getToken(TeradataSQLParser.QUESTION_MARK, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = TeradataSQLParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 8053
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8048
                self.scalar_expr(0)
                self.state = 8050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==352:
                    self.state = 8049
                    self.returns_clause()


                pass
            elif token in [1212]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8052
                self.match(TeradataSQLParser.QUESTION_MARK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Execute_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def macro_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Macro_nameContext,0)


        def EXECUTE(self):
            return self.getToken(TeradataSQLParser.EXECUTE, 0)

        def EXEC(self):
            return self.getToken(TeradataSQLParser.EXEC, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def parameter_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Parameter_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Parameter_nameContext,i)


        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLParser.EQUALS_SIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_execute_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_stat" ):
                listener.enterExecute_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_stat" ):
                listener.exitExecute_stat(self)




    def execute_stat(self):

        localctx = TeradataSQLParser.Execute_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_execute_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8055
            _la = self._input.LA(1)
            if not(_la==143 or _la==144):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8056
            self.macro_name()
            self.state = 8083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 8057
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 8079
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1011,self._ctx)
                if la_ == 1:
                    self.state = 8058
                    self.scalar_expr(0)
                    self.state = 8063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 8059
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 8060
                        self.scalar_expr(0)
                        self.state = 8065
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 8066
                    self.parameter_name()
                    self.state = 8067
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 8068
                    self.scalar_expr(0)
                    self.state = 8076
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 8069
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 8070
                        self.parameter_name()
                        self.state = 8071
                        self.match(TeradataSQLParser.EQUALS_SIGN)
                        self.state = 8072
                        self.scalar_expr(0)
                        self.state = 8078
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 8081
                self.match(TeradataSQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(TeradataSQLParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(TeradataSQLParser.WORK, 0)

        def RELEASE(self):
            return self.getToken(TeradataSQLParser.RELEASE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_commit_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stat" ):
                listener.enterCommit_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stat" ):
                listener.exitCommit_stat(self)




    def commit_stat(self):

        localctx = TeradataSQLParser.Commit_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_commit_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8085
            self.match(TeradataSQLParser.COMMIT)
            self.state = 8090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==476:
                self.state = 8086
                self.match(TeradataSQLParser.WORK)
                self.state = 8088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==337:
                    self.state = 8087
                    self.match(TeradataSQLParser.RELEASE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.abort_message = None # Char_string_literalContext

        def ROLLBACK(self):
            return self.getToken(TeradataSQLParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(TeradataSQLParser.WORK, 0)

        def from_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Where_clauseContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_rollback_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stat" ):
                listener.enterRollback_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stat" ):
                listener.exitRollback_stat(self)




    def rollback_stat(self):

        localctx = TeradataSQLParser.Rollback_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_rollback_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8092
            self.match(TeradataSQLParser.ROLLBACK)
            self.state = 8094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==476:
                self.state = 8093
                self.match(TeradataSQLParser.WORK)


            self.state = 8097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                self.state = 8096
                localctx.abort_message = self.char_string_literal()


            self.state = 8100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 8099
                self.from_clause()


            self.state = 8103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==471:
                self.state = 8102
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abort_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.abort_message = None # Char_string_literalContext

        def ABORT(self):
            return self.getToken(TeradataSQLParser.ABORT, 0)

        def from_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Where_clauseContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_abort_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbort_stat" ):
                listener.enterAbort_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbort_stat" ):
                listener.exitAbort_stat(self)




    def abort_stat(self):

        localctx = TeradataSQLParser.Abort_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_abort_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8105
            self.match(TeradataSQLParser.ABORT)
            self.state = 8107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                self.state = 8106
                localctx.abort_message = self.char_string_literal()


            self.state = 8110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==164:
                self.state = 8109
                self.from_clause()


            self.state = 8113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==471:
                self.state = 8112
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_transaction_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLParser.BEGIN, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLParser.TRANSACTION, 0)

        def BT(self):
            return self.getToken(TeradataSQLParser.BT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_begin_transaction_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_transaction_stat" ):
                listener.enterBegin_transaction_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_transaction_stat" ):
                listener.exitBegin_transaction_stat(self)




    def begin_transaction_stat(self):

        localctx = TeradataSQLParser.Begin_transaction_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_begin_transaction_stat)
        try:
            self.state = 8118
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8115
                self.match(TeradataSQLParser.BEGIN)
                self.state = 8116
                self.match(TeradataSQLParser.TRANSACTION)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8117
                self.match(TeradataSQLParser.BT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class End_transaction_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def TRANSACTION(self):
            return self.getToken(TeradataSQLParser.TRANSACTION, 0)

        def ET(self):
            return self.getToken(TeradataSQLParser.ET, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_end_transaction_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnd_transaction_stat" ):
                listener.enterEnd_transaction_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnd_transaction_stat" ):
                listener.exitEnd_transaction_stat(self)




    def end_transaction_stat(self):

        localctx = TeradataSQLParser.End_transaction_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_end_transaction_stat)
        try:
            self.state = 8123
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [134]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8120
                self.match(TeradataSQLParser.END)
                self.state = 8121
                self.match(TeradataSQLParser.TRANSACTION)
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8122
                self.match(TeradataSQLParser.ET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_locking_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_stat" ):
                listener.enterLocking_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_stat" ):
                listener.exitLocking_stat(self)




    def locking_stat(self):

        localctx = TeradataSQLParser.Locking_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_locking_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8125
            self.locking_request_modifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comment_retrieving_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(TeradataSQLParser.COMMENT, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def COLUMN(self):
            return self.getToken(TeradataSQLParser.COLUMN, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def object_kind(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_kindContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_comment_retrieving_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment_retrieving_stat" ):
                listener.enterComment_retrieving_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment_retrieving_stat" ):
                listener.exitComment_retrieving_stat(self)




    def comment_retrieving_stat(self):

        localctx = TeradataSQLParser.Comment_retrieving_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_comment_retrieving_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8127
            self.match(TeradataSQLParser.COMMENT)
            self.state = 8129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==286:
                self.state = 8128
                self.match(TeradataSQLParser.ON)


            self.state = 8138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1026,self._ctx)
            if la_ == 1:
                self.state = 8132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1025,self._ctx)
                if la_ == 1:
                    self.state = 8131
                    self.object_kind()


                self.state = 8134
                self.object_name()
                pass

            elif la_ == 2:
                self.state = 8135
                self.match(TeradataSQLParser.COLUMN)
                self.state = 8136
                self.column_name()
                pass

            elif la_ == 3:
                self.state = 8137
                self.column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Checkpoint_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.journal_table = None # Table_nameContext

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLParser.CHECKPOINT, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def NAMED(self):
            return self.getToken(TeradataSQLParser.NAMED, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_checkpoint_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckpoint_stat" ):
                listener.enterCheckpoint_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckpoint_stat" ):
                listener.exitCheckpoint_stat(self)




    def checkpoint_stat(self):

        localctx = TeradataSQLParser.Checkpoint_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_checkpoint_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8140
            self.match(TeradataSQLParser.CHECKPOINT)
            self.state = 8141
            localctx.journal_table = self.table_name()
            self.state = 8145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1208:
                self.state = 8142
                self.match(TeradataSQLParser.COMMA)
                self.state = 8143
                self.match(TeradataSQLParser.NAMED)
                self.state = 8144
                self.variable_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Echo_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.string = None # Char_string_literalContext

        def ECHO(self):
            return self.getToken(TeradataSQLParser.ECHO, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_echo_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEcho_stat" ):
                listener.enterEcho_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEcho_stat" ):
                listener.exitEcho_stat(self)




    def echo_stat(self):

        localctx = TeradataSQLParser.Echo_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_echo_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8147
            self.match(TeradataSQLParser.ECHO)
            self.state = 8149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                self.state = 8148
                localctx.string = self.char_string_literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(TeradataSQLParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_null_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_stat" ):
                listener.enterNull_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_stat" ):
                listener.exitNull_stat(self)




    def null_stat(self):

        localctx = TeradataSQLParser.Null_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_null_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8151
            self.match(TeradataSQLParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_set_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_spec" ):
                listener.enterSet_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_spec" ):
                listener.exitSet_spec(self)




    def set_spec(self):

        localctx = TeradataSQLParser.Set_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_set_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8153
            self.column_name()
            self.state = 8154
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 8155
            self.scalar_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_isolated_loadingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLParser.ISOLATED, 0)

        def LOADING(self):
            return self.getToken(TeradataSQLParser.LOADING, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLParser.CONCURRENT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_isolated_loading

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_isolated_loading" ):
                listener.enterWith_isolated_loading(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_isolated_loading" ):
                listener.exitWith_isolated_loading(self)




    def with_isolated_loading(self):

        localctx = TeradataSQLParser.With_isolated_loadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_with_isolated_loading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8157
            self.match(TeradataSQLParser.WITH)
            self.state = 8159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==268:
                self.state = 8158
                self.match(TeradataSQLParser.NO)


            self.state = 8162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==587:
                self.state = 8161
                self.match(TeradataSQLParser.CONCURRENT)


            self.state = 8164
            self.match(TeradataSQLParser.ISOLATED)
            self.state = 8165
            self.match(TeradataSQLParser.LOADING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logging_errorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.error_limit = None # Integer_literalContext

        def LOGGING(self):
            return self.getToken(TeradataSQLParser.LOGGING, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLParser.ERRORS, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLParser.LIMIT, 0)

        def OF(self):
            return self.getToken(TeradataSQLParser.OF, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_logging_errors

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogging_errors" ):
                listener.enterLogging_errors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogging_errors" ):
                listener.exitLogging_errors(self)




    def logging_errors(self):

        localctx = TeradataSQLParser.Logging_errorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_logging_errors)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8167
            self.match(TeradataSQLParser.LOGGING)
            self.state = 8169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 8168
                self.match(TeradataSQLParser.ALL)


            self.state = 8171
            self.match(TeradataSQLParser.ERRORS)
            self.state = 8180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 8172
                self.match(TeradataSQLParser.WITH)
                self.state = 8178
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 8173
                    self.match(TeradataSQLParser.NO)
                    self.state = 8174
                    self.match(TeradataSQLParser.LIMIT)
                    pass
                elif token in [221]:
                    self.state = 8175
                    self.match(TeradataSQLParser.LIMIT)
                    self.state = 8176
                    self.match(TeradataSQLParser.OF)
                    self.state = 8177
                    localctx.error_limit = self.integer_literal()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_kindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLParser.GLOP, 0)

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLParser.GROUP, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLParser.MACRO, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLParser.TRIGGER, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def FILE(self):
            return self.getToken(TeradataSQLParser.FILE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_object_kind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_kind" ):
                listener.enterObject_kind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_kind" ):
                listener.exitObject_kind(self)




    def object_kind(self):

        localctx = TeradataSQLParser.Object_kindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_object_kind)
        try:
            self.state = 8198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [166]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8182
                self.match(TeradataSQLParser.FUNCTION)
                pass
            elif token in [688]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8183
                self.match(TeradataSQLParser.GLOP)
                self.state = 8184
                self.match(TeradataSQLParser.SET)
                pass
            elif token in [174]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8185
                self.match(TeradataSQLParser.GROUP)
                pass
            elif token in [235]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8186
                self.match(TeradataSQLParser.MACRO)
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8187
                self.match(TeradataSQLParser.METHOD)
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8188
                self.match(TeradataSQLParser.PROCEDURE)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8189
                self.match(TeradataSQLParser.PROFILE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8190
                self.match(TeradataSQLParser.ROLE)
                pass
            elif token in [435]:
                self.enterOuterAlt(localctx, 9)
                self.state = 8191
                self.match(TeradataSQLParser.TRIGGER)
                pass
            elif token in [437]:
                self.enterOuterAlt(localctx, 10)
                self.state = 8192
                self.match(TeradataSQLParser.TYPE)
                pass
            elif token in [468]:
                self.enterOuterAlt(localctx, 11)
                self.state = 8193
                self.match(TeradataSQLParser.VIEW)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 12)
                self.state = 8194
                self.match(TeradataSQLParser.DATABASE)
                pass
            elif token in [406]:
                self.enterOuterAlt(localctx, 13)
                self.state = 8195
                self.match(TeradataSQLParser.TABLE)
                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 14)
                self.state = 8196
                self.match(TeradataSQLParser.USER)
                pass
            elif token in [668]:
                self.enterOuterAlt(localctx, 15)
                self.state = 8197
                self.match(TeradataSQLParser.FILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explained_sql_requestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delete_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Delete_statContext,0)


        def execute_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Execute_statContext,0)


        def insert_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Insert_statContext,0)


        def merge_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Merge_statContext,0)


        def select_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Select_statContext,0)


        def update_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Update_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_explained_sql_request

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplained_sql_request" ):
                listener.enterExplained_sql_request(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplained_sql_request" ):
                listener.exitExplained_sql_request(self)




    def explained_sql_request(self):

        localctx = TeradataSQLParser.Explained_sql_requestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_explained_sql_request)
        try:
            self.state = 8206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1035,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8200
                self.delete_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8201
                self.execute_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8202
                self.insert_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8203
                self.merge_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8204
                self.select_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8205
                self.update_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_sql_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sql_length = None # Integer_literalContext

        def LIMIT(self):
            return self.getToken(TeradataSQLParser.LIMIT, 0)

        def SQL(self):
            return self.getToken(TeradataSQLParser.SQL, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_limit_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_sql_clause" ):
                listener.enterLimit_sql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_sql_clause" ):
                listener.exitLimit_sql_clause(self)




    def limit_sql_clause(self):

        localctx = TeradataSQLParser.Limit_sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_limit_sql_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8208
            self.match(TeradataSQLParser.LIMIT)
            self.state = 8214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==386:
                self.state = 8209
                self.match(TeradataSQLParser.SQL)
                self.state = 8212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1224:
                    self.state = 8210
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 8211
                    localctx.sql_length = self.integer_literal()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analysis_time_limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.elapsed_time = None # Integer_literalContext

        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def LIMIT(self):
            return self.getToken(TeradataSQLParser.LIMIT, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_analysis_time_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalysis_time_limit_clause" ):
                listener.enterAnalysis_time_limit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalysis_time_limit_clause" ):
                listener.exitAnalysis_time_limit_clause(self)




    def analysis_time_limit_clause(self):

        localctx = TeradataSQLParser.Analysis_time_limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_analysis_time_limit_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8216
            self.match(TeradataSQLParser.TIME)
            self.state = 8217
            self.match(TeradataSQLParser.LIMIT)
            self.state = 8218
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 8219
            localctx.elapsed_time = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = TeradataSQLParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_data_type)
        try:
            self.state = 8227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1038,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8221
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8222
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8223
                self.binary_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8224
                self.datetime_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8225
                self.period_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8226
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Precisionless_char_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_variable_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_data_type" ):
                listener.enterVariable_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_data_type" ):
                listener.exitVariable_data_type(self)




    def variable_data_type(self):

        localctx = TeradataSQLParser.Variable_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_variable_data_type)
        try:
            self.state = 8236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1039,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8229
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8230
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8231
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8232
                self.binary_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8233
                self.datetime_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8234
                self.period_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8235
                self.udt_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class External_function_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Numeric_data_typeContext,0)


        def char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_data_typeContext,0)


        def precisionless_char_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Precisionless_char_data_typeContext,0)


        def lob_as_locator_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Lob_as_locator_data_typeContext,0)


        def binary_data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Binary_data_typeContext,0)


        def datetime_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Datetime_typeContext,0)


        def period_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Period_typeContext,0)


        def udt_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_typeContext,0)


        def TD_ANYTYPE(self):
            return self.getToken(TeradataSQLParser.TD_ANYTYPE, 0)

        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLParser.VARIANT_TYPE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_external_function_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_function_data_type" ):
                listener.enterExternal_function_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_function_data_type" ):
                listener.exitExternal_function_data_type(self)




    def external_function_data_type(self):

        localctx = TeradataSQLParser.External_function_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_external_function_data_type)
        try:
            self.state = 8248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1040,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8238
                self.numeric_data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8239
                self.char_data_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8240
                self.precisionless_char_data_type()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8241
                self.lob_as_locator_data_type()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8242
                self.binary_data_type()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8243
                self.datetime_type()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8244
                self.period_type()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8245
                self.udt_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8246
                self.match(TeradataSQLParser.TD_ANYTYPE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8247
                self.match(TeradataSQLParser.VARIANT_TYPE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.scale = None # Integer_literalContext

        def BYTEINT(self):
            return self.getToken(TeradataSQLParser.BYTEINT, 0)

        def SMALLINT(self):
            return self.getToken(TeradataSQLParser.SMALLINT, 0)

        def INTEGER(self):
            return self.getToken(TeradataSQLParser.INTEGER, 0)

        def INT(self):
            return self.getToken(TeradataSQLParser.INT, 0)

        def BIGINT(self):
            return self.getToken(TeradataSQLParser.BIGINT, 0)

        def DECIMAL(self):
            return self.getToken(TeradataSQLParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(TeradataSQLParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(TeradataSQLParser.NUMERIC, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def FLOAT(self):
            return self.getToken(TeradataSQLParser.FLOAT, 0)

        def REAL(self):
            return self.getToken(TeradataSQLParser.REAL, 0)

        def DOUBLE(self):
            return self.getToken(TeradataSQLParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(TeradataSQLParser.PRECISION, 0)

        def NUMBER(self):
            return self.getToken(TeradataSQLParser.NUMBER, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_numeric_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_data_type" ):
                listener.enterNumeric_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_data_type" ):
                listener.exitNumeric_data_type(self)




    def numeric_data_type(self):

        localctx = TeradataSQLParser.Numeric_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_numeric_data_type)
        self._la = 0 # Token type
        try:
            self.state = 8292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8250
                self.match(TeradataSQLParser.BYTEINT)
                pass
            elif token in [381]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8251
                self.match(TeradataSQLParser.SMALLINT)
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8252
                self.match(TeradataSQLParser.INTEGER)
                pass
            elif token in [201]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8253
                self.match(TeradataSQLParser.INT)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8254
                self.match(TeradataSQLParser.BIGINT)
                pass
            elif token in [108, 109, 278]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8255
                _la = self._input.LA(1)
                if not(_la==108 or _la==109 or _la==278):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8265
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1043,self._ctx)
                if la_ == 1:
                    self.state = 8256
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 8258
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1194:
                        self.state = 8257
                        localctx.precision = self.integer_literal()


                    self.state = 8262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 8260
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 8261
                        localctx.scale = self.integer_literal()


                    self.state = 8264
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass
            elif token in [124, 157, 323]:
                self.enterOuterAlt(localctx, 7)
                self.state = 8277
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [157]:
                    self.state = 8267
                    self.match(TeradataSQLParser.FLOAT)
                    self.state = 8272
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1044,self._ctx)
                    if la_ == 1:
                        self.state = 8268
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 8269
                        localctx.precision = self.integer_literal()
                        self.state = 8270
                        self.match(TeradataSQLParser.CLOSE_PAR)


                    pass
                elif token in [323]:
                    self.state = 8274
                    self.match(TeradataSQLParser.REAL)
                    pass
                elif token in [124]:
                    self.state = 8275
                    self.match(TeradataSQLParser.DOUBLE)
                    self.state = 8276
                    self.match(TeradataSQLParser.PRECISION)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [277]:
                self.enterOuterAlt(localctx, 8)
                self.state = 8279
                self.match(TeradataSQLParser.NUMBER)
                self.state = 8290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1048,self._ctx)
                if la_ == 1:
                    self.state = 8280
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 8283
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1194]:
                        self.state = 8281
                        localctx.precision = self.integer_literal()
                        pass
                    elif token in [1219]:
                        self.state = 8282
                        self.match(TeradataSQLParser.MUL_SIGN)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 8287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 8285
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 8286
                        localctx.scale = self.integer_literal()


                    self.state = 8289
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLParser.CHAR, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Character_set_phraseContext,0)


        def GRAPHIC(self):
            return self.getToken(TeradataSQLParser.GRAPHIC, 0)

        def VARCHAR(self):
            return self.getToken(TeradataSQLParser.VARCHAR, 0)

        def VARYING(self):
            return self.getToken(TeradataSQLParser.VARYING, 0)

        def LONG(self):
            return self.getToken(TeradataSQLParser.LONG, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLParser.VARGRAPHIC, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLParser.CLOB, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLParser.Max_length_k_m_gContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_data_type" ):
                listener.enterChar_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_data_type" ):
                listener.exitChar_data_type(self)




    def char_data_type(self):

        localctx = TeradataSQLParser.Char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_char_data_type)
        self._la = 0 # Token type
        try:
            self.state = 8334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1058,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8294
                _la = self._input.LA(1)
                if not(_la==52 or _la==55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1050,self._ctx)
                if la_ == 1:
                    self.state = 8295
                    self.type_precision()


                self.state = 8299
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
                if la_ == 1:
                    self.state = 8298
                    self.character_set_phrase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8301
                self.match(TeradataSQLParser.GRAPHIC)
                self.state = 8303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1052,self._ctx)
                if la_ == 1:
                    self.state = 8302
                    self.type_precision()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8310
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [464]:
                    self.state = 8305
                    self.match(TeradataSQLParser.VARCHAR)
                    pass
                elif token in [55]:
                    self.state = 8306
                    self.match(TeradataSQLParser.CHARACTER)
                    self.state = 8307
                    self.match(TeradataSQLParser.VARYING)
                    pass
                elif token in [52]:
                    self.state = 8308
                    self.match(TeradataSQLParser.CHAR)
                    self.state = 8309
                    self.match(TeradataSQLParser.VARYING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8312
                self.type_precision()
                self.state = 8314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1054,self._ctx)
                if la_ == 1:
                    self.state = 8313
                    self.character_set_phrase()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8316
                self.match(TeradataSQLParser.LONG)
                self.state = 8317
                self.match(TeradataSQLParser.VARCHAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8318
                self.match(TeradataSQLParser.VARGRAPHIC)
                self.state = 8319
                self.type_precision()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8320
                self.match(TeradataSQLParser.LONG)
                self.state = 8321
                self.match(TeradataSQLParser.VARGRAPHIC)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8326
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 8322
                    self.match(TeradataSQLParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 8323
                    self.match(TeradataSQLParser.CHARACTER)
                    self.state = 8324
                    self.match(TeradataSQLParser.LARGE)
                    self.state = 8325
                    self.match(TeradataSQLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1056,self._ctx)
                if la_ == 1:
                    self.state = 8328
                    self.max_length_k_m_g()


                self.state = 8332
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1057,self._ctx)
                if la_ == 1:
                    self.state = 8331
                    self.latin_unicode_character_set_phrase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precisionless_char_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARCHAR(self):
            return self.getToken(TeradataSQLParser.VARCHAR, 0)

        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Character_set_phraseContext,0)


        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLParser.VARGRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_precisionless_char_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecisionless_char_data_type" ):
                listener.enterPrecisionless_char_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecisionless_char_data_type" ):
                listener.exitPrecisionless_char_data_type(self)




    def precisionless_char_data_type(self):

        localctx = TeradataSQLParser.Precisionless_char_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_precisionless_char_data_type)
        try:
            self.state = 8344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [464]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8336
                self.match(TeradataSQLParser.VARCHAR)
                self.state = 8338
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1059,self._ctx)
                if la_ == 1:
                    self.state = 8337
                    self.character_set_phrase()


                pass
            elif token in [465]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8340
                self.match(TeradataSQLParser.VARGRAPHIC)
                self.state = 8342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1060,self._ctx)
                if la_ == 1:
                    self.state = 8341
                    self.character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_as_locator_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLParser.LOCATOR, 0)

        def CLOB(self):
            return self.getToken(TeradataSQLParser.CLOB, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLParser.OBJECT, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLParser.BINARY, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_lob_as_locator_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_as_locator_data_type" ):
                listener.enterLob_as_locator_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_as_locator_data_type" ):
                listener.exitLob_as_locator_data_type(self)




    def lob_as_locator_data_type(self):

        localctx = TeradataSQLParser.Lob_as_locator_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_lob_as_locator_data_type)
        try:
            self.state = 8362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [55, 62]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8350
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [62]:
                    self.state = 8346
                    self.match(TeradataSQLParser.CLOB)
                    pass
                elif token in [55]:
                    self.state = 8347
                    self.match(TeradataSQLParser.CHARACTER)
                    self.state = 8348
                    self.match(TeradataSQLParser.LARGE)
                    self.state = 8349
                    self.match(TeradataSQLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8352
                self.match(TeradataSQLParser.AS)
                self.state = 8353
                self.match(TeradataSQLParser.LOCATOR)
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8358
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 8354
                    self.match(TeradataSQLParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 8355
                    self.match(TeradataSQLParser.BINARY)
                    self.state = 8356
                    self.match(TeradataSQLParser.LARGE)
                    self.state = 8357
                    self.match(TeradataSQLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8360
                self.match(TeradataSQLParser.AS)
                self.state = 8361
                self.match(TeradataSQLParser.LOCATOR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE(self):
            return self.getToken(TeradataSQLParser.BYTE, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,0)


        def VARBYTE(self):
            return self.getToken(TeradataSQLParser.VARBYTE, 0)

        def BLOB(self):
            return self.getToken(TeradataSQLParser.BLOB, 0)

        def BINARY(self):
            return self.getToken(TeradataSQLParser.BINARY, 0)

        def LARGE(self):
            return self.getToken(TeradataSQLParser.LARGE, 0)

        def OBJECT(self):
            return self.getToken(TeradataSQLParser.OBJECT, 0)

        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLParser.Max_length_k_m_gContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_binary_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_data_type" ):
                listener.enterBinary_data_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_data_type" ):
                listener.exitBinary_data_type(self)




    def binary_data_type(self):

        localctx = TeradataSQLParser.Binary_data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_binary_data_type)
        try:
            self.state = 8379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8364
                self.match(TeradataSQLParser.BYTE)
                self.state = 8366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1065,self._ctx)
                if la_ == 1:
                    self.state = 8365
                    self.type_precision()


                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8368
                self.match(TeradataSQLParser.VARBYTE)
                self.state = 8369
                self.type_precision()
                pass
            elif token in [37, 38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8374
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [38]:
                    self.state = 8370
                    self.match(TeradataSQLParser.BLOB)
                    pass
                elif token in [37]:
                    self.state = 8371
                    self.match(TeradataSQLParser.BINARY)
                    self.state = 8372
                    self.match(TeradataSQLParser.LARGE)
                    self.state = 8373
                    self.match(TeradataSQLParser.OBJECT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 8377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1067,self._ctx)
                if la_ == 1:
                    self.state = 8376
                    self.max_length_k_m_g()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Datetime_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(TeradataSQLParser.DATE, 0)

        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.TIMESTAMP, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Interval_period_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_datetime_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatetime_type" ):
                listener.enterDatetime_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatetime_type" ):
                listener.exitDatetime_type(self)




    def datetime_type(self):

        localctx = TeradataSQLParser.Datetime_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_datetime_type)
        try:
            self.state = 8398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [104]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8381
                self.match(TeradataSQLParser.DATE)
                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8382
                self.match(TeradataSQLParser.TIME)
                self.state = 8384
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1069,self._ctx)
                if la_ == 1:
                    self.state = 8383
                    self.type_precision()


                self.state = 8387
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1070,self._ctx)
                if la_ == 1:
                    self.state = 8386
                    self.with_time_zone()


                pass
            elif token in [422]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8389
                self.match(TeradataSQLParser.TIMESTAMP)
                self.state = 8391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1071,self._ctx)
                if la_ == 1:
                    self.state = 8390
                    self.type_precision()


                self.state = 8394
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1072,self._ctx)
                if la_ == 1:
                    self.state = 8393
                    self.with_time_zone()


                pass
            elif token in [205]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8396
                self.match(TeradataSQLParser.INTERVAL)
                self.state = 8397
                self.interval_period_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLParser.PERIOD, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def DATE(self):
            return self.getToken(TeradataSQLParser.DATE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_time_zoneContext,0)


        def TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_period_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_type" ):
                listener.enterPeriod_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_type" ):
                listener.exitPeriod_type(self)




    def period_type(self):

        localctx = TeradataSQLParser.Period_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_period_type)
        self._la = 0 # Token type
        try:
            self.state = 8424
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1078,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8400
                self.match(TeradataSQLParser.PERIOD)
                self.state = 8401
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 8402
                self.match(TeradataSQLParser.DATE)
                self.state = 8403
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8404
                self.match(TeradataSQLParser.PERIOD)
                self.state = 8405
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 8406
                self.match(TeradataSQLParser.TIME)
                self.state = 8408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 8407
                    self.type_precision()


                self.state = 8411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 8410
                    self.with_time_zone()


                self.state = 8413
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8414
                self.match(TeradataSQLParser.PERIOD)
                self.state = 8415
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 8416
                self.match(TeradataSQLParser.TIMESTAMP)
                self.state = 8418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 8417
                    self.type_precision()


                self.state = 8421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 8420
                    self.with_time_zone()


                self.state = 8423
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLParser.XMLTYPE, 0)

        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def max_length_k_m_g(self):
            return self.getTypedRuleContext(TeradataSQLParser.Max_length_k_m_gContext,0)


        def inline_length(self):
            return self.getTypedRuleContext(TeradataSQLParser.Inline_lengthContext,0)


        def JSON(self):
            return self.getToken(TeradataSQLParser.JSON, 0)

        def max_length_k_m(self):
            return self.getTypedRuleContext(TeradataSQLParser.Max_length_k_mContext,0)


        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Latin_unicode_character_set_phraseContext,0)


        def json_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLParser.Json_storage_formatContext,0)


        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLParser.ST_GEOMETRY, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLParser.DATASET, 0)

        def dataset_storage_format_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Dataset_storage_format_clauseContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_udt_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_type" ):
                listener.enterUdt_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_type" ):
                listener.exitUdt_type(self)




    def udt_type(self):

        localctx = TeradataSQLParser.Udt_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_udt_type)
        self._la = 0 # Token type
        try:
            self.state = 8475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1093,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 8426
                    self.sysudtlib()


                self.state = 8429
                _la = self._input.LA(1)
                if not(_la==1042 or _la==1059):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1080,self._ctx)
                if la_ == 1:
                    self.state = 8430
                    self.max_length_k_m_g()


                self.state = 8434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1081,self._ctx)
                if la_ == 1:
                    self.state = 8433
                    self.inline_length()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 8436
                    self.sysudtlib()


                self.state = 8439
                self.match(TeradataSQLParser.JSON)
                self.state = 8441
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1083,self._ctx)
                if la_ == 1:
                    self.state = 8440
                    self.max_length_k_m()


                self.state = 8444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1084,self._ctx)
                if la_ == 1:
                    self.state = 8443
                    self.inline_length()


                self.state = 8448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1085,self._ctx)
                if la_ == 1:
                    self.state = 8446
                    self.latin_unicode_character_set_phrase()

                elif la_ == 2:
                    self.state = 8447
                    self.json_storage_format()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 8450
                    self.sysudtlib()


                self.state = 8453
                self.match(TeradataSQLParser.ST_GEOMETRY)
                self.state = 8455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1087,self._ctx)
                if la_ == 1:
                    self.state = 8454
                    self.max_length_k_m()


                self.state = 8458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1088,self._ctx)
                if la_ == 1:
                    self.state = 8457
                    self.inline_length()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1089:
                    self.state = 8460
                    self.sysudtlib()


                self.state = 8463
                self.match(TeradataSQLParser.DATASET)
                self.state = 8465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1213:
                    self.state = 8464
                    self.max_length_k_m()


                self.state = 8468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==709:
                    self.state = 8467
                    self.inline_length()


                self.state = 8470
                self.dataset_storage_format_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1092,self._ctx)
                if la_ == 1:
                    self.state = 8471
                    self.sysudtlib()


                self.state = 8474
                self.unqualified_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_type_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Uppercase_phraseContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Casespecific_phraseContext,0)


        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Format_phraseContext,0)


        def column_naming_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_naming_phraseContext,0)


        def with_time_zone(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_time_zoneContext,0)


        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLParser.At_timezoneContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Character_set_phraseContext,0)


        def default_value_control_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Default_value_control_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_data_type_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type_attribute" ):
                listener.enterData_type_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type_attribute" ):
                listener.exitData_type_attribute(self)




    def data_type_attribute(self):

        localctx = TeradataSQLParser.Data_type_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_data_type_attribute)
        try:
            self.state = 8485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1094,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8477
                self.uppercase_phrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8478
                self.casespecific_phrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8479
                self.format_phrase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8480
                self.column_naming_phrase()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8481
                self.with_time_zone()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8482
                self.at_timezone()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8483
                self.character_set_phrase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8484
                self.default_value_control_phrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_value_control_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def default_value(self):
            return self.getTypedRuleContext(TeradataSQLParser.Default_valueContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_default_value_control_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value_control_phrase" ):
                listener.enterDefault_value_control_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value_control_phrase" ):
                listener.exitDefault_value_control_phrase(self)




    def default_value_control_phrase(self):

        localctx = TeradataSQLParser.Default_value_control_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_default_value_control_phrase)
        self._la = 0 # Token type
        try:
            self.state = 8495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [272, 274]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 8487
                    self.match(TeradataSQLParser.NOT)


                self.state = 8490
                self.match(TeradataSQLParser.NULL)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8491
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 8492
                self.default_value()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8493
                self.match(TeradataSQLParser.WITH)
                self.state = 8494
                self.match(TeradataSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Float_literalContext,0)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLParser.PLUS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.LiteralContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Builtin_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)




    def default_value(self):

        localctx = TeradataSQLParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_default_value)
        self._la = 0 # Token type
        try:
            self.state = 8503
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1097,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8497
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8498
                self.float_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8499
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 8500
                self.integer_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8501
                self.literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8502
                self.builtin_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_naming_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_column_naming_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_naming_phrase" ):
                listener.enterColumn_naming_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_naming_phrase" ):
                listener.exitColumn_naming_phrase(self)




    def column_naming_phrase(self):

        localctx = TeradataSQLParser.Column_naming_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_column_naming_phrase)
        try:
            self.state = 8507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [262]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8505
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8506
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SysudtlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLParser.SYSUDTLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sysudtlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSysudtlib" ):
                listener.enterSysudtlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSysudtlib" ):
                listener.exitSysudtlib(self)




    def sysudtlib(self):

        localctx = TeradataSQLParser.SysudtlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_sysudtlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8509
            self.match(TeradataSQLParser.SYSUDTLIB)
            self.state = 8510
            self.match(TeradataSQLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_period_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLParser.YEAR, 0)

        def type_precision(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Type_precisionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLParser.SECOND, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_interval_period_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_period_spec" ):
                listener.enterInterval_period_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_period_spec" ):
                listener.exitInterval_period_spec(self)




    def interval_period_spec(self):

        localctx = TeradataSQLParser.Interval_period_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_interval_period_spec)
        self._la = 0 # Token type
        try:
            self.state = 8574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [478]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8512
                self.match(TeradataSQLParser.YEAR)
                self.state = 8514
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1099,self._ctx)
                if la_ == 1:
                    self.state = 8513
                    self.type_precision()


                self.state = 8518
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1100,self._ctx)
                if la_ == 1:
                    self.state = 8516
                    self.match(TeradataSQLParser.TO)
                    self.state = 8517
                    self.match(TeradataSQLParser.MONTH)


                pass
            elif token in [258]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8520
                self.match(TeradataSQLParser.MONTH)
                self.state = 8522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1101,self._ctx)
                if la_ == 1:
                    self.state = 8521
                    self.type_precision()


                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8524
                self.match(TeradataSQLParser.DAY)
                self.state = 8526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1102,self._ctx)
                if la_ == 1:
                    self.state = 8525
                    self.type_precision()


                self.state = 8537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1104,self._ctx)
                if la_ == 1:
                    self.state = 8528
                    self.match(TeradataSQLParser.TO)
                    self.state = 8529
                    self.match(TeradataSQLParser.HOUR)

                elif la_ == 2:
                    self.state = 8530
                    self.match(TeradataSQLParser.TO)
                    self.state = 8531
                    self.match(TeradataSQLParser.MINUTE)

                elif la_ == 3:
                    self.state = 8532
                    self.match(TeradataSQLParser.TO)
                    self.state = 8533
                    self.match(TeradataSQLParser.SECOND)
                    self.state = 8535
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1103,self._ctx)
                    if la_ == 1:
                        self.state = 8534
                        self.type_precision()




                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8539
                self.match(TeradataSQLParser.HOUR)
                self.state = 8541
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1105,self._ctx)
                if la_ == 1:
                    self.state = 8540
                    self.type_precision()


                self.state = 8550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1107,self._ctx)
                if la_ == 1:
                    self.state = 8543
                    self.match(TeradataSQLParser.TO)
                    self.state = 8544
                    self.match(TeradataSQLParser.MINUTE)

                elif la_ == 2:
                    self.state = 8545
                    self.match(TeradataSQLParser.TO)
                    self.state = 8546
                    self.match(TeradataSQLParser.SECOND)
                    self.state = 8548
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1106,self._ctx)
                    if la_ == 1:
                        self.state = 8547
                        self.type_precision()




                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 5)
                self.state = 8552
                self.match(TeradataSQLParser.MINUTE)
                self.state = 8554
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1108,self._ctx)
                if la_ == 1:
                    self.state = 8553
                    self.type_precision()


                self.state = 8561
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1110,self._ctx)
                if la_ == 1:
                    self.state = 8556
                    self.match(TeradataSQLParser.TO)
                    self.state = 8557
                    self.match(TeradataSQLParser.SECOND)
                    self.state = 8559
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1109,self._ctx)
                    if la_ == 1:
                        self.state = 8558
                        self.type_precision()




                pass
            elif token in [368]:
                self.enterOuterAlt(localctx, 6)
                self.state = 8563
                self.match(TeradataSQLParser.SECOND)
                self.state = 8572
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1112,self._ctx)
                if la_ == 1:
                    self.state = 8564
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 8565
                    localctx.precision = self.integer_literal()
                    self.state = 8568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 8566
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 8567
                        localctx.fractional_precision = self.integer_literal()


                    self.state = 8570
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_precisionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_type_precision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_precision" ):
                listener.enterType_precision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_precision" ):
                listener.exitType_precision(self)




    def type_precision(self):

        localctx = TeradataSQLParser.Type_precisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_type_precision)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8576
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 8577
            localctx.precision = self.integer_literal()
            self.state = 8578
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_m_gContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLParser.M, 0)

        def G(self):
            return self.getToken(TeradataSQLParser.G, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_max_length_k_m_g

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m_g" ):
                listener.enterMax_length_k_m_g(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m_g" ):
                listener.exitMax_length_k_m_g(self)




    def max_length_k_m_g(self):

        localctx = TeradataSQLParser.Max_length_k_m_gContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_max_length_k_m_g)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8580
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 8581
            localctx.max_length = self.integer_literal()
            self.state = 8583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==681 or _la==723 or _la==752:
                self.state = 8582
                _la = self._input.LA(1)
                if not(_la==681 or _la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8585
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Max_length_k_mContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.max_length = None # Integer_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def K(self):
            return self.getToken(TeradataSQLParser.K, 0)

        def M(self):
            return self.getToken(TeradataSQLParser.M, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_max_length_k_m

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMax_length_k_m" ):
                listener.enterMax_length_k_m(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMax_length_k_m" ):
                listener.exitMax_length_k_m(self)




    def max_length_k_m(self):

        localctx = TeradataSQLParser.Max_length_k_mContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_max_length_k_m)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8587
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 8588
            localctx.max_length = self.integer_literal()
            self.state = 8590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==723 or _la==752:
                self.state = 8589
                _la = self._input.LA(1)
                if not(_la==723 or _la==752):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8592
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLParser.UNICODE, 0)

        def GRAPHIC(self):
            return self.getToken(TeradataSQLParser.GRAPHIC, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLParser.KANJISJIS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_phrase" ):
                listener.enterCharacter_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_phrase" ):
                listener.exitCharacter_set_phrase(self)




    def character_set_phrase(self):

        localctx = TeradataSQLParser.Character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8594
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8595
            self.match(TeradataSQLParser.SET)
            self.state = 8596
            _la = self._input.LA(1)
            if not(_la==173 or _la==725 or _la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uppercase_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPPERCASE(self):
            return self.getToken(TeradataSQLParser.UPPERCASE, 0)

        def UC(self):
            return self.getToken(TeradataSQLParser.UC, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_uppercase_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUppercase_phrase" ):
                listener.enterUppercase_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUppercase_phrase" ):
                listener.exitUppercase_phrase(self)




    def uppercase_phrase(self):

        localctx = TeradataSQLParser.Uppercase_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_uppercase_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8598
            _la = self._input.LA(1)
            if not(_la==438 or _la==455):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Casespecific_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.not_ = None # Token

        def CASESPECIFIC(self):
            return self.getToken(TeradataSQLParser.CASESPECIFIC, 0)

        def CS(self):
            return self.getToken(TeradataSQLParser.CS, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_casespecific_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCasespecific_phrase" ):
                listener.enterCasespecific_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCasespecific_phrase" ):
                listener.exitCasespecific_phrase(self)




    def casespecific_phrase(self):

        localctx = TeradataSQLParser.Casespecific_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_casespecific_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272 or _la==1211:
                self.state = 8600
                localctx.not_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    localctx.not_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 8603
            _la = self._input.LA(1)
            if not(_la==49 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_ = None # Char_string_literalContext
            self.date_format = None # Token
            self.time_format = None # Token

        def FORMAT(self):
            return self.getToken(TeradataSQLParser.FORMAT, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def DATE_STRING(self):
            return self.getToken(TeradataSQLParser.DATE_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLParser.TIME_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_format_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_phrase" ):
                listener.enterFormat_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_phrase" ):
                listener.exitFormat_phrase(self)




    def format_phrase(self):

        localctx = TeradataSQLParser.Format_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_format_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8605
            self.match(TeradataSQLParser.FORMAT)
            self.state = 8609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.state = 8606
                localctx.format_ = self.char_string_literal()
                pass
            elif token in [1198]:
                self.state = 8607
                localctx.date_format = self.match(TeradataSQLParser.DATE_STRING)
                pass
            elif token in [1199]:
                self.state = 8608
                localctx.time_format = self.match(TeradataSQLParser.TIME_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def TITLE(self):
            return self.getToken(TeradataSQLParser.TITLE, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTitle_phrase" ):
                listener.enterTitle_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTitle_phrase" ):
                listener.exitTitle_phrase(self)




    def title_phrase(self):

        localctx = TeradataSQLParser.Title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8611
            self.match(TeradataSQLParser.TITLE)
            self.state = 8612
            localctx.title = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMED(self):
            return self.getToken(TeradataSQLParser.NAMED, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_named_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_phrase" ):
                listener.enterNamed_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_phrase" ):
                listener.exitNamed_phrase(self)




    def named_phrase(self):

        localctx = TeradataSQLParser.Named_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_named_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8614
            self.match(TeradataSQLParser.NAMED)
            self.state = 8615
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Latin_unicode_character_set_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(TeradataSQLParser.SET, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLParser.CHAR, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLParser.LATIN, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLParser.UNICODE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_latin_unicode_character_set_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLatin_unicode_character_set_phrase" ):
                listener.enterLatin_unicode_character_set_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLatin_unicode_character_set_phrase" ):
                listener.exitLatin_unicode_character_set_phrase(self)




    def latin_unicode_character_set_phrase(self):

        localctx = TeradataSQLParser.Latin_unicode_character_set_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_latin_unicode_character_set_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8617
            _la = self._input.LA(1)
            if not(_la==52 or _la==55):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8618
            self.match(TeradataSQLParser.SET)
            self.state = 8619
            _la = self._input.LA(1)
            if not(_la==735 or _la==1015):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inline_lengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.length = None # Integer_literalContext

        def INLINE(self):
            return self.getToken(TeradataSQLParser.INLINE, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLParser.LENGTH, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_inline_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInline_length" ):
                listener.enterInline_length(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInline_length" ):
                listener.exitInline_length(self)




    def inline_length(self):

        localctx = TeradataSQLParser.Inline_lengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_inline_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8621
            self.match(TeradataSQLParser.INLINE)
            self.state = 8622
            self.match(TeradataSQLParser.LENGTH)
            self.state = 8623
            localctx.length = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLParser.FORMAT, 0)

        def BSON(self):
            return self.getToken(TeradataSQLParser.BSON, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLParser.UBJSON, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_json_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_storage_format" ):
                listener.enterJson_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_storage_format" ):
                listener.exitJson_storage_format(self)




    def json_storage_format(self):

        localctx = TeradataSQLParser.Json_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_json_storage_format)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8625
            self.match(TeradataSQLParser.STORAGE)
            self.state = 8626
            self.match(TeradataSQLParser.FORMAT)
            self.state = 8627
            _la = self._input.LA(1)
            if not(_la==556 or _la==1010):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_format_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(TeradataSQLParser.STORAGE, 0)

        def FORMAT(self):
            return self.getToken(TeradataSQLParser.FORMAT, 0)

        def dataset_storage_format(self):
            return self.getTypedRuleContext(TeradataSQLParser.Dataset_storage_formatContext,0)


        def with_schema(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_schemaContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_dataset_storage_format_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format_clause" ):
                listener.enterDataset_storage_format_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format_clause" ):
                listener.exitDataset_storage_format_clause(self)




    def dataset_storage_format_clause(self):

        localctx = TeradataSQLParser.Dataset_storage_format_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_dataset_storage_format_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8629
            self.match(TeradataSQLParser.STORAGE)
            self.state = 8630
            self.match(TeradataSQLParser.FORMAT)
            self.state = 8631
            self.dataset_storage_format()
            self.state = 8633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1118,self._ctx)
            if la_ == 1:
                self.state = 8632
                self.with_schema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dataset_storage_formatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVRO(self):
            return self.getToken(TeradataSQLParser.AVRO, 0)

        def CSV(self):
            return self.getToken(TeradataSQLParser.CSV, 0)

        def latin_unicode_character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Latin_unicode_character_set_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_dataset_storage_format

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataset_storage_format" ):
                listener.enterDataset_storage_format(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataset_storage_format" ):
                listener.exitDataset_storage_format(self)




    def dataset_storage_format(self):

        localctx = TeradataSQLParser.Dataset_storage_formatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_dataset_storage_format)
        try:
            self.state = 8640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [545]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8635
                self.match(TeradataSQLParser.AVRO)
                pass
            elif token in [1073]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8636
                self.match(TeradataSQLParser.CSV)
                self.state = 8638
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1119,self._ctx)
                if la_ == 1:
                    self.state = 8637
                    self.latin_unicode_character_set_phrase()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema_name = None # Table_nameContext

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLParser.SCHEMA, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_schema" ):
                listener.enterWith_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_schema" ):
                listener.exitWith_schema(self)




    def with_schema(self):

        localctx = TeradataSQLParser.With_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_with_schema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8642
            self.match(TeradataSQLParser.WITH)
            self.state = 8643
            self.match(TeradataSQLParser.SCHEMA)
            self.state = 8644
            localctx.schema_name = self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_time_zoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_time_zone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_time_zone" ):
                listener.enterWith_time_zone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_time_zone" ):
                listener.exitWith_time_zone(self)




    def with_time_zone(self):

        localctx = TeradataSQLParser.With_time_zoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_with_time_zone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8646
            self.match(TeradataSQLParser.WITH)
            self.state = 8647
            self.match(TeradataSQLParser.TIME)
            self.state = 8648
            self.match(TeradataSQLParser.ZONE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hex_byte_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Hex_byte_literalContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def unicode_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unicode_char_string_literalContext,0)


        def hex_char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Hex_char_string_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def hex_integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Hex_integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Float_literalContext,0)


        def date_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Date_literalContext,0)


        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Time_literalContext,0)


        def timestamp_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Timestamp_literalContext,0)


        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Interval_literalContext,0)


        def period_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Period_literalContext,0)


        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = TeradataSQLParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_literal)
        try:
            self.state = 8663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8650
                self.hex_byte_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8651
                self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8652
                self.unicode_char_string_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8653
                self.hex_char_string_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8654
                self.integer_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8655
                self.hex_integer_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8656
                self.float_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8657
                self.date_literal()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8658
                self.time_literal()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8659
                self.timestamp_literal()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8660
                self.interval_literal()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8661
                self.period_literal()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8662
                self.match(TeradataSQLParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_byte_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_BYTE_LITERAL(self):
            return self.getToken(TeradataSQLParser.HEX_BYTE_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_hex_byte_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_byte_literal" ):
                listener.enterHex_byte_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_byte_literal" ):
                listener.exitHex_byte_literal(self)




    def hex_byte_literal(self):

        localctx = TeradataSQLParser.Hex_byte_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_hex_byte_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8665
            self.match(TeradataSQLParser.HEX_BYTE_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLParser.Character_set_prefixContext,0)


        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLParser.CHAR_STRING, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_string_literal" ):
                listener.enterChar_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_string_literal" ):
                listener.exitChar_string_literal(self)




    def char_string_literal(self):

        localctx = TeradataSQLParser.Char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 8667
                self.character_set_prefix()


            self.state = 8671 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 8670
                    self.match(TeradataSQLParser.CHAR_STRING)

                else:
                    raise NoViableAltException(self)
                self.state = 8673 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1123,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unicode_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNICODE_STRING_LEADING(self):
            return self.getToken(TeradataSQLParser.UNICODE_STRING_LEADING, 0)

        def UESCAPE(self):
            return self.getToken(TeradataSQLParser.UESCAPE, 0)

        def CHAR_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CHAR_STRING)
            else:
                return self.getToken(TeradataSQLParser.CHAR_STRING, i)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_unicode_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnicode_char_string_literal" ):
                listener.enterUnicode_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnicode_char_string_literal" ):
                listener.exitUnicode_char_string_literal(self)




    def unicode_char_string_literal(self):

        localctx = TeradataSQLParser.Unicode_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_unicode_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 8675
                self.character_set_prefix()


            self.state = 8678
            self.match(TeradataSQLParser.UNICODE_STRING_LEADING)
            self.state = 8682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1203:
                self.state = 8679
                self.match(TeradataSQLParser.CHAR_STRING)
                self.state = 8684
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 8685
            self.match(TeradataSQLParser.UESCAPE)
            self.state = 8686
            self.match(TeradataSQLParser.CHAR_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_char_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_STRING(self):
            return self.getToken(TeradataSQLParser.HEX_STRING, 0)

        def character_set_prefix(self):
            return self.getTypedRuleContext(TeradataSQLParser.Character_set_prefixContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_hex_char_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_char_string_literal" ):
                listener.enterHex_char_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_char_string_literal" ):
                listener.exitHex_char_string_literal(self)




    def hex_char_string_literal(self):

        localctx = TeradataSQLParser.Hex_char_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_hex_char_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0):
                self.state = 8688
                self.character_set_prefix()


            self.state = 8691
            self.match(TeradataSQLParser.HEX_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_INTEGER(self):
            return self.getToken(TeradataSQLParser.UNSIGNED_INTEGER, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)




    def integer_literal(self):

        localctx = TeradataSQLParser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8693
            self.match(TeradataSQLParser.UNSIGNED_INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hex_integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_INTEGER_LITERAL(self):
            return self.getToken(TeradataSQLParser.HEX_INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_hex_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_integer_literal" ):
                listener.enterHex_integer_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_integer_literal" ):
                listener.exitHex_integer_literal(self)




    def hex_integer_literal(self):

        localctx = TeradataSQLParser.Hex_integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_hex_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8695
            self.match(TeradataSQLParser.HEX_INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Float_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(TeradataSQLParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_float_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_literal" ):
                listener.enterFloat_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_literal" ):
                listener.exitFloat_literal(self)




    def float_literal(self):

        localctx = TeradataSQLParser.Float_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_float_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8697
            self.match(TeradataSQLParser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_set_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CS_LATIN(self):
            return self.getToken(TeradataSQLParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLParser.CS_GRAPHIC, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_character_set_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_set_prefix" ):
                listener.enterCharacter_set_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_set_prefix" ):
                listener.exitCharacter_set_prefix(self)




    def character_set_prefix(self):

        localctx = TeradataSQLParser.Character_set_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_character_set_prefix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8699
            _la = self._input.LA(1)
            if not(((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_STRING(self):
            return self.getToken(TeradataSQLParser.DATE_STRING, 0)

        def DATE(self):
            return self.getToken(TeradataSQLParser.DATE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_date_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_literal" ):
                listener.enterDate_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_literal" ):
                listener.exitDate_literal(self)




    def date_literal(self):

        localctx = TeradataSQLParser.Date_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_date_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104:
                self.state = 8701
                self.match(TeradataSQLParser.DATE)


            self.state = 8704
            self.match(TeradataSQLParser.DATE_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Time_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME_STRING(self):
            return self.getToken(TeradataSQLParser.TIME_STRING, 0)

        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_time_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTime_literal" ):
                listener.enterTime_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTime_literal" ):
                listener.exitTime_literal(self)




    def time_literal(self):

        localctx = TeradataSQLParser.Time_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_time_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 8706
                self.match(TeradataSQLParser.TIME)


            self.state = 8709
            self.match(TeradataSQLParser.TIME_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Timestamp_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLParser.TIMESTAMP_STRING, 0)

        def TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.TIMESTAMP, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_timestamp_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestamp_literal" ):
                listener.enterTimestamp_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestamp_literal" ):
                listener.exitTimestamp_literal(self)




    def timestamp_literal(self):

        localctx = TeradataSQLParser.Timestamp_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_timestamp_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==422:
                self.state = 8711
                self.match(TeradataSQLParser.TIMESTAMP)


            self.state = 8714
            self.match(TeradataSQLParser.TIMESTAMP_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(TeradataSQLParser.INTERVAL, 0)

        def interval_qualifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Interval_qualifierContext,0)


        def CHAR_STRING(self):
            return self.getToken(TeradataSQLParser.CHAR_STRING, 0)

        def TIME_STRING(self):
            return self.getToken(TeradataSQLParser.TIME_STRING, 0)

        def DATE_STRING(self):
            return self.getToken(TeradataSQLParser.DATE_STRING, 0)

        def TIMESTAMP_STRING(self):
            return self.getToken(TeradataSQLParser.TIMESTAMP_STRING, 0)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_interval_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_literal" ):
                listener.enterInterval_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_literal" ):
                listener.exitInterval_literal(self)




    def interval_literal(self):

        localctx = TeradataSQLParser.Interval_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_interval_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8716
            self.match(TeradataSQLParser.INTERVAL)
            self.state = 8718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1222:
                self.state = 8717
                self.match(TeradataSQLParser.MINUS_SIGN)


            self.state = 8720
            _la = self._input.LA(1)
            if not(((((_la - 1198)) & ~0x3f) == 0 and ((1 << (_la - 1198)) & 39) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8721
            self.interval_qualifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_qualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(TeradataSQLParser.YEAR, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLParser.MONTH, 0)

        def DAY(self):
            return self.getToken(TeradataSQLParser.DAY, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLParser.SECOND, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_interval_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_qualifier" ):
                listener.enterInterval_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_qualifier" ):
                listener.exitInterval_qualifier(self)




    def interval_qualifier(self):

        localctx = TeradataSQLParser.Interval_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_interval_qualifier)
        try:
            self.state = 8750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8723
                self.match(TeradataSQLParser.YEAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8724
                self.match(TeradataSQLParser.YEAR)
                self.state = 8725
                self.match(TeradataSQLParser.TO)
                self.state = 8726
                self.match(TeradataSQLParser.MONTH)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8727
                self.match(TeradataSQLParser.MONTH)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 8728
                self.match(TeradataSQLParser.DAY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 8729
                self.match(TeradataSQLParser.DAY)
                self.state = 8730
                self.match(TeradataSQLParser.TO)
                self.state = 8731
                self.match(TeradataSQLParser.HOUR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 8732
                self.match(TeradataSQLParser.DAY)
                self.state = 8733
                self.match(TeradataSQLParser.TO)
                self.state = 8734
                self.match(TeradataSQLParser.MINUTE)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 8735
                self.match(TeradataSQLParser.DAY)
                self.state = 8736
                self.match(TeradataSQLParser.TO)
                self.state = 8737
                self.match(TeradataSQLParser.SECOND)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 8738
                self.match(TeradataSQLParser.HOUR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 8739
                self.match(TeradataSQLParser.HOUR)
                self.state = 8740
                self.match(TeradataSQLParser.TO)
                self.state = 8741
                self.match(TeradataSQLParser.MINUTE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 8742
                self.match(TeradataSQLParser.HOUR)
                self.state = 8743
                self.match(TeradataSQLParser.TO)
                self.state = 8744
                self.match(TeradataSQLParser.SECOND)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 8745
                self.match(TeradataSQLParser.MINUTE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 8746
                self.match(TeradataSQLParser.MINUTE)
                self.state = 8747
                self.match(TeradataSQLParser.TO)
                self.state = 8748
                self.match(TeradataSQLParser.SECOND)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 8749
                self.match(TeradataSQLParser.SECOND)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERIOD(self):
            return self.getToken(TeradataSQLParser.PERIOD, 0)

        def PERIOD_STRING(self):
            return self.getToken(TeradataSQLParser.PERIOD_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_period_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_literal" ):
                listener.enterPeriod_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_literal" ):
                listener.exitPeriod_literal(self)




    def period_literal(self):

        localctx = TeradataSQLParser.Period_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_period_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8752
            self.match(TeradataSQLParser.PERIOD)
            self.state = 8753
            self.match(TeradataSQLParser.PERIOD_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unqualified_table_name = None # Unqualified_nameContext

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DOT_)
            else:
                return self.getToken(TeradataSQLParser.DOT_, i)

        def unqualified_column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_column_nameContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = TeradataSQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_column_name)
        try:
            self.state = 8766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8755
                self.database_name()
                self.state = 8756
                self.match(TeradataSQLParser.DOT_)
                self.state = 8757
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 8758
                self.match(TeradataSQLParser.DOT_)
                self.state = 8759
                self.unqualified_column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8761
                localctx.unqualified_table_name = self.unqualified_name()
                self.state = 8762
                self.match(TeradataSQLParser.DOT_)
                self.state = 8763
                self.unqualified_column_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 8765
                self.unqualified_column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def SAMPLEID(self):
            return self.getToken(TeradataSQLParser.SAMPLEID, 0)

        def ROWID(self):
            return self.getToken(TeradataSQLParser.ROWID, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_unqualified_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_column_name" ):
                listener.enterUnqualified_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_column_name" ):
                listener.exitUnqualified_column_name(self)




    def unqualified_column_name(self):

        localctx = TeradataSQLParser.Unqualified_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_unqualified_column_name)
        try:
            self.state = 8772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8768
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8769
                self.nonreserved_word()
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8770
                self.match(TeradataSQLParser.SAMPLEID)
                pass
            elif token in [363]:
                self.enterOuterAlt(localctx, 4)
                self.state = 8771
                self.match(TeradataSQLParser.ROWID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_unqualified_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_name" ):
                listener.enterUnqualified_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_name" ):
                listener.exitUnqualified_name(self)




    def unqualified_name(self):

        localctx = TeradataSQLParser.Unqualified_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_unqualified_name)
        try:
            self.state = 8776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8774
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8775
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_object_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_name" ):
                listener.enterObject_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_name" ):
                listener.exitObject_name(self)




    def object_name(self):

        localctx = TeradataSQLParser.Object_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_object_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1135,self._ctx)
            if la_ == 1:
                self.state = 8778
                self.database_name()
                self.state = 8779
                self.match(TeradataSQLParser.DOT_)


            self.state = 8785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8783
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8784
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = TeradataSQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1137,self._ctx)
            if la_ == 1:
                self.state = 8787
                self.database_name()
                self.state = 8788
                self.match(TeradataSQLParser.DOT_)


            self.state = 8794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8792
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8793
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_procedure_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_name" ):
                listener.enterProcedure_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_name" ):
                listener.exitProcedure_name(self)




    def procedure_name(self):

        localctx = TeradataSQLParser.Procedure_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_procedure_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1139,self._ctx)
            if la_ == 1:
                self.state = 8796
                self.database_name()
                self.state = 8797
                self.match(TeradataSQLParser.DOT_)


            self.state = 8803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8801
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8802
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = TeradataSQLParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1141,self._ctx)
            if la_ == 1:
                self.state = 8805
                self.database_name()
                self.state = 8806
                self.match(TeradataSQLParser.DOT_)


            self.state = 8812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8810
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8811
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_macro_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_name" ):
                listener.enterMacro_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_name" ):
                listener.exitMacro_name(self)




    def macro_name(self):

        localctx = TeradataSQLParser.Macro_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_macro_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8817
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1143,self._ctx)
            if la_ == 1:
                self.state = 8814
                self.database_name()
                self.state = 8815
                self.match(TeradataSQLParser.DOT_)


            self.state = 8821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.state = 8819
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.state = 8820
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Database_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = TeradataSQLParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_database_name)
        try:
            self.state = 8825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8823
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8824
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_user_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_name" ):
                listener.enterUser_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_name" ):
                listener.exitUser_name(self)




    def user_name(self):

        localctx = TeradataSQLParser.User_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_user_name)
        try:
            self.state = 8829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8827
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8828
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLParser.ADMIN, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_role_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_name" ):
                listener.enterRole_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_name" ):
                listener.exitRole_name(self)




    def role_name(self):

        localctx = TeradataSQLParser.Role_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_role_name)
        try:
            self.state = 8834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8831
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8832
                self.match(TeradataSQLParser.ADMIN)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 3)
                self.state = 8833
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_profile_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_name" ):
                listener.enterProfile_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_name" ):
                listener.exitProfile_name(self)




    def profile_name(self):

        localctx = TeradataSQLParser.Profile_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_profile_name)
        try:
            self.state = 8838
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8836
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8837
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_alias_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_name" ):
                listener.enterAlias_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_name" ):
                listener.exitAlias_name(self)




    def alias_name(self):

        localctx = TeradataSQLParser.Alias_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_alias_name)
        try:
            self.state = 8842
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8840
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8841
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_variable_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_name" ):
                listener.enterVariable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_name" ):
                listener.exitVariable_name(self)




    def variable_name(self):

        localctx = TeradataSQLParser.Variable_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_variable_name)
        try:
            self.state = 8846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8844
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8845
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_parameter_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_name" ):
                listener.enterParameter_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_name" ):
                listener.exitParameter_name(self)




    def parameter_name(self):

        localctx = TeradataSQLParser.Parameter_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_parameter_name)
        try:
            self.state = 8850
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8848
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8849
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Label_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)




    def label_name(self):

        localctx = TeradataSQLParser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_label_name)
        try:
            self.state = 8854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8852
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8853
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_condition_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_name" ):
                listener.enterCondition_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_name" ):
                listener.exitCondition_name(self)




    def condition_name(self):

        localctx = TeradataSQLParser.Condition_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_condition_name)
        try:
            self.state = 8858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8856
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8857
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)




    def cursor_name(self):

        localctx = TeradataSQLParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_cursor_name)
        try:
            self.state = 8862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8860
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8861
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_statement_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_name" ):
                listener.enterStatement_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_name" ):
                listener.exitStatement_name(self)




    def statement_name(self):

        localctx = TeradataSQLParser.Statement_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_statement_name)
        try:
            self.state = 8866
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8864
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8865
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statistics_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_statistics_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatistics_name" ):
                listener.enterStatistics_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatistics_name" ):
                listener.exitStatistics_name(self)




    def statistics_name(self):

        localctx = TeradataSQLParser.Statistics_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_statistics_name)
        try:
            self.state = 8870
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8868
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8869
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_udt_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_name" ):
                listener.enterUdt_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_name" ):
                listener.exitUdt_name(self)




    def udt_name(self):

        localctx = TeradataSQLParser.Udt_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_udt_name)
        try:
            self.state = 8874
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8872
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8873
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_attribute_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_name" ):
                listener.enterAttribute_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_name" ):
                listener.exitAttribute_name(self)




    def attribute_name(self):

        localctx = TeradataSQLParser.Attribute_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_attribute_name)
        try:
            self.state = 8878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8876
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8877
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_NAME(self):
            return self.getToken(TeradataSQLParser.OBJECT_NAME, 0)

        def nonreserved_word(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nonreserved_wordContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_method_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_name" ):
                listener.enterMethod_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_name" ):
                listener.exitMethod_name(self)




    def method_name(self):

        localctx = TeradataSQLParser.Method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_method_name)
        try:
            self.state = 8882
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 8880
                self.match(TeradataSQLParser.OBJECT_NAME)
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 8881
                self.nonreserved_word()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anchor_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLParser.ANCHOR_SECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLParser.ANCHOR_MINUTE, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLParser.ANCHOR_HOUR, 0)

        def DAY(self):
            return self.getToken(TeradataSQLParser.DAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLParser.WEEK_END, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLParser.MONTH_END, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLParser.QUARTER_END, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLParser.YEAR_END, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLParser.MONDAY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLParser.TUESDAY, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLParser.WEDNESDAY, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLParser.THURSDAY, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLParser.FRIDAY, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLParser.SATURDAY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLParser.SUNDAY, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_anchor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnchor_name" ):
                listener.enterAnchor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnchor_name" ):
                listener.exitAnchor_name(self)




    def anchor_name(self):

        localctx = TeradataSQLParser.Anchor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_anchor_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8884
            _la = self._input.LA(1)
            if not(_la==106 or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & 15) != 0) or _la==678 or ((((_la - 774)) & ~0x3f) == 0 and ((1 << (_la - 774)) & 49) != 0) or ((((_la - 863)) & ~0x3f) == 0 and ((1 << (_la - 863)) & 2199023255555) != 0) or ((((_la - 949)) & ~0x3f) == 0 and ((1 << (_la - 949)) & 1152921573326323713) != 0) or ((((_la - 1026)) & ~0x3f) == 0 and ((1 << (_la - 1026)) & 103079215111) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonreserved_wordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORTSESSIONS(self):
            return self.getToken(TeradataSQLParser.ABORTSESSIONS, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLParser.ABSENT, 0)

        def ACCESS(self):
            return self.getToken(TeradataSQLParser.ACCESS, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLParser.ACCORDING, 0)

        def ACCUMULATE(self):
            return self.getToken(TeradataSQLParser.ACCUMULATE, 0)

        def AG(self):
            return self.getToken(TeradataSQLParser.AG, 0)

        def AGGGEOMINTERSECTION(self):
            return self.getToken(TeradataSQLParser.AGGGEOMINTERSECTION, 0)

        def AGGGEOMUNION(self):
            return self.getToken(TeradataSQLParser.AGGGEOMUNION, 0)

        def ALLDBQL(self):
            return self.getToken(TeradataSQLParser.ALLDBQL, 0)

        def ALLOCATE(self):
            return self.getToken(TeradataSQLParser.ALLOCATE, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLParser.ALLOCATION, 0)

        def ALLOW(self):
            return self.getToken(TeradataSQLParser.ALLOW, 0)

        def ALLPARAMS(self):
            return self.getToken(TeradataSQLParser.ALLPARAMS, 0)

        def ALLTDWM(self):
            return self.getToken(TeradataSQLParser.ALLTDWM, 0)

        def ALWAYS(self):
            return self.getToken(TeradataSQLParser.ALWAYS, 0)

        def AMPCOUNT(self):
            return self.getToken(TeradataSQLParser.AMPCOUNT, 0)

        def ANALYSIS(self):
            return self.getToken(TeradataSQLParser.ANALYSIS, 0)

        def ANCHOR(self):
            return self.getToken(TeradataSQLParser.ANCHOR, 0)

        def ANCHOR_HOUR(self):
            return self.getToken(TeradataSQLParser.ANCHOR_HOUR, 0)

        def ANCHOR_MILLISECOND(self):
            return self.getToken(TeradataSQLParser.ANCHOR_MILLISECOND, 0)

        def ANCHOR_MINUTE(self):
            return self.getToken(TeradataSQLParser.ANCHOR_MINUTE, 0)

        def ANCHOR_SECOND(self):
            return self.getToken(TeradataSQLParser.ANCHOR_SECOND, 0)

        def APPLNAME(self):
            return self.getToken(TeradataSQLParser.APPLNAME, 0)

        def ARCHIVE(self):
            return self.getToken(TeradataSQLParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(TeradataSQLParser.ARRAY, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLParser.ARRAY_ADD, 0)

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLParser.ARRAY_AGG, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLParser.ARRAY_AVG, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLParser.ARRAY_COMPARE, 0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLParser.ARRAY_CONCAT, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLParser.ARRAY_DIV, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLParser.ARRAY_EQ, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLParser.ARRAY_GE, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLParser.ARRAY_GET, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLParser.ARRAY_GT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLParser.ARRAY_LE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLParser.ARRAY_LT, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLParser.ARRAY_MIN, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLParser.ARRAY_MOD, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLParser.ARRAY_MUL, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLParser.ARRAY_NE, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLParser.ARRAY_SUB, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLParser.ARRAY_SUM, 0)

        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLParser.ARRAY_UPDATE_STRIDE, 0)

        def ASCII(self):
            return self.getToken(TeradataSQLParser.ASCII, 0)

        def ASSIGNMENT(self):
            return self.getToken(TeradataSQLParser.ASSIGNMENT, 0)

        def ATTR(self):
            return self.getToken(TeradataSQLParser.ATTR, 0)

        def ATTRIBUTE(self):
            return self.getToken(TeradataSQLParser.ATTRIBUTE, 0)

        def ATTRIBUTES(self):
            return self.getToken(TeradataSQLParser.ATTRIBUTES, 0)

        def ATTRIBUTION(self):
            return self.getToken(TeradataSQLParser.ATTRIBUTION, 0)

        def ATTRS(self):
            return self.getToken(TeradataSQLParser.ATTRS, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLParser.AUTH, 0)

        def AUTO(self):
            return self.getToken(TeradataSQLParser.AUTO, 0)

        def AUTOTEMP(self):
            return self.getToken(TeradataSQLParser.AUTOTEMP, 0)

        def AVRO(self):
            return self.getToken(TeradataSQLParser.AVRO, 0)

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLParser.BIT_LENGTH, 0)

        def BITAND(self):
            return self.getToken(TeradataSQLParser.BITAND, 0)

        def BITNOT(self):
            return self.getToken(TeradataSQLParser.BITNOT, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLParser.BITXOR, 0)

        def BLOCKCOMPRESSION(self):
            return self.getToken(TeradataSQLParser.BLOCKCOMPRESSION, 0)

        def BLOCKCOMPRESSIONALGORITHM(self):
            return self.getToken(TeradataSQLParser.BLOCKCOMPRESSIONALGORITHM, 0)

        def BLOCKCOMPRESSIONLEVEL(self):
            return self.getToken(TeradataSQLParser.BLOCKCOMPRESSIONLEVEL, 0)

        def BOM(self):
            return self.getToken(TeradataSQLParser.BOM, 0)

        def BOTTOM(self):
            return self.getToken(TeradataSQLParser.BOTTOM, 0)

        def BSON(self):
            return self.getToken(TeradataSQLParser.BSON, 0)

        def C(self):
            return self.getToken(TeradataSQLParser.C, 0)

        def CALENDAR(self):
            return self.getToken(TeradataSQLParser.CALENDAR, 0)

        def CALLED(self):
            return self.getToken(TeradataSQLParser.CALLED, 0)

        def CALLER(self):
            return self.getToken(TeradataSQLParser.CALLER, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLParser.CAMSET_L, 0)

        def CAPTURE(self):
            return self.getToken(TeradataSQLParser.CAPTURE, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLParser.CARDINALITY, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLParser.CEILING, 0)

        def CHANGERATE(self):
            return self.getToken(TeradataSQLParser.CHANGERATE, 0)

        def CHARACTERISTICS(self):
            return self.getToken(TeradataSQLParser.CHARACTERISTICS, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLParser.CHARSET, 0)

        def CHARSET_COLL(self):
            return self.getToken(TeradataSQLParser.CHARSET_COLL, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLParser.CHECKSUM, 0)

        def CHR(self):
            return self.getToken(TeradataSQLParser.CHR, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(TeradataSQLParser.CLASS_ORIGIN, 0)

        def CLICKLAG(self):
            return self.getToken(TeradataSQLParser.CLICKLAG, 0)

        def CLIENT(self):
            return self.getToken(TeradataSQLParser.CLIENT, 0)

        def CNT(self):
            return self.getToken(TeradataSQLParser.CNT, 0)

        def COLOCATE(self):
            return self.getToken(TeradataSQLParser.COLOCATE, 0)

        def COLUMNMETA(self):
            return self.getToken(TeradataSQLParser.COLUMNMETA, 0)

        def COLUMNS(self):
            return self.getToken(TeradataSQLParser.COLUMNS, 0)

        def COLUMNSPERINDEX(self):
            return self.getToken(TeradataSQLParser.COLUMNSPERINDEX, 0)

        def COLUMNSPERJOININDEX(self):
            return self.getToken(TeradataSQLParser.COLUMNSPERJOININDEX, 0)

        def COMMAND_FUNCTION(self):
            return self.getToken(TeradataSQLParser.COMMAND_FUNCTION, 0)

        def COMMAND_FUNCTION_CODE(self):
            return self.getToken(TeradataSQLParser.COMMAND_FUNCTION_CODE, 0)

        def COMPARISON(self):
            return self.getToken(TeradataSQLParser.COMPARISON, 0)

        def COMPILE(self):
            return self.getToken(TeradataSQLParser.COMPILE, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLParser.CONCAT, 0)

        def CONCURRENT(self):
            return self.getToken(TeradataSQLParser.CONCURRENT, 0)

        def CONDITION(self):
            return self.getToken(TeradataSQLParser.CONDITION, 0)

        def CONDITION_IDENTIFIER(self):
            return self.getToken(TeradataSQLParser.CONDITION_IDENTIFIER, 0)

        def CONDITION_NUMBER(self):
            return self.getToken(TeradataSQLParser.CONDITION_NUMBER, 0)

        def CONTAINED(self):
            return self.getToken(TeradataSQLParser.CONTAINED, 0)

        def CONTAINEDTOKEN(self):
            return self.getToken(TeradataSQLParser.CONTAINEDTOKEN, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLParser.CONTENT, 0)

        def CONTIGUOUS(self):
            return self.getToken(TeradataSQLParser.CONTIGUOUS, 0)

        def COST(self):
            return self.getToken(TeradataSQLParser.COST, 0)

        def COSTS(self):
            return self.getToken(TeradataSQLParser.COSTS, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLParser.COUNTSET, 0)

        def CPP(self):
            return self.getToken(TeradataSQLParser.CPP, 0)

        def CPUTIME(self):
            return self.getToken(TeradataSQLParser.CPUTIME, 0)

        def CPUTIMENORM(self):
            return self.getToken(TeradataSQLParser.CPUTIMENORM, 0)

        def CREATEDATASET(self):
            return self.getToken(TeradataSQLParser.CREATEDATASET, 0)

        def CREATOR(self):
            return self.getToken(TeradataSQLParser.CREATOR, 0)

        def CUME_DIST(self):
            return self.getToken(TeradataSQLParser.CUME_DIST, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLParser.CURDATE, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLParser.CURTIME, 0)

        def DATA(self):
            return self.getToken(TeradataSQLParser.DATA, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLParser.DATASET, 0)

        def DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.DAY_OF_CALENDAR, 0)

        def DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.DAY_OF_MONTH, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLParser.DAY_OF_WEEK, 0)

        def DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.DAY_OF_YEAR, 0)

        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.DAYOCCURRENCE_OF_MONTH, 0)

        def DBA(self):
            return self.getToken(TeradataSQLParser.DBA, 0)

        def DBC(self):
            return self.getToken(TeradataSQLParser.DBC, 0)

        def DEBUG(self):
            return self.getToken(TeradataSQLParser.DEBUG, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLParser.DECAMSET_L, 0)

        def DECODE(self):
            return self.getToken(TeradataSQLParser.DECODE, 0)

        def DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.DECOMPRESS, 0)

        def DEFINER(self):
            return self.getToken(TeradataSQLParser.DEFINER, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLParser.DELIMITER, 0)

        def DELTA_T(self):
            return self.getToken(TeradataSQLParser.DELTA_T, 0)

        def DEMOGRAPHICS(self):
            return self.getToken(TeradataSQLParser.DEMOGRAPHICS, 0)

        def DENIALS(self):
            return self.getToken(TeradataSQLParser.DENIALS, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLParser.DENSE, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLParser.DENSE_RANK, 0)

        def DESCRIBE(self):
            return self.getToken(TeradataSQLParser.DESCRIBE, 0)

        def DETAILED(self):
            return self.getToken(TeradataSQLParser.DETAILED, 0)

        def DIAGNOSTICS(self):
            return self.getToken(TeradataSQLParser.DIAGNOSTICS, 0)

        def DIGITS(self):
            return self.getToken(TeradataSQLParser.DIGITS, 0)

        def DIMENSION(self):
            return self.getToken(TeradataSQLParser.DIMENSION, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLParser.DOCUMENT, 0)

        def DOT(self):
            return self.getToken(TeradataSQLParser.DOT, 0)

        def DOWN(self):
            return self.getToken(TeradataSQLParser.DOWN, 0)

        def DR(self):
            return self.getToken(TeradataSQLParser.DR, 0)

        def DUPCOUNT(self):
            return self.getToken(TeradataSQLParser.DUPCOUNT, 0)

        def DUPCOUNTCUM(self):
            return self.getToken(TeradataSQLParser.DUPCOUNTCUM, 0)

        def EBCDIC(self):
            return self.getToken(TeradataSQLParser.EBCDIC, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLParser.EDITDISTANCE, 0)

        def ELAPSEDSEC(self):
            return self.getToken(TeradataSQLParser.ELAPSEDSEC, 0)

        def ELAPSEDTIME(self):
            return self.getToken(TeradataSQLParser.ELAPSEDTIME, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLParser.ELEMENT, 0)

        def ELZS_H(self):
            return self.getToken(TeradataSQLParser.ELZS_H, 0)

        def EMITNULL(self):
            return self.getToken(TeradataSQLParser.EMITNULL, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLParser.EMPTY, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLParser.EMPTY_CLOB, 0)

        def ENCODE(self):
            return self.getToken(TeradataSQLParser.ENCODE, 0)

        def ENCODING(self):
            return self.getToken(TeradataSQLParser.ENCODING, 0)

        def ENCRYPT(self):
            return self.getToken(TeradataSQLParser.ENCRYPT, 0)

        def ERRORS(self):
            return self.getToken(TeradataSQLParser.ERRORS, 0)

        def ERRORTBL(self):
            return self.getToken(TeradataSQLParser.ERRORTBL, 0)

        def EVENTCOLUMN(self):
            return self.getToken(TeradataSQLParser.EVENTCOLUMN, 0)

        def EXCEPTION(self):
            return self.getToken(TeradataSQLParser.EXCEPTION, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLParser.EXCL, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLParser.EXCLUDE, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLParser.EXCLUDING, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(TeradataSQLParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(TeradataSQLParser.EXPORT, 0)

        def EXPORTWIDTH(self):
            return self.getToken(TeradataSQLParser.EXPORTWIDTH, 0)

        def FALSE(self):
            return self.getToken(TeradataSQLParser.FALSE, 0)

        def FEATUREINFO(self):
            return self.getToken(TeradataSQLParser.FEATUREINFO, 0)

        def FILE(self):
            return self.getToken(TeradataSQLParser.FILE, 0)

        def FILL(self):
            return self.getToken(TeradataSQLParser.FILL, 0)

        def FILTER(self):
            return self.getToken(TeradataSQLParser.FILTER, 0)

        def FINAL(self):
            return self.getToken(TeradataSQLParser.FINAL, 0)

        def FIRST_NOTNULL(self):
            return self.getToken(TeradataSQLParser.FIRST_NOTNULL, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLParser.FIRST_VALUE, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLParser.FLOOR, 0)

        def FOLLOWING(self):
            return self.getToken(TeradataSQLParser.FOLLOWING, 0)

        def FOREIGNFUNCTION(self):
            return self.getToken(TeradataSQLParser.FOREIGNFUNCTION, 0)

        def FORTOKEN(self):
            return self.getToken(TeradataSQLParser.FORTOKEN, 0)

        def FRIDAY(self):
            return self.getToken(TeradataSQLParser.FRIDAY, 0)

        def FROM_BYTES(self):
            return self.getToken(TeradataSQLParser.FROM_BYTES, 0)

        def FUNCTIONPARAMETER(self):
            return self.getToken(TeradataSQLParser.FUNCTIONPARAMETER, 0)

        def G(self):
            return self.getToken(TeradataSQLParser.G, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLParser.GETBIT, 0)

        def GETPSFVERSION(self):
            return self.getToken(TeradataSQLParser.GETPSFVERSION, 0)

        def GETQUERYBAND(self):
            return self.getToken(TeradataSQLParser.GETQUERYBAND, 0)

        def GETQUERYBANDVALUE(self):
            return self.getToken(TeradataSQLParser.GETQUERYBANDVALUE, 0)

        def GETTIMEZONEDISPLACEMENT(self):
            return self.getToken(TeradataSQLParser.GETTIMEZONEDISPLACEMENT, 0)

        def GLOBAL(self):
            return self.getToken(TeradataSQLParser.GLOBAL, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLParser.GLOP, 0)

        def GREATEST(self):
            return self.getToken(TeradataSQLParser.GREATEST, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLParser.HIGH, 0)

        def HOST(self):
            return self.getToken(TeradataSQLParser.HOST, 0)

        def IDENTIFYDATABASE(self):
            return self.getToken(TeradataSQLParser.IDENTIFYDATABASE, 0)

        def IDENTIFYSESSION(self):
            return self.getToken(TeradataSQLParser.IDENTIFYSESSION, 0)

        def IDENTIFYTABLE(self):
            return self.getToken(TeradataSQLParser.IDENTIFYTABLE, 0)

        def IDENTIFYUSER(self):
            return self.getToken(TeradataSQLParser.IDENTIFYUSER, 0)

        def IFP(self):
            return self.getToken(TeradataSQLParser.IFP, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLParser.IGNORE, 0)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLParser.IMMEDIATELY, 0)

        def IMPORT(self):
            return self.getToken(TeradataSQLParser.IMPORT, 0)

        def INCLUDE(self):
            return self.getToken(TeradataSQLParser.INCLUDE, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLParser.INCLUDING, 0)

        def INCREMENT(self):
            return self.getToken(TeradataSQLParser.INCREMENT, 0)

        def INCREMENTAL(self):
            return self.getToken(TeradataSQLParser.INCREMENTAL, 0)

        def INDENT(self):
            return self.getToken(TeradataSQLParser.INDENT, 0)

        def INDEXESPERTABLE(self):
            return self.getToken(TeradataSQLParser.INDEXESPERTABLE, 0)

        def INDEXMAINTMODE(self):
            return self.getToken(TeradataSQLParser.INDEXMAINTMODE, 0)

        def INIT(self):
            return self.getToken(TeradataSQLParser.INIT, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLParser.INITCAP, 0)

        def INLINE(self):
            return self.getToken(TeradataSQLParser.INLINE, 0)

        def INSTANTIABLE(self):
            return self.getToken(TeradataSQLParser.INSTANTIABLE, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLParser.INSTR, 0)

        def INTERNAL(self):
            return self.getToken(TeradataSQLParser.INTERNAL, 0)

        def INVOKER(self):
            return self.getToken(TeradataSQLParser.INVOKER, 0)

        def IOCOUNT(self):
            return self.getToken(TeradataSQLParser.IOCOUNT, 0)

        def IPARTITION(self):
            return self.getToken(TeradataSQLParser.IPARTITION, 0)

        def ISOLATED(self):
            return self.getToken(TeradataSQLParser.ISOLATED, 0)

        def ISOLATION(self):
            return self.getToken(TeradataSQLParser.ISOLATION, 0)

        def JAVA(self):
            return self.getToken(TeradataSQLParser.JAVA, 0)

        def JIS_COLL(self):
            return self.getToken(TeradataSQLParser.JIS_COLL, 0)

        def JSON(self):
            return self.getToken(TeradataSQLParser.JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLParser.JSON_AGG, 0)

        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLParser.JSON_COMPOSE, 0)

        def K(self):
            return self.getToken(TeradataSQLParser.K, 0)

        def KANJI1(self):
            return self.getToken(TeradataSQLParser.KANJI1, 0)

        def KANJISJIS(self):
            return self.getToken(TeradataSQLParser.KANJISJIS, 0)

        def KBYTE(self):
            return self.getToken(TeradataSQLParser.KBYTE, 0)

        def KBYTES(self):
            return self.getToken(TeradataSQLParser.KBYTES, 0)

        def KEEP(self):
            return self.getToken(TeradataSQLParser.KEEP, 0)

        def KILOBYTES(self):
            return self.getToken(TeradataSQLParser.KILOBYTES, 0)

        def LAG(self):
            return self.getToken(TeradataSQLParser.LAG, 0)

        def LAST(self):
            return self.getToken(TeradataSQLParser.LAST, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLParser.LAST_DAY, 0)

        def LAST_NOTNULL(self):
            return self.getToken(TeradataSQLParser.LAST_NOTNULL, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLParser.LAST_VALUE, 0)

        def LATIN(self):
            return self.getToken(TeradataSQLParser.LATIN, 0)

        def LDIFF(self):
            return self.getToken(TeradataSQLParser.LDIFF, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLParser.LEAD, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLParser.LEAST, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLParser.LENGTH, 0)

        def LEVEL(self):
            return self.getToken(TeradataSQLParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(TeradataSQLParser.LIST, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLParser.LOAD, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLParser.LOCATE, 0)

        def LOCKEDUSEREXPIRE(self):
            return self.getToken(TeradataSQLParser.LOCKEDUSEREXPIRE, 0)

        def LOW(self):
            return self.getToken(TeradataSQLParser.LOW, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLParser.LTRIM, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLParser.LZDECOMP_L, 0)

        def M(self):
            return self.getToken(TeradataSQLParser.M, 0)

        def MAD(self):
            return self.getToken(TeradataSQLParser.MAD, 0)

        def MANUAL(self):
            return self.getToken(TeradataSQLParser.MANUAL, 0)

        def MAPPING(self):
            return self.getToken(TeradataSQLParser.MAPPING, 0)

        def MATCHED(self):
            return self.getToken(TeradataSQLParser.MATCHED, 0)

        def MAX_CHOOSE(self):
            return self.getToken(TeradataSQLParser.MAX_CHOOSE, 0)

        def MAXCHAR(self):
            return self.getToken(TeradataSQLParser.MAXCHAR, 0)

        def MAXINTERVALS(self):
            return self.getToken(TeradataSQLParser.MAXINTERVALS, 0)

        def MAXLOGONATTEMPTS(self):
            return self.getToken(TeradataSQLParser.MAXLOGONATTEMPTS, 0)

        def MAXVALUE(self):
            return self.getToken(TeradataSQLParser.MAXVALUE, 0)

        def MAXVALUELENGTH(self):
            return self.getToken(TeradataSQLParser.MAXVALUELENGTH, 0)

        def MEDIAN(self):
            return self.getToken(TeradataSQLParser.MEDIAN, 0)

        def MEDIUM(self):
            return self.getToken(TeradataSQLParser.MEDIUM, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLParser.MEETS, 0)

        def MEMBER(self):
            return self.getToken(TeradataSQLParser.MEMBER, 0)

        def MERGEBLOCKRATIO(self):
            return self.getToken(TeradataSQLParser.MERGEBLOCKRATIO, 0)

        def MESSAGE_LENGTH(self):
            return self.getToken(TeradataSQLParser.MESSAGE_LENGTH, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(TeradataSQLParser.MESSAGE_TEXT, 0)

        def MIN_CHOOSE(self):
            return self.getToken(TeradataSQLParser.MIN_CHOOSE, 0)

        def MINCHAR(self):
            return self.getToken(TeradataSQLParser.MINCHAR, 0)

        def MINVALUE(self):
            return self.getToken(TeradataSQLParser.MINVALUE, 0)

        def MODIFIED(self):
            return self.getToken(TeradataSQLParser.MODIFIED, 0)

        def MONDAY(self):
            return self.getToken(TeradataSQLParser.MONDAY, 0)

        def MONITORQUERYBAND(self):
            return self.getToken(TeradataSQLParser.MONITORQUERYBAND, 0)

        def MONITORSESSIONRATE(self):
            return self.getToken(TeradataSQLParser.MONITORSESSIONRATE, 0)

        def MONITORVERSION(self):
            return self.getToken(TeradataSQLParser.MONITORVERSION, 0)

        def MONTH_BEGIN(self):
            return self.getToken(TeradataSQLParser.MONTH_BEGIN, 0)

        def MONTH_END(self):
            return self.getToken(TeradataSQLParser.MONTH_END, 0)

        def MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.MONTH_OF_CALENDAR, 0)

        def MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLParser.MONTH_OF_QUARTER, 0)

        def MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.MONTH_OF_YEAR, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.MONTHNUMBER_OF_YEAR, 0)

        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLParser.MONTHS_BETWEEN, 0)

        def MORE_(self):
            return self.getToken(TeradataSQLParser.MORE_, 0)

        def MULTINATIONAL(self):
            return self.getToken(TeradataSQLParser.MULTINATIONAL, 0)

        def NAME(self):
            return self.getToken(TeradataSQLParser.NAME, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLParser.NAMESPACE, 0)

        def NEVER(self):
            return self.getToken(TeradataSQLParser.NEVER, 0)

        def NEXT_DAY(self):
            return self.getToken(TeradataSQLParser.NEXT_DAY, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLParser.NGRAM, 0)

        def NIL(self):
            return self.getToken(TeradataSQLParser.NIL, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLParser.NODDLTEXT, 0)

        def NODE(self):
            return self.getToken(TeradataSQLParser.NODE, 0)

        def NONOPTCOST(self):
            return self.getToken(TeradataSQLParser.NONOPTCOST, 0)

        def NONOPTINIT(self):
            return self.getToken(TeradataSQLParser.NONOPTINIT, 0)

        def NONSEQUENCED(self):
            return self.getToken(TeradataSQLParser.NONSEQUENCED, 0)

        def NORIGHT(self):
            return self.getToken(TeradataSQLParser.NORIGHT, 0)

        def NOSEXTRACTVARFROMPATH(self):
            return self.getToken(TeradataSQLParser.NOSEXTRACTVARFROMPATH, 0)

        def NOTATION(self):
            return self.getToken(TeradataSQLParser.NOTATION, 0)

        def NOW(self):
            return self.getToken(TeradataSQLParser.NOW, 0)

        def NPATH(self):
            return self.getToken(TeradataSQLParser.NPATH, 0)

        def NTH(self):
            return self.getToken(TeradataSQLParser.NTH, 0)

        def NULLS(self):
            return self.getToken(TeradataSQLParser.NULLS, 0)

        def NUMFPFNS(self):
            return self.getToken(TeradataSQLParser.NUMFPFNS, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLParser.NUMTOYMINTERVAL, 0)

        def NVL(self):
            return self.getToken(TeradataSQLParser.NVL, 0)

        def NVL2(self):
            return self.getToken(TeradataSQLParser.NVL2, 0)

        def NVP(self):
            return self.getToken(TeradataSQLParser.NVP, 0)

        def OA(self):
            return self.getToken(TeradataSQLParser.OA, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLParser.OADD_MONTHS, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLParser.OCOUNT, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLParser.ODELETE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLParser.OEXISTS, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLParser.OEXTEND, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLParser.OLAST, 0)

        def OLD_NEW_TABLE(self):
            return self.getToken(TeradataSQLParser.OLD_NEW_TABLE, 0)

        def OLIMIT(self):
            return self.getToken(TeradataSQLParser.OLIMIT, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLParser.ONEXT, 0)

        def ONLINE(self):
            return self.getToken(TeradataSQLParser.ONLINE, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLParser.OPRIOR, 0)

        def OPTIONS(self):
            return self.getToken(TeradataSQLParser.OPTIONS, 0)

        def ORDERBYVALUES(self):
            return self.getToken(TeradataSQLParser.ORDERBYVALUES, 0)

        def ORDERED_ANALYTIC(self):
            return self.getToken(TeradataSQLParser.ORDERED_ANALYTIC, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLParser.ORDINALITY, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLParser.OTRANSLATE, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLParser.OTRIM, 0)

        def OVERLAYS(self):
            return self.getToken(TeradataSQLParser.OVERLAYS, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLParser.OWNER, 0)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLParser.P_INTERSECT, 0)

        def P_NORMALIZE(self):
            return self.getToken(TeradataSQLParser.P_NORMALIZE, 0)

        def PARAMID(self):
            return self.getToken(TeradataSQLParser.PARAMID, 0)

        def PARAMINFO(self):
            return self.getToken(TeradataSQLParser.PARAMINFO, 0)

        def PARENT(self):
            return self.getToken(TeradataSQLParser.PARENT, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLParser.PARTITION, 0)

        def PARTITION_L(self):
            return self.getToken(TeradataSQLParser.PARTITION_L, 0)

        def PARTITIONED(self):
            return self.getToken(TeradataSQLParser.PARTITIONED, 0)

        def PARTITIONNAMES(self):
            return self.getToken(TeradataSQLParser.PARTITIONNAMES, 0)

        def PASS(self):
            return self.getToken(TeradataSQLParser.PASS, 0)

        def PASSING(self):
            return self.getToken(TeradataSQLParser.PASSING, 0)

        def PATH_GENERATOR(self):
            return self.getToken(TeradataSQLParser.PATH_GENERATOR, 0)

        def PATH_START(self):
            return self.getToken(TeradataSQLParser.PATH_START, 0)

        def PATH_SUMMARIZER(self):
            return self.getToken(TeradataSQLParser.PATH_SUMMARIZER, 0)

        def PATTERN(self):
            return self.getToken(TeradataSQLParser.PATTERN, 0)

        def PERCENTILE(self):
            return self.getToken(TeradataSQLParser.PERCENTILE, 0)

        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLParser.PERCENTILE_DISC, 0)

        def PERIOD(self):
            return self.getToken(TeradataSQLParser.PERIOD, 0)

        def PIVOT(self):
            return self.getToken(TeradataSQLParser.PIVOT, 0)

        def PORTION(self):
            return self.getToken(TeradataSQLParser.PORTION, 0)

        def POWER(self):
            return self.getToken(TeradataSQLParser.POWER, 0)

        def PRECEDES(self):
            return self.getToken(TeradataSQLParser.PRECEDES, 0)

        def PRECEDING(self):
            return self.getToken(TeradataSQLParser.PRECEDING, 0)

        def PREFIX(self):
            return self.getToken(TeradataSQLParser.PREFIX, 0)

        def PRINT(self):
            return self.getToken(TeradataSQLParser.PRINT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLParser.PRIOR, 0)

        def PROTECTED(self):
            return self.getToken(TeradataSQLParser.PROTECTED, 0)

        def QUARTER_BEGIN(self):
            return self.getToken(TeradataSQLParser.QUARTER_BEGIN, 0)

        def QUARTER_END(self):
            return self.getToken(TeradataSQLParser.QUARTER_END, 0)

        def QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.QUARTER_OF_CALENDAR, 0)

        def QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.QUARTER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.QUARTERNUMBER_OF_YEAR, 0)

        def QUERY(self):
            return self.getToken(TeradataSQLParser.QUERY, 0)

        def QUERY_BAND(self):
            return self.getToken(TeradataSQLParser.QUERY_BAND, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLParser.QUOTECHAR, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLParser.RANDOMIZED, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLParser.RANGE, 0)

        def RANGE_L(self):
            return self.getToken(TeradataSQLParser.RANGE_L, 0)

        def RAPIDFIRE(self):
            return self.getToken(TeradataSQLParser.RAPIDFIRE, 0)

        def RDIFF(self):
            return self.getToken(TeradataSQLParser.RDIFF, 0)

        def READ(self):
            return self.getToken(TeradataSQLParser.READ, 0)

        def RECALC(self):
            return self.getToken(TeradataSQLParser.RECALC, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLParser.REGEXP_INSTR, 0)

        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLParser.REGEXP_REPLACE, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLParser.REGEXP_SIMILAR, 0)

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLParser.REGEXP_SUBSTR, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLParser.REPLACEMENT, 0)

        def RESET(self):
            return self.getToken(TeradataSQLParser.RESET, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLParser.RESPECT, 0)

        def RESTRICTWORDS(self):
            return self.getToken(TeradataSQLParser.RESTRICTWORDS, 0)

        def RETAIN(self):
            return self.getToken(TeradataSQLParser.RETAIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(TeradataSQLParser.RETURNED_SQLSTATE, 0)

        def RETURNING(self):
            return self.getToken(TeradataSQLParser.RETURNING, 0)

        def REUSE(self):
            return self.getToken(TeradataSQLParser.REUSE, 0)

        def ROOT(self):
            return self.getToken(TeradataSQLParser.ROOT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLParser.ROTATERIGHT, 0)

        def ROUND(self):
            return self.getToken(TeradataSQLParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(TeradataSQLParser.ROW_COUNT, 0)

        def ROWIDGEN(self):
            return self.getToken(TeradataSQLParser.ROWIDGEN, 0)

        def ROWIDGEN2(self):
            return self.getToken(TeradataSQLParser.ROWIDGEN2, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLParser.RTRIM, 0)

        def RU(self):
            return self.getToken(TeradataSQLParser.RU, 0)

        def RULES(self):
            return self.getToken(TeradataSQLParser.RULES, 0)

        def RULESET(self):
            return self.getToken(TeradataSQLParser.RULESET, 0)

        def SAMPLES(self):
            return self.getToken(TeradataSQLParser.SAMPLES, 0)

        def SATURDAY(self):
            return self.getToken(TeradataSQLParser.SATURDAY, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLParser.SCHEMA, 0)

        def SCRIPT(self):
            return self.getToken(TeradataSQLParser.SCRIPT, 0)

        def SCRIPT_COMMAND(self):
            return self.getToken(TeradataSQLParser.SCRIPT_COMMAND, 0)

        def SEARCHSPACE(self):
            return self.getToken(TeradataSQLParser.SEARCHSPACE, 0)

        def SEARCHUIFDBPATH(self):
            return self.getToken(TeradataSQLParser.SEARCHUIFDBPATH, 0)

        def SECURITY(self):
            return self.getToken(TeradataSQLParser.SECURITY, 0)

        def SEED(self):
            return self.getToken(TeradataSQLParser.SEED, 0)

        def SELF(self):
            return self.getToken(TeradataSQLParser.SELF, 0)

        def SEQ(self):
            return self.getToken(TeradataSQLParser.SEQ, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLParser.SEQUENCE, 0)

        def SEQUENCED(self):
            return self.getToken(TeradataSQLParser.SEQUENCED, 0)

        def SERIALIZABLE(self):
            return self.getToken(TeradataSQLParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLParser.SERVER, 0)

        def SESSIONIZE(self):
            return self.getToken(TeradataSQLParser.SESSIONIZE, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLParser.SETBIT, 0)

        def SETRESOURCERATE(self):
            return self.getToken(TeradataSQLParser.SETRESOURCERATE, 0)

        def SETSESSIONACCOUNT(self):
            return self.getToken(TeradataSQLParser.SETSESSIONACCOUNT, 0)

        def SETSESSIONRATE(self):
            return self.getToken(TeradataSQLParser.SETSESSIONRATE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLParser.SHARE, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLParser.SHIFTRIGHT, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLParser.SIGN, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLParser.SIZE, 0)

        def SNAPPY_COMPRESS(self):
            return self.getToken(TeradataSQLParser.SNAPPY_COMPRESS, 0)

        def SNAPPY_DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.SNAPPY_DECOMPRESS, 0)

        def SOURCE(self):
            return self.getToken(TeradataSQLParser.SOURCE, 0)

        def SPARSE(self):
            return self.getToken(TeradataSQLParser.SPARSE, 0)

        def SPECCHAR(self):
            return self.getToken(TeradataSQLParser.SPECCHAR, 0)

        def SPL(self):
            return self.getToken(TeradataSQLParser.SPL, 0)

        def SQLSTATE(self):
            return self.getToken(TeradataSQLParser.SQLSTATE, 0)

        def SR(self):
            return self.getToken(TeradataSQLParser.SR, 0)

        def ST_GEOMETRY(self):
            return self.getToken(TeradataSQLParser.ST_GEOMETRY, 0)

        def STAT(self):
            return self.getToken(TeradataSQLParser.STAT, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLParser.STATIC, 0)

        def STATS(self):
            return self.getToken(TeradataSQLParser.STATS, 0)

        def STATSUSAGE(self):
            return self.getToken(TeradataSQLParser.STATSUSAGE, 0)

        def STORAGE(self):
            return self.getToken(TeradataSQLParser.STORAGE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLParser.STRIP, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLParser.STRTOK, 0)

        def STYLE(self):
            return self.getToken(TeradataSQLParser.STYLE, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLParser.SUBBITSTR, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(TeradataSQLParser.SUBCLASS_ORIGIN, 0)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLParser.SUCCEEDS, 0)

        def SUMMARYONLY(self):
            return self.getToken(TeradataSQLParser.SUMMARYONLY, 0)

        def SUNDAY(self):
            return self.getToken(TeradataSQLParser.SUNDAY, 0)

        def SYMBOLS(self):
            return self.getToken(TeradataSQLParser.SYMBOLS, 0)

        def SYSTEM(self):
            return self.getToken(TeradataSQLParser.SYSTEM, 0)

        def SYSTEM_TIME(self):
            return self.getToken(TeradataSQLParser.SYSTEM_TIME, 0)

        def SYSTEMTEST(self):
            return self.getToken(TeradataSQLParser.SYSTEMTEST, 0)

        def TARGET(self):
            return self.getToken(TeradataSQLParser.TARGET, 0)

        def TD_ARRAY2P(self):
            return self.getToken(TeradataSQLParser.TD_ARRAY2P, 0)

        def TD_DATASET(self):
            return self.getToken(TeradataSQLParser.TD_DATASET, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.TD_DAY_OF_YEAR, 0)

        def TD_GENERAL(self):
            return self.getToken(TeradataSQLParser.TD_GENERAL, 0)

        def TD_GETTIMEBUCKET(self):
            return self.getToken(TeradataSQLParser.TD_GETTIMEBUCKET, 0)

        def TD_INTERNAL(self):
            return self.getToken(TeradataSQLParser.TD_INTERNAL, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.TD_LZ_DECOMPRESS, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.TD_QUARTER_OF_YEAR, 0)

        def TD_TIME_BUCKET_NUMBER(self):
            return self.getToken(TeradataSQLParser.TD_TIME_BUCKET_NUMBER, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_YEAR_OF_CALENDAR, 0)

        def TDWMEVENT(self):
            return self.getToken(TeradataSQLParser.TDWMEVENT, 0)

        def TDWMEXCEPTION(self):
            return self.getToken(TeradataSQLParser.TDWMEXCEPTION, 0)

        def TDWMHISTORY(self):
            return self.getToken(TeradataSQLParser.TDWMHISTORY, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.TEMPORAL_TIMESTAMP, 0)

        def TEXT(self):
            return self.getToken(TeradataSQLParser.TEXT, 0)

        def THRESHOLDPERCENT(self):
            return self.getToken(TeradataSQLParser.THRESHOLDPERCENT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLParser.THROUGH, 0)

        def THURSDAY(self):
            return self.getToken(TeradataSQLParser.THURSDAY, 0)

        def TIES(self):
            return self.getToken(TeradataSQLParser.TIES, 0)

        def TIMECODE(self):
            return self.getToken(TeradataSQLParser.TIMECODE, 0)

        def TIMECOLUMN(self):
            return self.getToken(TeradataSQLParser.TIMECOLUMN, 0)

        def TIMEOUT(self):
            return self.getToken(TeradataSQLParser.TIMEOUT, 0)

        def TIMESTAMPCOLUMN(self):
            return self.getToken(TeradataSQLParser.TIMESTAMPCOLUMN, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLParser.TO_BYTE, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLParser.TO_BYTES, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLParser.TO_DATE, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLParser.TO_DSINTERVAL, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLParser.TO_NUMBER, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLParser.TO_YMINTERVAL, 0)

        def TOTOKEN(self):
            return self.getToken(TeradataSQLParser.TOTOKEN, 0)

        def TPA(self):
            return self.getToken(TeradataSQLParser.TPA, 0)

        def TRANSACTION_ACTIVE(self):
            return self.getToken(TeradataSQLParser.TRANSACTION_ACTIVE, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLParser.TRANSUTF8TOUNICODE, 0)

        def TRUE(self):
            return self.getToken(TeradataSQLParser.TRUE, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLParser.TRUNC, 0)

        def TRUST_ONLY(self):
            return self.getToken(TeradataSQLParser.TRUST_ONLY, 0)

        def TTGRANULARITY(self):
            return self.getToken(TeradataSQLParser.TTGRANULARITY, 0)

        def TUESDAY(self):
            return self.getToken(TeradataSQLParser.TUESDAY, 0)

        def UBJSON(self):
            return self.getToken(TeradataSQLParser.UBJSON, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLParser.UCASE, 0)

        def UDFSEARCHPATH(self):
            return self.getToken(TeradataSQLParser.UDFSEARCHPATH, 0)

        def UNBOUNDED(self):
            return self.getToken(TeradataSQLParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(TeradataSQLParser.UNCOMMITTED, 0)

        def UNICODE(self):
            return self.getToken(TeradataSQLParser.UNICODE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLParser.UNKNOWN, 0)

        def UNPIVOT(self):
            return self.getToken(TeradataSQLParser.UNPIVOT, 0)

        def USE(self):
            return self.getToken(TeradataSQLParser.USE, 0)

        def USECOUNT(self):
            return self.getToken(TeradataSQLParser.USECOUNT, 0)

        def UTILITYINFO(self):
            return self.getToken(TeradataSQLParser.UTILITYINFO, 0)

        def VARRAY(self):
            return self.getToken(TeradataSQLParser.VARRAY, 0)

        def VERBOSE(self):
            return self.getToken(TeradataSQLParser.VERBOSE, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLParser.VERSION, 0)

        def VERSIONING(self):
            return self.getToken(TeradataSQLParser.VERSIONING, 0)

        def WARNING(self):
            return self.getToken(TeradataSQLParser.WARNING, 0)

        def WEDNESDAY(self):
            return self.getToken(TeradataSQLParser.WEDNESDAY, 0)

        def WEEK_BEGIN(self):
            return self.getToken(TeradataSQLParser.WEEK_BEGIN, 0)

        def WEEK_END(self):
            return self.getToken(TeradataSQLParser.WEEK_END, 0)

        def WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.WEEK_OF_CALENDAR, 0)

        def WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.WEEK_OF_MONTH, 0)

        def WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.WEEK_OF_YEAR, 0)

        def WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.WEEKDAY_OF_MONTH, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.WEEKNUMBER_OF_YEAR, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLParser.WHITESPACE, 0)

        def WINDOWSIZE(self):
            return self.getToken(TeradataSQLParser.WINDOWSIZE, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLParser.WITHIN, 0)

        def WORKLOAD(self):
            return self.getToken(TeradataSQLParser.WORKLOAD, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLParser.WRITE, 0)

        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLParser.XMLAGG, 0)

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLParser.XMLATTRIBUTES, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLParser.XMLCOMMENT, 0)

        def XMLCONCAT(self):
            return self.getToken(TeradataSQLParser.XMLCONCAT, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLParser.XMLDECLARATION, 0)

        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLParser.XMLELEMENT, 0)

        def XMLFOREST(self):
            return self.getToken(TeradataSQLParser.XMLFOREST, 0)

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLParser.XMLNAMESPACES, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLParser.XMLPARSE, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLParser.XMLPI, 0)

        def XMLQUERY(self):
            return self.getToken(TeradataSQLParser.XMLQUERY, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLParser.XMLSCHEMA, 0)

        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLParser.XMLSERIALIZE, 0)

        def XMLTABLE(self):
            return self.getToken(TeradataSQLParser.XMLTABLE, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLParser.XMLTEXT, 0)

        def XMLTYPE(self):
            return self.getToken(TeradataSQLParser.XMLTYPE, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLParser.XMLVALIDATE, 0)

        def YEAR_BEGIN(self):
            return self.getToken(TeradataSQLParser.YEAR_BEGIN, 0)

        def YEAR_END(self):
            return self.getToken(TeradataSQLParser.YEAR_END, 0)

        def YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.YEAR_OF_CALENDAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.YEARNUMBER_OF_CALENDAR, 0)

        def ZLIB(self):
            return self.getToken(TeradataSQLParser.ZLIB, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLParser.BUCKET, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLParser.COMMITTED, 0)

        def CREATEXML(self):
            return self.getToken(TeradataSQLParser.CREATEXML, 0)

        def CS_LATIN(self):
            return self.getToken(TeradataSQLParser.CS_LATIN, 0)

        def CS_UNICODE(self):
            return self.getToken(TeradataSQLParser.CS_UNICODE, 0)

        def CS_KANJISJIS(self):
            return self.getToken(TeradataSQLParser.CS_KANJISJIS, 0)

        def CS_GRAPHIC(self):
            return self.getToken(TeradataSQLParser.CS_GRAPHIC, 0)

        def CSV(self):
            return self.getToken(TeradataSQLParser.CSV, 0)

        def CSVLD(self):
            return self.getToken(TeradataSQLParser.CSVLD, 0)

        def DATASIZE(self):
            return self.getToken(TeradataSQLParser.DATASIZE, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLParser.DAYOFMONTH, 0)

        def DAYS(self):
            return self.getToken(TeradataSQLParser.DAYS, 0)

        def DEFINITION(self):
            return self.getToken(TeradataSQLParser.DEFINITION, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLParser.DELETED, 0)

        def FAST(self):
            return self.getToken(TeradataSQLParser.FAST, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLParser.LISTAGG, 0)

        def PATH(self):
            return self.getToken(TeradataSQLParser.PATH, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLParser.REGEXP_SPLIT_TO_TABLE, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLParser.REVERSE, 0)

        def SAS(self):
            return self.getToken(TeradataSQLParser.SAS, 0)

        def SQLTABLE(self):
            return self.getToken(TeradataSQLParser.SQLTABLE, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLParser.STRTOK_SPLIT_TO_TABLE, 0)

        def SYSLIB(self):
            return self.getToken(TeradataSQLParser.SYSLIB, 0)

        def SYSUDTLIB(self):
            return self.getToken(TeradataSQLParser.SYSUDTLIB, 0)

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLParser.TD_SERVER_DB, 0)

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLParser.TD_SYSFNLIB, 0)

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLParser.TD_SYSXML, 0)

        def TIMEDATEWZCONTROL(self):
            return self.getToken(TeradataSQLParser.TIMEDATEWZCONTROL, 0)

        def TRUST(self):
            return self.getToken(TeradataSQLParser.TRUST, 0)

        def TRYCAST(self):
            return self.getToken(TeradataSQLParser.TRYCAST, 0)

        def UDT(self):
            return self.getToken(TeradataSQLParser.UDT, 0)

        def USAGE(self):
            return self.getToken(TeradataSQLParser.USAGE, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLParser.VARIANT, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLParser.WEEK, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLParser.WIDTH, 0)

        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLParser.XMLPUBLISH_STREAM, 0)

        def XMLSPLIT(self):
            return self.getToken(TeradataSQLParser.XMLSPLIT, 0)

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLParser.UNICODE_TO_LOCALE, 0)

        def ASBSON(self):
            return self.getToken(TeradataSQLParser.ASBSON, 0)

        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLParser.ASBSONTEXT, 0)

        def COMBINE(self):
            return self.getToken(TeradataSQLParser.COMBINE, 0)

        def EXISTVALUE(self):
            return self.getToken(TeradataSQLParser.EXISTVALUE, 0)

        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLParser.JSONEXTRACT, 0)

        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLParser.JSONEXTRACTVALUE, 0)

        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLParser.JSONEXTRACTLARGEVALUE, 0)

        def KEYCOUNT(self):
            return self.getToken(TeradataSQLParser.KEYCOUNT, 0)

        def METADATA(self):
            return self.getToken(TeradataSQLParser.METADATA, 0)

        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLParser.STORAGE_SIZE, 0)

        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLParser.CREATESCHEMABASEDXML, 0)

        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLParser.CREATENONSCHEMABASEDXML, 0)

        def EXISTSNODE(self):
            return self.getToken(TeradataSQLParser.EXISTSNODE, 0)

        def ISCONTENT(self):
            return self.getToken(TeradataSQLParser.ISCONTENT, 0)

        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLParser.ISDOCUMENT, 0)

        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLParser.ISSCHEMAVALID, 0)

        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLParser.ISSCHEMAVALIDATED, 0)

        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLParser.XMLEXTRACT, 0)

        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLParser.XMLTRANSFORM, 0)

        def PROC_ID(self):
            return self.getToken(TeradataSQLParser.PROC_ID, 0)

        def LOCATION(self):
            return self.getToken(TeradataSQLParser.LOCATION, 0)

        def PAYLOAD(self):
            return self.getToken(TeradataSQLParser.PAYLOAD, 0)

        def TRUSTED(self):
            return self.getToken(TeradataSQLParser.TRUSTED, 0)

        def PATHPATTERN(self):
            return self.getToken(TeradataSQLParser.PATHPATTERN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLParser.ROWFORMAT, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLParser.STOREDAS, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLParser.HEADER, 0)

        def STRIP_EXTERIOR_SPACES(self):
            return self.getToken(TeradataSQLParser.STRIP_EXTERIOR_SPACES, 0)

        def STRIP_ENCLOSING_CHAR(self):
            return self.getToken(TeradataSQLParser.STRIP_ENCLOSING_CHAR, 0)

        def RLS(self):
            return self.getToken(TeradataSQLParser.RLS, 0)

        def SINGLE(self):
            return self.getToken(TeradataSQLParser.SINGLE, 0)

        def MULTIPLE(self):
            return self.getToken(TeradataSQLParser.MULTIPLE, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.JSON_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.TS_DECOMPRESS, 0)

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLParser.CONTIGUOUSMAPAMPS, 0)

        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLParser.SPARSEMAPAMPS, 0)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLParser.SPARSETABLEAMPS, 0)

        def UNNEST(self):
            return self.getToken(TeradataSQLParser.UNNEST, 0)

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLParser.CALCMATRIX, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLParser.PHRASE, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLParser.NULL_HANDLING, 0)

        def READ_NOS(self):
            return self.getToken(TeradataSQLParser.READ_NOS, 0)

        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLParser.SAMPLE_PERC, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLParser.FULLSCAN, 0)

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLParser.TD_UNPIVOT, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLParser.VALUE_COLUMNS, 0)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLParser.COLUMN_LIST, 0)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLParser.INCLUDE_NULLS, 0)

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLParser.WRITE_NOS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLParser.COMPRESSION, 0)

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLParser.ARRAY_TO_JSON, 0)

        def BSON_CHECK(self):
            return self.getToken(TeradataSQLParser.BSON_CHECK, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLParser.GEOJSONFROMGEOM, 0)

        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLParser.JSONGETVALUE, 0)

        def JSONMETADATA(self):
            return self.getToken(TeradataSQLParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLParser.NVP2JSON, 0)

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLParser.TD_JSONSHRED, 0)

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLParser.JSON_KEYS, 0)

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLParser.JSON_TABLE, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLParser.QUOTES, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLParser.ROWEXPR, 0)

        def COLEXPR(self):
            return self.getToken(TeradataSQLParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLParser.RETURNTYPES, 0)

        def NOCASE(self):
            return self.getToken(TeradataSQLParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLParser.TRUNCATE, 0)

        def LINK(self):
            return self.getToken(TeradataSQLParser.LINK, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_nonreserved_word

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonreserved_word" ):
                listener.enterNonreserved_word(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonreserved_word" ):
                listener.exitNonreserved_word(self)




    def nonreserved_word(self):

        localctx = TeradataSQLParser.Nonreserved_wordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_nonreserved_word)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8886
            _la = self._input.LA(1)
            if not(((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_termContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def query_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Query_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Query_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def UNION(self):
            return self.getToken(TeradataSQLParser.UNION, 0)

        def MINUS(self):
            return self.getToken(TeradataSQLParser.MINUS, 0)

        def EXCEPT(self):
            return self.getToken(TeradataSQLParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(TeradataSQLParser.INTERSECT, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_query_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expr" ):
                listener.enterQuery_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expr" ):
                listener.exitQuery_expr(self)



    def query_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLParser.Query_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 838
        self.enterRecursionRule(localctx, 838, self.RULE_query_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [369, 370]:
                self.state = 8889
                self.query_term()
                pass
            elif token in [1213]:
                self.state = 8890
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 8891
                self.query_expr(0)
                self.state = 8892
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 8904
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TeradataSQLParser.Query_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expr)
                    self.state = 8896
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 8897
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==204 or _la==247 or _la==447):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 8899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 8898
                        self.match(TeradataSQLParser.ALL)


                    self.state = 8901
                    self.query_expr(3) 
                self.state = 8906
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Select_listContext,0)


        def SELECT(self):
            return self.getToken(TeradataSQLParser.SELECT, 0)

        def SEL(self):
            return self.getToken(TeradataSQLParser.SEL, 0)

        def with_deleted_rows(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_deleted_rowsContext,0)


        def as_json(self):
            return self.getTypedRuleContext(TeradataSQLParser.As_jsonContext,0)


        def from_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.From_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.From_clauseContext,i)


        def into_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Into_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Into_clauseContext,i)


        def where_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Where_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Where_clauseContext,i)


        def group_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Group_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Group_by_clauseContext,i)


        def sample_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sample_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sample_clauseContext,i)


        def order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_clauseContext,i)


        def with_check_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.With_check_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.With_check_optionContext,i)


        def expand_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Expand_on_clauseContext,0)


        def having_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Having_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Having_clauseContext,i)


        def qualify_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Qualify_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Qualify_clauseContext,i)


        def with_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.With_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.With_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_term" ):
                listener.enterQuery_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_term" ):
                listener.exitQuery_term(self)




    def query_term(self):

        localctx = TeradataSQLParser.Query_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_query_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8907
            _la = self._input.LA(1)
            if not(_la==369 or _la==370):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 8909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 8908
                self.with_deleted_rows()


            self.state = 8912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 8911
                self.as_json()


            self.state = 8914
            self.select_list()
            self.state = 8946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 8944
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1169,self._ctx)
                    if la_ == 1:
                        self.state = 8915
                        self.from_clause()
                        self.state = 8919
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1165,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 8916
                                self.with_clause() 
                            self.state = 8921
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1165,self._ctx)

                        pass

                    elif la_ == 2:
                        self.state = 8922
                        self.into_clause()
                        pass

                    elif la_ == 3:
                        self.state = 8923
                        self.where_clause()
                        pass

                    elif la_ == 4:
                        self.state = 8924
                        self.group_by_clause()
                        pass

                    elif la_ == 5:
                        self.state = 8927
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [183]:
                            self.state = 8925
                            self.having_clause()
                            pass
                        elif token in [315]:
                            self.state = 8926
                            self.qualify_clause()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 6:
                        self.state = 8929
                        self.sample_clause()
                        pass

                    elif la_ == 7:
                        self.state = 8933
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==474:
                            self.state = 8930
                            self.with_clause()
                            self.state = 8935
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 8936
                        self.order_by_clause()
                        self.state = 8940
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1168,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 8937
                                self.with_clause() 
                            self.state = 8942
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1168,self._ctx)

                        pass

                    elif la_ == 8:
                        self.state = 8943
                        self.with_check_option()
                        pass

             
                self.state = 8948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1170,self._ctx)

            self.state = 8950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1171,self._ctx)
            if la_ == 1:
                self.state = 8949
                self.expand_on_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_deleted_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def DELETED(self):
            return self.getToken(TeradataSQLParser.DELETED, 0)

        def ROWS(self):
            return self.getToken(TeradataSQLParser.ROWS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_deleted_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_deleted_rows" ):
                listener.enterWith_deleted_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_deleted_rows" ):
                listener.exitWith_deleted_rows(self)




    def with_deleted_rows(self):

        localctx = TeradataSQLParser.With_deleted_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_with_deleted_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8952
            self.match(TeradataSQLParser.WITH)
            self.state = 8953
            self.match(TeradataSQLParser.DELETED)
            self.state = 8954
            self.match(TeradataSQLParser.ROWS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_jsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def JSON(self):
            return self.getToken(TeradataSQLParser.JSON, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_as_json

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_json" ):
                listener.enterAs_json(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_json" ):
                listener.exitAs_json(self)




    def as_json(self):

        localctx = TeradataSQLParser.As_jsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_as_json)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8956
            self.match(TeradataSQLParser.AS)
            self.state = 8957
            self.match(TeradataSQLParser.JSON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selected_columns(self):
            return self.getTypedRuleContext(TeradataSQLParser.Selected_columnsContext,0)


        def top_n(self):
            return self.getTypedRuleContext(TeradataSQLParser.Top_nContext,0)


        def DISTINCT(self):
            return self.getToken(TeradataSQLParser.DISTINCT, 0)

        def UNIQUE(self):
            return self.getToken(TeradataSQLParser.UNIQUE, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def normalize(self):
            return self.getTypedRuleContext(TeradataSQLParser.NormalizeContext,0)


        def all_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.All_operatorContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = TeradataSQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_select_list)
        try:
            self.state = 8970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 8966
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 121, 271, 448]:
                    self.state = 8963
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [121]:
                        self.state = 8959
                        self.match(TeradataSQLParser.DISTINCT)
                        pass
                    elif token in [448]:
                        self.state = 8960
                        self.match(TeradataSQLParser.UNIQUE)
                        pass
                    elif token in [13]:
                        self.state = 8961
                        self.match(TeradataSQLParser.ALL)
                        pass
                    elif token in [271]:
                        self.state = 8962
                        self.normalize()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [427]:
                    self.state = 8965
                    self.top_n()
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1219, 1221, 1222]:
                    pass
                else:
                    pass
                self.state = 8968
                self.selected_columns()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 8969
                self.all_operator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Top_nContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(TeradataSQLParser.TOP, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Float_literalContext,0)


        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Macro_parameter_referenceContext,0)


        def PERCENT(self):
            return self.getToken(TeradataSQLParser.PERCENT, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLParser.TIES, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_top_n

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_n" ):
                listener.enterTop_n(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_n" ):
                listener.exitTop_n(self)




    def top_n(self):

        localctx = TeradataSQLParser.Top_nContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_top_n)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8972
            self.match(TeradataSQLParser.TOP)
            self.state = 8976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 8973
                self.integer_literal()
                pass
            elif token in [1197]:
                self.state = 8974
                self.float_literal()
                pass
            elif token in [1207, 1210]:
                self.state = 8975
                self.macro_parameter_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 8979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==300:
                self.state = 8978
                self.match(TeradataSQLParser.PERCENT)


            self.state = 8983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 8981
                self.match(TeradataSQLParser.WITH)
                self.state = 8982
                self.match(TeradataSQLParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NORMALIZE(self):
            return self.getToken(TeradataSQLParser.NORMALIZE, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def MEETS(self):
            return self.getToken(TeradataSQLParser.MEETS, 0)

        def OR(self):
            return self.getToken(TeradataSQLParser.OR, 0)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLParser.OVERLAPS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_normalize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalize" ):
                listener.enterNormalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalize" ):
                listener.exitNormalize(self)




    def normalize(self):

        localctx = TeradataSQLParser.NormalizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_normalize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 8985
            self.match(TeradataSQLParser.NORMALIZE)
            self.state = 8996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1179,self._ctx)
            if la_ == 1:
                self.state = 8986
                self.match(TeradataSQLParser.ON)
                self.state = 8987
                self.match(TeradataSQLParser.MEETS)
                self.state = 8988
                self.match(TeradataSQLParser.OR)
                self.state = 8989
                self.match(TeradataSQLParser.OVERLAPS)

            elif la_ == 2:
                self.state = 8990
                self.match(TeradataSQLParser.ON)
                self.state = 8991
                self.match(TeradataSQLParser.OVERLAPS)
                self.state = 8994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290:
                    self.state = 8992
                    self.match(TeradataSQLParser.OR)
                    self.state = 8993
                    self.match(TeradataSQLParser.MEETS)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class All_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DOT_)
            else:
                return self.getToken(TeradataSQLParser.DOT_, i)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_all_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_operator" ):
                listener.enterAll_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_operator" ):
                listener.exitAll_operator(self)




    def all_operator(self):

        localctx = TeradataSQLParser.All_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_all_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1180,self._ctx)
            if la_ == 1:
                self.state = 8998
                self.match(TeradataSQLParser.MUL_SIGN)
                pass

            elif la_ == 2:
                self.state = 8999
                self.table_name()
                self.state = 9000
                self.match(TeradataSQLParser.DOT_)
                self.state = 9001
                self.match(TeradataSQLParser.MUL_SIGN)
                pass

            elif la_ == 3:
                self.state = 9003
                self.column_name()
                pass


            self.state = 9006
            self.match(TeradataSQLParser.DOT_)
            self.state = 9007
            self.match(TeradataSQLParser.ALL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.all_rows = None # Token

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def selected_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Selected_columnContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Selected_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_selected_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_columns" ):
                listener.enterSelected_columns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_columns" ):
                listener.exitSelected_columns(self)




    def selected_columns(self):

        localctx = TeradataSQLParser.Selected_columnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_selected_columns)
        try:
            self.state = 9018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1219]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9009
                localctx.all_rows = self.match(TeradataSQLParser.MUL_SIGN)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9010
                self.selected_column()
                self.state = 9015
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1181,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9011
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 9012
                        self.selected_column() 
                    self.state = 9017
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1181,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selected_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_selected_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelected_column" ):
                listener.enterSelected_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelected_column" ):
                listener.exitSelected_column(self)




    def selected_column(self):

        localctx = TeradataSQLParser.Selected_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_selected_column)
        self._la = 0 # Token type
        try:
            self.state = 9031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1185,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9020
                self.scalar_expr(0)
                self.state = 9025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1184,self._ctx)
                if la_ == 1:
                    self.state = 9022
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 9021
                        self.match(TeradataSQLParser.AS)


                    self.state = 9024
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9027
                self.table_name()
                self.state = 9028
                self.match(TeradataSQLParser.DOT_)
                self.state = 9029
                self.match(TeradataSQLParser.MUL_SIGN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Into_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(TeradataSQLParser.INTO, 0)

        def variable_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Variable_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,i)


        def variable_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Variable_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Variable_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_into_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInto_clause" ):
                listener.enterInto_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInto_clause" ):
                listener.exitInto_clause(self)




    def into_clause(self):

        localctx = TeradataSQLParser.Into_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_into_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9033
            self.match(TeradataSQLParser.INTO)
            self.state = 9036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9034
                self.variable_name()
                pass
            elif token in [1207]:
                self.state = 9035
                self.variable_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1188,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9038
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9041
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                        self.state = 9039
                        self.variable_name()
                        pass
                    elif token in [1207]:
                        self.state = 9040
                        self.variable_reference()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 9047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1188,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.From_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = TeradataSQLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9048
            self.match(TeradataSQLParser.FROM)
            self.state = 9049
            self.from_spec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Join_source_specContext,0)


        def join_joined_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Join_joined_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Join_joined_specContext,i)


        def from_pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.From_pivot_specContext,0)


        def from_unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.From_unpivot_specContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_from_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_spec" ):
                listener.enterFrom_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_spec" ):
                listener.exitFrom_spec(self)




    def from_spec(self):

        localctx = TeradataSQLParser.From_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_from_spec)
        try:
            self.state = 9081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9051
                self.join_source_spec()
                self.state = 9055
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1189,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9052
                        self.join_joined_spec() 
                    self.state = 9057
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1189,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9058
                self.from_pivot_spec()
                self.state = 9062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1190,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9059
                        self.join_joined_spec() 
                    self.state = 9064
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1190,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9065
                self.from_unpivot_spec()
                self.state = 9069
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1191,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9066
                        self.join_joined_spec() 
                    self.state = 9071
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1191,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9072
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9073
                self.from_spec()
                self.state = 9074
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 9078
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1192,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9075
                        self.join_joined_spec() 
                    self.state = 9080
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1192,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_source_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Subquery_referenceContext,0)


        def foreign_table_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_table_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_function_referenceContext,0)


        def foreign_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_operator_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_join_source_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_source_spec" ):
                listener.enterJoin_source_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_source_spec" ):
                listener.exitJoin_source_spec(self)




    def join_source_spec(self):

        localctx = TeradataSQLParser.Join_source_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_join_source_spec)
        try:
            self.state = 9089
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9083
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9084
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9085
                self.foreign_table_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9086
                self.table_function_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9087
                self.foreign_function_reference()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 9088
                self.table_operator_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_joined_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Subquery_referenceContext,0)


        def table_function_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_function_referenceContext,0)


        def table_operator_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_operator_referenceContext,0)


        def join_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Join_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_join_joined_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_joined_spec" ):
                listener.enterJoin_joined_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_joined_spec" ):
                listener.exitJoin_joined_spec(self)




    def join_joined_spec(self):

        localctx = TeradataSQLParser.Join_joined_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_join_joined_spec)
        try:
            self.state = 9100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9091
                self.match(TeradataSQLParser.COMMA)
                self.state = 9092
                self.table_reference()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9093
                self.match(TeradataSQLParser.COMMA)
                self.state = 9094
                self.subquery_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9095
                self.match(TeradataSQLParser.COMMA)
                self.state = 9096
                self.table_function_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9097
                self.match(TeradataSQLParser.COMMA)
                self.state = 9098
                self.table_operator_reference()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 9099
                self.join_clause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot(self):
            return self.getTypedRuleContext(TeradataSQLParser.PivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_from_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_pivot_spec" ):
                listener.enterFrom_pivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_pivot_spec" ):
                listener.exitFrom_pivot_spec(self)




    def from_pivot_spec(self):

        localctx = TeradataSQLParser.From_pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_from_pivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9102
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 9103
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9106
            self.pivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unpivot(self):
            return self.getTypedRuleContext(TeradataSQLParser.UnpivotContext,0)


        def table_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_referenceContext,0)


        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Subquery_referenceContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_from_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_unpivot_spec" ):
                listener.enterFrom_unpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_unpivot_spec" ):
                listener.exitFrom_unpivot_spec(self)




    def from_unpivot_spec(self):

        localctx = TeradataSQLParser.From_unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_from_unpivot_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9108
                self.table_reference()
                pass
            elif token in [1213]:
                self.state = 9109
                self.subquery_reference()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9112
            self.unpivot()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_alias = None # Alias_nameContext

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def foreign_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_returns_clauseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = TeradataSQLParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9114
            self.table_name()
            self.state = 9119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1199,self._ctx)
            if la_ == 1:
                self.state = 9115
                self.server_name_reference()
                self.state = 9117
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1198,self._ctx)
                if la_ == 1:
                    self.state = 9116
                    self.foreign_returns_clause()




            self.state = 9125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1201,self._ctx)
            if la_ == 1:
                self.state = 9122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 9121
                    self.match(TeradataSQLParser.AS)


                self.state = 9124
                localctx.table_alias = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(TeradataSQLParser.JOIN, 0)

        def join_source_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Join_source_specContext,0)


        def INNER(self):
            return self.getToken(TeradataSQLParser.INNER, 0)

        def join_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Join_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Join_on_clauseContext,i)


        def LEFT(self):
            return self.getToken(TeradataSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(TeradataSQLParser.FULL, 0)

        def OUTER(self):
            return self.getToken(TeradataSQLParser.OUTER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def from_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.From_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def CROSS(self):
            return self.getToken(TeradataSQLParser.CROSS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = TeradataSQLParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.state = 9179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9132
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 9127
                    self.match(TeradataSQLParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 9128
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 9129
                        self.match(TeradataSQLParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 9134
                self.match(TeradataSQLParser.JOIN)
                self.state = 9135
                self.join_source_spec()
                self.state = 9139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1204,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9136
                        self.join_on_clause() 
                    self.state = 9141
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1204,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9147
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [194]:
                    self.state = 9142
                    self.match(TeradataSQLParser.INNER)
                    pass
                elif token in [165, 219, 355]:
                    self.state = 9143
                    _la = self._input.LA(1)
                    if not(_la==165 or _la==219 or _la==355):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 9145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==294:
                        self.state = 9144
                        self.match(TeradataSQLParser.OUTER)


                    pass
                elif token in [210]:
                    pass
                else:
                    pass
                self.state = 9149
                self.match(TeradataSQLParser.JOIN)
                self.state = 9150
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9151
                self.from_spec()
                self.state = 9152
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 9156
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1207,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9153
                        self.join_on_clause() 
                    self.state = 9158
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1207,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9159
                self.match(TeradataSQLParser.CROSS)
                self.state = 9160
                self.match(TeradataSQLParser.JOIN)
                self.state = 9161
                self.join_source_spec()
                self.state = 9165
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1208,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9162
                        self.join_on_clause() 
                    self.state = 9167
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1208,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9168
                self.match(TeradataSQLParser.CROSS)
                self.state = 9169
                self.match(TeradataSQLParser.JOIN)
                self.state = 9170
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9171
                self.from_spec()
                self.state = 9172
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 9176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1209,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 9173
                        self.join_on_clause() 
                    self.state = 9178
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1209,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_join_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_on_clause" ):
                listener.enterJoin_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_on_clause" ):
                listener.exitJoin_on_clause(self)




    def join_on_clause(self):

        localctx = TeradataSQLParser.Join_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_join_on_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9181
            self.match(TeradataSQLParser.ON)
            self.state = 9182
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.foreign_sql = None # Token
            self.table_alias = None # Alias_nameContext

        def FOREIGN(self):
            return self.getToken(TeradataSQLParser.FOREIGN, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Server_name_referenceContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def query_term(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_termContext,0)


        def EXPORT(self):
            return self.getToken(TeradataSQLParser.EXPORT, 0)

        def exported_data(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Exported_dataContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Exported_dataContext,i)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table_reference" ):
                listener.enterForeign_table_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table_reference" ):
                listener.exitForeign_table_reference(self)




    def foreign_table_reference(self):

        localctx = TeradataSQLParser.Foreign_table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_foreign_table_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9184
            self.match(TeradataSQLParser.FOREIGN)
            self.state = 9185
            self.match(TeradataSQLParser.TABLE)
            self.state = 9186
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1212,self._ctx)
            if la_ == 1:
                self.state = 9187
                self.query_term()
                pass

            elif la_ == 2:
                self.state = 9189 
                self._errHandler.sync(self)
                _alt = 1+1
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1+1:
                        self.state = 9188
                        localctx.foreign_sql = self.matchWildcard()

                    else:
                        raise NoViableAltException(self)
                    self.state = 9191 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1211,self._ctx)

                pass


            self.state = 9195
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9196
            self.server_name_reference()
            self.state = 9209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1214,self._ctx)
            if la_ == 1:
                self.state = 9197
                self.match(TeradataSQLParser.EXPORT)
                self.state = 9198
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9199
                self.exported_data()
                self.state = 9204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9200
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9201
                    self.exported_data()
                    self.state = 9206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 9207
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9211
                self.match(TeradataSQLParser.AS)


            self.state = 9214
            localctx.table_alias = self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def server_name_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Server_name_referenceContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def foreign_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Foreign_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Foreign_on_clauseContext,i)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_function_reference" ):
                listener.enterForeign_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_function_reference" ):
                listener.exitForeign_function_reference(self)




    def foreign_function_reference(self):

        localctx = TeradataSQLParser.Foreign_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_foreign_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9216
            self.function_name()
            self.state = 9217
            self.server_name_reference()
            self.state = 9218
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9220 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9219
                self.foreign_on_clause()
                self.state = 9222 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==286):
                    break

            self.state = 9224
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9225
                self.match(TeradataSQLParser.AS)


            self.state = 9228
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def foreign_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Foreign_using_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def hash_or_partition_by(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Hash_or_partition_byContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Hash_or_partition_byContext,i)


        def order_by_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Order_by_clauseContext,0)


        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_on_clause" ):
                listener.enterForeign_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_on_clause" ):
                listener.exitForeign_on_clause(self)




    def foreign_on_clause(self):

        localctx = TeradataSQLParser.Foreign_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_foreign_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9230
            self.match(TeradataSQLParser.ON)
            self.state = 9231
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9232
            self.scalar_expr(0)
            self.state = 9237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9233
                self.match(TeradataSQLParser.COMMA)
                self.state = 9234
                self.scalar_expr(0)
                self.state = 9239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9240
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==840:
                self.state = 9241
                self.hash_or_partition_by()
                self.state = 9246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 9248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 9247
                    self.match(TeradataSQLParser.LOCAL)


                self.state = 9250
                self.order_by_clause()


            self.state = 9253
            self.foreign_using_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exported_dataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.exported_subquery = None # Subquery_referenceContext
            self.exported_table = None # Table_nameContext
            self.table_alias = None # Alias_nameContext

        def subquery_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Subquery_referenceContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_exported_data

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExported_data" ):
                listener.enterExported_data(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExported_data" ):
                listener.exitExported_data(self)




    def exported_data(self):

        localctx = TeradataSQLParser.Exported_dataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_exported_data)
        self._la = 0 # Token type
        try:
            self.state = 9262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1213]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9255
                localctx.exported_subquery = self.subquery_reference()
                pass
            elif token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9256
                localctx.exported_table = self.table_name()
                self.state = 9258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 9257
                    self.match(TeradataSQLParser.AS)


                self.state = 9260
                localctx.table_alias = self.alias_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def foreign_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Foreign_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Foreign_parameterContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_using_clause" ):
                listener.enterForeign_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_using_clause" ):
                listener.exitForeign_using_clause(self)




    def foreign_using_clause(self):

        localctx = TeradataSQLParser.Foreign_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_foreign_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9264
            self.match(TeradataSQLParser.USING)
            self.state = 9266 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9265
                self.foreign_parameter()
                self.state = 9268 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_parameter" ):
                listener.enterForeign_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_parameter" ):
                listener.exitForeign_parameter(self)




    def foreign_parameter(self):

        localctx = TeradataSQLParser.Foreign_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_foreign_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9270
            localctx.name = self.unqualified_name()
            self.state = 9271
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9272
            localctx.value = self.scalar_expr(0)
            self.state = 9273
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_foreign_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_returns_clause" ):
                listener.enterForeign_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_returns_clause" ):
                listener.exitForeign_returns_clause(self)




    def foreign_returns_clause(self):

        localctx = TeradataSQLParser.Foreign_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_foreign_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9275
            self.match(TeradataSQLParser.RETURNS)
            self.state = 9276
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9277
            self.column_spec()
            self.state = 9282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9278
                self.match(TeradataSQLParser.COMMA)
                self.state = 9279
                self.column_spec()
                self.state = 9284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9285
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Server_name_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT_SIGN(self):
            return self.getToken(TeradataSQLParser.AT_SIGN, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_server_name_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServer_name_reference" ):
                listener.enterServer_name_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServer_name_reference" ):
                listener.exitServer_name_reference(self)




    def server_name_reference(self):

        localctx = TeradataSQLParser.Server_name_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_server_name_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9287
            self.match(TeradataSQLParser.AT_SIGN)
            self.state = 9288
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def udt_table_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_table_functionContext,0)


        def unnest_table_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unnest_table_functionContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_function_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_reference" ):
                listener.enterTable_function_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_reference" ):
                listener.exitTable_function_reference(self)




    def table_function_reference(self):

        localctx = TeradataSQLParser.Table_function_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_table_function_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9290
            self.match(TeradataSQLParser.TABLE)
            self.state = 9291
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9294
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1226,self._ctx)
            if la_ == 1:
                self.state = 9292
                self.udt_table_function()
                pass

            elif la_ == 2:
                self.state = 9293
                self.unnest_table_function()
                pass


            self.state = 9296
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9297
                self.match(TeradataSQLParser.AS)


            self.state = 9300
            self.alias_name()
            self.state = 9302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1228,self._ctx)
            if la_ == 1:
                self.state = 9301
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Udt_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_list_comma_separatedContext,0)


        def table_function_returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_function_returns_clauseContext,0)


        def table_function_local_order_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_function_local_order_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_function_local_order_by_clauseContext,i)


        def table_function_hash_by_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_function_hash_by_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_function_hash_by_clauseContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_udt_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdt_table_function" ):
                listener.enterUdt_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdt_table_function" ):
                listener.exitUdt_table_function(self)




    def udt_table_function(self):

        localctx = TeradataSQLParser.Udt_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_udt_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9304
            self.function_name()
            self.state = 9308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1229,self._ctx)
            if la_ == 1:
                self.state = 9305
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9306
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.state = 9307
                self.scalar_expr_list_comma_separated()
                pass


            self.state = 9311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 9310
                self.table_function_returns_clause()


            self.state = 9317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==178 or _la==224:
                self.state = 9315
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224]:
                    self.state = 9313
                    self.table_function_local_order_by_clause()
                    pass
                elif token in [178]:
                    self.state = 9314
                    self.table_function_hash_by_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unnest_table_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext

        def UNNEST(self):
            return self.getToken(TeradataSQLParser.UNNEST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def ORDINALITY(self):
            return self.getToken(TeradataSQLParser.ORDINALITY, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_unnest_table_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest_table_function" ):
                listener.enterUnnest_table_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest_table_function" ):
                listener.exitUnnest_table_function(self)




    def unnest_table_function(self):

        localctx = TeradataSQLParser.Unnest_table_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_unnest_table_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9320
                self.td_sysfnlib()


            self.state = 9323
            self.match(TeradataSQLParser.UNNEST)
            self.state = 9324
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1234,self._ctx)
            if la_ == 1:
                self.state = 9325
                localctx.key_expr = self.scalar_expr(0)
                self.state = 9326
                self.match(TeradataSQLParser.COMMA)


            self.state = 9330
            localctx.array_expr = self.scalar_expr(0)
            self.state = 9331
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 9332
                self.match(TeradataSQLParser.WITH)
                self.state = 9333
                self.match(TeradataSQLParser.ORDINALITY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returned_table_name = None # Table_nameContext

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_function_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_returns_clause" ):
                listener.enterTable_function_returns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_returns_clause" ):
                listener.exitTable_function_returns_clause(self)




    def table_function_returns_clause(self):

        localctx = TeradataSQLParser.Table_function_returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_table_function_returns_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9336
            self.match(TeradataSQLParser.RETURNS)
            self.state = 9349
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9337
                localctx.returned_table_name = self.table_name()
                pass
            elif token in [1213]:
                self.state = 9338
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9339
                self.column_spec()
                self.state = 9344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9340
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9341
                    self.column_spec()
                    self.state = 9346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 9347
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [178, 224, 1214]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_local_order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_function_local_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_local_order_by_clause" ):
                listener.enterTable_function_local_order_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_local_order_by_clause" ):
                listener.exitTable_function_local_order_by_clause(self)




    def table_function_local_order_by_clause(self):

        localctx = TeradataSQLParser.Table_function_local_order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_table_function_local_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9351
            self.match(TeradataSQLParser.LOCAL)
            self.state = 9352
            self.match(TeradataSQLParser.ORDER)
            self.state = 9353
            self.match(TeradataSQLParser.BY)
            self.state = 9354
            self.order_by_spec_full()
            self.state = 9359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9355
                self.match(TeradataSQLParser.COMMA)
                self.state = 9356
                self.order_by_spec_full()
                self.state = 9361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_hash_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(TeradataSQLParser.HASH, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_function_hash_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_hash_by_clause" ):
                listener.enterTable_function_hash_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_hash_by_clause" ):
                listener.exitTable_function_hash_by_clause(self)




    def table_function_hash_by_clause(self):

        localctx = TeradataSQLParser.Table_function_hash_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_table_function_hash_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9362
            self.match(TeradataSQLParser.HASH)
            self.state = 9363
            self.match(TeradataSQLParser.BY)
            self.state = 9364
            self.column_name()
            self.state = 9369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9365
                self.match(TeradataSQLParser.COMMA)
                self.state = 9366
                self.column_name()
                self.state = 9371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def xmltable_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xmltable_operatorContext,0)


        def calcmatrix_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Calcmatrix_table_operatorContext,0)


        def read_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Read_nos_table_operatorContext,0)


        def script_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Script_table_operatorContext,0)


        def td_unpivot_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_unpivot_table_operatorContext,0)


        def write_nos_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Write_nos_table_operatorContext,0)


        def json_keys_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Json_keys_table_operatorContext,0)


        def json_table_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Json_table_table_operatorContext,0)


        def json_shred_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Json_shred_table_operatorContext,0)


        def generic_table_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Generic_table_operatorContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_operator_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_reference" ):
                listener.enterTable_operator_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_reference" ):
                listener.exitTable_operator_reference(self)




    def table_operator_reference(self):

        localctx = TeradataSQLParser.Table_operator_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_table_operator_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1240,self._ctx)
            if la_ == 1:
                self.state = 9372
                self.xmltable_operator()
                pass

            elif la_ == 2:
                self.state = 9373
                self.calcmatrix_table_operator()
                pass

            elif la_ == 3:
                self.state = 9374
                self.read_nos_table_operator()
                pass

            elif la_ == 4:
                self.state = 9375
                self.script_table_operator()
                pass

            elif la_ == 5:
                self.state = 9376
                self.td_unpivot_table_operator()
                pass

            elif la_ == 6:
                self.state = 9377
                self.write_nos_table_operator()
                pass

            elif la_ == 7:
                self.state = 9378
                self.json_keys_table_operator()
                pass

            elif la_ == 8:
                self.state = 9379
                self.json_table_table_operator()
                pass

            elif la_ == 9:
                self.state = 9380
                self.json_shred_table_operator()
                pass

            elif la_ == 10:
                self.state = 9381
                self.generic_table_operator()
                pass


            self.state = 9385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9384
                self.match(TeradataSQLParser.AS)


            self.state = 9387
            self.alias_name()
            self.state = 9389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1242,self._ctx)
            if la_ == 1:
                self.state = 9388
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xmltable_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_tab_row_pattern = None # Scalar_exprContext

        def XMLTABLE(self):
            return self.getToken(TeradataSQLParser.XMLTABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_namespace_declarationContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_query_argumentContext,0)


        def xml_columns_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_columns_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xmltable_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXmltable_operator" ):
                listener.enterXmltable_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXmltable_operator" ):
                listener.exitXmltable_operator(self)




    def xmltable_operator(self):

        localctx = TeradataSQLParser.Xmltable_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_xmltable_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9391
            self.match(TeradataSQLParser.XMLTABLE)
            self.state = 9392
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9394
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1243,self._ctx)
            if la_ == 1:
                self.state = 9393
                self.xml_namespace_declaration()


            self.state = 9396
            localctx.xml_tab_row_pattern = self.scalar_expr(0)
            self.state = 9398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==845:
                self.state = 9397
                self.xml_query_argument()


            self.state = 9401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==579:
                self.state = 9400
                self.xml_columns_spec()


            self.state = 9403
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calcmatrix_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.using_phrase = None # Char_string_literalContext
            self.calc_type = None # Char_string_literalContext
            self.output = None # Char_string_literalContext
            self.null_handling = None # Char_string_literalContext

        def CALCMATRIX(self):
            return self.getToken(TeradataSQLParser.CALCMATRIX, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def PHRASE(self):
            return self.getToken(TeradataSQLParser.PHRASE, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def HASH(self):
            return self.getToken(TeradataSQLParser.HASH, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.BY)
            else:
                return self.getToken(TeradataSQLParser.BY, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def CALCTYPE(self):
            return self.getToken(TeradataSQLParser.CALCTYPE, 0)

        def OUTPUT(self):
            return self.getToken(TeradataSQLParser.OUTPUT, 0)

        def NULL_HANDLING(self):
            return self.getToken(TeradataSQLParser.NULL_HANDLING, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_calcmatrix_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalcmatrix_table_operator" ):
                listener.enterCalcmatrix_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalcmatrix_table_operator" ):
                listener.exitCalcmatrix_table_operator(self)




    def calcmatrix_table_operator(self):

        localctx = TeradataSQLParser.Calcmatrix_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_calcmatrix_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9405
                self.td_sysfnlib()


            self.state = 9408
            self.match(TeradataSQLParser.CALCMATRIX)
            self.state = 9409
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9410
            self.match(TeradataSQLParser.ON)
            self.state = 9413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9411
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 9412
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==178:
                self.state = 9415
                self.match(TeradataSQLParser.HASH)
                self.state = 9416
                self.match(TeradataSQLParser.BY)
                self.state = 9417
                self.scalar_expr(0)
                self.state = 9422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9418
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9419
                    self.scalar_expr(0)
                    self.state = 9424
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 9438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224:
                self.state = 9427
                self.match(TeradataSQLParser.LOCAL)
                self.state = 9428
                self.match(TeradataSQLParser.ORDER)
                self.state = 9429
                self.match(TeradataSQLParser.BY)
                self.state = 9430
                self.scalar_expr(0)
                self.state = 9435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9431
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9432
                    self.scalar_expr(0)
                    self.state = 9437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 9440
            self.match(TeradataSQLParser.USING)
            self.state = 9441
            self.match(TeradataSQLParser.PHRASE)
            self.state = 9442
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9443
            localctx.using_phrase = self.char_string_literal()
            self.state = 9444
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1252,self._ctx)
            if la_ == 1:
                self.state = 9445
                self.match(TeradataSQLParser.CALCTYPE)
                self.state = 9446
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9447
                localctx.calc_type = self.char_string_literal()
                self.state = 9448
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1253,self._ctx)
            if la_ == 1:
                self.state = 9452
                self.match(TeradataSQLParser.OUTPUT)
                self.state = 9453
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9454
                localctx.output = self.char_string_literal()
                self.state = 9455
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1254,self._ctx)
            if la_ == 1:
                self.state = 9459
                self.match(TeradataSQLParser.NULL_HANDLING)
                self.state = 9460
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9461
                localctx.null_handling = self.char_string_literal()
                self.state = 9462
                self.match(TeradataSQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_NOS(self):
            return self.getToken(TeradataSQLParser.READ_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def read_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Read_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Read_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_read_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_table_operator" ):
                listener.enterRead_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_table_operator" ):
                listener.exitRead_nos_table_operator(self)




    def read_nos_table_operator(self):

        localctx = TeradataSQLParser.Read_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_read_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9466
            self.match(TeradataSQLParser.READ_NOS)
            self.state = 9467
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9468
            self.match(TeradataSQLParser.ON)
            self.state = 9471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9469
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 9470
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9473
            self.match(TeradataSQLParser.USING)
            self.state = 9474
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9475
            self.location()
            self.state = 9479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1132)) & ~0x3f) == 0 and ((1 << (_la - 1132)) & 125829135) != 0):
                self.state = 9476
                self.read_nos_option()
                self.state = 9481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9482
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9483
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Script_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.return_spec = list() # of Char_string_literalContexts
            self.delimiter_char = None # Char_string_literalContext
            self.charset = None # Char_string_literalContext
            self.quote_char = None # Char_string_literalContext
            self.authorization_name = None # Object_nameContext

        def SCRIPT(self):
            return self.getToken(TeradataSQLParser.SCRIPT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_operator_on_clauseContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def DELIMITER(self):
            return self.getToken(TeradataSQLParser.DELIMITER, 0)

        def CHARSET(self):
            return self.getToken(TeradataSQLParser.CHARSET, 0)

        def QUOTECHAR(self):
            return self.getToken(TeradataSQLParser.QUOTECHAR, 0)

        def AUTH(self):
            return self.getToken(TeradataSQLParser.AUTH, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_script_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript_table_operator" ):
                listener.enterScript_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript_table_operator" ):
                listener.exitScript_table_operator(self)




    def script_table_operator(self):

        localctx = TeradataSQLParser.Script_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_script_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9485
            self.match(TeradataSQLParser.SCRIPT)
            self.state = 9486
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9487
            self.table_operator_on_clause()
            self.state = 9502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==352:
                self.state = 9488
                self.match(TeradataSQLParser.RETURNS)
                self.state = 9489
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9499
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 9490
                    self.match(TeradataSQLParser.MUL_SIGN)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 9491
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.return_spec.append(localctx._char_string_literal)
                    self.state = 9496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 9492
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 9493
                        localctx._char_string_literal = self.char_string_literal()
                        localctx.return_spec.append(localctx._char_string_literal)
                        self.state = 9498
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 9501
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==625:
                self.state = 9504
                self.match(TeradataSQLParser.DELIMITER)
                self.state = 9505
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9506
                localctx.delimiter_char = self.char_string_literal()
                self.state = 9507
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==569:
                self.state = 9511
                self.match(TeradataSQLParser.CHARSET)
                self.state = 9512
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9513
                localctx.charset = self.char_string_literal()
                self.state = 9514
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==871:
                self.state = 9518
                self.match(TeradataSQLParser.QUOTECHAR)
                self.state = 9519
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9520
                localctx.quote_char = self.char_string_literal()
                self.state = 9521
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==542:
                self.state = 9525
                self.match(TeradataSQLParser.AUTH)
                self.state = 9526
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9527
                localctx.authorization_name = self.object_name()
                self.state = 9528
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9532
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_unpivot_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._char_string_literal = None # Char_string_literalContext
            self.value_columns_value = list() # of Char_string_literalContexts
            self.unpivot_column_value = None # Char_string_literalContext
            self.column_list_value = list() # of Char_string_literalContexts
            self.column_alias_list_value = list() # of Char_string_literalContexts
            self.include_nulls = None # Char_string_literalContext

        def TD_UNPIVOT(self):
            return self.getToken(TeradataSQLParser.TD_UNPIVOT, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def VALUE_COLUMNS(self):
            return self.getToken(TeradataSQLParser.VALUE_COLUMNS, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def UNPIVOT_COLUMN(self):
            return self.getToken(TeradataSQLParser.UNPIVOT_COLUMN, 0)

        def COLUMN_LIST(self):
            return self.getToken(TeradataSQLParser.COLUMN_LIST, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def COLUMN_ALIAS_LIST(self):
            return self.getToken(TeradataSQLParser.COLUMN_ALIAS_LIST, 0)

        def INCLUDE_NULLS(self):
            return self.getToken(TeradataSQLParser.INCLUDE_NULLS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_td_unpivot_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_unpivot_table_operator" ):
                listener.enterTd_unpivot_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_unpivot_table_operator" ):
                listener.exitTd_unpivot_table_operator(self)




    def td_unpivot_table_operator(self):

        localctx = TeradataSQLParser.Td_unpivot_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_td_unpivot_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9534
                self.td_sysfnlib()


            self.state = 9537
            self.match(TeradataSQLParser.TD_UNPIVOT)
            self.state = 9538
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9539
            self.match(TeradataSQLParser.ON)
            self.state = 9542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9540
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 9541
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9544
            self.match(TeradataSQLParser.USING)
            self.state = 9545
            self.match(TeradataSQLParser.VALUE_COLUMNS)
            self.state = 9546
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9547
            localctx._char_string_literal = self.char_string_literal()
            localctx.value_columns_value.append(localctx._char_string_literal)
            self.state = 9552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9548
                self.match(TeradataSQLParser.COMMA)
                self.state = 9549
                localctx._char_string_literal = self.char_string_literal()
                localctx.value_columns_value.append(localctx._char_string_literal)
                self.state = 9554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9555
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9556
            self.match(TeradataSQLParser.UNPIVOT_COLUMN)
            self.state = 9557
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9558
            localctx.unpivot_column_value = self.char_string_literal()
            self.state = 9559
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9560
            self.match(TeradataSQLParser.COLUMN_LIST)
            self.state = 9561
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9562
            localctx._char_string_literal = self.char_string_literal()
            localctx.column_list_value.append(localctx._char_string_literal)
            self.state = 9567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9563
                self.match(TeradataSQLParser.COMMA)
                self.state = 9564
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_list_value.append(localctx._char_string_literal)
                self.state = 9569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9570
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1269,self._ctx)
            if la_ == 1:
                self.state = 9571
                self.match(TeradataSQLParser.COLUMN_ALIAS_LIST)
                self.state = 9572
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9573
                localctx._char_string_literal = self.char_string_literal()
                localctx.column_alias_list_value.append(localctx._char_string_literal)
                self.state = 9578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9574
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9575
                    localctx._char_string_literal = self.char_string_literal()
                    localctx.column_alias_list_value.append(localctx._char_string_literal)
                    self.state = 9580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 9581
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 9582
                self.match(TeradataSQLParser.INCLUDE_NULLS)
                self.state = 9583
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9584
                localctx.include_nulls = self.char_string_literal()
                self.state = 9585
                self.match(TeradataSQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE_NOS(self):
            return self.getToken(TeradataSQLParser.WRITE_NOS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def table_operator_on_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_operator_on_clauseContext,0)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def location(self):
            return self.getTypedRuleContext(TeradataSQLParser.LocationContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def write_nos_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Write_nos_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Write_nos_optionContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_write_nos_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_table_operator" ):
                listener.enterWrite_nos_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_table_operator" ):
                listener.exitWrite_nos_table_operator(self)




    def write_nos_table_operator(self):

        localctx = TeradataSQLParser.Write_nos_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_write_nos_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9589
            self.match(TeradataSQLParser.WRITE_NOS)
            self.state = 9590
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9591
            self.table_operator_on_clause()
            self.state = 9592
            self.match(TeradataSQLParser.USING)
            self.state = 9593
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9594
            self.location()
            self.state = 9598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29 or ((((_la - 1134)) & ~0x3f) == 0 and ((1 << (_la - 1134)) & 1095216660481) != 0):
                self.state = 9595
                self.write_nos_option()
                self.state = 9600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9601
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9602
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_table_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self.col_expr_literal = None # Char_string_literalContext

        def JSON_TABLE(self):
            return self.getToken(TeradataSQLParser.JSON_TABLE, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLParser.COLEXPR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_json_table_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_table_table_operator" ):
                listener.enterJson_table_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_table_table_operator" ):
                listener.exitJson_table_table_operator(self)




    def json_table_table_operator(self):

        localctx = TeradataSQLParser.Json_table_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_json_table_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9604
                self.td_sysfnlib()


            self.state = 9607
            self.match(TeradataSQLParser.JSON_TABLE)
            self.state = 9608
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9609
            self.match(TeradataSQLParser.ON)
            self.state = 9610
            self.subquery()
            self.state = 9611
            self.match(TeradataSQLParser.USING)
            self.state = 9612
            self.match(TeradataSQLParser.ROWEXPR)
            self.state = 9613
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9614
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 9615
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9616
            self.match(TeradataSQLParser.COLEXPR)
            self.state = 9617
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9618
            localctx.col_expr_literal = self.char_string_literal()
            self.state = 9619
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9620
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_KEYS(self):
            return self.getToken(TeradataSQLParser.JSON_KEYS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def json_keys_using_name_value_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Json_keys_using_name_value_pairContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Json_keys_using_name_value_pairContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_json_keys_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_table_operator" ):
                listener.enterJson_keys_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_table_operator" ):
                listener.exitJson_keys_table_operator(self)




    def json_keys_table_operator(self):

        localctx = TeradataSQLParser.Json_keys_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_json_keys_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9622
                self.td_sysfnlib()


            self.state = 9625
            self.match(TeradataSQLParser.JSON_KEYS)
            self.state = 9626
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9627
            self.match(TeradataSQLParser.ON)
            self.state = 9628
            self.subquery()
            self.state = 9635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 9629
                self.match(TeradataSQLParser.USING)
                self.state = 9631 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 9630
                    self.json_keys_using_name_value_pair()
                    self.state = 9633 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1185 or _la==1186):
                        break



            self.state = 9637
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_shred_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_expr_literal = None # Char_string_literalContext
            self._char_string_literal = None # Char_string_literalContext
            self.col_expr_literal = list() # of Char_string_literalContexts
            self.return_type = list() # of Char_string_literalContexts
            self.nocase_value = None # Integer_literalContext
            self.truncate_value = None # Integer_literalContext

        def TD_JSONSHRED(self):
            return self.getToken(TeradataSQLParser.TD_JSONSHRED, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def ROWEXPR(self):
            return self.getToken(TeradataSQLParser.ROWEXPR, 0)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def COLEXPR(self):
            return self.getToken(TeradataSQLParser.COLEXPR, 0)

        def RETURNTYPES(self):
            return self.getToken(TeradataSQLParser.RETURNTYPES, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def NOCASE(self):
            return self.getToken(TeradataSQLParser.NOCASE, 0)

        def TRUNCATE(self):
            return self.getToken(TeradataSQLParser.TRUNCATE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_json_shred_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_shred_table_operator" ):
                listener.enterJson_shred_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_shred_table_operator" ):
                listener.exitJson_shred_table_operator(self)




    def json_shred_table_operator(self):

        localctx = TeradataSQLParser.Json_shred_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_json_shred_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 9639
                self.td_sysfnlib()


            self.state = 9642
            self.match(TeradataSQLParser.TD_JSONSHRED)
            self.state = 9643
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9644
            self.match(TeradataSQLParser.ON)
            self.state = 9645
            self.subquery()
            self.state = 9646
            self.match(TeradataSQLParser.USING)
            self.state = 9647
            self.match(TeradataSQLParser.ROWEXPR)
            self.state = 9648
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9649
            localctx.row_expr_literal = self.char_string_literal()
            self.state = 9650
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9651
            self.match(TeradataSQLParser.COLEXPR)
            self.state = 9652
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9653
            localctx._char_string_literal = self.char_string_literal()
            localctx.col_expr_literal.append(localctx._char_string_literal)
            self.state = 9658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9654
                self.match(TeradataSQLParser.COMMA)
                self.state = 9655
                localctx._char_string_literal = self.char_string_literal()
                localctx.col_expr_literal.append(localctx._char_string_literal)
                self.state = 9660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9661
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9662
            self.match(TeradataSQLParser.RETURNTYPES)
            self.state = 9663
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9664
            localctx._char_string_literal = self.char_string_literal()
            localctx.return_type.append(localctx._char_string_literal)
            self.state = 9669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 9665
                self.match(TeradataSQLParser.COMMA)
                self.state = 9666
                localctx._char_string_literal = self.char_string_literal()
                localctx.return_type.append(localctx._char_string_literal)
                self.state = 9671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9672
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 9678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1190:
                self.state = 9673
                self.match(TeradataSQLParser.NOCASE)
                self.state = 9674
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9675
                localctx.nocase_value = self.integer_literal()
                self.state = 9676
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1191:
                self.state = 9680
                self.match(TeradataSQLParser.TRUNCATE)
                self.state = 9681
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9682
                localctx.truncate_value = self.integer_literal()
                self.state = 9683
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 9687
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_table_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def table_operator_on_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_operator_on_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_operator_on_clauseContext,i)


        def table_operator_execute_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_operator_execute_clauseContext,0)


        def table_operator_out_table_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_operator_out_table_clauseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_operator_out_table_clauseContext,i)


        def table_operator_using_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_operator_using_clauseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_generic_table_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_table_operator" ):
                listener.enterGeneric_table_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_table_operator" ):
                listener.exitGeneric_table_operator(self)




    def generic_table_operator(self):

        localctx = TeradataSQLParser.Generic_table_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_generic_table_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9689
            self.table_name()
            self.state = 9690
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==286:
                self.state = 9691
                self.table_operator_on_clause()
                self.state = 9696
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==144:
                self.state = 9697
                self.table_operator_execute_clause()


            self.state = 9703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 9700
                self.table_operator_out_table_clause()
                self.state = 9705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 9707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==457:
                self.state = 9706
                self.table_operator_using_clause()


            self.state = 9709
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def hash_or_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLParser.Hash_or_partition_byContext,0)


        def DIMENSION(self):
            return self.getToken(TeradataSQLParser.DIMENSION, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_spec_fullContext,i)


        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_operator_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_on_clause" ):
                listener.enterTable_operator_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_on_clause" ):
                listener.exitTable_operator_on_clause(self)




    def table_operator_on_clause(self):

        localctx = TeradataSQLParser.Table_operator_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_table_operator_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9711
            self.match(TeradataSQLParser.ON)
            self.state = 9714
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 9712
                self.table_name()
                pass
            elif token in [1213]:
                self.state = 9713
                self.subquery()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 9718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9716
                self.match(TeradataSQLParser.AS)
                self.state = 9717
                self.alias_name()


            self.state = 9722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [178, 840]:
                self.state = 9720
                self.hash_or_partition_by()
                pass
            elif token in [635]:
                self.state = 9721
                self.match(TeradataSQLParser.DIMENSION)
                pass
            elif token in [144, 224, 286, 291, 293, 352, 457, 542, 569, 625, 871, 1214]:
                pass
            else:
                pass
            self.state = 9737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==224 or _la==291:
                self.state = 9725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 9724
                    self.match(TeradataSQLParser.LOCAL)


                self.state = 9727
                self.match(TeradataSQLParser.ORDER)
                self.state = 9728
                self.match(TeradataSQLParser.BY)
                self.state = 9729
                self.order_by_spec_full()
                self.state = 9734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9730
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9731
                    self.order_by_spec_full()
                    self.state = 9736
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_execute_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext

        def EXECUTE(self):
            return self.getToken(TeradataSQLParser.EXECUTE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLParser.EQUALS_SIGN, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def COLOCATE(self):
            return self.getToken(TeradataSQLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_operator_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_execute_clause" ):
                listener.enterTable_operator_execute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_execute_clause" ):
                listener.exitTable_operator_execute_clause(self)




    def table_operator_execute_clause(self):

        localctx = TeradataSQLParser.Table_operator_execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_table_operator_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9739
            self.match(TeradataSQLParser.EXECUTE)
            self.state = 9740
            self.match(TeradataSQLParser.MAP)
            self.state = 9741
            self.match(TeradataSQLParser.EQUALS_SIGN)
            self.state = 9742
            localctx.map_name = self.char_string_literal()
            self.state = 9747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==577:
                self.state = 9743
                self.match(TeradataSQLParser.COLOCATE)
                self.state = 9744
                self.match(TeradataSQLParser.USING)
                self.state = 9745
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 9746
                localctx.colocation_name = self.char_string_literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_out_table_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def OUT(self):
            return self.getToken(TeradataSQLParser.OUT, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_operator_out_table_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_out_table_clause" ):
                listener.enterTable_operator_out_table_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_out_table_clause" ):
                listener.exitTable_operator_out_table_clause(self)




    def table_operator_out_table_clause(self):

        localctx = TeradataSQLParser.Table_operator_out_table_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_table_operator_out_table_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9749
            self.match(TeradataSQLParser.OUT)
            self.state = 9750
            self.match(TeradataSQLParser.TABLE)
            self.state = 9751
            localctx.name = self.unqualified_name()
            self.state = 9752
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9753
            self.table_name()
            self.state = 9754
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def table_operator_using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Table_operator_using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Table_operator_using_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_operator_using_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_clause" ):
                listener.enterTable_operator_using_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_clause" ):
                listener.exitTable_operator_using_clause(self)




    def table_operator_using_clause(self):

        localctx = TeradataSQLParser.Table_operator_using_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_table_operator_using_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9756
            self.match(TeradataSQLParser.USING)
            self.state = 9758 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9757
                self.table_operator_using_spec()
                self.state = 9760 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_operator_using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_list_comma_separatedContext,0)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_table_operator_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_operator_using_spec" ):
                listener.enterTable_operator_using_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_operator_using_spec" ):
                listener.exitTable_operator_using_spec(self)




    def table_operator_using_spec(self):

        localctx = TeradataSQLParser.Table_operator_using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_table_operator_using_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9762
            localctx.name = self.unqualified_name()
            self.state = 9765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1292,self._ctx)
            if la_ == 1:
                self.state = 9763
                self.scalar_expr_list_comma_separated()
                pass

            elif la_ == 2:
                self.state = 9764
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_keys_using_name_value_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # Scalar_exprContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def DEPTH(self):
            return self.getToken(TeradataSQLParser.DEPTH, 0)

        def QUOTES(self):
            return self.getToken(TeradataSQLParser.QUOTES, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_json_keys_using_name_value_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_keys_using_name_value_pair" ):
                listener.enterJson_keys_using_name_value_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_keys_using_name_value_pair" ):
                listener.exitJson_keys_using_name_value_pair(self)




    def json_keys_using_name_value_pair(self):

        localctx = TeradataSQLParser.Json_keys_using_name_value_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_json_keys_using_name_value_pair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9767
            _la = self._input.LA(1)
            if not(_la==1185 or _la==1186):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 9768
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9769
            localctx.value = self.scalar_expr(0)
            self.state = 9770
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_or_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def HASH(self):
            return self.getToken(TeradataSQLParser.HASH, 0)

        def PARTITION(self):
            return self.getToken(TeradataSQLParser.PARTITION, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def ANY(self):
            return self.getToken(TeradataSQLParser.ANY, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_hash_or_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_or_partition_by" ):
                listener.enterHash_or_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_or_partition_by" ):
                listener.exitHash_or_partition_by(self)




    def hash_or_partition_by(self):

        localctx = TeradataSQLParser.Hash_or_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_hash_or_partition_by)
        self._la = 0 # Token type
        try:
            self.state = 9785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1294,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9772
                _la = self._input.LA(1)
                if not(_la==178 or _la==840):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 9773
                self.match(TeradataSQLParser.BY)
                self.state = 9774
                self.scalar_expr(0)
                self.state = 9779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 9775
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9776
                    self.scalar_expr(0)
                    self.state = 9781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9782
                self.match(TeradataSQLParser.PARTITION)
                self.state = 9783
                self.match(TeradataSQLParser.BY)
                self.state = 9784
                self.match(TeradataSQLParser.ANY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subquery_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_subquery_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_reference" ):
                listener.enterSubquery_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_reference" ):
                listener.exitSubquery_reference(self)




    def subquery_reference(self):

        localctx = TeradataSQLParser.Subquery_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_subquery_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9787
            self.subquery()
            self.state = 9789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 9788
                self.match(TeradataSQLParser.AS)


            self.state = 9791
            self.alias_name()
            self.state = 9793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1296,self._ctx)
            if la_ == 1:
                self.state = 9792
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.external_file_path = None # Token

        def LOCATION(self):
            return self.getToken(TeradataSQLParser.LOCATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def CHAR_STRING(self):
            return self.getToken(TeradataSQLParser.CHAR_STRING, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_location

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocation" ):
                listener.enterLocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocation" ):
                listener.exitLocation(self)




    def location(self):

        localctx = TeradataSQLParser.LocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_location)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9795
            self.match(TeradataSQLParser.LOCATION)
            self.state = 9796
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9797
            localctx.external_file_path = self.match(TeradataSQLParser.CHAR_STRING)
            self.state = 9798
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Read_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.buffer_size = None # Char_string_literalContext
            self.return_type = None # Char_string_literalContext
            self.row_sampling_value = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.fullscan = None # Char_string_literalContext
            self.manifest = None # Char_string_literalContext
            self.row_format = None # Char_string_literalContext
            self.header = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def BUFFERSIZE(self):
            return self.getToken(TeradataSQLParser.BUFFERSIZE, 0)

        def RETURNTYPE(self):
            return self.getToken(TeradataSQLParser.RETURNTYPE, 0)

        def SAMPLE_PERC(self):
            return self.getToken(TeradataSQLParser.SAMPLE_PERC, 0)

        def STOREDAS(self):
            return self.getToken(TeradataSQLParser.STOREDAS, 0)

        def FULLSCAN(self):
            return self.getToken(TeradataSQLParser.FULLSCAN, 0)

        def MANIFEST(self):
            return self.getToken(TeradataSQLParser.MANIFEST, 0)

        def ROWFORMAT(self):
            return self.getToken(TeradataSQLParser.ROWFORMAT, 0)

        def HEADER(self):
            return self.getToken(TeradataSQLParser.HEADER, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_read_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead_nos_option" ):
                listener.enterRead_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead_nos_option" ):
                listener.exitRead_nos_option(self)




    def read_nos_option(self):

        localctx = TeradataSQLParser.Read_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_read_nos_option)
        try:
            self.state = 9848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9800
                self.match(TeradataSQLParser.AUTHORIZATION)
                self.state = 9801
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1297,self._ctx)
                if la_ == 1:
                    self.state = 9802
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 9803
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 9806
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9808
                self.match(TeradataSQLParser.BUFFERSIZE)
                self.state = 9809
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9810
                localctx.buffer_size = self.char_string_literal()
                self.state = 9811
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1156]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9813
                self.match(TeradataSQLParser.RETURNTYPE)
                self.state = 9814
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9815
                localctx.return_type = self.char_string_literal()
                self.state = 9816
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1157]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9818
                self.match(TeradataSQLParser.SAMPLE_PERC)
                self.state = 9819
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9820
                localctx.row_sampling_value = self.char_string_literal()
                self.state = 9821
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9823
                self.match(TeradataSQLParser.STOREDAS)
                self.state = 9824
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9825
                localctx.stored_as = self.char_string_literal()
                self.state = 9826
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1158]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9828
                self.match(TeradataSQLParser.FULLSCAN)
                self.state = 9829
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9830
                localctx.fullscan = self.char_string_literal()
                self.state = 9831
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1132]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9833
                self.match(TeradataSQLParser.MANIFEST)
                self.state = 9834
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9835
                localctx.manifest = self.char_string_literal()
                self.state = 9836
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1133]:
                self.enterOuterAlt(localctx, 8)
                self.state = 9838
                self.match(TeradataSQLParser.ROWFORMAT)
                self.state = 9839
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9840
                localctx.row_format = self.char_string_literal()
                self.state = 9841
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1135]:
                self.enterOuterAlt(localctx, 9)
                self.state = 9843
                self.match(TeradataSQLParser.HEADER)
                self.state = 9844
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9845
                localctx.header = self.char_string_literal()
                self.state = 9846
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Write_nos_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.authorization_name = None # Object_nameContext
            self.authorization_json = None # Char_string_literalContext
            self.stored_as = None # Char_string_literalContext
            self.naming = None # Char_string_literalContext
            self.manifest_name = None # Char_string_literalContext
            self.manifest_only = None # Char_string_literalContext
            self.overwrite = None # Char_string_literalContext
            self.include_ordering = None # Char_string_literalContext
            self.include_hashby = None # Char_string_literalContext
            self.max_object_size = None # Char_string_literalContext
            self.compression = None # Char_string_literalContext

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLParser.AUTHORIZATION, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def STOREDAS(self):
            return self.getToken(TeradataSQLParser.STOREDAS, 0)

        def NAMING(self):
            return self.getToken(TeradataSQLParser.NAMING, 0)

        def MANIFESTFILE(self):
            return self.getToken(TeradataSQLParser.MANIFESTFILE, 0)

        def MANIFESTONLY(self):
            return self.getToken(TeradataSQLParser.MANIFESTONLY, 0)

        def OVERWRITE(self):
            return self.getToken(TeradataSQLParser.OVERWRITE, 0)

        def INCLUDE_ORDERING(self):
            return self.getToken(TeradataSQLParser.INCLUDE_ORDERING, 0)

        def INCLUDE_HASHBY(self):
            return self.getToken(TeradataSQLParser.INCLUDE_HASHBY, 0)

        def MAXOBJECTSIZE(self):
            return self.getToken(TeradataSQLParser.MAXOBJECTSIZE, 0)

        def COMPRESSION(self):
            return self.getToken(TeradataSQLParser.COMPRESSION, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_write_nos_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite_nos_option" ):
                listener.enterWrite_nos_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite_nos_option" ):
                listener.exitWrite_nos_option(self)




    def write_nos_option(self):

        localctx = TeradataSQLParser.Write_nos_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_write_nos_option)
        try:
            self.state = 9903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 9850
                self.match(TeradataSQLParser.AUTHORIZATION)
                self.state = 9851
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1299,self._ctx)
                if la_ == 1:
                    self.state = 9852
                    localctx.authorization_name = self.object_name()
                    pass

                elif la_ == 2:
                    self.state = 9853
                    localctx.authorization_json = self.char_string_literal()
                    pass


                self.state = 9856
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1134]:
                self.enterOuterAlt(localctx, 2)
                self.state = 9858
                self.match(TeradataSQLParser.STOREDAS)
                self.state = 9859
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9860
                localctx.stored_as = self.char_string_literal()
                self.state = 9861
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1166]:
                self.enterOuterAlt(localctx, 3)
                self.state = 9863
                self.match(TeradataSQLParser.NAMING)
                self.state = 9864
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9865
                localctx.naming = self.char_string_literal()
                self.state = 9866
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1167]:
                self.enterOuterAlt(localctx, 4)
                self.state = 9868
                self.match(TeradataSQLParser.MANIFESTFILE)
                self.state = 9869
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9870
                localctx.manifest_name = self.char_string_literal()
                self.state = 9871
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1168]:
                self.enterOuterAlt(localctx, 5)
                self.state = 9873
                self.match(TeradataSQLParser.MANIFESTONLY)
                self.state = 9874
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9875
                localctx.manifest_only = self.char_string_literal()
                self.state = 9876
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1169]:
                self.enterOuterAlt(localctx, 6)
                self.state = 9878
                self.match(TeradataSQLParser.OVERWRITE)
                self.state = 9879
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9880
                localctx.overwrite = self.char_string_literal()
                self.state = 9881
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1170]:
                self.enterOuterAlt(localctx, 7)
                self.state = 9883
                self.match(TeradataSQLParser.INCLUDE_ORDERING)
                self.state = 9884
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9885
                localctx.include_ordering = self.char_string_literal()
                self.state = 9886
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1171]:
                self.enterOuterAlt(localctx, 8)
                self.state = 9888
                self.match(TeradataSQLParser.INCLUDE_HASHBY)
                self.state = 9889
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9890
                localctx.include_hashby = self.char_string_literal()
                self.state = 9891
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1172]:
                self.enterOuterAlt(localctx, 9)
                self.state = 9893
                self.match(TeradataSQLParser.MAXOBJECTSIZE)
                self.state = 9894
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9895
                localctx.max_object_size = self.char_string_literal()
                self.state = 9896
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1173]:
                self.enterOuterAlt(localctx, 10)
                self.state = 9898
                self.match(TeradataSQLParser.COMPRESSION)
                self.state = 9899
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 9900
                localctx.compression = self.char_string_literal()
                self.state = 9901
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def with_clause_title_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.With_clause_title_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.With_clause_title_phraseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def with_clause_by_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_clause_by_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = TeradataSQLParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9905
            self.match(TeradataSQLParser.WITH)
            self.state = 9906
            self.scalar_expr(0)
            self.state = 9908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1301,self._ctx)
            if la_ == 1:
                self.state = 9907
                self.with_clause_title_phrase()


            self.state = 9917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1303,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9910
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9911
                    self.scalar_expr(0)
                    self.state = 9913
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1302,self._ctx)
                    if la_ == 1:
                        self.state = 9912
                        self.with_clause_title_phrase()

             
                self.state = 9919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1303,self._ctx)

            self.state = 9921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1304,self._ctx)
            if la_ == 1:
                self.state = 9920
                self.with_clause_by_phrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_by_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_spec_asc_desc_onlyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_clause_by_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_by_phrase" ):
                listener.enterWith_clause_by_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_by_phrase" ):
                listener.exitWith_clause_by_phrase(self)




    def with_clause_by_phrase(self):

        localctx = TeradataSQLParser.With_clause_by_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_with_clause_by_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9923
            self.match(TeradataSQLParser.BY)
            self.state = 9924
            self.order_by_spec_asc_desc_only()
            self.state = 9929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1305,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9925
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9926
                    self.order_by_spec_asc_desc_only() 
                self.state = 9931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1305,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clause_title_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.title = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLParser.TITLE, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_clause_title_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause_title_phrase" ):
                listener.enterWith_clause_title_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause_title_phrase" ):
                listener.exitWith_clause_title_phrase(self)




    def with_clause_title_phrase(self):

        localctx = TeradataSQLParser.With_clause_title_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_with_clause_title_phrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9932
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9933
            self.match(TeradataSQLParser.TITLE)
            self.state = 9934
            localctx.title = self.char_string_literal()
            self.state = 9935
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(TeradataSQLParser.WHERE, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = TeradataSQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9937
            self.match(TeradataSQLParser.WHERE)
            self.state = 9938
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(TeradataSQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def group_by_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Group_by_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Group_by_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = TeradataSQLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_group_by_clause)
        try:
            self.state = 9952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1307,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9940
                self.match(TeradataSQLParser.GROUP)
                self.state = 9941
                self.match(TeradataSQLParser.BY)
                self.state = 9942
                self.group_by_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9943
                self.match(TeradataSQLParser.GROUP)
                self.state = 9944
                self.match(TeradataSQLParser.BY)
                self.state = 9945
                self.group_by_spec()
                self.state = 9948 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 9946
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 9947
                        self.group_by_spec()

                    else:
                        raise NoViableAltException(self)
                    self.state = 9950 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1306,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLParser.Ordinary_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_group_by_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_spec" ):
                listener.enterGroup_by_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_spec" ):
                listener.exitGroup_by_spec(self)




    def group_by_spec(self):

        localctx = TeradataSQLParser.Group_by_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_group_by_spec)
        try:
            self.state = 9958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1308,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 9954
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 9955
                self.rollup_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 9956
                self.cube_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 9957
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def ordinary_grouping_set_parenthesized(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Ordinary_grouping_set_parenthesizedContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Ordinary_grouping_set_parenthesizedContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_ordinary_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set" ):
                listener.enterOrdinary_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set" ):
                listener.exitOrdinary_grouping_set(self)




    def ordinary_grouping_set(self):

        localctx = TeradataSQLParser.Ordinary_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_ordinary_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1309,self._ctx)
            if la_ == 1:
                self.state = 9960
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.state = 9961
                self.ordinary_grouping_set_parenthesized()
                pass


            self.state = 9971
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 9964
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 9967
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1310,self._ctx)
                    if la_ == 1:
                        self.state = 9965
                        self.scalar_expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 9966
                        self.ordinary_grouping_set_parenthesized()
                        pass

             
                self.state = 9973
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordinary_grouping_set_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_ordinary_grouping_set_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdinary_grouping_set_parenthesized" ):
                listener.enterOrdinary_grouping_set_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdinary_grouping_set_parenthesized" ):
                listener.exitOrdinary_grouping_set_parenthesized(self)




    def ordinary_grouping_set_parenthesized(self):

        localctx = TeradataSQLParser.Ordinary_grouping_set_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_ordinary_grouping_set_parenthesized)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9974
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9975
            self.scalar_expr(0)
            self.state = 9978 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 9976
                self.match(TeradataSQLParser.COMMA)
                self.state = 9977
                self.scalar_expr(0)
                self.state = 9980 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 9982
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Empty_grouping_setContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_empty_grouping_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_grouping_set" ):
                listener.enterEmpty_grouping_set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_grouping_set" ):
                listener.exitEmpty_grouping_set(self)




    def empty_grouping_set(self):

        localctx = TeradataSQLParser.Empty_grouping_setContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_empty_grouping_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9984
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9985
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollup_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLUP(self):
            return self.getToken(TeradataSQLParser.ROLLUP, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_rollup_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollup_option" ):
                listener.enterRollup_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollup_option" ):
                listener.exitRollup_option(self)




    def rollup_option(self):

        localctx = TeradataSQLParser.Rollup_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_rollup_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9987
            self.match(TeradataSQLParser.ROLLUP)
            self.state = 9988
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9989
            self.ordinary_grouping_set()
            self.state = 9990
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cube_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CUBE(self):
            return self.getToken(TeradataSQLParser.CUBE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLParser.Ordinary_grouping_setContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_cube_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCube_option" ):
                listener.enterCube_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCube_option" ):
                listener.exitCube_option(self)




    def cube_option(self):

        localctx = TeradataSQLParser.Cube_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_cube_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9992
            self.match(TeradataSQLParser.CUBE)
            self.state = 9993
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 9994
            self.ordinary_grouping_set()
            self.state = 9995
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUPING(self):
            return self.getToken(TeradataSQLParser.GROUPING, 0)

        def SETS(self):
            return self.getToken(TeradataSQLParser.SETS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def grouping_sets_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Grouping_sets_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Grouping_sets_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grouping_sets_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_option" ):
                listener.enterGrouping_sets_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_option" ):
                listener.exitGrouping_sets_option(self)




    def grouping_sets_option(self):

        localctx = TeradataSQLParser.Grouping_sets_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_grouping_sets_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 9997
            self.match(TeradataSQLParser.GROUPING)
            self.state = 9998
            self.match(TeradataSQLParser.SETS)
            self.state = 9999
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 10000
            self.grouping_sets_spec()
            self.state = 10005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 10001
                self.match(TeradataSQLParser.COMMA)
                self.state = 10002
                self.grouping_sets_spec()
                self.state = 10007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 10008
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_sets_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ordinary_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLParser.Ordinary_grouping_setContext,0)


        def empty_grouping_set(self):
            return self.getTypedRuleContext(TeradataSQLParser.Empty_grouping_setContext,0)


        def rollup_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Rollup_optionContext,0)


        def cube_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cube_optionContext,0)


        def grouping_sets_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grouping_sets_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grouping_sets_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_sets_spec" ):
                listener.enterGrouping_sets_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_sets_spec" ):
                listener.exitGrouping_sets_spec(self)




    def grouping_sets_spec(self):

        localctx = TeradataSQLParser.Grouping_sets_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_grouping_sets_spec)
        try:
            self.state = 10015
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1314,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10010
                self.ordinary_grouping_set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10011
                self.empty_grouping_set()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10012
                self.rollup_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10013
                self.cube_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10014
                self.grouping_sets_option()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(TeradataSQLParser.HAVING, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = TeradataSQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10017
            self.match(TeradataSQLParser.HAVING)
            self.state = 10018
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualify_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUALIFY(self):
            return self.getToken(TeradataSQLParser.QUALIFY, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_qualify_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualify_clause" ):
                listener.enterQualify_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualify_clause" ):
                listener.exitQualify_clause(self)




    def qualify_clause(self):

        localctx = TeradataSQLParser.Qualify_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_qualify_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10020
            self.match(TeradataSQLParser.QUALIFY)
            self.state = 10021
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAMPLE(self):
            return self.getToken(TeradataSQLParser.SAMPLE, 0)

        def sample_fraction_description(self):
            return self.getTypedRuleContext(TeradataSQLParser.Sample_fraction_descriptionContext,0)


        def sample_count_description(self):
            return self.getTypedRuleContext(TeradataSQLParser.Sample_count_descriptionContext,0)


        def sample_when_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Sample_when_clauseContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def REPLACEMENT(self):
            return self.getToken(TeradataSQLParser.REPLACEMENT, 0)

        def RANDOMIZED(self):
            return self.getToken(TeradataSQLParser.RANDOMIZED, 0)

        def ALLOCATION(self):
            return self.getToken(TeradataSQLParser.ALLOCATION, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sample_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_clause" ):
                listener.enterSample_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_clause" ):
                listener.exitSample_clause(self)




    def sample_clause(self):

        localctx = TeradataSQLParser.Sample_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_sample_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10023
            self.match(TeradataSQLParser.SAMPLE)
            self.state = 10026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 10024
                self.match(TeradataSQLParser.WITH)
                self.state = 10025
                self.match(TeradataSQLParser.REPLACEMENT)


            self.state = 10030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==872:
                self.state = 10028
                self.match(TeradataSQLParser.RANDOMIZED)
                self.state = 10029
                self.match(TeradataSQLParser.ALLOCATION)


            self.state = 10035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1197]:
                self.state = 10032
                self.sample_fraction_description()
                pass
            elif token in [1194]:
                self.state = 10033
                self.sample_count_description()
                pass
            elif token in [470]:
                self.state = 10034
                self.sample_when_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_fraction_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._float_literal = None # Float_literalContext
            self.fraction_description = list() # of Float_literalContexts

        def float_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Float_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Float_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sample_fraction_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_fraction_description" ):
                listener.enterSample_fraction_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_fraction_description" ):
                listener.exitSample_fraction_description(self)




    def sample_fraction_description(self):

        localctx = TeradataSQLParser.Sample_fraction_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_sample_fraction_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10037
            localctx._float_literal = self.float_literal()
            localctx.fraction_description.append(localctx._float_literal)
            self.state = 10042
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1318,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10038
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 10039
                    localctx._float_literal = self.float_literal()
                    localctx.fraction_description.append(localctx._float_literal) 
                self.state = 10044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1318,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_count_descriptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.count_description = list() # of Integer_literalContexts

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sample_count_description

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_count_description" ):
                listener.enterSample_count_description(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_count_description" ):
                listener.exitSample_count_description(self)




    def sample_count_description(self):

        localctx = TeradataSQLParser.Sample_count_descriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_sample_count_description)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10045
            localctx._integer_literal = self.integer_literal()
            localctx.count_description.append(localctx._integer_literal)
            self.state = 10050
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1319,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10046
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 10047
                    localctx._integer_literal = self.integer_literal()
                    localctx.count_description.append(localctx._integer_literal) 
                self.state = 10052
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1319,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sample_when_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.WHEN)
            else:
                return self.getToken(TeradataSQLParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.THEN)
            else:
                return self.getToken(TeradataSQLParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLParser.ELSE, 0)

        def sample_fraction_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sample_fraction_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sample_fraction_descriptionContext,i)


        def sample_count_description(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Sample_count_descriptionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Sample_count_descriptionContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_sample_when_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_when_clause" ):
                listener.enterSample_when_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_when_clause" ):
                listener.exitSample_when_clause(self)




    def sample_when_clause(self):

        localctx = TeradataSQLParser.Sample_when_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_sample_when_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10060 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 10053
                self.match(TeradataSQLParser.WHEN)
                self.state = 10054
                self.logical_expr(0)
                self.state = 10055
                self.match(TeradataSQLParser.THEN)
                self.state = 10058
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 10056
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 10057
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 10062 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 10069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 10064
                self.match(TeradataSQLParser.ELSE)
                self.state = 10067
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1197]:
                    self.state = 10065
                    self.sample_fraction_description()
                    pass
                elif token in [1194]:
                    self.state = 10066
                    self.sample_count_description()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 10071
            self.match(TeradataSQLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expand_on_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expand_expr = None # Scalar_exprContext
            self.expand_column_alias = None # Alias_nameContext
            self.period_expression = None # Scalar_exprContext

        def EXPAND(self):
            return self.getToken(TeradataSQLParser.EXPAND, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def interval_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Interval_literalContext,0)


        def ANCHOR(self):
            return self.getToken(TeradataSQLParser.ANCHOR, 0)

        def anchor_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Anchor_nameContext,0)


        def PERIOD(self):
            return self.getToken(TeradataSQLParser.PERIOD, 0)

        def AT(self):
            return self.getToken(TeradataSQLParser.AT, 0)

        def time_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Time_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_expand_on_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpand_on_clause" ):
                listener.enterExpand_on_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpand_on_clause" ):
                listener.exitExpand_on_clause(self)




    def expand_on_clause(self):

        localctx = TeradataSQLParser.Expand_on_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_expand_on_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10073
            self.match(TeradataSQLParser.EXPAND)
            self.state = 10074
            self.match(TeradataSQLParser.ON)
            self.state = 10075
            localctx.expand_expr = self.scalar_expr(0)
            self.state = 10077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 10076
                self.match(TeradataSQLParser.AS)


            self.state = 10079
            localctx.expand_column_alias = self.alias_name()
            self.state = 10093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1328,self._ctx)
            if la_ == 1:
                self.state = 10080
                self.match(TeradataSQLParser.BY)
                self.state = 10091
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [205]:
                    self.state = 10081
                    self.interval_literal()
                    pass
                elif token in [505]:
                    self.state = 10082
                    self.match(TeradataSQLParser.ANCHOR)
                    self.state = 10084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==853:
                        self.state = 10083
                        self.match(TeradataSQLParser.PERIOD)


                    self.state = 10086
                    self.anchor_name()
                    self.state = 10089
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1326,self._ctx)
                    if la_ == 1:
                        self.state = 10087
                        self.match(TeradataSQLParser.AT)
                        self.state = 10088
                        self.time_literal()


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 10097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1329,self._ctx)
            if la_ == 1:
                self.state = 10095
                self.match(TeradataSQLParser.FOR)
                self.state = 10096
                localctx.period_expression = self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = TeradataSQLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10099
            self.match(TeradataSQLParser.ORDER)
            self.state = 10100
            self.match(TeradataSQLParser.BY)
            self.state = 10101
            self.order_by_spec_full()
            self.state = 10106
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1330,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 10102
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 10103
                    self.order_by_spec_full() 
                self.state = 10108
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1330,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_fullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLParser.NULLS, 0)

        def ASC(self):
            return self.getToken(TeradataSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLParser.DESC, 0)

        def FIRST(self):
            return self.getToken(TeradataSQLParser.FIRST, 0)

        def LAST(self):
            return self.getToken(TeradataSQLParser.LAST, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_order_by_spec_full

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_full" ):
                listener.enterOrder_by_spec_full(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_full" ):
                listener.exitOrder_by_spec_full(self)




    def order_by_spec_full(self):

        localctx = TeradataSQLParser.Order_by_spec_fullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_order_by_spec_full)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10109
            self.scalar_expr(0)
            self.state = 10111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1331,self._ctx)
            if la_ == 1:
                self.state = 10110
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 10115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1332,self._ctx)
            if la_ == 1:
                self.state = 10113
                self.match(TeradataSQLParser.NULLS)
                self.state = 10114
                _la = self._input.LA(1)
                if not(_la==156 or _la==731):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_spec_asc_desc_onlyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def ASC(self):
            return self.getToken(TeradataSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLParser.DESC, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_order_by_spec_asc_desc_only

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_spec_asc_desc_only" ):
                listener.enterOrder_by_spec_asc_desc_only(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_spec_asc_desc_only" ):
                listener.exitOrder_by_spec_asc_desc_only(self)




    def order_by_spec_asc_desc_only(self):

        localctx = TeradataSQLParser.Order_by_spec_asc_desc_onlyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_order_by_spec_asc_desc_only)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10117
            self.scalar_expr(0)
            self.state = 10119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1333,self._ctx)
            if la_ == 1:
                self.state = 10118
                _la = self._input.LA(1)
                if not(_la==21 or _la==116):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_check_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def CHECK(self):
            return self.getToken(TeradataSQLParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_check_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_check_option" ):
                listener.enterWith_check_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_check_option" ):
                listener.exitWith_check_option(self)




    def with_check_option(self):

        localctx = TeradataSQLParser.With_check_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_with_check_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10121
            self.match(TeradataSQLParser.WITH)
            self.state = 10122
            self.match(TeradataSQLParser.CHECK)
            self.state = 10123
            self.match(TeradataSQLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_logical_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class PeriodMeetsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def MEETS(self):
            return self.getToken(TeradataSQLParser.MEETS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodMeets" ):
                listener.enterPeriodMeets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodMeets" ):
                listener.exitPeriodMeets(self)


    class PeriodImmediatelySucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLParser.IMMEDIATELY, 0)
        def SUCCEEDS(self):
            return self.getToken(TeradataSQLParser.SUCCEEDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelySucceeds" ):
                listener.enterPeriodImmediatelySucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelySucceeds" ):
                listener.exitPeriodImmediatelySucceeds(self)


    class PeriodEqualsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def EQUALS(self):
            return self.getToken(TeradataSQLParser.EQUALS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodEquals" ):
                listener.enterPeriodEquals(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodEquals" ):
                listener.exitPeriodEquals(self)


    class ScalarComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarComparelist" ):
                listener.enterScalarComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarComparelist" ):
                listener.exitScalarComparelist(self)


    class TupleInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLParser.TupleContext,0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleInSubquery" ):
                listener.enterTupleInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleInSubquery" ):
                listener.exitTupleInSubquery(self)


    class LogicalOrContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,i)

        def OR(self):
            return self.getToken(TeradataSQLParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOr" ):
                listener.enterLogicalOr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOr" ):
                listener.exitLogicalOr(self)


    class ScalarInScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)
        def IS(self):
            return self.getToken(TeradataSQLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInScalar" ):
                listener.enterScalarInScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInScalar" ):
                listener.exitScalarInScalar(self)


    class ScalarCompareScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarCompareScalar" ):
                listener.enterScalarCompareScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarCompareScalar" ):
                listener.exitScalarCompareScalar(self)


    class LogicalNotContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class TupleComparelistContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.op = None # Comparison_operatorContext
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLParser.TupleContext,0)

        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Elements_listContext,0)

        def comparison_operator(self):
            return self.getTypedRuleContext(TeradataSQLParser.Comparison_operatorContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleComparelist" ):
                listener.enterTupleComparelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleComparelist" ):
                listener.exitTupleComparelist(self)


    class ScalarInListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)
        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_listContext,0)

        def IS(self):
            return self.getToken(TeradataSQLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInList" ):
                listener.enterScalarInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInList" ):
                listener.exitScalarInList(self)


    class TupleLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tuple_(self):
            return self.getTypedRuleContext(TeradataSQLParser.TupleContext,0)

        def LIKE(self):
            return self.getToken(TeradataSQLParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLParser.ESCAPE, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleLikeList" ):
                listener.enterTupleLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleLikeList" ):
                listener.exitTupleLikeList(self)


    class LogicalAndContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,i)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAnd" ):
                listener.enterLogicalAnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAnd" ):
                listener.exitLogicalAnd(self)


    class ScalarInSubqueryContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)

        def IS(self):
            return self.getToken(TeradataSQLParser.IS, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.QuantifierContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modificationContext,i)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarInSubquery" ):
                listener.enterScalarInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarInSubquery" ):
                listener.exitScalarInSubquery(self)


    class PeriodContainsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def CONTAINS(self):
            return self.getToken(TeradataSQLParser.CONTAINS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodContains" ):
                listener.enterPeriodContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodContains" ):
                listener.exitPeriodContains(self)


    class PeriodOverlapsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OVERLAPS(self):
            return self.getToken(TeradataSQLParser.OVERLAPS, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)
        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)
        def subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.SubqueryContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodOverlaps" ):
                listener.enterPeriodOverlaps(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodOverlaps" ):
                listener.exitPeriodOverlaps(self)


    class BetweenContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)
        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)


    class ParenthesizedLogicalExprContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedLogicalExpr" ):
                listener.enterParenthesizedLogicalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedLogicalExpr" ):
                listener.exitParenthesizedLogicalExpr(self)


    class PeriodImmediatelyPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def IMMEDIATELY(self):
            return self.getToken(TeradataSQLParser.IMMEDIATELY, 0)
        def PRECEDES(self):
            return self.getToken(TeradataSQLParser.PRECEDES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodImmediatelyPrecedes" ):
                listener.enterPeriodImmediatelyPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodImmediatelyPrecedes" ):
                listener.exitPeriodImmediatelyPrecedes(self)


    class NullCheckContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def IS(self):
            return self.getToken(TeradataSQLParser.IS, 0)
        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)
        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullCheck" ):
                listener.enterNullCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullCheck" ):
                listener.exitNullCheck(self)


    class PeriodPrecedesContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def PRECEDES(self):
            return self.getToken(TeradataSQLParser.PRECEDES, 0)
        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodPrecedes" ):
                listener.enterPeriodPrecedes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodPrecedes" ):
                listener.exitPeriodPrecedes(self)


    class ExistsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(TeradataSQLParser.EXISTS, 0)
        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class PeriodSucceedsContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def SUCCEEDS(self):
            return self.getToken(TeradataSQLParser.SUCCEEDS, 0)
        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodSucceeds" ):
                listener.enterPeriodSucceeds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodSucceeds" ):
                listener.exitPeriodSucceeds(self)


    class ScalarLikeListContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLParser.LIKE, 0)
        def quantifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.QuantifierContext,0)

        def elements_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Elements_listContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modificationContext,i)

        def ESCAPE(self):
            return self.getToken(TeradataSQLParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeList" ):
                listener.enterScalarLikeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeList" ):
                listener.exitScalarLikeList(self)


    class ScalarLikeScalarContext(Logical_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Logical_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def LIKE(self):
            return self.getToken(TeradataSQLParser.LIKE, 0)
        def ESCAPE(self):
            return self.getToken(TeradataSQLParser.ESCAPE, 0)
        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)
        def CARET(self):
            return self.getToken(TeradataSQLParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarLikeScalar" ):
                listener.enterScalarLikeScalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarLikeScalar" ):
                listener.exitScalarLikeScalar(self)



    def logical_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLParser.Logical_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 998
        self.enterRecursionRule(localctx, 998, self.RULE_logical_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1372,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLParser.ScalarCompareScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 10126
                self.scalar_expr(0)
                self.state = 10127
                localctx.op = self.comparison_operator()
                self.state = 10128
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                localctx = TeradataSQLParser.ScalarComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10130
                self.scalar_expr(0)
                self.state = 10131
                localctx.op = self.comparison_operator()
                self.state = 10132
                self.quantifier()
                self.state = 10133
                self.elements_list()
                self.state = 10137
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1334,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10134
                        self.attribute_modification() 
                    self.state = 10139
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1334,self._ctx)

                pass

            elif la_ == 3:
                localctx = TeradataSQLParser.TupleComparelistContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10140
                self.tuple_()
                self.state = 10141
                localctx.op = self.comparison_operator()
                self.state = 10142
                self.quantifier()
                self.state = 10143
                self.elements_list()
                self.state = 10147
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1335,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10144
                        self.attribute_modification() 
                    self.state = 10149
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1335,self._ctx)

                pass

            elif la_ == 4:
                localctx = TeradataSQLParser.BetweenContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10150
                self.scalar_expr(0)
                self.state = 10152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10151
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10154
                self.match(TeradataSQLParser.BETWEEN)
                self.state = 10155
                self.scalar_expr(0)
                self.state = 10156
                self.match(TeradataSQLParser.AND)
                self.state = 10157
                self.scalar_expr(0)
                pass

            elif la_ == 5:
                localctx = TeradataSQLParser.ScalarInListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10159
                self.scalar_expr(0)
                self.state = 10161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 10160
                    self.match(TeradataSQLParser.IS)


                self.state = 10164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10163
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10166
                self.match(TeradataSQLParser.IN)
                self.state = 10168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 10167
                    self.quantifier()


                self.state = 10170
                self.scalar_expr_list()
                self.state = 10174
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1340,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10171
                        self.attribute_modification() 
                    self.state = 10176
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1340,self._ctx)

                pass

            elif la_ == 6:
                localctx = TeradataSQLParser.ScalarInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10177
                self.scalar_expr(0)
                self.state = 10179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 10178
                    self.match(TeradataSQLParser.IS)


                self.state = 10182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10181
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10184
                self.match(TeradataSQLParser.IN)
                self.state = 10186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 10185
                    self.quantifier()


                self.state = 10188
                self.subquery()
                self.state = 10192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1344,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10189
                        self.attribute_modification() 
                    self.state = 10194
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1344,self._ctx)

                pass

            elif la_ == 7:
                localctx = TeradataSQLParser.ScalarInScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10195
                self.scalar_expr(0)
                self.state = 10197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 10196
                    self.match(TeradataSQLParser.IS)


                self.state = 10200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10199
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10202
                self.match(TeradataSQLParser.IN)
                self.state = 10204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 10203
                    self.quantifier()


                self.state = 10206
                self.scalar_expr(0)
                self.state = 10210
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1348,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10207
                        self.attribute_modification() 
                    self.state = 10212
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1348,self._ctx)

                pass

            elif la_ == 8:
                localctx = TeradataSQLParser.TupleInSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10213
                self.tuple_()
                self.state = 10215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 10214
                    self.match(TeradataSQLParser.IS)


                self.state = 10218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10217
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10220
                self.match(TeradataSQLParser.IN)
                self.state = 10222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==18 or _la==382:
                    self.state = 10221
                    self.quantifier()


                self.state = 10224
                self.subquery()
                self.state = 10228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1352,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10225
                        self.attribute_modification() 
                    self.state = 10230
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1352,self._ctx)

                pass

            elif la_ == 9:
                localctx = TeradataSQLParser.ScalarLikeScalarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10231
                self.scalar_expr(0)
                self.state = 10233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10232
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10235
                self.match(TeradataSQLParser.LIKE)
                self.state = 10236
                self.scalar_expr(0)
                self.state = 10239
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1354,self._ctx)
                if la_ == 1:
                    self.state = 10237
                    self.match(TeradataSQLParser.ESCAPE)
                    self.state = 10238
                    self.scalar_expr(0)


                pass

            elif la_ == 10:
                localctx = TeradataSQLParser.ScalarLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10241
                self.scalar_expr(0)
                self.state = 10243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10242
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10245
                self.match(TeradataSQLParser.LIKE)
                self.state = 10246
                self.quantifier()
                self.state = 10247
                self.elements_list()
                self.state = 10251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1356,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10248
                        self.attribute_modification() 
                    self.state = 10253
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1356,self._ctx)

                self.state = 10256
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1357,self._ctx)
                if la_ == 1:
                    self.state = 10254
                    self.match(TeradataSQLParser.ESCAPE)
                    self.state = 10255
                    self.scalar_expr(0)


                self.state = 10261
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1358,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10258
                        self.attribute_modification() 
                    self.state = 10263
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1358,self._ctx)

                pass

            elif la_ == 11:
                localctx = TeradataSQLParser.TupleLikeListContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10264
                self.tuple_()
                self.state = 10266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10265
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10268
                self.match(TeradataSQLParser.LIKE)
                self.state = 10269
                self.quantifier()
                self.state = 10270
                self.elements_list()
                self.state = 10274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1360,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10271
                        self.attribute_modification() 
                    self.state = 10276
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1360,self._ctx)

                self.state = 10279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1361,self._ctx)
                if la_ == 1:
                    self.state = 10277
                    self.match(TeradataSQLParser.ESCAPE)
                    self.state = 10278
                    self.scalar_expr(0)


                self.state = 10284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1362,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 10281
                        self.attribute_modification() 
                    self.state = 10286
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1362,self._ctx)

                pass

            elif la_ == 12:
                localctx = TeradataSQLParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10287
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10290
                self.match(TeradataSQLParser.EXISTS)
                self.state = 10291
                self.subquery()
                pass

            elif la_ == 13:
                localctx = TeradataSQLParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10292
                _la = self._input.LA(1)
                if not(_la==272 or _la==1211):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10293
                self.logical_expr(13)
                pass

            elif la_ == 14:
                localctx = TeradataSQLParser.NullCheckContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10294
                self.scalar_expr(0)
                self.state = 10295
                self.match(TeradataSQLParser.IS)
                self.state = 10297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10296
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10299
                self.match(TeradataSQLParser.NULL)
                pass

            elif la_ == 15:
                localctx = TeradataSQLParser.PeriodContainsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10301
                self.scalar_expr(0)
                self.state = 10303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10302
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10305
                self.match(TeradataSQLParser.CONTAINS)
                self.state = 10306
                self.scalar_expr(0)
                pass

            elif la_ == 16:
                localctx = TeradataSQLParser.PeriodEqualsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10308
                self.scalar_expr(0)
                self.state = 10310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10309
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10312
                self.match(TeradataSQLParser.EQUALS)
                self.state = 10313
                self.scalar_expr(0)
                pass

            elif la_ == 17:
                localctx = TeradataSQLParser.PeriodMeetsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10315
                self.scalar_expr(0)
                self.state = 10317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10316
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10319
                self.match(TeradataSQLParser.MEETS)
                self.state = 10320
                self.scalar_expr(0)
                pass

            elif la_ == 18:
                localctx = TeradataSQLParser.PeriodPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10322
                self.scalar_expr(0)
                self.state = 10324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10323
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10326
                self.match(TeradataSQLParser.PRECEDES)
                self.state = 10327
                self.scalar_expr(0)
                pass

            elif la_ == 19:
                localctx = TeradataSQLParser.PeriodSucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10329
                self.scalar_expr(0)
                self.state = 10331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272 or _la==1211:
                    self.state = 10330
                    _la = self._input.LA(1)
                    if not(_la==272 or _la==1211):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10333
                self.match(TeradataSQLParser.SUCCEEDS)
                self.state = 10334
                self.scalar_expr(0)
                pass

            elif la_ == 20:
                localctx = TeradataSQLParser.PeriodImmediatelyPrecedesContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10336
                self.scalar_expr(0)
                self.state = 10337
                self.match(TeradataSQLParser.IMMEDIATELY)
                self.state = 10338
                self.match(TeradataSQLParser.PRECEDES)
                self.state = 10339
                self.scalar_expr(0)
                pass

            elif la_ == 21:
                localctx = TeradataSQLParser.PeriodImmediatelySucceedsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10341
                self.scalar_expr(0)
                self.state = 10342
                self.match(TeradataSQLParser.IMMEDIATELY)
                self.state = 10343
                self.match(TeradataSQLParser.SUCCEEDS)
                self.state = 10344
                self.scalar_expr(0)
                pass

            elif la_ == 22:
                localctx = TeradataSQLParser.PeriodOverlapsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10354
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1370,self._ctx)
                if la_ == 1:
                    self.state = 10346
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 10347
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 10348
                    self.scalar_expr(0)
                    self.state = 10349
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 10350
                    self.scalar_expr(0)
                    self.state = 10351
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 10353
                    self.subquery()
                    pass


                self.state = 10356
                self.match(TeradataSQLParser.OVERLAPS)
                self.state = 10365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1371,self._ctx)
                if la_ == 1:
                    self.state = 10357
                    self.scalar_expr(0)
                    pass

                elif la_ == 2:
                    self.state = 10358
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 10359
                    self.scalar_expr(0)
                    self.state = 10360
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 10361
                    self.scalar_expr(0)
                    self.state = 10362
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass

                elif la_ == 3:
                    self.state = 10364
                    self.subquery()
                    pass


                pass

            elif la_ == 23:
                localctx = TeradataSQLParser.ParenthesizedLogicalExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10367
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 10368
                self.logical_expr(0)
                self.state = 10369
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 10381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1374,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 10379
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1373,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLParser.LogicalAndContext(self, TeradataSQLParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 10373
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 10374
                        self.match(TeradataSQLParser.AND)
                        self.state = 10375
                        self.logical_expr(13)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLParser.LogicalOrContext(self, TeradataSQLParser.Logical_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                        self.state = 10376
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 10377
                        self.match(TeradataSQLParser.OR)
                        self.state = 10378
                        self.logical_expr(12)
                        pass

             
                self.state = 10383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1374,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Scalar_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_scalar_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class JsonMetadataContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.storage_format = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def METADATA(self):
            return self.getToken(TeradataSQLParser.METADATA, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def STORAGE_SIZE(self):
            return self.getToken(TeradataSQLParser.STORAGE_SIZE, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMetadata" ):
                listener.enterJsonMetadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMetadata" ):
                listener.exitJsonMetadata(self)


    class JsonAsBsonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.validation_specification = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def ASBSON(self):
            return self.getToken(TeradataSQLParser.ASBSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBson" ):
                listener.enterJsonAsBson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBson" ):
                listener.exitJsonAsBson(self)


    class VariantTypeConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLParser.NEW, 0)
        def VARIANT_TYPE(self):
            return self.getToken(TeradataSQLParser.VARIANT_TYPE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def alias_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Alias_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)
        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.AS)
            else:
                return self.getToken(TeradataSQLParser.AS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariantTypeConstructor" ):
                listener.enterVariantTypeConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariantTypeConstructor" ):
                listener.exitVariantTypeConstructor(self)


    class XMLExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def XMLEXTRACT(self):
            return self.getToken(TeradataSQLParser.XMLEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExtract" ):
                listener.enterXMLExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExtract" ):
                listener.exitXMLExtract(self)


    class ArrayComparisonContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def ARRAY_GT(self):
            return self.getToken(TeradataSQLParser.ARRAY_GT, 0)
        def ARRAY_GE(self):
            return self.getToken(TeradataSQLParser.ARRAY_GE, 0)
        def ARRAY_LT(self):
            return self.getToken(TeradataSQLParser.ARRAY_LT, 0)
        def ARRAY_LE(self):
            return self.getToken(TeradataSQLParser.ARRAY_LE, 0)
        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLParser.ARRAY_EQ, 0)
        def ARRAY_NE(self):
            return self.getToken(TeradataSQLParser.ARRAY_NE, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayComparison" ):
                listener.enterArrayComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayComparison" ):
                listener.exitArrayComparison(self)


    class ArrayGetContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.array_index = None # Scalar_exprContext
            self.other_expr = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def ARRAY_GET(self):
            return self.getToken(TeradataSQLParser.ARRAY_GET, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLParser.ARRAY_COMPARE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayGet" ):
                listener.enterArrayGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayGet" ):
                listener.exitArrayGet(self)


    class XMLConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLParser.NEW, 0)
        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLConstructor" ):
                listener.enterXMLConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLConstructor" ):
                listener.exitXMLConstructor(self)


    class UDTMethodInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def method_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Method_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTMethodInvocation" ):
                listener.enterUDTMethodInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTMethodInvocation" ):
                listener.exitUDTMethodInvocation(self)


    class JsonExtractLargeValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def JSONEXTRACTLARGEVALUE(self):
            return self.getToken(TeradataSQLParser.JSONEXTRACTLARGEVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractLargeValue" ):
                listener.enterJsonExtractLargeValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractLargeValue" ):
                listener.exitJsonExtractLargeValue(self)


    class JsonRecursiveDescendSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DOT_)
            else:
                return self.getToken(TeradataSQLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COLON)
            else:
                return self.getToken(TeradataSQLParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendSlice" ):
                listener.enterJsonRecursiveDescendSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendSlice" ):
                listener.exitJsonRecursiveDescendSlice(self)


    class FunctionInvocationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_invocation(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_invocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionInvocation" ):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionInvocation" ):
                listener.exitFunctionInvocation(self)


    class ScalarSubqueryContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarSubquery" ):
                listener.enterScalarSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarSubquery" ):
                listener.exitScalarSubquery(self)


    class JsonExistValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def EXISTVALUE(self):
            return self.getToken(TeradataSQLParser.EXISTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExistValue" ):
                listener.enterJsonExistValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExistValue" ):
                listener.exitJsonExistValue(self)


    class ModuloContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def MOD(self):
            return self.getToken(TeradataSQLParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModulo" ):
                listener.enterModulo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModulo" ):
                listener.exitModulo(self)


    class JsonExtractValueContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def JSONEXTRACTVALUE(self):
            return self.getToken(TeradataSQLParser.JSONEXTRACTVALUE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtractValue" ):
                listener.enterJsonExtractValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtractValue" ):
                listener.exitJsonExtractValue(self)


    class XMLCreateSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def CREATESCHEMABASEDXML(self):
            return self.getToken(TeradataSQLParser.CREATESCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateSchemaBasedXML" ):
                listener.enterXMLCreateSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateSchemaBasedXML" ):
                listener.exitXMLCreateSchemaBasedXML(self)


    class ArrayUpdateContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLParser.ARRAY_UPDATE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_scope_referenceContext,0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdate" ):
                listener.enterArrayUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdate" ):
                listener.exitArrayUpdate(self)


    class JsonExtractContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_path_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def JSONEXTRACT(self):
            return self.getToken(TeradataSQLParser.JSONEXTRACT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExtract" ):
                listener.enterJsonExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExtract" ):
                listener.exitJsonExtract(self)


    class MultDivContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)
        def DIV_SIGN(self):
            return self.getToken(TeradataSQLParser.DIV_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultDiv" ):
                listener.enterMultDiv(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultDiv" ):
                listener.exitMultDiv(self)


    class PeriodIntersectContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def P_INTERSECT(self):
            return self.getToken(TeradataSQLParser.P_INTERSECT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodIntersect" ):
                listener.enterPeriodIntersect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodIntersect" ):
                listener.exitPeriodIntersect(self)


    class IntervalExprParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval_expr_parenthesized(self):
            return self.getTypedRuleContext(TeradataSQLParser.Interval_expr_parenthesizedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExprParenthesized" ):
                listener.enterIntervalExprParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExprParenthesized" ):
                listener.exitIntervalExprParenthesized(self)


    class JsonRecursiveDescendAllArrayElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DOT_)
            else:
                return self.getToken(TeradataSQLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllArrayElements" ):
                listener.enterJsonRecursiveDescendAllArrayElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllArrayElements" ):
                listener.exitJsonRecursiveDescendAllArrayElements(self)


    class UnaryPlusMinusContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusMinus" ):
                listener.enterUnaryPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusMinus" ):
                listener.exitUnaryPlusMinus(self)


    class ConcatenationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def CONCATENATE(self):
            return self.getToken(TeradataSQLParser.CONCATENATE, 0)
        def BROKEN_CONCATENATE(self):
            return self.getToken(TeradataSQLParser.BROKEN_CONCATENATE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)


    class PeriodDiffContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def LDIFF(self):
            return self.getToken(TeradataSQLParser.LDIFF, 0)
        def RDIFF(self):
            return self.getToken(TeradataSQLParser.RDIFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriodDiff" ):
                listener.enterPeriodDiff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriodDiff" ):
                listener.exitPeriodDiff(self)


    class ArrayOmethodWithoudArgsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def OCOUNT(self):
            return self.getToken(TeradataSQLParser.OCOUNT, 0)
        def OLIMIT(self):
            return self.getToken(TeradataSQLParser.OLIMIT, 0)
        def OFIRST(self):
            return self.getToken(TeradataSQLParser.OFIRST, 0)
        def OLAST(self):
            return self.getToken(TeradataSQLParser.OLAST, 0)
        def ODELETE(self):
            return self.getToken(TeradataSQLParser.ODELETE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithoudArgs" ):
                listener.enterArrayOmethodWithoudArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithoudArgs" ):
                listener.exitArrayOmethodWithoudArgs(self)


    class PartitioningExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def partitioning_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Partitioning_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioningExpr" ):
                listener.enterPartitioningExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioningExpr" ):
                listener.exitPartitioningExpr(self)


    class XMLExistNodeContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.filter_ = None # Scalar_exprContext
            self.query = None # Scalar_exprContext
            self.nsmap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def EXISTSNODE(self):
            return self.getToken(TeradataSQLParser.EXISTSNODE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLExistNode" ):
                listener.enterXMLExistNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLExistNode" ):
                listener.exitXMLExistNode(self)


    class JsonRecursiveDescendArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DOT_)
            else:
                return self.getToken(TeradataSQLParser.DOT_, i)
        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendArrayElementReference" ):
                listener.enterJsonRecursiveDescendArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendArrayElementReference" ):
                listener.exitJsonRecursiveDescendArrayElementReference(self)


    class DataTypeConversionContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def teradata_type_conversion(self):
            return self.getTypedRuleContext(TeradataSQLParser.Teradata_type_conversionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeConversion" ):
                listener.enterDataTypeConversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeConversion" ):
                listener.exitDataTypeConversion(self)


    class JsonRecursiveDescendObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DOT_)
            else:
                return self.getToken(TeradataSQLParser.DOT_, i)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendObjectMember" ):
                listener.enterJsonRecursiveDescendObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendObjectMember" ):
                listener.exitJsonRecursiveDescendObjectMember(self)


    class IntervalExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)
        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Interval_expr_start_end_phraseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)


    class ExponentiationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def EXPONENTIATION(self):
            return self.getToken(TeradataSQLParser.EXPONENTIATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentiation" ):
                listener.enterExponentiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentiation" ):
                listener.exitExponentiation(self)


    class XMLIsSchemaValidatedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def ISSCHEMAVALIDATED(self):
            return self.getToken(TeradataSQLParser.ISSCHEMAVALIDATED, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValidated" ):
                listener.enterXMLIsSchemaValidated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValidated" ):
                listener.exitXMLIsSchemaValidated(self)


    class JSONConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.json_data = None # Scalar_exprContext
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLParser.NEW, 0)
        def JSON(self):
            return self.getToken(TeradataSQLParser.JSON, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)
        def LATIN(self):
            return self.getToken(TeradataSQLParser.LATIN, 0)
        def UNICODE(self):
            return self.getToken(TeradataSQLParser.UNICODE, 0)
        def BSON(self):
            return self.getToken(TeradataSQLParser.BSON, 0)
        def UBJSON(self):
            return self.getToken(TeradataSQLParser.UBJSON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJSONConstructor" ):
                listener.enterJSONConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJSONConstructor" ):
                listener.exitJSONConstructor(self)


    class JsonSliceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.from_index = None # Integer_literalContext
            self.to_index = None # Integer_literalContext
            self.step_size = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.OPEN_SQ_BRACKET, 0)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COLON)
            else:
                return self.getToken(TeradataSQLParser.COLON, i)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonSlice" ):
                listener.enterJsonSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonSlice" ):
                listener.exitJsonSlice(self)


    class XMLIsSchemaValidContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.schema = None # Scalar_exprContext
            self.elem_decl = None # Scalar_exprContext
            self.ns = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def ISSCHEMAVALID(self):
            return self.getToken(TeradataSQLParser.ISSCHEMAVALID, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsSchemaValid" ):
                listener.enterXMLIsSchemaValid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsSchemaValid" ):
                listener.exitXMLIsSchemaValid(self)


    class ArrayAggregationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.matching_expr = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLParser.ARRAY_SUM, 0)
        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLParser.ARRAY_AVG, 0)
        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLParser.ARRAY_MAX, 0)
        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLParser.ARRAY_MIN, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_scope_referenceContext,0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLParser.ARRAY_COUNT_DISTINCT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAggregation" ):
                listener.enterArrayAggregation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAggregation" ):
                listener.exitArrayAggregation(self)


    class ArrayUpdateStrideContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.array_index = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLParser.ARRAY_UPDATE_STRIDE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)

        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayUpdateStride" ):
                listener.enterArrayUpdateStride(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayUpdateStride" ):
                listener.exitArrayUpdateStride(self)


    class LiteralExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpr" ):
                listener.enterLiteralExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpr" ):
                listener.exitLiteralExpr(self)


    class ArrayOmethodWithArgContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def OEXISTS(self):
            return self.getToken(TeradataSQLParser.OEXISTS, 0)
        def OPRIOR(self):
            return self.getToken(TeradataSQLParser.OPRIOR, 0)
        def ONEXT(self):
            return self.getToken(TeradataSQLParser.ONEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOmethodWithArg" ):
                listener.enterArrayOmethodWithArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOmethodWithArg" ):
                listener.exitArrayOmethodWithArg(self)


    class JsonRecursiveDescendAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.DOT_)
            else:
                return self.getToken(TeradataSQLParser.DOT_, i)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonRecursiveDescendAllObjectMembers" ):
                listener.enterJsonRecursiveDescendAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonRecursiveDescendAllObjectMembers" ):
                listener.exitJsonRecursiveDescendAllObjectMembers(self)


    class XMLCreateNonSchemaBasedXMLContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def CREATENONSCHEMABASEDXML(self):
            return self.getToken(TeradataSQLParser.CREATENONSCHEMABASEDXML, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLCreateNonSchemaBasedXML" ):
                listener.enterXMLCreateNonSchemaBasedXML(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLCreateNonSchemaBasedXML" ):
                listener.exitXMLCreateNonSchemaBasedXML(self)


    class VariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableReference" ):
                listener.enterVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableReference" ):
                listener.exitVariableReference(self)


    class AddSubContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def PLUS_SIGN(self):
            return self.getToken(TeradataSQLParser.PLUS_SIGN, 0)
        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSub" ):
                listener.enterAddSub(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSub" ):
                listener.exitAddSub(self)


    class JsonObjectMemberContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.name = None # Unqualified_nameContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonObjectMember" ):
                listener.enterJsonObjectMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonObjectMember" ):
                listener.exitJsonObjectMember(self)


    class JsonAllElementsContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.OPEN_SQ_BRACKET, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.CLOSE_SQ_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllElements" ):
                listener.enterJsonAllElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllElements" ):
                listener.exitJsonAllElements(self)


    class ArrayOextendContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def OEXTEND(self):
            return self.getToken(TeradataSQLParser.OEXTEND, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOextend" ):
                listener.enterArrayOextend(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOextend" ):
                listener.exitArrayOextend(self)


    class ArrayArithmeticContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLParser.ARRAY_ADD, 0)
        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLParser.ARRAY_SUB, 0)
        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLParser.ARRAY_MUL, 0)
        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLParser.ARRAY_DIV, 0)
        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLParser.ARRAY_MOD, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_scope_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayArithmetic" ):
                listener.enterArrayArithmetic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayArithmetic" ):
                listener.exitArrayArithmetic(self)


    class UDTConstructorContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(TeradataSQLParser.NEW, 0)
        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUDTConstructor" ):
                listener.enterUDTConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUDTConstructor" ):
                listener.exitUDTConstructor(self)


    class XMLTransformContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.xsl = None # Scalar_exprContext
            self.parammap = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def XMLTRANSFORM(self):
            return self.getToken(TeradataSQLParser.XMLTRANSFORM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLTransform" ):
                listener.enterXMLTransform(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLTransform" ):
                listener.exitXMLTransform(self)


    class DateTimeExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLParser.At_timezoneContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeExpr" ):
                listener.enterDateTimeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeExpr" ):
                listener.exitDateTimeExpr(self)


    class ColumnNameContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnName" ):
                listener.enterColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnName" ):
                listener.exitColumnName(self)


    class ArrayOtrimContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.num_remove = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def OTRIM(self):
            return self.getToken(TeradataSQLParser.OTRIM, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayOtrim" ):
                listener.enterArrayOtrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayOtrim" ):
                listener.exitArrayOtrim(self)


    class CursorVariableReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cursor_variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Cursor_variable_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursorVariableReference" ):
                listener.enterCursorVariableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursorVariableReference" ):
                listener.exitCursorVariableReference(self)


    class ParenthesizedContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesized" ):
                listener.enterParenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesized" ):
                listener.exitParenthesized(self)


    class JsonAsBsonTextContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def ASBSONTEXT(self):
            return self.getToken(TeradataSQLParser.ASBSONTEXT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAsBsonText" ):
                listener.enterJsonAsBsonText(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAsBsonText" ):
                listener.exitJsonAsBsonText(self)


    class AttributeModificationContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def attribute_modification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modificationContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modificationContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeModification" ):
                listener.enterAttributeModification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeModification" ):
                listener.exitAttributeModification(self)


    class JsonCombineContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.array_or_object = None # Char_string_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def COMBINE(self):
            return self.getToken(TeradataSQLParser.COMBINE, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)
        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonCombine" ):
                listener.enterJsonCombine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonCombine" ):
                listener.exitJsonCombine(self)


    class XMLIsDocumentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def ISDOCUMENT(self):
            return self.getToken(TeradataSQLParser.ISDOCUMENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsDocument" ):
                listener.enterXMLIsDocument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsDocument" ):
                listener.exitXMLIsDocument(self)


    class MacroParameterReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def macro_parameter_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Macro_parameter_referenceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroParameterReference" ):
                listener.enterMacroParameterReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroParameterReference" ):
                listener.exitMacroParameterReference(self)


    class XMLIsContentContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def ISCONTENT(self):
            return self.getToken(TeradataSQLParser.ISCONTENT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXMLIsContent" ):
                listener.enterXMLIsContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXMLIsContent" ):
                listener.exitXMLIsContent(self)


    class ArrayElementReferenceContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self._integer_literal = None # Integer_literalContext
            self.index_value = list() # of Integer_literalContexts
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def OPEN_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.OPEN_SQ_BRACKET, 0)
        def CLOSE_SQ_BRACKET(self):
            return self.getToken(TeradataSQLParser.CLOSE_SQ_BRACKET, 0)
        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElementReference" ):
                listener.enterArrayElementReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElementReference" ):
                listener.exitArrayElementReference(self)


    class ArrayCardinalityContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.other_array = None # Scalar_exprContext
            self.copyFrom(ctx)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def CARDINALITY(self):
            return self.getToken(TeradataSQLParser.CARDINALITY, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def array_scope_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_scope_referenceContext,0)

        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLParser.ARRAY_CONCAT, 0)
        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCardinality" ):
                listener.enterArrayCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCardinality" ):
                listener.exitArrayCardinality(self)


    class CaseExprContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def case_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Case_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)


    class JsonKeycountContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.depth = None # Integer_literalContext
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def KEYCOUNT(self):
            return self.getToken(TeradataSQLParser.KEYCOUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonKeycount" ):
                listener.enterJsonKeycount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonKeycount" ):
                listener.exitJsonKeycount(self)


    class JsonAllObjectMembersContext(Scalar_exprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Scalar_exprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonAllObjectMembers" ):
                listener.enterJsonAllObjectMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonAllObjectMembers" ):
                listener.exitJsonAllObjectMembers(self)



    def scalar_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TeradataSQLParser.Scalar_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 1000
        self.enterRecursionRule(localctx, 1000, self.RULE_scalar_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1384,self._ctx)
            if la_ == 1:
                localctx = TeradataSQLParser.LiteralExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 10385
                self.literal()
                pass

            elif la_ == 2:
                localctx = TeradataSQLParser.UnaryPlusMinusContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10386
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1221 or _la==1222):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10387
                self.scalar_expr(70)
                pass

            elif la_ == 3:
                localctx = TeradataSQLParser.CaseExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10388
                self.case_expr()
                pass

            elif la_ == 4:
                localctx = TeradataSQLParser.PartitioningExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10389
                self.partitioning_expr()
                pass

            elif la_ == 5:
                localctx = TeradataSQLParser.ColumnNameContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10390
                self.column_name()
                pass

            elif la_ == 6:
                localctx = TeradataSQLParser.IntervalExprParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10391
                self.interval_expr_parenthesized()
                pass

            elif la_ == 7:
                localctx = TeradataSQLParser.VariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10392
                self.variable_reference()
                pass

            elif la_ == 8:
                localctx = TeradataSQLParser.CursorVariableReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10393
                self.cursor_variable_reference()
                pass

            elif la_ == 9:
                localctx = TeradataSQLParser.MacroParameterReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10394
                self.macro_parameter_reference()
                pass

            elif la_ == 10:
                localctx = TeradataSQLParser.UDTConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10395
                self.match(TeradataSQLParser.NEW)
                self.state = 10397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1375,self._ctx)
                if la_ == 1:
                    self.state = 10396
                    self.sysudtlib()


                self.state = 10399
                self.udt_name()
                self.state = 10400
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 10409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                    self.state = 10401
                    self.scalar_expr(0)
                    self.state = 10406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 10402
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 10403
                        self.scalar_expr(0)
                        self.state = 10408
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 10411
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                localctx = TeradataSQLParser.JSONConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10413
                self.match(TeradataSQLParser.NEW)
                self.state = 10414
                self.match(TeradataSQLParser.JSON)
                self.state = 10415
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 10416
                localctx.json_data = self.scalar_expr(0)
                self.state = 10419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 10417
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 10418
                    _la = self._input.LA(1)
                    if not(_la==556 or _la==735 or _la==1010 or _la==1015):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 10421
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                localctx = TeradataSQLParser.VariantTypeConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10423
                self.match(TeradataSQLParser.NEW)
                self.state = 10424
                self.match(TeradataSQLParser.VARIANT_TYPE)
                self.state = 10425
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 10426
                self.scalar_expr(0)
                self.state = 10431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 10428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 10427
                        self.match(TeradataSQLParser.AS)


                    self.state = 10430
                    self.alias_name()


                self.state = 10443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 10433
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 10434
                    self.scalar_expr(0)
                    self.state = 10439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                        self.state = 10436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==20:
                            self.state = 10435
                            self.match(TeradataSQLParser.AS)


                        self.state = 10438
                        self.alias_name()


                    self.state = 10445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 10446
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                localctx = TeradataSQLParser.XMLConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10448
                self.match(TeradataSQLParser.NEW)
                self.state = 10449
                self.match(TeradataSQLParser.XML)
                self.state = 10450
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 10451
                self.scalar_expr(0)
                self.state = 10452
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                localctx = TeradataSQLParser.FunctionInvocationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10454
                self.function_invocation()
                pass

            elif la_ == 15:
                localctx = TeradataSQLParser.ParenthesizedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10455
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 10456
                self.scalar_expr(0)
                self.state = 10457
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                localctx = TeradataSQLParser.ScalarSubqueryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 10459
                self.subquery()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 10867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1410,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 10865
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1409,self._ctx)
                    if la_ == 1:
                        localctx = TeradataSQLParser.ExponentiationContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10462
                        if not self.precpred(self._ctx, 69):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 69)")
                        self.state = 10463
                        self.match(TeradataSQLParser.EXPONENTIATION)
                        self.state = 10464
                        self.scalar_expr(69)
                        pass

                    elif la_ == 2:
                        localctx = TeradataSQLParser.MultDivContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10465
                        if not self.precpred(self._ctx, 68):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 68)")
                        self.state = 10466
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1219 or _la==1220):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10467
                        self.scalar_expr(69)
                        pass

                    elif la_ == 3:
                        localctx = TeradataSQLParser.ModuloContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10468
                        if not self.precpred(self._ctx, 67):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 67)")
                        self.state = 10469
                        self.match(TeradataSQLParser.MOD)
                        self.state = 10470
                        self.scalar_expr(67)
                        pass

                    elif la_ == 4:
                        localctx = TeradataSQLParser.AddSubContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10471
                        if not self.precpred(self._ctx, 66):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 66)")
                        self.state = 10472
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==1221 or _la==1222):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10473
                        self.scalar_expr(67)
                        pass

                    elif la_ == 5:
                        localctx = TeradataSQLParser.ConcatenationContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10474
                        if not self.precpred(self._ctx, 65):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 65)")
                        self.state = 10475
                        _la = self._input.LA(1)
                        if not(_la==1217 or _la==1218):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10476
                        self.scalar_expr(66)
                        pass

                    elif la_ == 6:
                        localctx = TeradataSQLParser.PeriodIntersectContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10477
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 10478
                        self.match(TeradataSQLParser.P_INTERSECT)
                        self.state = 10479
                        self.scalar_expr(58)
                        pass

                    elif la_ == 7:
                        localctx = TeradataSQLParser.PeriodDiffContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10480
                        if not self.precpred(self._ctx, 56):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 10481
                        _la = self._input.LA(1)
                        if not(_la==736 or _la==876):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10482
                        self.scalar_expr(57)
                        pass

                    elif la_ == 8:
                        localctx = TeradataSQLParser.DateTimeExprContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10483
                        if not self.precpred(self._ctx, 61):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 61)")
                        self.state = 10484
                        self.at_timezone()
                        pass

                    elif la_ == 9:
                        localctx = TeradataSQLParser.IntervalExprContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10485
                        if not self.precpred(self._ctx, 60):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 60)")
                        self.state = 10486
                        self.match(TeradataSQLParser.MINUS_SIGN)
                        self.state = 10487
                        self.scalar_expr(0)
                        self.state = 10488
                        self.interval_expr_start_end_phrase()
                        pass

                    elif la_ == 10:
                        localctx = TeradataSQLParser.AttributeModificationContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10490
                        if not self.precpred(self._ctx, 58):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 10492 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 10491
                                self.attribute_modification()

                            else:
                                raise NoViableAltException(self)
                            self.state = 10494 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,1385,self._ctx)

                        pass

                    elif la_ == 11:
                        localctx = TeradataSQLParser.JsonObjectMemberContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10496
                        if not self.precpred(self._ctx, 52):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 10497
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10498
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 12:
                        localctx = TeradataSQLParser.JsonAllObjectMembersContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10499
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 10500
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10501
                        self.match(TeradataSQLParser.MUL_SIGN)
                        pass

                    elif la_ == 13:
                        localctx = TeradataSQLParser.JsonAllElementsContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10502
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 10503
                        self.match(TeradataSQLParser.OPEN_SQ_BRACKET)
                        self.state = 10504
                        self.match(TeradataSQLParser.MUL_SIGN)
                        self.state = 10505
                        self.match(TeradataSQLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 14:
                        localctx = TeradataSQLParser.JsonSliceContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10506
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 10507
                        self.match(TeradataSQLParser.OPEN_SQ_BRACKET)
                        self.state = 10508
                        localctx.from_index = self.integer_literal()
                        self.state = 10509
                        self.match(TeradataSQLParser.COLON)
                        self.state = 10510
                        localctx.to_index = self.integer_literal()
                        self.state = 10513
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 10511
                            self.match(TeradataSQLParser.COLON)
                            self.state = 10512
                            localctx.step_size = self.integer_literal()


                        self.state = 10515
                        self.match(TeradataSQLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 15:
                        localctx = TeradataSQLParser.JsonRecursiveDescendObjectMemberContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10517
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 10518
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10519
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10520
                        localctx.name = self.unqualified_name()
                        pass

                    elif la_ == 16:
                        localctx = TeradataSQLParser.JsonRecursiveDescendAllObjectMembersContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10521
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 10522
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10523
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10524
                        self.match(TeradataSQLParser.MUL_SIGN)
                        pass

                    elif la_ == 17:
                        localctx = TeradataSQLParser.JsonRecursiveDescendArrayElementReferenceContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10525
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 10526
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10527
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10528
                        self.match(TeradataSQLParser.OPEN_SQ_BRACKET)
                        self.state = 10529
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 10530
                        self.match(TeradataSQLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 18:
                        localctx = TeradataSQLParser.JsonRecursiveDescendAllArrayElementsContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10532
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 10533
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10534
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10535
                        self.match(TeradataSQLParser.OPEN_SQ_BRACKET)
                        self.state = 10536
                        self.match(TeradataSQLParser.MUL_SIGN)
                        self.state = 10537
                        self.match(TeradataSQLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 19:
                        localctx = TeradataSQLParser.JsonRecursiveDescendSliceContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10538
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 10539
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10540
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10541
                        self.match(TeradataSQLParser.OPEN_SQ_BRACKET)
                        self.state = 10542
                        localctx.from_index = self.integer_literal()
                        self.state = 10543
                        self.match(TeradataSQLParser.COLON)
                        self.state = 10544
                        localctx.to_index = self.integer_literal()
                        self.state = 10547
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1207:
                            self.state = 10545
                            self.match(TeradataSQLParser.COLON)
                            self.state = 10546
                            localctx.step_size = self.integer_literal()


                        self.state = 10549
                        self.match(TeradataSQLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 20:
                        localctx = TeradataSQLParser.JsonAsBsonContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10551
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 10552
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10553
                        self.match(TeradataSQLParser.ASBSON)
                        self.state = 10554
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10556
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or _la==1203:
                            self.state = 10555
                            localctx.validation_specification = self.char_string_literal()


                        self.state = 10558
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 21:
                        localctx = TeradataSQLParser.JsonAsBsonTextContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10559
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 10560
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10561
                        self.match(TeradataSQLParser.ASBSONTEXT)
                        self.state = 10562
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10563
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 22:
                        localctx = TeradataSQLParser.JsonCombineContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10564
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 10565
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10566
                        self.match(TeradataSQLParser.COMBINE)
                        self.state = 10567
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10568
                        self.scalar_expr(0)
                        self.state = 10571
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10569
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 10570
                            localctx.array_or_object = self.char_string_literal()


                        self.state = 10573
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 23:
                        localctx = TeradataSQLParser.JsonExistValueContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10575
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 10576
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10577
                        self.match(TeradataSQLParser.EXISTVALUE)
                        self.state = 10578
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10579
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 10580
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 24:
                        localctx = TeradataSQLParser.JsonExtractContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10582
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 10583
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10584
                        self.match(TeradataSQLParser.JSONEXTRACT)
                        self.state = 10585
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10586
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 10587
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 25:
                        localctx = TeradataSQLParser.JsonExtractValueContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10589
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 10590
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10591
                        self.match(TeradataSQLParser.JSONEXTRACTVALUE)
                        self.state = 10592
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10593
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 10594
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 26:
                        localctx = TeradataSQLParser.JsonExtractLargeValueContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10596
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 10597
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10598
                        self.match(TeradataSQLParser.JSONEXTRACTLARGEVALUE)
                        self.state = 10599
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10600
                        localctx.json_path_expr = self.scalar_expr(0)
                        self.state = 10601
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 27:
                        localctx = TeradataSQLParser.JsonKeycountContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10603
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 10604
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10605
                        self.match(TeradataSQLParser.KEYCOUNT)
                        self.state = 10606
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10607
                        localctx.depth = self.integer_literal()
                        self.state = 10608
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 28:
                        localctx = TeradataSQLParser.JsonMetadataContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10610
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 10611
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10612
                        self.match(TeradataSQLParser.METADATA)
                        self.state = 10613
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10614
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 29:
                        localctx = TeradataSQLParser.JsonMetadataContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10615
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 10616
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10617
                        self.match(TeradataSQLParser.STORAGE_SIZE)
                        self.state = 10618
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10619
                        localctx.storage_format = self.char_string_literal()
                        self.state = 10620
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 30:
                        localctx = TeradataSQLParser.XMLCreateSchemaBasedXMLContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10622
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 10623
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10624
                        self.match(TeradataSQLParser.CREATESCHEMABASEDXML)
                        self.state = 10625
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10626
                        localctx.schema = self.scalar_expr(0)
                        self.state = 10627
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 31:
                        localctx = TeradataSQLParser.XMLCreateNonSchemaBasedXMLContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10629
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 10630
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10631
                        self.match(TeradataSQLParser.CREATENONSCHEMABASEDXML)
                        self.state = 10632
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10633
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 32:
                        localctx = TeradataSQLParser.XMLExistNodeContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10634
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 10635
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10636
                        self.match(TeradataSQLParser.EXISTSNODE)
                        self.state = 10637
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10641
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1390,self._ctx)
                        if la_ == 1:
                            self.state = 10638
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 10639
                            self.match(TeradataSQLParser.COMMA)


                        self.state = 10643
                        localctx.query = self.scalar_expr(0)
                        self.state = 10644
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 10645
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 10646
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 33:
                        localctx = TeradataSQLParser.XMLIsContentContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10648
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 10649
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10650
                        self.match(TeradataSQLParser.ISCONTENT)
                        self.state = 10651
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10652
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 34:
                        localctx = TeradataSQLParser.XMLIsDocumentContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10653
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 10654
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10655
                        self.match(TeradataSQLParser.ISDOCUMENT)
                        self.state = 10656
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10657
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 35:
                        localctx = TeradataSQLParser.XMLIsSchemaValidContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10658
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 10659
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10660
                        self.match(TeradataSQLParser.ISSCHEMAVALID)
                        self.state = 10661
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10662
                        localctx.schema = self.scalar_expr(0)
                        self.state = 10663
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 10664
                        localctx.elem_decl = self.scalar_expr(0)
                        self.state = 10665
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 10666
                        localctx.ns = self.scalar_expr(0)
                        self.state = 10667
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 36:
                        localctx = TeradataSQLParser.XMLIsSchemaValidatedContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10669
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 10670
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10671
                        self.match(TeradataSQLParser.ISSCHEMAVALIDATED)
                        self.state = 10672
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10673
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 37:
                        localctx = TeradataSQLParser.XMLExtractContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10674
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 10675
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10676
                        self.match(TeradataSQLParser.XMLEXTRACT)
                        self.state = 10677
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10681
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1391,self._ctx)
                        if la_ == 1:
                            self.state = 10678
                            localctx.filter_ = self.scalar_expr(0)
                            self.state = 10679
                            self.match(TeradataSQLParser.COMMA)


                        self.state = 10683
                        localctx.query = self.scalar_expr(0)
                        self.state = 10684
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 10685
                        localctx.nsmap = self.scalar_expr(0)
                        self.state = 10686
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 38:
                        localctx = TeradataSQLParser.XMLTransformContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10688
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 10689
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10690
                        self.match(TeradataSQLParser.XMLTRANSFORM)
                        self.state = 10691
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10692
                        localctx.xsl = self.scalar_expr(0)
                        self.state = 10693
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 10694
                        localctx.parammap = self.scalar_expr(0)
                        self.state = 10695
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 39:
                        localctx = TeradataSQLParser.ArrayElementReferenceContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10697
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 10698
                        self.match(TeradataSQLParser.OPEN_SQ_BRACKET)
                        self.state = 10699
                        localctx._integer_literal = self.integer_literal()
                        localctx.index_value.append(localctx._integer_literal)
                        self.state = 10704
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 10700
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 10701
                            localctx._integer_literal = self.integer_literal()
                            localctx.index_value.append(localctx._integer_literal)
                            self.state = 10706
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 10707
                        self.match(TeradataSQLParser.CLOSE_SQ_BRACKET)
                        pass

                    elif la_ == 40:
                        localctx = TeradataSQLParser.ArrayCardinalityContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10709
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 10710
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10711
                        self.match(TeradataSQLParser.CARDINALITY)
                        self.state = 10712
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10714
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 10713
                            self.array_scope_reference()


                        self.state = 10716
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 41:
                        localctx = TeradataSQLParser.ArrayCardinalityContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10717
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 10718
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10719
                        self.match(TeradataSQLParser.ARRAY_CONCAT)
                        self.state = 10720
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10721
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 10724
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10722
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 10723
                            self.array_scope_reference()


                        self.state = 10726
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 42:
                        localctx = TeradataSQLParser.ArrayComparisonContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10728
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 10729
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10730
                        _la = self._input.LA(1)
                        if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10731
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10732
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 10735
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10733
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 10734
                            self.array_scope_reference()


                        self.state = 10737
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 43:
                        localctx = TeradataSQLParser.ArrayArithmeticContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10739
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 10740
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10741
                        _la = self._input.LA(1)
                        if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10742
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10743
                        localctx.other_array = self.scalar_expr(0)
                        self.state = 10746
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10744
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 10745
                            self.array_scope_reference()


                        self.state = 10748
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 44:
                        localctx = TeradataSQLParser.ArrayAggregationContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10750
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 10751
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10752
                        _la = self._input.LA(1)
                        if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10753
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10755
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 10754
                            self.array_scope_reference()


                        self.state = 10757
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 45:
                        localctx = TeradataSQLParser.ArrayAggregationContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10758
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 10759
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10760
                        self.match(TeradataSQLParser.ARRAY_COUNT_DISTINCT)
                        self.state = 10761
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10767
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 10762
                            self.array_scope_reference()
                            self.state = 10765
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 10763
                                self.match(TeradataSQLParser.COMMA)
                                self.state = 10764
                                localctx.matching_expr = self.scalar_expr(0)




                        self.state = 10769
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 46:
                        localctx = TeradataSQLParser.ArrayGetContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10770
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 10771
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10772
                        self.match(TeradataSQLParser.ARRAY_GET)
                        self.state = 10773
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10774
                        localctx.array_index = self.scalar_expr(0)
                        self.state = 10775
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 47:
                        localctx = TeradataSQLParser.ArrayGetContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10777
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 10778
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10779
                        self.match(TeradataSQLParser.ARRAY_COMPARE)
                        self.state = 10780
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10781
                        localctx.other_expr = self.scalar_expr(0)
                        self.state = 10788
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10782
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 10783
                            self.array_scope_reference()
                            self.state = 10786
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1208:
                                self.state = 10784
                                self.match(TeradataSQLParser.COMMA)
                                self.state = 10785
                                localctx.nulls_equal_flag = self.integer_literal()




                        self.state = 10790
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 48:
                        localctx = TeradataSQLParser.ArrayUpdateContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10792
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 10793
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10794
                        self.match(TeradataSQLParser.ARRAY_UPDATE)
                        self.state = 10795
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10796
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 10802
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10797
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 10800
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,1402,self._ctx)
                            if la_ == 1:
                                self.state = 10798
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 10799
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 10804
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 49:
                        localctx = TeradataSQLParser.ArrayUpdateStrideContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10806
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 10807
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10808
                        self.match(TeradataSQLParser.ARRAY_UPDATE_STRIDE)
                        self.state = 10809
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10810
                        localctx.new_value = self.scalar_expr(0)
                        self.state = 10811
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 10812
                        localctx.stride = self.integer_literal()
                        self.state = 10818
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 10813
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 10816
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,1404,self._ctx)
                            if la_ == 1:
                                self.state = 10814
                                self.array_scope_reference()
                                pass

                            elif la_ == 2:
                                self.state = 10815
                                localctx.array_index = self.integer_literal()
                                pass




                        self.state = 10820
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 50:
                        localctx = TeradataSQLParser.ArrayOmethodWithArgContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10822
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 10823
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10824
                        _la = self._input.LA(1)
                        if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10825
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10826
                        self.scalar_expr(0)
                        self.state = 10827
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 51:
                        localctx = TeradataSQLParser.ArrayOmethodWithoudArgsContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10829
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 10830
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10831
                        _la = self._input.LA(1)
                        if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 179) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 10832
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10833
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 52:
                        localctx = TeradataSQLParser.ArrayOextendContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10834
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 10835
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10836
                        self.match(TeradataSQLParser.OEXTEND)
                        self.state = 10837
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10838
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 53:
                        localctx = TeradataSQLParser.ArrayOtrimContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10839
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 10840
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10841
                        self.match(TeradataSQLParser.OTRIM)
                        self.state = 10842
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10844
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1194:
                            self.state = 10843
                            localctx.num_remove = self.integer_literal()


                        self.state = 10846
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 54:
                        localctx = TeradataSQLParser.UDTMethodInvocationContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10847
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 10848
                        self.match(TeradataSQLParser.DOT_)
                        self.state = 10849
                        self.method_name()
                        self.state = 10850
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 10859
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                            self.state = 10851
                            self.scalar_expr(0)
                            self.state = 10856
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==1208:
                                self.state = 10852
                                self.match(TeradataSQLParser.COMMA)
                                self.state = 10853
                                self.scalar_expr(0)
                                self.state = 10858
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)



                        self.state = 10861
                        self.match(TeradataSQLParser.CLOSE_PAR)
                        pass

                    elif la_ == 55:
                        localctx = TeradataSQLParser.DataTypeConversionContext(self, TeradataSQLParser.Scalar_exprContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_scalar_expr)
                        self.state = 10863
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 10864
                        self.teradata_type_conversion()
                        pass

             
                self.state = 10869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1410,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def tuple_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Tuple_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Tuple_attributeContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = TeradataSQLParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10870
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 10871
            self.tuple_attribute()
            self.state = 10874 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 10872
                self.match(TeradataSQLParser.COMMA)
                self.state = 10873
                self.tuple_attribute()
                self.state = 10876 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1208):
                    break

            self.state = 10878
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_tuple_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_attribute" ):
                listener.enterTuple_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_attribute" ):
                listener.exitTuple_attribute(self)




    def tuple_attribute(self):

        localctx = TeradataSQLParser.Tuple_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_tuple_attribute)
        self._la = 0 # Token type
        try:
            self.state = 10895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1415,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10880
                self.scalar_expr(0)
                self.state = 10885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                    self.state = 10882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==20:
                        self.state = 10881
                        self.match(TeradataSQLParser.AS)


                    self.state = 10884
                    self.alias_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10887
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 10888
                self.scalar_expr(0)
                self.state = 10890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 10889
                    self.match(TeradataSQLParser.AS)


                self.state = 10892
                self.alias_name()
                self.state = 10893
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valued_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Valued_case_exprContext,0)


        def searched_case_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Searched_case_exprContext,0)


        def coalesce_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Coalesce_exprContext,0)


        def nullif_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nullif_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expr" ):
                listener.enterCase_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expr" ):
                listener.exitCase_expr(self)




    def case_expr(self):

        localctx = TeradataSQLParser.Case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_case_expr)
        try:
            self.state = 10901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1416,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10897
                self.valued_case_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10898
                self.searched_case_expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10899
                self.coalesce_expr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10900
                self.nullif_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Valued_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLParser.CASE, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.WHEN)
            else:
                return self.getToken(TeradataSQLParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.THEN)
            else:
                return self.getToken(TeradataSQLParser.THEN, i)

        def ELSE(self):
            return self.getToken(TeradataSQLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_valued_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValued_case_expr" ):
                listener.enterValued_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValued_case_expr" ):
                listener.exitValued_case_expr(self)




    def valued_case_expr(self):

        localctx = TeradataSQLParser.Valued_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_valued_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10903
            self.match(TeradataSQLParser.CASE)
            self.state = 10904
            self.scalar_expr(0)
            self.state = 10910 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 10905
                self.match(TeradataSQLParser.WHEN)
                self.state = 10906
                self.scalar_expr(0)
                self.state = 10907
                self.match(TeradataSQLParser.THEN)
                self.state = 10908
                self.scalar_expr(0)
                self.state = 10912 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 10916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 10914
                self.match(TeradataSQLParser.ELSE)
                self.state = 10915
                self.scalar_expr(0)


            self.state = 10918
            self.match(TeradataSQLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Searched_case_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(TeradataSQLParser.CASE, 0)

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.WHEN)
            else:
                return self.getToken(TeradataSQLParser.WHEN, i)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,i)


        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.THEN)
            else:
                return self.getToken(TeradataSQLParser.THEN, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def ELSE(self):
            return self.getToken(TeradataSQLParser.ELSE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_searched_case_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearched_case_expr" ):
                listener.enterSearched_case_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearched_case_expr" ):
                listener.exitSearched_case_expr(self)




    def searched_case_expr(self):

        localctx = TeradataSQLParser.Searched_case_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_searched_case_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10920
            self.match(TeradataSQLParser.CASE)
            self.state = 10926 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 10921
                self.match(TeradataSQLParser.WHEN)
                self.state = 10922
                self.logical_expr(0)
                self.state = 10923
                self.match(TeradataSQLParser.THEN)
                self.state = 10924
                self.scalar_expr(0)
                self.state = 10928 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==470):
                    break

            self.state = 10932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 10930
                self.match(TeradataSQLParser.ELSE)
                self.state = 10931
                self.scalar_expr(0)


            self.state = 10934
            self.match(TeradataSQLParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coalesce_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COALESCE(self):
            return self.getToken(TeradataSQLParser.COALESCE, 0)

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_list_comma_separatedContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_coalesce_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesce_expr" ):
                listener.enterCoalesce_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesce_expr" ):
                listener.exitCoalesce_expr(self)




    def coalesce_expr(self):

        localctx = TeradataSQLParser.Coalesce_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_coalesce_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10936
            self.match(TeradataSQLParser.COALESCE)
            self.state = 10937
            self.scalar_expr_list_comma_separated()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nullif_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLIF(self):
            return self.getToken(TeradataSQLParser.NULLIF, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_nullif_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullif_expr" ):
                listener.enterNullif_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullif_expr" ):
                listener.exitNullif_expr(self)




    def nullif_expr(self):

        localctx = TeradataSQLParser.Nullif_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_nullif_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10939
            self.match(TeradataSQLParser.NULLIF)
            self.state = 10940
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 10941
            self.scalar_expr(0)
            self.state = 10942
            self.match(TeradataSQLParser.COMMA)
            self.state = 10943
            self.scalar_expr(0)
            self.state = 10944
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_baseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def MINUS_SIGN(self):
            return self.getToken(TeradataSQLParser.MINUS_SIGN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_interval_expr_base

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_base" ):
                listener.enterInterval_expr_base(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_base" ):
                listener.exitInterval_expr_base(self)




    def interval_expr_base(self):

        localctx = TeradataSQLParser.Interval_expr_baseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_interval_expr_base)
        try:
            self.state = 10956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1421,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10946
                self.scalar_expr(0)
                self.state = 10947
                self.match(TeradataSQLParser.MINUS_SIGN)
                self.state = 10948
                self.scalar_expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10950
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 10951
                self.scalar_expr(0)
                self.state = 10952
                self.match(TeradataSQLParser.MINUS_SIGN)
                self.state = 10953
                self.scalar_expr(0)
                self.state = 10954
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_parenthesizedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def interval_expr_base(self):
            return self.getTypedRuleContext(TeradataSQLParser.Interval_expr_baseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def interval_expr_start_end_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Interval_expr_start_end_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_interval_expr_parenthesized

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_parenthesized" ):
                listener.enterInterval_expr_parenthesized(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_parenthesized" ):
                listener.exitInterval_expr_parenthesized(self)




    def interval_expr_parenthesized(self):

        localctx = TeradataSQLParser.Interval_expr_parenthesizedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_interval_expr_parenthesized)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10958
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 10959
            self.interval_expr_base()
            self.state = 10960
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 10961
            self.interval_expr_start_end_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_expr_start_end_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.precision = None # Integer_literalContext
            self.fractional_seconds_precision = None # Integer_literalContext

        def YEAR(self):
            return self.getToken(TeradataSQLParser.YEAR, 0)

        def MONTH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.MONTH)
            else:
                return self.getToken(TeradataSQLParser.MONTH, i)

        def DAY(self):
            return self.getToken(TeradataSQLParser.DAY, 0)

        def HOUR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.HOUR)
            else:
                return self.getToken(TeradataSQLParser.HOUR, i)

        def MINUTE(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.MINUTE)
            else:
                return self.getToken(TeradataSQLParser.MINUTE, i)

        def SECOND(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.SECOND)
            else:
                return self.getToken(TeradataSQLParser.SECOND, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_interval_expr_start_end_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_expr_start_end_phrase" ):
                listener.enterInterval_expr_start_end_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_expr_start_end_phrase" ):
                listener.exitInterval_expr_start_end_phrase(self)




    def interval_expr_start_end_phrase(self):

        localctx = TeradataSQLParser.Interval_expr_start_end_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_interval_expr_start_end_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 10963
            _la = self._input.LA(1)
            if not(_la==106 or _la==185 or _la==248 or _la==258 or _la==368 or _la==478):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 10972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1423,self._ctx)
            if la_ == 1:
                self.state = 10964
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 10965
                localctx.precision = self.integer_literal()
                self.state = 10968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 10966
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 10967
                    localctx.fractional_seconds_precision = self.integer_literal()


                self.state = 10970
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 10982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1425,self._ctx)
            if la_ == 1:
                self.state = 10974
                self.match(TeradataSQLParser.TO)
                self.state = 10975
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 10980
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1424,self._ctx)
                if la_ == 1:
                    self.state = 10976
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 10977
                    localctx.fractional_seconds_precision = self.integer_literal()
                    self.state = 10978
                    self.match(TeradataSQLParser.CLOSE_PAR)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Aggregate_functionContext,0)


        def analytic_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Analytic_functionContext,0)


        def arithmetic_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Arithmetic_functionContext,0)


        def array_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Array_functionContext,0)


        def attribute_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Attribute_functionContext,0)


        def byte_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Byte_functionContext,0)


        def builtin_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Builtin_functionContext,0)


        def calendar_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Calendar_functionContext,0)


        def comparison_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Comparison_functionContext,0)


        def compression_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Compression_functionContext,0)


        def conversion_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Conversion_functionContext,0)


        def date_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Date_functionContext,0)


        def hash_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Hash_functionContext,0)


        def lob_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Lob_functionContext,0)


        def map_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Map_functionContext,0)


        def nvl_funtion(self):
            return self.getTypedRuleContext(TeradataSQLParser.Nvl_funtionContext,0)


        def period_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Period_functionContext,0)


        def regexp_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Regexp_functionContext,0)


        def string_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.String_functionContext,0)


        def json_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Json_functionContext,0)


        def xml_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_functionContext,0)


        def other_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Other_functionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_invocation" ):
                listener.enterFunction_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_invocation" ):
                listener.exitFunction_invocation(self)




    def function_invocation(self):

        localctx = TeradataSQLParser.Function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_function_invocation)
        try:
            self.state = 11006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1426,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 10984
                self.aggregate_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 10985
                self.analytic_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 10986
                self.arithmetic_function()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 10987
                self.array_function()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 10988
                self.attribute_function()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 10989
                self.byte_function()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 10990
                self.builtin_function()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 10991
                self.calendar_function()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 10992
                self.comparison_function()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 10993
                self.compression_function()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 10994
                self.conversion_function()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 10995
                self.date_function()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 10996
                self.hash_function()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 10997
                self.lob_function()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 10998
                self.map_function()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 10999
                self.nvl_funtion()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 11000
                self.period_function()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 11001
                self.regexp_function()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 11002
                self.string_function()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 11003
                self.json_function()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 11004
                self.xml_function()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 11005
                self.other_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_aggregate_function

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ListAggContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LISTAGG(self):
            return self.getToken(TeradataSQLParser.LISTAGG, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListAgg" ):
                listener.enterListAgg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListAgg" ):
                listener.exitListAgg(self)


    class AggOneArgContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def AVERAGE(self):
            return self.getToken(TeradataSQLParser.AVERAGE, 0)
        def AVG(self):
            return self.getToken(TeradataSQLParser.AVG, 0)
        def AVE(self):
            return self.getToken(TeradataSQLParser.AVE, 0)
        def KURTOSIS(self):
            return self.getToken(TeradataSQLParser.KURTOSIS, 0)
        def MAXIMUM(self):
            return self.getToken(TeradataSQLParser.MAXIMUM, 0)
        def MAX(self):
            return self.getToken(TeradataSQLParser.MAX, 0)
        def MIN(self):
            return self.getToken(TeradataSQLParser.MIN, 0)
        def MINIMUM(self):
            return self.getToken(TeradataSQLParser.MINIMUM, 0)
        def SKEW(self):
            return self.getToken(TeradataSQLParser.SKEW, 0)
        def STDDEV_POP(self):
            return self.getToken(TeradataSQLParser.STDDEV_POP, 0)
        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLParser.STDDEV_SAMP, 0)
        def SUM(self):
            return self.getToken(TeradataSQLParser.SUM, 0)
        def VAR_POP(self):
            return self.getToken(TeradataSQLParser.VAR_POP, 0)
        def VAR_SAMP(self):
            return self.getToken(TeradataSQLParser.VAR_SAMP, 0)
        def DISTINCT(self):
            return self.getToken(TeradataSQLParser.DISTINCT, 0)
        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggOneArg" ):
                listener.enterAggOneArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggOneArg" ):
                listener.exitAggOneArg(self)


    class AggTwoArgsContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def CORR(self):
            return self.getToken(TeradataSQLParser.CORR, 0)
        def COVAR_POP(self):
            return self.getToken(TeradataSQLParser.COVAR_POP, 0)
        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLParser.COVAR_SAMP, 0)
        def REGR_AVGX(self):
            return self.getToken(TeradataSQLParser.REGR_AVGX, 0)
        def REGR_AVGY(self):
            return self.getToken(TeradataSQLParser.REGR_AVGY, 0)
        def REGR_COUNT(self):
            return self.getToken(TeradataSQLParser.REGR_COUNT, 0)
        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLParser.REGR_INTERCEPT, 0)
        def REGR_R2(self):
            return self.getToken(TeradataSQLParser.REGR_R2, 0)
        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLParser.REGR_SLOPE, 0)
        def REGR_SXX(self):
            return self.getToken(TeradataSQLParser.REGR_SXX, 0)
        def REGR_SXY(self):
            return self.getToken(TeradataSQLParser.REGR_SXY, 0)
        def REGR_SYY(self):
            return self.getToken(TeradataSQLParser.REGR_SYY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggTwoArgs" ):
                listener.enterAggTwoArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggTwoArgs" ):
                listener.exitAggTwoArgs(self)


    class GroupingContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GROUPING(self):
            return self.getToken(TeradataSQLParser.GROUPING, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping" ):
                listener.enterGrouping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping" ):
                listener.exitGrouping(self)


    class AggCountContext(Aggregate_functionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a TeradataSQLParser.Aggregate_functionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COUNT(self):
            return self.getToken(TeradataSQLParser.COUNT, 0)
        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)
        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)
        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)
        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)

        def DISTINCT(self):
            return self.getToken(TeradataSQLParser.DISTINCT, 0)
        def UNIQUE(self):
            return self.getToken(TeradataSQLParser.UNIQUE, 0)
        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggCount" ):
                listener.enterAggCount(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggCount" ):
                listener.exitAggCount(self)



    def aggregate_function(self):

        localctx = TeradataSQLParser.Aggregate_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_aggregate_function)
        self._la = 0 # Token type
        try:
            self.state = 11043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30, 31, 32, 213, 238, 239, 244, 246, 380, 396, 397, 403, 461, 462]:
                localctx = TeradataSQLParser.AggOneArgContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 11008
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 213)) & ~0x3f) == 0 and ((1 << (_la - 213)) & 10838081537) != 0) or ((((_la - 380)) & ~0x3f) == 0 and ((1 << (_la - 380)) & 8585217) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11009
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==121:
                    self.state = 11010
                    _la = self._input.LA(1)
                    if not(_la==13 or _la==121):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 11013
                self.scalar_expr(0)
                self.state = 11014
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [80, 84, 85, 327, 328, 329, 330, 331, 332, 333, 334, 335]:
                localctx = TeradataSQLParser.AggTwoArgsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 11016
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11017
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11018
                self.scalar_expr(0)
                self.state = 11019
                self.match(TeradataSQLParser.COMMA)
                self.state = 11020
                self.scalar_expr(0)
                self.state = 11021
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [83]:
                localctx = TeradataSQLParser.AggCountContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 11023
                self.match(TeradataSQLParser.COUNT)
                self.state = 11024
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11030
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 11025
                    self.match(TeradataSQLParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 13, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 121, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 448, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 11027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13 or _la==121 or _la==448:
                        self.state = 11026
                        _la = self._input.LA(1)
                        if not(_la==13 or _la==121 or _la==448):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 11029
                    self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11032
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [175]:
                localctx = TeradataSQLParser.GroupingContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 11033
                self.match(TeradataSQLParser.GROUPING)
                self.state = 11034
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11035
                self.scalar_expr(0)
                self.state = 11036
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1081]:
                localctx = TeradataSQLParser.ListAggContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 11038
                self.match(TeradataSQLParser.LISTAGG)
                self.state = 11039
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11040
                self.scalar_expr(0)
                self.state = 11041
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analytic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value_expr = None # Scalar_exprContext
            self.offset_value = None # Scalar_exprContext
            self.default_value_expr = None # Scalar_exprContext
            self.width = None # Integer_literalContext
            self.quantile_literal = None # Integer_literalContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_specContext,0)


        def AVERAGE(self):
            return self.getToken(TeradataSQLParser.AVERAGE, 0)

        def AVG(self):
            return self.getToken(TeradataSQLParser.AVG, 0)

        def AVE(self):
            return self.getToken(TeradataSQLParser.AVE, 0)

        def MAXIMUM(self):
            return self.getToken(TeradataSQLParser.MAXIMUM, 0)

        def MAX(self):
            return self.getToken(TeradataSQLParser.MAX, 0)

        def MIN(self):
            return self.getToken(TeradataSQLParser.MIN, 0)

        def MINIMUM(self):
            return self.getToken(TeradataSQLParser.MINIMUM, 0)

        def STDDEV_POP(self):
            return self.getToken(TeradataSQLParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(TeradataSQLParser.STDDEV_SAMP, 0)

        def SUM(self):
            return self.getToken(TeradataSQLParser.SUM, 0)

        def VAR_POP(self):
            return self.getToken(TeradataSQLParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(TeradataSQLParser.VAR_SAMP, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def CORR(self):
            return self.getToken(TeradataSQLParser.CORR, 0)

        def COVAR_POP(self):
            return self.getToken(TeradataSQLParser.COVAR_POP, 0)

        def COVAR_SAMP(self):
            return self.getToken(TeradataSQLParser.COVAR_SAMP, 0)

        def REGR_AVGX(self):
            return self.getToken(TeradataSQLParser.REGR_AVGX, 0)

        def REGR_AVGY(self):
            return self.getToken(TeradataSQLParser.REGR_AVGY, 0)

        def REGR_COUNT(self):
            return self.getToken(TeradataSQLParser.REGR_COUNT, 0)

        def REGR_INTERCEPT(self):
            return self.getToken(TeradataSQLParser.REGR_INTERCEPT, 0)

        def REGR_R2(self):
            return self.getToken(TeradataSQLParser.REGR_R2, 0)

        def REGR_SLOPE(self):
            return self.getToken(TeradataSQLParser.REGR_SLOPE, 0)

        def REGR_SXX(self):
            return self.getToken(TeradataSQLParser.REGR_SXX, 0)

        def REGR_SXY(self):
            return self.getToken(TeradataSQLParser.REGR_SXY, 0)

        def REGR_SYY(self):
            return self.getToken(TeradataSQLParser.REGR_SYY, 0)

        def COUNT(self):
            return self.getToken(TeradataSQLParser.COUNT, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def CSUM(self):
            return self.getToken(TeradataSQLParser.CSUM, 0)

        def order_by_spec_asc_desc_only(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_spec_asc_desc_onlyContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_spec_asc_desc_onlyContext,i)


        def window_spec_without_rows(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_spec_without_rowsContext,0)


        def CUME_DIST(self):
            return self.getToken(TeradataSQLParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(TeradataSQLParser.DENSE_RANK, 0)

        def PERCENT_RANK(self):
            return self.getToken(TeradataSQLParser.PERCENT_RANK, 0)

        def FIRST_VALUE(self):
            return self.getToken(TeradataSQLParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(TeradataSQLParser.LAST_VALUE, 0)

        def ignore_respect_nulls(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Ignore_respect_nullsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Ignore_respect_nullsContext,i)


        def LAG(self):
            return self.getToken(TeradataSQLParser.LAG, 0)

        def LEAD(self):
            return self.getToken(TeradataSQLParser.LEAD, 0)

        def MAVG(self):
            return self.getToken(TeradataSQLParser.MAVG, 0)

        def MDIFF(self):
            return self.getToken(TeradataSQLParser.MDIFF, 0)

        def MSUM(self):
            return self.getToken(TeradataSQLParser.MSUM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def MEDIAN(self):
            return self.getToken(TeradataSQLParser.MEDIAN, 0)

        def MLINREG(self):
            return self.getToken(TeradataSQLParser.MLINREG, 0)

        def WITHIN(self):
            return self.getToken(TeradataSQLParser.WITHIN, 0)

        def GROUP(self):
            return self.getToken(TeradataSQLParser.GROUP, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_spec_fullContext,i)


        def PERCENTILE_CONT(self):
            return self.getToken(TeradataSQLParser.PERCENTILE_CONT, 0)

        def PERCENTILE_DISC(self):
            return self.getToken(TeradataSQLParser.PERCENTILE_DISC, 0)

        def QUANTILE(self):
            return self.getToken(TeradataSQLParser.QUANTILE, 0)

        def RANK(self):
            return self.getToken(TeradataSQLParser.RANK, 0)

        def window_spec_with_ties(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_spec_with_tiesContext,0)


        def ROW_NUMBER(self):
            return self.getToken(TeradataSQLParser.ROW_NUMBER, 0)

        def LISTAGG(self):
            return self.getToken(TeradataSQLParser.LISTAGG, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_analytic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalytic_function" ):
                listener.enterAnalytic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalytic_function" ):
                listener.exitAnalytic_function(self)




    def analytic_function(self):

        localctx = TeradataSQLParser.Analytic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_analytic_function)
        self._la = 0 # Token type
        try:
            self.state = 11194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1442,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11045
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7516192768) != 0) or ((((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & 323) != 0) or ((((_la - 396)) & ~0x3f) == 0 and ((1 << (_la - 396)) & 131) != 0) or _la==461 or _la==462):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11046
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11047
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11048
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11049
                self.window_spec()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11051
                _la = self._input.LA(1)
                if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 49) != 0) or ((((_la - 327)) & ~0x3f) == 0 and ((1 << (_la - 327)) & 511) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11052
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11053
                self.scalar_expr(0)
                self.state = 11054
                self.match(TeradataSQLParser.COMMA)
                self.state = 11055
                self.scalar_expr(0)
                self.state = 11056
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11057
                self.window_spec()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11059
                self.match(TeradataSQLParser.COUNT)
                self.state = 11060
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11063
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1219]:
                    self.state = 11061
                    self.match(TeradataSQLParser.MUL_SIGN)
                    pass
                elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                    self.state = 11062
                    localctx.value_expr = self.scalar_expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11065
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11066
                self.window_spec()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11067
                self.match(TeradataSQLParser.CSUM)
                self.state = 11068
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11069
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11072 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11070
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11071
                    self.order_by_spec_asc_desc_only()
                    self.state = 11074 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 11076
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11078
                _la = self._input.LA(1)
                if not(_la==301 or _la==603 or _la==630):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11079
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11080
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11081
                self.window_spec_without_rows()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11082
                _la = self._input.LA(1)
                if not(_la==673 or _la==734):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11083
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11084
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 11085
                    self.ignore_respect_nulls()


                self.state = 11088
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11089
                self.window_spec()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11091
                _la = self._input.LA(1)
                if not(_la==730 or _la==737):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11092
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11093
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 11094
                    self.ignore_respect_nulls()


                self.state = 11103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11097
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11098
                    localctx.offset_value = self.scalar_expr(0)
                    self.state = 11101
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 11099
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 11100
                        localctx.default_value_expr = self.scalar_expr(0)




                self.state = 11105
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==697 or _la==885:
                    self.state = 11106
                    self.ignore_respect_nulls()


                self.state = 11109
                self.window_spec_without_rows()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11111
                _la = self._input.LA(1)
                if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 8388625) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11112
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11113
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11114
                self.match(TeradataSQLParser.COMMA)
                self.state = 11115
                localctx.width = self.integer_literal()
                self.state = 11118 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11116
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11117
                    self.order_by_spec_asc_desc_only()
                    self.state = 11120 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 11122
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11124
                self.match(TeradataSQLParser.MEDIAN)
                self.state = 11125
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11126
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11127
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 11129
                self.match(TeradataSQLParser.MLINREG)
                self.state = 11130
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11131
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11132
                self.match(TeradataSQLParser.COMMA)
                self.state = 11133
                localctx.width = self.integer_literal()
                self.state = 11134
                self.match(TeradataSQLParser.COMMA)
                self.state = 11135
                self.order_by_spec_asc_desc_only()
                self.state = 11136
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 11138
                _la = self._input.LA(1)
                if not(_la==851 or _la==852):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11139
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11140
                localctx.value_expr = self.scalar_expr(0)
                self.state = 11141
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11142
                self.match(TeradataSQLParser.WITHIN)
                self.state = 11143
                self.match(TeradataSQLParser.GROUP)
                self.state = 11144
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11145
                self.match(TeradataSQLParser.ORDER)
                self.state = 11146
                self.match(TeradataSQLParser.BY)
                self.state = 11147
                self.order_by_spec_full()
                self.state = 11152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11148
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11149
                    self.order_by_spec_full()
                    self.state = 11154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11155
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 11157
                self.match(TeradataSQLParser.QUANTILE)
                self.state = 11158
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11159
                localctx.quantile_literal = self.integer_literal()
                self.state = 11162 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11160
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11161
                    self.order_by_spec_asc_desc_only()
                    self.state = 11164 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 11166
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 11168
                self.match(TeradataSQLParser.RANK)
                self.state = 11169
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11170
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11171
                self.window_spec_with_ties()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 11172
                self.match(TeradataSQLParser.RANK)
                self.state = 11173
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11174
                self.order_by_spec_asc_desc_only()
                self.state = 11179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11175
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11176
                    self.order_by_spec_asc_desc_only()
                    self.state = 11181
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11182
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 11184
                self.match(TeradataSQLParser.ROW_NUMBER)
                self.state = 11185
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11186
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11187
                self.window_spec_without_rows()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 11188
                self.match(TeradataSQLParser.LISTAGG)
                self.state = 11189
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11190
                self.scalar_expr(0)
                self.state = 11191
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11192
                self.window_spec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def ABS(self):
            return self.getToken(TeradataSQLParser.ABS, 0)

        def DEGREES(self):
            return self.getToken(TeradataSQLParser.DEGREES, 0)

        def RADIANS(self):
            return self.getToken(TeradataSQLParser.RADIANS, 0)

        def EXP(self):
            return self.getToken(TeradataSQLParser.EXP, 0)

        def SQRT(self):
            return self.getToken(TeradataSQLParser.SQRT, 0)

        def COSH(self):
            return self.getToken(TeradataSQLParser.COSH, 0)

        def SINH(self):
            return self.getToken(TeradataSQLParser.SINH, 0)

        def TANH(self):
            return self.getToken(TeradataSQLParser.TANH, 0)

        def ACOSH(self):
            return self.getToken(TeradataSQLParser.ACOSH, 0)

        def ASINH(self):
            return self.getToken(TeradataSQLParser.ASINH, 0)

        def ATANH(self):
            return self.getToken(TeradataSQLParser.ATANH, 0)

        def LN(self):
            return self.getToken(TeradataSQLParser.LN, 0)

        def LOG(self):
            return self.getToken(TeradataSQLParser.LOG, 0)

        def NULLIFZERO(self):
            return self.getToken(TeradataSQLParser.NULLIFZERO, 0)

        def ZEROIFNULL(self):
            return self.getToken(TeradataSQLParser.ZEROIFNULL, 0)

        def COS(self):
            return self.getToken(TeradataSQLParser.COS, 0)

        def SIN(self):
            return self.getToken(TeradataSQLParser.SIN, 0)

        def TAN(self):
            return self.getToken(TeradataSQLParser.TAN, 0)

        def ACOS(self):
            return self.getToken(TeradataSQLParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(TeradataSQLParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(TeradataSQLParser.ATAN, 0)

        def CEILING(self):
            return self.getToken(TeradataSQLParser.CEILING, 0)

        def CEIL(self):
            return self.getToken(TeradataSQLParser.CEIL, 0)

        def FLOOR(self):
            return self.getToken(TeradataSQLParser.FLOOR, 0)

        def SIGN(self):
            return self.getToken(TeradataSQLParser.SIGN, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def MOD(self):
            return self.getToken(TeradataSQLParser.MOD, 0)

        def RANDOM(self):
            return self.getToken(TeradataSQLParser.RANDOM, 0)

        def ATAN2(self):
            return self.getToken(TeradataSQLParser.ATAN2, 0)

        def POWER(self):
            return self.getToken(TeradataSQLParser.POWER, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SyslibContext,0)


        def ROUND(self):
            return self.getToken(TeradataSQLParser.ROUND, 0)

        def TRUNC(self):
            return self.getToken(TeradataSQLParser.TRUNC, 0)

        def WIDTH(self):
            return self.getToken(TeradataSQLParser.WIDTH, 0)

        def BUCKET(self):
            return self.getToken(TeradataSQLParser.BUCKET, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_arithmetic_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_function" ):
                listener.enterArithmetic_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_function" ):
                listener.exitArithmetic_function(self)




    def arithmetic_function(self):

        localctx = TeradataSQLParser.Arithmetic_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_arithmetic_function)
        self._la = 0 # Token type
        try:
            self.state = 11250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1447,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11196
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 180355272) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 4294967299) != 0) or _la==147 or ((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & 18014398509482049) != 0) or ((((_la - 318)) & ~0x3f) == 0 and ((1 << (_la - 318)) & 3458764513820540929) != 0) or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & 393217) != 0) or _la==479):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11197
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11198
                self.scalar_expr(0)
                self.state = 11199
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11201
                    self.td_sysfnlib()


                self.state = 11204
                _la = self._input.LA(1)
                if not(_la==565 or _la==566 or _la==674 or _la==926):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11205
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11206
                self.scalar_expr(0)
                self.state = 11207
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11209
                _la = self._input.LA(1)
                if not(_la==26 or _la==251 or _la==319):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11210
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11211
                self.scalar_expr(0)
                self.state = 11212
                self.match(TeradataSQLParser.COMMA)
                self.state = 11213
                self.scalar_expr(0)
                self.state = 11214
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11216
                    self.syslib()


                self.state = 11219
                self.match(TeradataSQLParser.POWER)
                self.state = 11220
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11221
                self.scalar_expr(0)
                self.state = 11222
                self.match(TeradataSQLParser.COMMA)
                self.state = 11223
                self.scalar_expr(0)
                self.state = 11224
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11226
                    self.td_sysfnlib()


                self.state = 11229
                _la = self._input.LA(1)
                if not(_la==894 or _la==1006):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11230
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11231
                self.scalar_expr(0)
                self.state = 11234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11232
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11233
                    self.scalar_expr(0)


                self.state = 11236
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11238
                self.match(TeradataSQLParser.WIDTH)
                self.state = 11239
                self.match(TeradataSQLParser.BUCKET)
                self.state = 11240
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11241
                self.scalar_expr(0)
                self.state = 11242
                self.match(TeradataSQLParser.COMMA)
                self.state = 11243
                self.scalar_expr(0)
                self.state = 11244
                self.match(TeradataSQLParser.COMMA)
                self.state = 11245
                self.scalar_expr(0)
                self.state = 11246
                self.match(TeradataSQLParser.COMMA)
                self.state = 11247
                self.scalar_expr(0)
                self.state = 11248
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.element_value_expr = None # Scalar_exprContext
            self.array_expr = None # Scalar_exprContext
            self.array_expr_1 = None # Scalar_exprContext
            self.array_expr_2 = None # Scalar_exprContext
            self.matching_expr = None # Scalar_exprContext
            self.array_index = None # Scalar_exprContext
            self.nulls_equal_flag = None # Integer_literalContext
            self.new_value = None # Scalar_exprContext
            self.stride = None # Integer_literalContext
            self.index_value_or_bound = None # Scalar_exprContext
            self.num_spaces = None # Scalar_exprContext
            self.num_elements = None # Scalar_exprContext

        def ARRAY_AGG(self):
            return self.getToken(TeradataSQLParser.ARRAY_AGG, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def ASC(self):
            return self.getToken(TeradataSQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(TeradataSQLParser.DESC, 0)

        def CARDINALITY(self):
            return self.getToken(TeradataSQLParser.CARDINALITY, 0)

        def array_scope_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Array_scope_referenceContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Array_scope_referenceContext,i)


        def ARRAY_CONCAT(self):
            return self.getToken(TeradataSQLParser.ARRAY_CONCAT, 0)

        def ARRAY_GT(self):
            return self.getToken(TeradataSQLParser.ARRAY_GT, 0)

        def ARRAY_GE(self):
            return self.getToken(TeradataSQLParser.ARRAY_GE, 0)

        def ARRAY_LT(self):
            return self.getToken(TeradataSQLParser.ARRAY_LT, 0)

        def ARRAY_LE(self):
            return self.getToken(TeradataSQLParser.ARRAY_LE, 0)

        def ARRAY_EQ(self):
            return self.getToken(TeradataSQLParser.ARRAY_EQ, 0)

        def ARRAY_NE(self):
            return self.getToken(TeradataSQLParser.ARRAY_NE, 0)

        def ARRAY_ADD(self):
            return self.getToken(TeradataSQLParser.ARRAY_ADD, 0)

        def ARRAY_SUB(self):
            return self.getToken(TeradataSQLParser.ARRAY_SUB, 0)

        def ARRAY_MUL(self):
            return self.getToken(TeradataSQLParser.ARRAY_MUL, 0)

        def ARRAY_DIV(self):
            return self.getToken(TeradataSQLParser.ARRAY_DIV, 0)

        def ARRAY_MOD(self):
            return self.getToken(TeradataSQLParser.ARRAY_MOD, 0)

        def ARRAY_SUM(self):
            return self.getToken(TeradataSQLParser.ARRAY_SUM, 0)

        def ARRAY_AVG(self):
            return self.getToken(TeradataSQLParser.ARRAY_AVG, 0)

        def ARRAY_MAX(self):
            return self.getToken(TeradataSQLParser.ARRAY_MAX, 0)

        def ARRAY_MIN(self):
            return self.getToken(TeradataSQLParser.ARRAY_MIN, 0)

        def ARRAY_COUNT_DISTINCT(self):
            return self.getToken(TeradataSQLParser.ARRAY_COUNT_DISTINCT, 0)

        def ARRAY_GET(self):
            return self.getToken(TeradataSQLParser.ARRAY_GET, 0)

        def ARRAY_COMPARE(self):
            return self.getToken(TeradataSQLParser.ARRAY_COMPARE, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def ARRAY_UPDATE(self):
            return self.getToken(TeradataSQLParser.ARRAY_UPDATE, 0)

        def ARRAY_UPDATE_STRIDE(self):
            return self.getToken(TeradataSQLParser.ARRAY_UPDATE_STRIDE, 0)

        def OEXISTS(self):
            return self.getToken(TeradataSQLParser.OEXISTS, 0)

        def OPRIOR(self):
            return self.getToken(TeradataSQLParser.OPRIOR, 0)

        def ONEXT(self):
            return self.getToken(TeradataSQLParser.ONEXT, 0)

        def OCOUNT(self):
            return self.getToken(TeradataSQLParser.OCOUNT, 0)

        def OFIRST(self):
            return self.getToken(TeradataSQLParser.OFIRST, 0)

        def OLAST(self):
            return self.getToken(TeradataSQLParser.OLAST, 0)

        def ODELETE(self):
            return self.getToken(TeradataSQLParser.ODELETE, 0)

        def OEXTEND(self):
            return self.getToken(TeradataSQLParser.OEXTEND, 0)

        def OTRIM(self):
            return self.getToken(TeradataSQLParser.OTRIM, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_array_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_function" ):
                listener.enterArray_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_function" ):
                listener.exitArray_function(self)




    def array_function(self):

        localctx = TeradataSQLParser.Array_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_array_function)
        self._la = 0 # Token type
        try:
            self.state = 11465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1472,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11252
                    self.td_sysfnlib()


                self.state = 11255
                self.match(TeradataSQLParser.ARRAY_AGG)
                self.state = 11256
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11257
                localctx.element_value_expr = self.scalar_expr(0)
                self.state = 11264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 11258
                    self.match(TeradataSQLParser.ORDER)
                    self.state = 11259
                    self.match(TeradataSQLParser.BY)
                    self.state = 11260
                    self.scalar_expr(0)
                    self.state = 11262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21 or _la==116:
                        self.state = 11261
                        _la = self._input.LA(1)
                        if not(_la==21 or _la==116):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()




                self.state = 11266
                self.match(TeradataSQLParser.COMMA)
                self.state = 11267
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11268
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11270
                self.match(TeradataSQLParser.CARDINALITY)
                self.state = 11271
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11272
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11273
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11274
                    self.array_scope_reference()
                    self.state = 11279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11280
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11282
                self.match(TeradataSQLParser.ARRAY_CONCAT)
                self.state = 11283
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11284
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 11285
                self.match(TeradataSQLParser.COMMA)
                self.state = 11286
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 11291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11287
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11288
                    self.array_scope_reference()
                    self.state = 11293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11294
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11296
                _la = self._input.LA(1)
                if not(((((_la - 520)) & ~0x3f) == 0 and ((1 << (_la - 520)) & 1083) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11297
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11298
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 11299
                self.match(TeradataSQLParser.COMMA)
                self.state = 11300
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 11305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11301
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11302
                    self.array_scope_reference()
                    self.state = 11307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11308
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11310
                _la = self._input.LA(1)
                if not(((((_la - 513)) & ~0x3f) == 0 and ((1 << (_la - 513)) & 360513) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11311
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11312
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 11313
                self.match(TeradataSQLParser.COMMA)
                self.state = 11314
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 11319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11315
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11316
                    self.array_scope_reference()
                    self.state = 11321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11322
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11324
                _la = self._input.LA(1)
                if not(((((_la - 515)) & ~0x3f) == 0 and ((1 << (_la - 515)) & 137217) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11325
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11326
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11327
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11328
                    self.array_scope_reference()
                    self.state = 11333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11334
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11336
                self.match(TeradataSQLParser.ARRAY_COUNT_DISTINCT)
                self.state = 11337
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11338
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11354
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1458,self._ctx)
                if la_ == 1:
                    self.state = 11343
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1456,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 11339
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 11340
                            self.array_scope_reference() 
                        self.state = 11345
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1456,self._ctx)

                    self.state = 11346
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11347
                    localctx.matching_expr = self.scalar_expr(0)

                elif la_ == 2:
                    self.state = 11350 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 11348
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 11349
                        self.array_scope_reference()
                        self.state = 11352 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break



                self.state = 11356
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11358
                self.match(TeradataSQLParser.ARRAY_GET)
                self.state = 11359
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11360
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11361
                self.match(TeradataSQLParser.COMMA)
                self.state = 11362
                localctx.array_index = self.scalar_expr(0)
                self.state = 11363
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11365
                self.match(TeradataSQLParser.ARRAY_COMPARE)
                self.state = 11366
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11367
                localctx.array_expr_1 = self.scalar_expr(0)
                self.state = 11368
                self.match(TeradataSQLParser.COMMA)
                self.state = 11369
                localctx.array_expr_2 = self.scalar_expr(0)
                self.state = 11379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11372 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 11370
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 11371
                            self.array_scope_reference()

                        else:
                            raise NoViableAltException(self)
                        self.state = 11374 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1459,self._ctx)

                    self.state = 11376
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11377
                    localctx.nulls_equal_flag = self.integer_literal()


                self.state = 11381
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 11383
                self.match(TeradataSQLParser.ARRAY_UPDATE)
                self.state = 11384
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11385
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11386
                self.match(TeradataSQLParser.COMMA)
                self.state = 11387
                localctx.new_value = self.scalar_expr(0)
                self.state = 11396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1462,self._ctx)
                if la_ == 1:
                    self.state = 11390 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 11388
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 11389
                        self.array_scope_reference()
                        self.state = 11392 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 11394
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11395
                    localctx.array_index = self.scalar_expr(0)


                self.state = 11398
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 11400
                self.match(TeradataSQLParser.ARRAY_UPDATE_STRIDE)
                self.state = 11401
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11402
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11403
                self.match(TeradataSQLParser.COMMA)
                self.state = 11404
                localctx.new_value = self.scalar_expr(0)
                self.state = 11405
                self.match(TeradataSQLParser.COMMA)
                self.state = 11406
                localctx.stride = self.integer_literal()
                self.state = 11415
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1464,self._ctx)
                if la_ == 1:
                    self.state = 11409 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 11407
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 11408
                        self.array_scope_reference()
                        self.state = 11411 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1208):
                            break


                elif la_ == 2:
                    self.state = 11413
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11414
                    localctx.array_index = self.scalar_expr(0)


                self.state = 11417
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 11420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11419
                    self.td_sysfnlib()


                self.state = 11422
                _la = self._input.LA(1)
                if not(((((_la - 817)) & ~0x3f) == 0 and ((1 << (_la - 817)) & 321) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11423
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11424
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11425
                self.match(TeradataSQLParser.COMMA)
                self.state = 11426
                localctx.index_value_or_bound = self.scalar_expr(0)
                self.state = 11427
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 11430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11429
                    self.td_sysfnlib()


                self.state = 11432
                _la = self._input.LA(1)
                if not(((((_la - 815)) & ~0x3f) == 0 and ((1 << (_la - 815)) & 51) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11433
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11434
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11435
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 11438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11437
                    self.td_sysfnlib()


                self.state = 11440
                self.match(TeradataSQLParser.OEXTEND)
                self.state = 11441
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11442
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11443
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11444
                    localctx.num_spaces = self.scalar_expr(0)
                    self.state = 11447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 11445
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 11446
                        localctx.index_value_or_bound = self.scalar_expr(0)




                self.state = 11451
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 11454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11453
                    self.td_sysfnlib()


                self.state = 11456
                self.match(TeradataSQLParser.OTRIM)
                self.state = 11457
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11458
                localctx.array_expr = self.scalar_expr(0)
                self.state = 11461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11459
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11460
                    localctx.num_elements = self.scalar_expr(0)


                self.state = 11463
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.character_set_name = None # LiteralContext

        def BIT_LENGTH(self):
            return self.getToken(TeradataSQLParser.BIT_LENGTH, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.LiteralContext,0)


        def BYTE(self):
            return self.getToken(TeradataSQLParser.BYTE, 0)

        def BYTES(self):
            return self.getToken(TeradataSQLParser.BYTES, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(TeradataSQLParser.CHARACTER_LENGTH, 0)

        def CHAR_LENGTH(self):
            return self.getToken(TeradataSQLParser.CHAR_LENGTH, 0)

        def CHAR(self):
            return self.getToken(TeradataSQLParser.CHAR, 0)

        def CHARS(self):
            return self.getToken(TeradataSQLParser.CHARS, 0)

        def CHARACTER(self):
            return self.getToken(TeradataSQLParser.CHARACTER, 0)

        def CHARACTERS(self):
            return self.getToken(TeradataSQLParser.CHARACTERS, 0)

        def MCHARACTERS(self):
            return self.getToken(TeradataSQLParser.MCHARACTERS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def FORMAT(self):
            return self.getToken(TeradataSQLParser.FORMAT, 0)

        def TITLE(self):
            return self.getToken(TeradataSQLParser.TITLE, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def OCTET_LENGTH(self):
            return self.getToken(TeradataSQLParser.OCTET_LENGTH, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_attribute_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_function" ):
                listener.enterAttribute_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_function" ):
                listener.exitAttribute_function(self)




    def attribute_function(self):

        localctx = TeradataSQLParser.Attribute_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_attribute_function)
        self._la = 0 # Token type
        try:
            self.state = 11507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [546]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11467
                self.match(TeradataSQLParser.BIT_LENGTH)
                self.state = 11468
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11469
                self.scalar_expr(0)
                self.state = 11472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11470
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11471
                    localctx.character_set_name = self.literal()


                self.state = 11474
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [43, 45]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11476
                _la = self._input.LA(1)
                if not(_la==43 or _la==45):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11477
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11478
                self.scalar_expr(0)
                self.state = 11479
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [52, 53, 55, 56, 57, 58, 240]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11481
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 553942754166571008) != 0) or _la==240):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11482
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11483
                self.scalar_expr(0)
                self.state = 11484
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11486
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 11491
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1474,self._ctx)
                if la_ == 1:
                    self.state = 11487
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 11488
                    self.column_name()
                    self.state = 11489
                    self.match(TeradataSQLParser.CLOSE_PAR)


                pass
            elif token in [161, 425, 437]:
                self.enterOuterAlt(localctx, 5)
                self.state = 11493
                _la = self._input.LA(1)
                if not(_la==161 or _la==425 or _la==437):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11494
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11495
                self.scalar_expr(0)
                self.state = 11496
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [281]:
                self.enterOuterAlt(localctx, 6)
                self.state = 11498
                self.match(TeradataSQLParser.OCTET_LENGTH)
                self.state = 11499
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11500
                self.scalar_expr(0)
                self.state = 11503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11501
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11502
                    localctx.character_set_name = self.literal()


                self.state = 11505
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Byte_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITNOT(self):
            return self.getToken(TeradataSQLParser.BITNOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def BITAND(self):
            return self.getToken(TeradataSQLParser.BITAND, 0)

        def BITOR(self):
            return self.getToken(TeradataSQLParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(TeradataSQLParser.BITXOR, 0)

        def GETBIT(self):
            return self.getToken(TeradataSQLParser.GETBIT, 0)

        def ROTATELEFT(self):
            return self.getToken(TeradataSQLParser.ROTATELEFT, 0)

        def ROTATERIGHT(self):
            return self.getToken(TeradataSQLParser.ROTATERIGHT, 0)

        def SHIFTLEFT(self):
            return self.getToken(TeradataSQLParser.SHIFTLEFT, 0)

        def SHIFTRIGHT(self):
            return self.getToken(TeradataSQLParser.SHIFTRIGHT, 0)

        def COUNTSET(self):
            return self.getToken(TeradataSQLParser.COUNTSET, 0)

        def SETBIT(self):
            return self.getToken(TeradataSQLParser.SETBIT, 0)

        def SUBBITSTR(self):
            return self.getToken(TeradataSQLParser.SUBBITSTR, 0)

        def TO_BYTE(self):
            return self.getToken(TeradataSQLParser.TO_BYTE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_byte_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterByte_function" ):
                listener.enterByte_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitByte_function" ):
                listener.exitByte_function(self)




    def byte_function(self):

        localctx = TeradataSQLParser.Byte_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_byte_function)
        self._la = 0 # Token type
        try:
            self.state = 11573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1485,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11509
                    self.td_sysfnlib()


                self.state = 11512
                self.match(TeradataSQLParser.BITNOT)
                self.state = 11513
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11514
                self.scalar_expr(0)
                self.state = 11515
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11517
                    self.td_sysfnlib()


                self.state = 11520
                _la = self._input.LA(1)
                if not(((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & 13) != 0) or _la==682 or ((((_la - 892)) & ~0x3f) == 0 and ((1 << (_la - 892)) & 12884901891) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11521
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11522
                self.scalar_expr(0)
                self.state = 11523
                self.match(TeradataSQLParser.COMMA)
                self.state = 11524
                self.scalar_expr(0)
                self.state = 11525
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11527
                    self.td_sysfnlib()


                self.state = 11530
                self.match(TeradataSQLParser.COUNTSET)
                self.state = 11531
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11532
                self.scalar_expr(0)
                self.state = 11535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11533
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11534
                    self.scalar_expr(0)


                self.state = 11537
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11539
                    self.td_sysfnlib()


                self.state = 11542
                self.match(TeradataSQLParser.SETBIT)
                self.state = 11543
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11544
                self.scalar_expr(0)
                self.state = 11545
                self.match(TeradataSQLParser.COMMA)
                self.state = 11546
                self.scalar_expr(0)
                self.state = 11549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11547
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11548
                    self.scalar_expr(0)


                self.state = 11551
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11553
                    self.td_sysfnlib()


                self.state = 11556
                self.match(TeradataSQLParser.SUBBITSTR)
                self.state = 11557
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11558
                self.scalar_expr(0)
                self.state = 11559
                self.match(TeradataSQLParser.COMMA)
                self.state = 11560
                self.scalar_expr(0)
                self.state = 11561
                self.match(TeradataSQLParser.COMMA)
                self.state = 11562
                self.scalar_expr(0)
                self.state = 11563
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11565
                    self.td_sysfnlib()


                self.state = 11568
                self.match(TeradataSQLParser.TO_BYTE)
                self.state = 11569
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11570
                self.scalar_expr(0)
                self.state = 11571
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Builtin_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(TeradataSQLParser.ACCOUNT, 0)

        def CURRENT_DATE(self):
            return self.getToken(TeradataSQLParser.CURRENT_DATE, 0)

        def CURDATE(self):
            return self.getToken(TeradataSQLParser.CURDATE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def at_timezone(self):
            return self.getTypedRuleContext(TeradataSQLParser.At_timezoneContext,0)


        def CURRENT_ROLE(self):
            return self.getToken(TeradataSQLParser.CURRENT_ROLE, 0)

        def CURRENT_TIME(self):
            return self.getToken(TeradataSQLParser.CURRENT_TIME, 0)

        def CURTIME(self):
            return self.getToken(TeradataSQLParser.CURTIME, 0)

        def type_precision(self):
            return self.getTypedRuleContext(TeradataSQLParser.Type_precisionContext,0)


        def CURRENT_TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(TeradataSQLParser.CURRENT_USER, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(TeradataSQLParser.DATE, 0)

        def NOW(self):
            return self.getToken(TeradataSQLParser.NOW, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def SESSION(self):
            return self.getToken(TeradataSQLParser.SESSION, 0)

        def TEMPORAL_DATE(self):
            return self.getToken(TeradataSQLParser.TEMPORAL_DATE, 0)

        def TEMPORAL_TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.TEMPORAL_TIMESTAMP, 0)

        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_builtin_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltin_function" ):
                listener.enterBuiltin_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltin_function" ):
                listener.exitBuiltin_function(self)




    def builtin_function(self):

        localctx = TeradataSQLParser.Builtin_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_builtin_function)
        try:
            self.state = 11631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11575
                self.match(TeradataSQLParser.ACCOUNT)
                pass
            elif token in [94, 604]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11584
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [94]:
                    self.state = 11576
                    self.match(TeradataSQLParser.CURRENT_DATE)
                    self.state = 11579
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1486,self._ctx)
                    if la_ == 1:
                        self.state = 11577
                        self.match(TeradataSQLParser.OPEN_PAR)
                        self.state = 11578
                        self.match(TeradataSQLParser.CLOSE_PAR)


                    pass
                elif token in [604]:
                    self.state = 11581
                    self.match(TeradataSQLParser.CURDATE)
                    self.state = 11582
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 11583
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11587
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1488,self._ctx)
                if la_ == 1:
                    self.state = 11586
                    self.at_timezone()


                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 3)
                self.state = 11589
                self.match(TeradataSQLParser.CURRENT_ROLE)
                pass
            elif token in [96, 605]:
                self.enterOuterAlt(localctx, 4)
                self.state = 11597
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [96]:
                    self.state = 11590
                    self.match(TeradataSQLParser.CURRENT_TIME)
                    self.state = 11592
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1489,self._ctx)
                    if la_ == 1:
                        self.state = 11591
                        self.type_precision()


                    pass
                elif token in [605]:
                    self.state = 11594
                    self.match(TeradataSQLParser.CURTIME)
                    self.state = 11595
                    self.match(TeradataSQLParser.OPEN_PAR)
                    self.state = 11596
                    self.match(TeradataSQLParser.CLOSE_PAR)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11600
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1491,self._ctx)
                if la_ == 1:
                    self.state = 11599
                    self.at_timezone()


                pass
            elif token in [97]:
                self.enterOuterAlt(localctx, 5)
                self.state = 11602
                self.match(TeradataSQLParser.CURRENT_TIMESTAMP)
                self.state = 11604
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1492,self._ctx)
                if la_ == 1:
                    self.state = 11603
                    self.type_precision()


                self.state = 11607
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1493,self._ctx)
                if la_ == 1:
                    self.state = 11606
                    self.at_timezone()


                pass
            elif token in [98]:
                self.enterOuterAlt(localctx, 6)
                self.state = 11609
                self.match(TeradataSQLParser.CURRENT_USER)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 7)
                self.state = 11610
                self.match(TeradataSQLParser.DATABASE)
                pass
            elif token in [104]:
                self.enterOuterAlt(localctx, 8)
                self.state = 11611
                self.match(TeradataSQLParser.DATE)
                self.state = 11613
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1494,self._ctx)
                if la_ == 1:
                    self.state = 11612
                    self.at_timezone()


                pass
            elif token in [803]:
                self.enterOuterAlt(localctx, 9)
                self.state = 11615
                self.match(TeradataSQLParser.NOW)
                self.state = 11616
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11617
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 10)
                self.state = 11618
                self.match(TeradataSQLParser.PROFILE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 11)
                self.state = 11619
                self.match(TeradataSQLParser.ROLE)
                pass
            elif token in [371]:
                self.enterOuterAlt(localctx, 12)
                self.state = 11620
                self.match(TeradataSQLParser.SESSION)
                pass
            elif token in [980]:
                self.enterOuterAlt(localctx, 13)
                self.state = 11621
                self.match(TeradataSQLParser.TEMPORAL_DATE)
                pass
            elif token in [981]:
                self.enterOuterAlt(localctx, 14)
                self.state = 11622
                self.match(TeradataSQLParser.TEMPORAL_TIMESTAMP)
                self.state = 11624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1495,self._ctx)
                if la_ == 1:
                    self.state = 11623
                    self.type_precision()


                pass
            elif token in [421]:
                self.enterOuterAlt(localctx, 15)
                self.state = 11626
                self.match(TeradataSQLParser.TIME)
                self.state = 11628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1496,self._ctx)
                if la_ == 1:
                    self.state = 11627
                    self.at_timezone()


                pass
            elif token in [456]:
                self.enterOuterAlt(localctx, 16)
                self.state = 11630
                self.match(TeradataSQLParser.USER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Calendar_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.calendar_for_session = None # Token
            self.calendar_name = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def TD_DAY_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_DAY_OF_CALENDAR, 0)

        def TD_DAY_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.TD_DAY_OF_MONTH, 0)

        def TD_DAY_OF_WEEK(self):
            return self.getToken(TeradataSQLParser.TD_DAY_OF_WEEK, 0)

        def TD_DAY_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.TD_DAY_OF_YEAR, 0)

        def TD_MONTH_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_MONTH_OF_CALENDAR, 0)

        def TD_MONTH_OF_QUARTER(self):
            return self.getToken(TeradataSQLParser.TD_MONTH_OF_QUARTER, 0)

        def TD_MONTH_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.TD_MONTH_OF_YEAR, 0)

        def TD_QUARTER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_QUARTER_OF_CALENDAR, 0)

        def TD_QUARTER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.TD_QUARTER_OF_YEAR, 0)

        def TD_WEEK_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_WEEK_OF_CALENDAR, 0)

        def TD_WEEK_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.TD_WEEK_OF_MONTH, 0)

        def TD_WEEK_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.TD_WEEK_OF_YEAR, 0)

        def TD_WEEKDAY_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.TD_WEEKDAY_OF_MONTH, 0)

        def TD_YEAR_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.TD_YEAR_OF_CALENDAR, 0)

        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SyslibContext,0)


        def DAYNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.DAYNUMBER_OF_CALENDAR, 0)

        def DAYNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.DAYNUMBER_OF_MONTH, 0)

        def DAYNUMBER_OF_WEEK(self):
            return self.getToken(TeradataSQLParser.DAYNUMBER_OF_WEEK, 0)

        def DAYNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.DAYNUMBER_OF_YEAR, 0)

        def DAYOCCURRENCE_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.DAYOCCURRENCE_OF_MONTH, 0)

        def MONTHNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.MONTHNUMBER_OF_CALENDAR, 0)

        def MONTHNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLParser.MONTHNUMBER_OF_QUARTER, 0)

        def MONTHNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.MONTHNUMBER_OF_YEAR, 0)

        def QUARTERNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.QUARTERNUMBER_OF_CALENDAR, 0)

        def QUARTERNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.QUARTERNUMBER_OF_YEAR, 0)

        def WEEKNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.WEEKNUMBER_OF_CALENDAR, 0)

        def WEEKNUMBER_OF_MONTH(self):
            return self.getToken(TeradataSQLParser.WEEKNUMBER_OF_MONTH, 0)

        def WEEKNUMBER_OF_QUARTER(self):
            return self.getToken(TeradataSQLParser.WEEKNUMBER_OF_QUARTER, 0)

        def WEEKNUMBER_OF_YEAR(self):
            return self.getToken(TeradataSQLParser.WEEKNUMBER_OF_YEAR, 0)

        def YEARNUMBER_OF_CALENDAR(self):
            return self.getToken(TeradataSQLParser.YEARNUMBER_OF_CALENDAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_calendar_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCalendar_function" ):
                listener.enterCalendar_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCalendar_function" ):
                listener.exitCalendar_function(self)




    def calendar_function(self):

        localctx = TeradataSQLParser.Calendar_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_calendar_function)
        self._la = 0 # Token type
        try:
            self.state = 11656
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [957, 958, 959, 960, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 1088]:
                self.enterOuterAlt(localctx, 1)
                self.state = 11634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11633
                    self.syslib()


                self.state = 11636
                _la = self._input.LA(1)
                if not(((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & 1031695) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11637
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11638
                self.scalar_expr(0)
                self.state = 11639
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [612, 613, 614, 615, 616, 783, 784, 785, 867, 868, 1033, 1034, 1035, 1036, 1064, 1091]:
                self.enterOuterAlt(localctx, 2)
                self.state = 11642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11641
                    self.td_sysfnlib()


                self.state = 11644
                _la = self._input.LA(1)
                if not(((((_la - 612)) & ~0x3f) == 0 and ((1 << (_la - 612)) & 31) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & 7) != 0) or _la==867 or _la==868 or ((((_la - 1033)) & ~0x3f) == 0 and ((1 << (_la - 1033)) & 2147483663) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11645
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11646
                self.scalar_expr(0)
                self.state = 11648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11647
                    self.match(TeradataSQLParser.COMMA)


                self.state = 11652
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [274]:
                    self.state = 11650
                    localctx.calendar_for_session = self.match(TeradataSQLParser.NULL)
                    pass
                elif token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 11651
                    localctx.calendar_name = self.char_string_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 11654
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.search_result = None # Scalar_exprContext
            self.default_result = None # Scalar_exprContext

        def DECODE(self):
            return self.getToken(TeradataSQLParser.DECODE, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def GREATEST(self):
            return self.getToken(TeradataSQLParser.GREATEST, 0)

        def LEAST(self):
            return self.getToken(TeradataSQLParser.LEAST, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_comparison_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_function" ):
                listener.enterComparison_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_function" ):
                listener.exitComparison_function(self)




    def comparison_function(self):

        localctx = TeradataSQLParser.Comparison_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_comparison_function)
        self._la = 0 # Token type
        try:
            self.state = 11686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1506,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11658
                    self.td_sysfnlib()


                self.state = 11661
                self.match(TeradataSQLParser.DECODE)
                self.state = 11662
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11663
                localctx.expr = self.scalar_expr(0)
                self.state = 11664
                self.match(TeradataSQLParser.COMMA)
                self.state = 11665
                localctx.search_result = self.scalar_expr(0)

                self.state = 11666
                self.match(TeradataSQLParser.COMMA)
                self.state = 11667
                localctx.search_result = self.scalar_expr(0)
                self.state = 11669
                localctx.default_result = self.scalar_expr(0)
                self.state = 11670
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11672
                    self.td_sysfnlib()


                self.state = 11675
                _la = self._input.LA(1)
                if not(_la==689 or _la==738):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11676
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11677
                self.scalar_expr(0)
                self.state = 11680 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 11678
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11679
                    self.scalar_expr(0)
                    self.state = 11682 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1208):
                        break

                self.state = 11684
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compression_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def CAMSET(self):
            return self.getToken(TeradataSQLParser.CAMSET, 0)

        def CAMSET_L(self):
            return self.getToken(TeradataSQLParser.CAMSET_L, 0)

        def DECAMSET(self):
            return self.getToken(TeradataSQLParser.DECAMSET, 0)

        def DECAMSET_L(self):
            return self.getToken(TeradataSQLParser.DECAMSET_L, 0)

        def JSON_COMPRESS(self):
            return self.getToken(TeradataSQLParser.JSON_COMPRESS, 0)

        def JSON_DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.JSON_DECOMPRESS, 0)

        def LZCOMP(self):
            return self.getToken(TeradataSQLParser.LZCOMP, 0)

        def LZCOMP_L(self):
            return self.getToken(TeradataSQLParser.LZCOMP_L, 0)

        def LZDECOMP(self):
            return self.getToken(TeradataSQLParser.LZDECOMP, 0)

        def LZDECOMP_L(self):
            return self.getToken(TeradataSQLParser.LZDECOMP_L, 0)

        def TD_LZ_COMPRESS(self):
            return self.getToken(TeradataSQLParser.TD_LZ_COMPRESS, 0)

        def TD_LZ_DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.TD_LZ_DECOMPRESS, 0)

        def TS_COMPRESS(self):
            return self.getToken(TeradataSQLParser.TS_COMPRESS, 0)

        def TS_DECOMPRESS(self):
            return self.getToken(TeradataSQLParser.TS_DECOMPRESS, 0)

        def TRANSUNICODETOUTF8(self):
            return self.getToken(TeradataSQLParser.TRANSUNICODETOUTF8, 0)

        def TRANSUTF8TOUNICODE(self):
            return self.getToken(TeradataSQLParser.TRANSUTF8TOUNICODE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_compression_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompression_function" ):
                listener.enterCompression_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompression_function" ):
                listener.exitCompression_function(self)




    def compression_function(self):

        localctx = TeradataSQLParser.Compression_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_compression_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 11688
                self.td_sysfnlib()


            self.state = 11691
            _la = self._input.LA(1)
            if not(((((_la - 561)) & ~0x3f) == 0 and ((1 << (_la - 561)) & 1729382256910270467) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & 15) != 0) or ((((_la - 964)) & ~0x3f) == 0 and ((1 << (_la - 964)) & 1649267441667) != 0) or ((((_la - 1141)) & ~0x3f) == 0 and ((1 << (_la - 1141)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 11692
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 11693
            self.scalar_expr(0)
            self.state = 11694
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conversion_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expr = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.in_encoding = None # Char_string_literalContext
            self.out_encoding = None # Char_string_literalContext
            self.string_expr = None # Scalar_exprContext
            self.format_arg = None # Char_string_literalContext
            self.nls_param = None # Char_string_literalContext
            self.numeric_value = None # Scalar_exprContext
            self.interval_unit = None # Scalar_exprContext

        def CAST(self):
            return self.getToken(TeradataSQLParser.CAST, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_type_attributeContext,i)


        def TRYCAST(self):
            return self.getToken(TeradataSQLParser.TRYCAST, 0)

        def TO_BYTES(self):
            return self.getToken(TeradataSQLParser.TO_BYTES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def FROM_BYTES(self):
            return self.getToken(TeradataSQLParser.FROM_BYTES, 0)

        def TO_NUMBER(self):
            return self.getToken(TeradataSQLParser.TO_NUMBER, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def TO_CHAR(self):
            return self.getToken(TeradataSQLParser.TO_CHAR, 0)

        def TO_DATE(self):
            return self.getToken(TeradataSQLParser.TO_DATE, 0)

        def TO_TIMESTAMP(self):
            return self.getToken(TeradataSQLParser.TO_TIMESTAMP, 0)

        def TO_TIMESTAMP_TZ(self):
            return self.getToken(TeradataSQLParser.TO_TIMESTAMP_TZ, 0)

        def TO_YMINTERVAL(self):
            return self.getToken(TeradataSQLParser.TO_YMINTERVAL, 0)

        def TO_DSINTERVAL(self):
            return self.getToken(TeradataSQLParser.TO_DSINTERVAL, 0)

        def NUMTODSINTERVAL(self):
            return self.getToken(TeradataSQLParser.NUMTODSINTERVAL, 0)

        def NUMTOYMINTERVAL(self):
            return self.getToken(TeradataSQLParser.NUMTOYMINTERVAL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_conversion_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversion_function" ):
                listener.enterConversion_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversion_function" ):
                listener.exitConversion_function(self)




    def conversion_function(self):

        localctx = TeradataSQLParser.Conversion_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_conversion_function)
        self._la = 0 # Token type
        try:
            self.state = 11827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1528,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11696
                self.match(TeradataSQLParser.CAST)
                self.state = 11697
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11698
                localctx.expr = self.scalar_expr(0)
                self.state = 11699
                self.match(TeradataSQLParser.AS)
                self.state = 11712
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1510,self._ctx)
                if la_ == 1:
                    self.state = 11700
                    self.data_type()
                    self.state = 11704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                        self.state = 11701
                        self.data_type_attribute()
                        self.state = 11706
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 11708 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 11707
                        self.data_type_attribute()
                        self.state = 11710 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211):
                            break

                    pass


                self.state = 11714
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11716
                self.match(TeradataSQLParser.TRYCAST)
                self.state = 11717
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11718
                localctx.in_string = self.scalar_expr(0)
                self.state = 11719
                self.match(TeradataSQLParser.AS)
                self.state = 11720
                self.data_type()
                self.state = 11721
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11723
                    self.td_sysfnlib()


                self.state = 11726
                self.match(TeradataSQLParser.TO_BYTES)
                self.state = 11727
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11728
                localctx.in_string = self.scalar_expr(0)
                self.state = 11729
                self.match(TeradataSQLParser.COMMA)
                self.state = 11730
                localctx.in_encoding = self.char_string_literal()
                self.state = 11731
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11733
                    self.td_sysfnlib()


                self.state = 11736
                self.match(TeradataSQLParser.FROM_BYTES)
                self.state = 11737
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11738
                localctx.in_string = self.scalar_expr(0)
                self.state = 11739
                self.match(TeradataSQLParser.COMMA)
                self.state = 11740
                localctx.out_encoding = self.char_string_literal()
                self.state = 11741
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11743
                    self.td_sysfnlib()


                self.state = 11746
                self.match(TeradataSQLParser.TO_NUMBER)
                self.state = 11747
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11748
                localctx.string_expr = self.scalar_expr(0)
                self.state = 11758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11749
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11750
                    localctx.format_arg = self.char_string_literal()
                    self.state = 11756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 11751
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 11754
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 11752
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 11753
                            self.match(TeradataSQLParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 11760
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11762
                    self.td_sysfnlib()


                self.state = 11765
                self.match(TeradataSQLParser.TO_CHAR)
                self.state = 11766
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11767
                localctx.expr = self.scalar_expr(0)
                self.state = 11777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11768
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11769
                    localctx.format_arg = self.char_string_literal()
                    self.state = 11775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 11770
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 11773
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [1069, 1070, 1071, 1072, 1203]:
                            self.state = 11771
                            localctx.nls_param = self.char_string_literal()
                            pass
                        elif token in [274]:
                            self.state = 11772
                            self.match(TeradataSQLParser.NULL)
                            pass
                        else:
                            raise NoViableAltException(self)





                self.state = 11779
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 11782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11781
                    self.td_sysfnlib()


                self.state = 11784
                self.match(TeradataSQLParser.TO_DATE)
                self.state = 11785
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11786
                localctx.in_string = self.scalar_expr(0)
                self.state = 11787
                self.match(TeradataSQLParser.COMMA)
                self.state = 11790
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1069, 1070, 1071, 1072, 1203]:
                    self.state = 11788
                    localctx.format_arg = self.char_string_literal()
                    pass
                elif token in [274]:
                    self.state = 11789
                    self.match(TeradataSQLParser.NULL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 11792
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 11795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11794
                    self.td_sysfnlib()


                self.state = 11797
                _la = self._input.LA(1)
                if not(_la==997 or _la==998):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11798
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11799
                localctx.expr = self.scalar_expr(0)
                self.state = 11805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 11800
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11803
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1069, 1070, 1071, 1072, 1203]:
                        self.state = 11801
                        localctx.format_arg = self.char_string_literal()
                        pass
                    elif token in [274]:
                        self.state = 11802
                        self.match(TeradataSQLParser.NULL)
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 11807
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 11810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11809
                    self.td_sysfnlib()


                self.state = 11812
                _la = self._input.LA(1)
                if not(_la==995 or _la==999):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11813
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11814
                self.scalar_expr(0)
                self.state = 11815
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 11818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11817
                    self.td_sysfnlib()


                self.state = 11820
                _la = self._input.LA(1)
                if not(_la==808 or _la==809):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11821
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11822
                localctx.numeric_value = self.scalar_expr(0)
                self.state = 11823
                self.match(TeradataSQLParser.COMMA)
                self.state = 11824
                localctx.interval_unit = self.scalar_expr(0)
                self.state = 11825
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.day_value = None # Char_string_literalContext

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def YEAR(self):
            return self.getToken(TeradataSQLParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(TeradataSQLParser.MONTH, 0)

        def WEEK(self):
            return self.getToken(TeradataSQLParser.WEEK, 0)

        def DAYOFMONTH(self):
            return self.getToken(TeradataSQLParser.DAYOFMONTH, 0)

        def HOUR(self):
            return self.getToken(TeradataSQLParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(TeradataSQLParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(TeradataSQLParser.SECOND, 0)

        def LAST_DAY(self):
            return self.getToken(TeradataSQLParser.LAST_DAY, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def NEXT_DAY(self):
            return self.getToken(TeradataSQLParser.NEXT_DAY, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def MONTHS_BETWEEN(self):
            return self.getToken(TeradataSQLParser.MONTHS_BETWEEN, 0)

        def ADD_MONTHS(self):
            return self.getToken(TeradataSQLParser.ADD_MONTHS, 0)

        def OADD_MONTHS(self):
            return self.getToken(TeradataSQLParser.OADD_MONTHS, 0)

        def EXTRACT(self):
            return self.getToken(TeradataSQLParser.EXTRACT, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def DAY(self):
            return self.getToken(TeradataSQLParser.DAY, 0)

        def TIMEZONE_HOUR(self):
            return self.getToken(TeradataSQLParser.TIMEZONE_HOUR, 0)

        def TIMEZONE_MINUTE(self):
            return self.getToken(TeradataSQLParser.TIMEZONE_MINUTE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_date_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_function" ):
                listener.enterDate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_function" ):
                listener.exitDate_function(self)




    def date_function(self):

        localctx = TeradataSQLParser.Date_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_date_function)
        self._la = 0 # Token type
        try:
            self.state = 11879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1533,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11829
                _la = self._input.LA(1)
                if not(_la==185 or _la==248 or _la==258 or _la==368 or _la==478 or _la==1076 or _la==1099):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11830
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11831
                self.scalar_expr(0)
                self.state = 11832
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11834
                    self.td_sysfnlib()


                self.state = 11837
                self.match(TeradataSQLParser.LAST_DAY)
                self.state = 11838
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11839
                self.scalar_expr(0)
                self.state = 11840
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11842
                    self.td_sysfnlib()


                self.state = 11845
                self.match(TeradataSQLParser.NEXT_DAY)
                self.state = 11846
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11847
                self.scalar_expr(0)
                self.state = 11848
                self.match(TeradataSQLParser.COMMA)
                self.state = 11849
                localctx.day_value = self.char_string_literal()
                self.state = 11850
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11852
                    self.td_sysfnlib()


                self.state = 11855
                self.match(TeradataSQLParser.MONTHS_BETWEEN)
                self.state = 11856
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11857
                self.scalar_expr(0)
                self.state = 11858
                self.match(TeradataSQLParser.COMMA)
                self.state = 11859
                self.scalar_expr(0)
                self.state = 11860
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11862
                    self.td_sysfnlib()


                self.state = 11865
                _la = self._input.LA(1)
                if not(_la==9 or _la==814):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11866
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11867
                self.scalar_expr(0)
                self.state = 11868
                self.match(TeradataSQLParser.COMMA)
                self.state = 11869
                self.scalar_expr(0)
                self.state = 11870
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 11872
                self.match(TeradataSQLParser.EXTRACT)
                self.state = 11873
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11874
                _la = self._input.LA(1)
                if not(_la==106 or _la==185 or _la==248 or _la==258 or ((((_la - 368)) & ~0x3f) == 0 and ((1 << (_la - 368)) & 108086391056891905) != 0) or _la==478):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11875
                self.match(TeradataSQLParser.FROM)
                self.state = 11876
                self.scalar_expr(0)
                self.state = 11877
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def HASHAMP(self):
            return self.getToken(TeradataSQLParser.HASHAMP, 0)

        def HASHBAKAMP(self):
            return self.getToken(TeradataSQLParser.HASHBAKAMP, 0)

        def hash_bucket_number_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Hash_bucket_number_exprContext,0)


        def HASHBUCKET(self):
            return self.getToken(TeradataSQLParser.HASHBUCKET, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def HASHROW(self):
            return self.getToken(TeradataSQLParser.HASHROW, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_hash_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_function" ):
                listener.enterHash_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_function" ):
                listener.exitHash_function(self)




    def hash_function(self):

        localctx = TeradataSQLParser.Hash_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_hash_function)
        self._la = 0 # Token type
        try:
            self.state = 11909
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1535,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11881
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11882
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11883
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11884
                _la = self._input.LA(1)
                if not(_la==179 or _la==180):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 11885
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11886
                self.hash_bucket_number_expr()
                self.state = 11887
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11889
                self.match(TeradataSQLParser.HASHBUCKET)
                self.state = 11890
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11891
                self.scalar_expr(0)
                self.state = 11892
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 11894
                self.match(TeradataSQLParser.HASHROW)
                self.state = 11895
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11896
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 11897
                self.match(TeradataSQLParser.HASHROW)
                self.state = 11898
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11899
                self.scalar_expr(0)
                self.state = 11904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 11900
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 11901
                    self.scalar_expr(0)
                    self.state = 11906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 11907
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lob_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def EMPTY_BLOB(self):
            return self.getToken(TeradataSQLParser.EMPTY_BLOB, 0)

        def EMPTY_CLOB(self):
            return self.getToken(TeradataSQLParser.EMPTY_CLOB, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_lob_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLob_function" ):
                listener.enterLob_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLob_function" ):
                listener.exitLob_function(self)




    def lob_function(self):

        localctx = TeradataSQLParser.Lob_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_lob_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 11912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1091:
                self.state = 11911
                self.td_sysfnlib()


            self.state = 11914
            _la = self._input.LA(1)
            if not(_la==650 or _la==651):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 11915
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 11916
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name_string = None # Char_string_literalContext
            self.database_name_string = None # Char_string_literalContext
            self.object_name_string = None # Char_string_literalContext
            self.object_kind_string = None # Char_string_literalContext
            self.map_slot_string = None # Char_string_literalContext
            self.number_of_primary_amps_string = None # Char_string_literalContext
            self.colocation_name_string = None # Char_string_literalContext

        def CONTIGUOUSMAPAMPS(self):
            return self.getToken(TeradataSQLParser.CONTIGUOUSMAPAMPS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def syslib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SyslibContext,0)


        def SPARSEMAPAMPS(self):
            return self.getToken(TeradataSQLParser.SPARSEMAPAMPS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def SPARSETABLEAMPS(self):
            return self.getToken(TeradataSQLParser.SPARSETABLEAMPS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_map_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_function" ):
                listener.enterMap_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_function" ):
                listener.exitMap_function(self)




    def map_function(self):

        localctx = TeradataSQLParser.Map_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_map_function)
        self._la = 0 # Token type
        try:
            self.state = 11954
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1540,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11918
                    self.syslib()


                self.state = 11921
                self.match(TeradataSQLParser.CONTIGUOUSMAPAMPS)
                self.state = 11922
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11923
                localctx.map_name_string = self.char_string_literal()
                self.state = 11924
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11926
                    self.syslib()


                self.state = 11929
                self.match(TeradataSQLParser.SPARSEMAPAMPS)
                self.state = 11930
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11931
                localctx.database_name_string = self.char_string_literal()
                self.state = 11932
                self.match(TeradataSQLParser.COMMA)
                self.state = 11933
                localctx.object_name_string = self.char_string_literal()
                self.state = 11934
                self.match(TeradataSQLParser.COMMA)
                self.state = 11935
                localctx.object_kind_string = self.char_string_literal()
                self.state = 11936
                self.match(TeradataSQLParser.COMMA)
                self.state = 11937
                localctx.map_slot_string = self.char_string_literal()
                self.state = 11938
                self.match(TeradataSQLParser.COMMA)
                self.state = 11939
                localctx.number_of_primary_amps_string = self.char_string_literal()
                self.state = 11940
                self.match(TeradataSQLParser.COMMA)
                self.state = 11941
                localctx.colocation_name_string = self.char_string_literal()
                self.state = 11942
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1088:
                    self.state = 11944
                    self.syslib()


                self.state = 11947
                self.match(TeradataSQLParser.SPARSETABLEAMPS)
                self.state = 11948
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11949
                localctx.database_name_string = self.char_string_literal()
                self.state = 11950
                self.match(TeradataSQLParser.COMMA)
                self.state = 11951
                localctx.object_name_string = self.char_string_literal()
                self.state = 11952
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nvl_funtionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NVL(self):
            return self.getToken(TeradataSQLParser.NVL, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def NVL2(self):
            return self.getToken(TeradataSQLParser.NVL2, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_nvl_funtion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNvl_funtion" ):
                listener.enterNvl_funtion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNvl_funtion" ):
                listener.exitNvl_funtion(self)




    def nvl_funtion(self):

        localctx = TeradataSQLParser.Nvl_funtionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_nvl_funtion)
        self._la = 0 # Token type
        try:
            self.state = 11978
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1543,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11956
                    self.td_sysfnlib()


                self.state = 11959
                self.match(TeradataSQLParser.NVL)
                self.state = 11960
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11961
                self.scalar_expr(0)
                self.state = 11962
                self.match(TeradataSQLParser.COMMA)
                self.state = 11963
                self.scalar_expr(0)
                self.state = 11964
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 11966
                    self.td_sysfnlib()


                self.state = 11969
                self.match(TeradataSQLParser.NVL2)
                self.state = 11970
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11971
                self.scalar_expr(0)
                self.state = 11972
                self.match(TeradataSQLParser.COMMA)
                self.state = 11973
                self.scalar_expr(0)
                self.state = 11974
                self.match(TeradataSQLParser.COMMA)
                self.state = 11975
                self.scalar_expr(0)
                self.state = 11976
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Period_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(TeradataSQLParser.BEGIN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def END(self):
            return self.getToken(TeradataSQLParser.END, 0)

        def IS(self):
            return self.getToken(TeradataSQLParser.IS, 0)

        def UNTIL_CHANGED(self):
            return self.getToken(TeradataSQLParser.UNTIL_CHANGED, 0)

        def UNTIL_CLOSED(self):
            return self.getToken(TeradataSQLParser.UNTIL_CLOSED, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def INTERVAL(self):
            return self.getToken(TeradataSQLParser.INTERVAL, 0)

        def interval_period_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Interval_period_specContext,0)


        def LAST(self):
            return self.getToken(TeradataSQLParser.LAST, 0)

        def NEXT(self):
            return self.getToken(TeradataSQLParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(TeradataSQLParser.PRIOR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_period_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeriod_function" ):
                listener.enterPeriod_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeriod_function" ):
                listener.exitPeriod_function(self)




    def period_function(self):

        localctx = TeradataSQLParser.Period_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_period_function)
        self._la = 0 # Token type
        try:
            self.state = 12021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1545,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 11980
                self.match(TeradataSQLParser.BEGIN)
                self.state = 11981
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11982
                self.scalar_expr(0)
                self.state = 11983
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 11985
                self.match(TeradataSQLParser.END)
                self.state = 11986
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11987
                self.scalar_expr(0)
                self.state = 11988
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 11990
                self.match(TeradataSQLParser.END)
                self.state = 11991
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 11992
                self.scalar_expr(0)
                self.state = 11993
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 11994
                self.match(TeradataSQLParser.IS)
                self.state = 11996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 11995
                    self.match(TeradataSQLParser.NOT)


                self.state = 11998
                _la = self._input.LA(1)
                if not(_la==450 or _la==451):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12000
                self.match(TeradataSQLParser.INTERVAL)
                self.state = 12001
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12002
                self.scalar_expr(0)
                self.state = 12003
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 12004
                self.interval_period_spec()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12006
                self.match(TeradataSQLParser.LAST)
                self.state = 12007
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12008
                self.scalar_expr(0)
                self.state = 12009
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12011
                self.match(TeradataSQLParser.NEXT)
                self.state = 12012
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12013
                self.scalar_expr(0)
                self.state = 12014
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 12016
                self.match(TeradataSQLParser.PRIOR)
                self.state = 12017
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12018
                self.scalar_expr(0)
                self.state = 12019
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regexp_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.source_string = None # Scalar_exprContext
            self.regexp_string = None # Scalar_exprContext
            self.position_arg = None # Scalar_exprContext
            self.occurrence_arg = None # Scalar_exprContext
            self.match_arg = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.return_opt = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext

        def REGEXP_SUBSTR(self):
            return self.getToken(TeradataSQLParser.REGEXP_SUBSTR, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def REGEXP_REPLACE(self):
            return self.getToken(TeradataSQLParser.REGEXP_REPLACE, 0)

        def REGEXP_INSTR(self):
            return self.getToken(TeradataSQLParser.REGEXP_INSTR, 0)

        def REGEXP_SIMILAR(self):
            return self.getToken(TeradataSQLParser.REGEXP_SIMILAR, 0)

        def REGEXP_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLParser.REGEXP_SPLIT_TO_TABLE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_regexp_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexp_function" ):
                listener.enterRegexp_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexp_function" ):
                listener.exitRegexp_function(self)




    def regexp_function(self):

        localctx = TeradataSQLParser.Regexp_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_regexp_function)
        self._la = 0 # Token type
        try:
            self.state = 12112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1555,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12023
                    self.td_sysfnlib()


                self.state = 12026
                self.match(TeradataSQLParser.REGEXP_SUBSTR)
                self.state = 12027
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12028
                localctx.source_string = self.scalar_expr(0)
                self.state = 12029
                self.match(TeradataSQLParser.COMMA)
                self.state = 12030
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12031
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12032
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 12033
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12034
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 12035
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12036
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 12040
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12042
                    self.td_sysfnlib()


                self.state = 12045
                self.match(TeradataSQLParser.REGEXP_REPLACE)
                self.state = 12046
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12047
                localctx.source_string = self.scalar_expr(0)
                self.state = 12048
                self.match(TeradataSQLParser.COMMA)
                self.state = 12049
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12050
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12051
                    localctx.replace_string = self.scalar_expr(0)
                    self.state = 12052
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12053
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 12054
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12055
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 12056
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12057
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 12061
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12063
                    self.td_sysfnlib()


                self.state = 12066
                self.match(TeradataSQLParser.REGEXP_INSTR)
                self.state = 12067
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12068
                localctx.source_string = self.scalar_expr(0)
                self.state = 12069
                self.match(TeradataSQLParser.COMMA)
                self.state = 12070
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12071
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12072
                    localctx.position_arg = self.scalar_expr(0)
                    self.state = 12073
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12074
                    localctx.occurrence_arg = self.scalar_expr(0)
                    self.state = 12075
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12076
                    localctx.return_opt = self.scalar_expr(0)
                    self.state = 12077
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12078
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 12082
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12084
                    self.td_sysfnlib()


                self.state = 12087
                self.match(TeradataSQLParser.REGEXP_SIMILAR)
                self.state = 12088
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12089
                localctx.source_string = self.scalar_expr(0)
                self.state = 12090
                self.match(TeradataSQLParser.COMMA)
                self.state = 12091
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12092
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12093
                    localctx.match_arg = self.scalar_expr(0)


                self.state = 12096
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12098
                    self.td_sysfnlib()


                self.state = 12101
                self.match(TeradataSQLParser.REGEXP_SPLIT_TO_TABLE)
                self.state = 12102
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12103
                localctx.in_k = self.scalar_expr(0)
                self.state = 12104
                self.match(TeradataSQLParser.COMMA)
                self.state = 12105
                localctx.source_string = self.scalar_expr(0)
                self.state = 12106
                self.match(TeradataSQLParser.COMMA)
                self.state = 12107
                localctx.regexp_string = self.scalar_expr(0)
                self.state = 12108
                self.match(TeradataSQLParser.COMMA)
                self.state = 12109
                localctx.match_arg = self.scalar_expr(0)
                self.state = 12110
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.delim_string_value = None # Char_string_literalContext
            self.quote_string_value = None # Char_string_literalContext
            self.data_string_value = None # Scalar_exprContext
            self.ci = None # Integer_literalContext
            self.cd = None # Integer_literalContext
            self.cs = None # Integer_literalContext
            self.ct = None # Integer_literalContext
            self.source_string = None # Scalar_exprContext
            self.search_string = None # Scalar_exprContext
            self.position = None # Scalar_exprContext
            self.occurrence = None # Scalar_exprContext
            self.length = None # Scalar_exprContext
            self.fill_string = None # Scalar_exprContext
            self.in_string = None # Scalar_exprContext
            self.name_to_search = None # Scalar_exprContext
            self.name_delimiters = None # Scalar_exprContext
            self.value_delimiters = None # Scalar_exprContext
            self.replace_string = None # Scalar_exprContext
            self.from_string = None # Scalar_exprContext
            self.to_string = None # Scalar_exprContext
            self.delimiter = None # Scalar_exprContext
            self.token_num = None # Scalar_exprContext
            self.in_k = None # Scalar_exprContext
            self.delimiters = None # Scalar_exprContext
            self.out_k = None # Column_specContext
            self.out_token_num = None # Column_specContext
            self.out_token = None # Column_specContext
            self.string_expr = None # Scalar_exprContext
            self.trim_expr = None # Scalar_exprContext

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OPEN_PAR)
            else:
                return self.getToken(TeradataSQLParser.OPEN_PAR, i)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CLOSE_PAR)
            else:
                return self.getToken(TeradataSQLParser.CLOSE_PAR, i)

        def ASCII(self):
            return self.getToken(TeradataSQLParser.ASCII, 0)

        def CHR(self):
            return self.getToken(TeradataSQLParser.CHR, 0)

        def INITCAP(self):
            return self.getToken(TeradataSQLParser.INITCAP, 0)

        def LENGTH(self):
            return self.getToken(TeradataSQLParser.LENGTH, 0)

        def REVERSE(self):
            return self.getToken(TeradataSQLParser.REVERSE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def CHAR2HEXINT(self):
            return self.getToken(TeradataSQLParser.CHAR2HEXINT, 0)

        def SOUNDEX(self):
            return self.getToken(TeradataSQLParser.SOUNDEX, 0)

        def STRING_CS(self):
            return self.getToken(TeradataSQLParser.STRING_CS, 0)

        def VARGRAPHIC(self):
            return self.getToken(TeradataSQLParser.VARGRAPHIC, 0)

        def CONCAT(self):
            return self.getToken(TeradataSQLParser.CONCAT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def CSV(self):
            return self.getToken(TeradataSQLParser.CSV, 0)

        def NEW(self):
            return self.getToken(TeradataSQLParser.NEW, 0)

        def VARIANT(self):
            return self.getToken(TeradataSQLParser.VARIANT, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def CSVLD(self):
            return self.getToken(TeradataSQLParser.CSVLD, 0)

        def EDITDISTANCE(self):
            return self.getToken(TeradataSQLParser.EDITDISTANCE, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def INSTR(self):
            return self.getToken(TeradataSQLParser.INSTR, 0)

        def LEFT(self):
            return self.getToken(TeradataSQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(TeradataSQLParser.RIGHT, 0)

        def LOCATE(self):
            return self.getToken(TeradataSQLParser.LOCATE, 0)

        def LOWER(self):
            return self.getToken(TeradataSQLParser.LOWER, 0)

        def UPPER(self):
            return self.getToken(TeradataSQLParser.UPPER, 0)

        def UCASE(self):
            return self.getToken(TeradataSQLParser.UCASE, 0)

        def LPAD(self):
            return self.getToken(TeradataSQLParser.LPAD, 0)

        def RPAD(self):
            return self.getToken(TeradataSQLParser.RPAD, 0)

        def LTRIM(self):
            return self.getToken(TeradataSQLParser.LTRIM, 0)

        def RTRIM(self):
            return self.getToken(TeradataSQLParser.RTRIM, 0)

        def NGRAM(self):
            return self.getToken(TeradataSQLParser.NGRAM, 0)

        def NVP(self):
            return self.getToken(TeradataSQLParser.NVP, 0)

        def OREPLACE(self):
            return self.getToken(TeradataSQLParser.OREPLACE, 0)

        def OTRANSLATE(self):
            return self.getToken(TeradataSQLParser.OTRANSLATE, 0)

        def POSITION(self):
            return self.getToken(TeradataSQLParser.POSITION, 0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def STRTOK(self):
            return self.getToken(TeradataSQLParser.STRTOK, 0)

        def STRTOK_SPLIT_TO_TABLE(self):
            return self.getToken(TeradataSQLParser.STRTOK_SPLIT_TO_TABLE, 0)

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def column_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_specContext,i)


        def SUBSTRING(self):
            return self.getToken(TeradataSQLParser.SUBSTRING, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def SUBSTR(self):
            return self.getToken(TeradataSQLParser.SUBSTR, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def translation_mapping(self):
            return self.getTypedRuleContext(TeradataSQLParser.Translation_mappingContext,0)


        def TRANSLATE(self):
            return self.getToken(TeradataSQLParser.TRANSLATE, 0)

        def TRANSLATE_CHK(self):
            return self.getToken(TeradataSQLParser.TRANSLATE_CHK, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def ERROR(self):
            return self.getToken(TeradataSQLParser.ERROR, 0)

        def TRIM(self):
            return self.getToken(TeradataSQLParser.TRIM, 0)

        def BOTH(self):
            return self.getToken(TeradataSQLParser.BOTH, 0)

        def TRAILING(self):
            return self.getToken(TeradataSQLParser.TRAILING, 0)

        def LEADING(self):
            return self.getToken(TeradataSQLParser.LEADING, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_string_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_function" ):
                listener.enterString_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_function" ):
                listener.exitString_function(self)




    def string_function(self):

        localctx = TeradataSQLParser.String_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_string_function)
        self._la = 0 # Token type
        try:
            self.state = 12427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1590,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12114
                    self.td_sysfnlib()


                self.state = 12117
                _la = self._input.LA(1)
                if not(_la==535 or _la==572 or _la==708 or _la==739 or _la==1084):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12118
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12119
                self.scalar_expr(0)
                self.state = 12120
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12122
                _la = self._input.LA(1)
                if not(_la==54 or _la==383 or _la==399 or _la==465):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12123
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12124
                self.scalar_expr(0)
                self.state = 12125
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12127
                self.match(TeradataSQLParser.CONCAT)
                self.state = 12128
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12129
                self.scalar_expr(0)
                self.state = 12130
                self.match(TeradataSQLParser.COMMA)
                self.state = 12131
                self.scalar_expr(0)
                self.state = 12136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12132
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12133
                    self.scalar_expr(0)
                    self.state = 12138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12139
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12141
                    self.td_sysfnlib()


                self.state = 12144
                self.match(TeradataSQLParser.CSV)
                self.state = 12145
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12146
                self.match(TeradataSQLParser.NEW)
                self.state = 12147
                self.match(TeradataSQLParser.VARIANT)
                self.state = 12148
                self.match(TeradataSQLParser.TYPE)
                self.state = 12149
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12150
                self.scalar_expr(0)
                self.state = 12155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12151
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12152
                    self.scalar_expr(0)
                    self.state = 12157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12158
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 12159
                self.match(TeradataSQLParser.COMMA)
                self.state = 12160
                localctx.delim_string_value = self.char_string_literal()
                self.state = 12161
                self.match(TeradataSQLParser.COMMA)
                self.state = 12162
                localctx.quote_string_value = self.char_string_literal()
                self.state = 12163
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12165
                    self.td_sysfnlib()


                self.state = 12168
                self.match(TeradataSQLParser.CSVLD)
                self.state = 12169
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12170
                localctx.data_string_value = self.scalar_expr(0)
                self.state = 12171
                self.match(TeradataSQLParser.COMMA)
                self.state = 12172
                localctx.delim_string_value = self.char_string_literal()
                self.state = 12173
                self.match(TeradataSQLParser.COMMA)
                self.state = 12174
                localctx.quote_string_value = self.char_string_literal()
                self.state = 12175
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12177
                    self.td_sysfnlib()


                self.state = 12180
                self.match(TeradataSQLParser.EDITDISTANCE)
                self.state = 12181
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12182
                self.scalar_expr(0)
                self.state = 12183
                self.match(TeradataSQLParser.COMMA)
                self.state = 12184
                self.scalar_expr(0)
                self.state = 12194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12185
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12186
                    localctx.ci = self.integer_literal()
                    self.state = 12187
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12188
                    localctx.cd = self.integer_literal()
                    self.state = 12189
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12190
                    localctx.cs = self.integer_literal()
                    self.state = 12191
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12192
                    localctx.ct = self.integer_literal()


                self.state = 12196
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 12198
                self.match(TeradataSQLParser.INDEX)
                self.state = 12199
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12200
                self.scalar_expr(0)
                self.state = 12201
                self.match(TeradataSQLParser.COMMA)
                self.state = 12202
                self.scalar_expr(0)
                self.state = 12203
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 12206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12205
                    self.td_sysfnlib()


                self.state = 12208
                self.match(TeradataSQLParser.INSTR)
                self.state = 12209
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12210
                localctx.source_string = self.scalar_expr(0)
                self.state = 12211
                self.match(TeradataSQLParser.COMMA)
                self.state = 12212
                localctx.search_string = self.scalar_expr(0)
                self.state = 12219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12213
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12214
                    localctx.position = self.scalar_expr(0)
                    self.state = 12217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 12215
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 12216
                        localctx.occurrence = self.scalar_expr(0)




                self.state = 12221
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 12224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12223
                    self.td_sysfnlib()


                self.state = 12226
                _la = self._input.LA(1)
                if not(_la==219 or _la==355):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12227
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12228
                localctx.source_string = self.scalar_expr(0)
                self.state = 12229
                self.match(TeradataSQLParser.COMMA)
                self.state = 12230
                localctx.length = self.scalar_expr(0)
                self.state = 12231
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 12233
                self.match(TeradataSQLParser.LOCATE)
                self.state = 12234
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12235
                self.scalar_expr(0)
                self.state = 12236
                self.match(TeradataSQLParser.COMMA)
                self.state = 12237
                self.scalar_expr(0)
                self.state = 12240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12238
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12239
                    self.scalar_expr(0)


                self.state = 12242
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 12244
                _la = self._input.LA(1)
                if not(_la==233 or _la==454 or _la==1011):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12245
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12246
                self.scalar_expr(0)
                self.state = 12247
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 12250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12249
                    self.td_sysfnlib()


                self.state = 12252
                _la = self._input.LA(1)
                if not(_la==746 or _la==898):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12253
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12254
                localctx.source_string = self.scalar_expr(0)
                self.state = 12255
                self.match(TeradataSQLParser.COMMA)
                self.state = 12256
                localctx.length = self.scalar_expr(0)
                self.state = 12259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12257
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12258
                    localctx.fill_string = self.scalar_expr(0)


                self.state = 12261
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 12264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12263
                    self.td_sysfnlib()


                self.state = 12266
                _la = self._input.LA(1)
                if not(_la==747 or _la==899):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12267
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12268
                self.scalar_expr(0)
                self.state = 12271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12269
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12270
                    self.scalar_expr(0)


                self.state = 12273
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 12276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12275
                    self.td_sysfnlib()


                self.state = 12278
                self.match(TeradataSQLParser.NGRAM)
                self.state = 12279
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12280
                self.scalar_expr(0)
                self.state = 12281
                self.match(TeradataSQLParser.COMMA)
                self.state = 12282
                self.scalar_expr(0)
                self.state = 12283
                self.match(TeradataSQLParser.COMMA)
                self.state = 12284
                localctx.length = self.scalar_expr(0)
                self.state = 12287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12285
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12286
                    localctx.position = self.scalar_expr(0)


                self.state = 12289
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 12292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12291
                    self.td_sysfnlib()


                self.state = 12294
                self.match(TeradataSQLParser.NVP)
                self.state = 12295
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12296
                localctx.in_string = self.scalar_expr(0)
                self.state = 12297
                self.match(TeradataSQLParser.COMMA)
                self.state = 12298
                localctx.name_to_search = self.scalar_expr(0)
                self.state = 12309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12299
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12300
                    localctx.name_delimiters = self.scalar_expr(0)
                    self.state = 12307
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 12301
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 12302
                        localctx.value_delimiters = self.scalar_expr(0)
                        self.state = 12305
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1208:
                            self.state = 12303
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 12304
                            localctx.occurrence = self.scalar_expr(0)






                self.state = 12311
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 12314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12313
                    self.td_sysfnlib()


                self.state = 12316
                self.match(TeradataSQLParser.OREPLACE)
                self.state = 12317
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12318
                localctx.source_string = self.scalar_expr(0)
                self.state = 12319
                self.match(TeradataSQLParser.COMMA)
                self.state = 12320
                localctx.search_string = self.scalar_expr(0)
                self.state = 12323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12321
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12322
                    localctx.replace_string = self.scalar_expr(0)


                self.state = 12325
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 12328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12327
                    self.td_sysfnlib()


                self.state = 12330
                self.match(TeradataSQLParser.OTRANSLATE)
                self.state = 12331
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12332
                localctx.source_string = self.scalar_expr(0)
                self.state = 12333
                self.match(TeradataSQLParser.COMMA)
                self.state = 12334
                localctx.from_string = self.scalar_expr(0)
                self.state = 12335
                self.match(TeradataSQLParser.COMMA)
                self.state = 12336
                localctx.to_string = self.scalar_expr(0)
                self.state = 12337
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 12339
                self.match(TeradataSQLParser.POSITION)
                self.state = 12340
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12341
                self.scalar_expr(0)
                self.state = 12342
                self.match(TeradataSQLParser.IN)
                self.state = 12343
                self.scalar_expr(0)
                self.state = 12344
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 12347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12346
                    self.td_sysfnlib()


                self.state = 12349
                self.match(TeradataSQLParser.STRTOK)
                self.state = 12350
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12351
                localctx.in_string = self.scalar_expr(0)
                self.state = 12358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12352
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12353
                    localctx.delimiter = self.scalar_expr(0)
                    self.state = 12356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 12354
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 12355
                        localctx.token_num = self.scalar_expr(0)




                self.state = 12360
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 12363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12362
                    self.td_sysfnlib()


                self.state = 12365
                self.match(TeradataSQLParser.STRTOK_SPLIT_TO_TABLE)
                self.state = 12366
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12367
                localctx.in_k = self.scalar_expr(0)
                self.state = 12368
                self.match(TeradataSQLParser.COMMA)
                self.state = 12369
                localctx.in_string = self.scalar_expr(0)
                self.state = 12370
                self.match(TeradataSQLParser.COMMA)
                self.state = 12371
                localctx.delimiters = self.scalar_expr(0)
                self.state = 12372
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 12373
                self.match(TeradataSQLParser.RETURNS)
                self.state = 12374
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12375
                localctx.out_k = self.column_spec()
                self.state = 12376
                self.match(TeradataSQLParser.COMMA)
                self.state = 12377
                localctx.out_token_num = self.column_spec()
                self.state = 12378
                self.match(TeradataSQLParser.COMMA)
                self.state = 12379
                localctx.out_token = self.column_spec()
                self.state = 12380
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 12382
                self.match(TeradataSQLParser.SUBSTRING)
                self.state = 12383
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12384
                self.scalar_expr(0)
                self.state = 12385
                self.match(TeradataSQLParser.FROM)
                self.state = 12386
                self.scalar_expr(0)
                self.state = 12389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 12387
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12388
                    self.scalar_expr(0)


                self.state = 12391
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 12393
                _la = self._input.LA(1)
                if not(_la==401 or _la==402):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12394
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12395
                self.scalar_expr(0)
                self.state = 12396
                self.match(TeradataSQLParser.COMMA)
                self.state = 12397
                self.scalar_expr(0)
                self.state = 12400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==159 or _la==1208:
                    self.state = 12398
                    _la = self._input.LA(1)
                    if not(_la==159 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12399
                    self.scalar_expr(0)


                self.state = 12402
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 12404
                _la = self._input.LA(1)
                if not(_la==433 or _la==434):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12405
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12406
                localctx.string_expr = self.scalar_expr(0)
                self.state = 12407
                self.match(TeradataSQLParser.USING)
                self.state = 12408
                self.translation_mapping()
                self.state = 12411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 12409
                    self.match(TeradataSQLParser.WITH)
                    self.state = 12410
                    self.match(TeradataSQLParser.ERROR)


                self.state = 12413
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 12415
                self.match(TeradataSQLParser.TRIM)
                self.state = 12416
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39 or _la==217 or _la==429:
                    self.state = 12417
                    _la = self._input.LA(1)
                    if not(_la==39 or _la==217 or _la==429):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 573549270456599272) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 176273788747777) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & 291012140704473089) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & 5809743158531211521) != 0) or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & 4602947238656737415) != 0) or ((((_la - 355)) & ~0x3f) == 0 and ((1 << (_la - 355)) & 14027604034136453) != 0) or ((((_la - 421)) & ~0x3f) == 0 and ((1 << (_la - 421)) & 432366497898278931) != 0) or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or ((((_la - 1192)) & ~0x3f) == 0 and ((1 << (_la - 1192)) & 1613012479) != 0):
                        self.state = 12418
                        localctx.trim_expr = self.scalar_expr(0)


                    self.state = 12421
                    self.match(TeradataSQLParser.FROM)


                self.state = 12424
                localctx.string_expr = self.scalar_expr(0)
                self.state = 12425
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_expr = None # Scalar_exprContext
            self.bson_data = None # Scalar_exprContext
            self.check_type = None # Char_string_literalContext
            self.geom_expr = None # Scalar_exprContext
            self.precision = None # Integer_literalContext
            self.geojson_expr = None # Scalar_exprContext
            self.asrid = None # Integer_literalContext
            self.json_string = None # Scalar_exprContext
            self.json_object = None # Scalar_exprContext
            self.json_path = None # Scalar_exprContext
            self.nvp_string = None # Scalar_exprContext
            self.name_delimiters = None # Char_string_literalContext
            self.value_delimiters = None # Char_string_literalContext
            self.ignore_characters = None # Char_string_literalContext

        def ARRAY_TO_JSON(self):
            return self.getToken(TeradataSQLParser.ARRAY_TO_JSON, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Returns_clauseContext,0)


        def BSON_CHECK(self):
            return self.getToken(TeradataSQLParser.BSON_CHECK, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLParser.DATASIZE, 0)

        def GEOJSONFROMGEOM(self):
            return self.getToken(TeradataSQLParser.GEOJSONFROMGEOM, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def GEOMFROMGEOJSON(self):
            return self.getToken(TeradataSQLParser.GEOMFROMGEOJSON, 0)

        def JSON_CHECK(self):
            return self.getToken(TeradataSQLParser.JSON_CHECK, 0)

        def JSONGETVALUE(self):
            return self.getToken(TeradataSQLParser.JSONGETVALUE, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def JSONMETADATA(self):
            return self.getToken(TeradataSQLParser.JSONMETADATA, 0)

        def NVP2JSON(self):
            return self.getToken(TeradataSQLParser.NVP2JSON, 0)

        def JSON_AGG(self):
            return self.getToken(TeradataSQLParser.JSON_AGG, 0)

        def json_param_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Json_param_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Json_param_specContext,i)


        def JSON_COMPOSE(self):
            return self.getToken(TeradataSQLParser.JSON_COMPOSE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_json_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_function" ):
                listener.enterJson_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_function" ):
                listener.exitJson_function(self)




    def json_function(self):

        localctx = TeradataSQLParser.Json_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_json_function)
        self._la = 0 # Token type
        try:
            self.state = 12551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1608,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12429
                    self.td_sysfnlib()


                self.state = 12432
                self.match(TeradataSQLParser.ARRAY_TO_JSON)
                self.state = 12433
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12434
                localctx.array_expr = self.scalar_expr(0)
                self.state = 12435
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 12437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1592,self._ctx)
                if la_ == 1:
                    self.state = 12436
                    self.returns_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12439
                    self.td_sysfnlib()


                self.state = 12442
                self.match(TeradataSQLParser.BSON_CHECK)
                self.state = 12443
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12444
                localctx.bson_data = self.scalar_expr(0)
                self.state = 12447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12445
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12446
                    localctx.check_type = self.char_string_literal()


                self.state = 12449
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12451
                    self.td_sysfnlib()


                self.state = 12454
                self.match(TeradataSQLParser.DATASIZE)
                self.state = 12455
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12456
                self.scalar_expr(0)
                self.state = 12457
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12459
                    self.td_sysfnlib()


                self.state = 12462
                self.match(TeradataSQLParser.GEOJSONFROMGEOM)
                self.state = 12463
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12464
                localctx.geom_expr = self.scalar_expr(0)
                self.state = 12467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12465
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12466
                    localctx.precision = self.integer_literal()


                self.state = 12469
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 12471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1598,self._ctx)
                if la_ == 1:
                    self.state = 12470
                    self.returns_clause()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12473
                    self.td_sysfnlib()


                self.state = 12476
                self.match(TeradataSQLParser.GEOMFROMGEOJSON)
                self.state = 12477
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12478
                localctx.geojson_expr = self.scalar_expr(0)
                self.state = 12479
                self.match(TeradataSQLParser.COMMA)
                self.state = 12480
                localctx.asrid = self.integer_literal()
                self.state = 12481
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12483
                    self.td_sysfnlib()


                self.state = 12486
                self.match(TeradataSQLParser.JSON_CHECK)
                self.state = 12487
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12488
                localctx.json_string = self.scalar_expr(0)
                self.state = 12489
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 12491
                self.match(TeradataSQLParser.JSONGETVALUE)
                self.state = 12492
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12493
                localctx.json_object = self.scalar_expr(0)
                self.state = 12494
                self.match(TeradataSQLParser.COMMA)
                self.state = 12495
                localctx.json_path = self.scalar_expr(0)
                self.state = 12496
                self.match(TeradataSQLParser.AS)
                self.state = 12497
                self.data_type()
                self.state = 12498
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 12500
                self.match(TeradataSQLParser.JSONMETADATA)
                self.state = 12501
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12502
                localctx.json_object = self.scalar_expr(0)
                self.state = 12503
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 12506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12505
                    self.td_sysfnlib()


                self.state = 12508
                self.match(TeradataSQLParser.NVP2JSON)
                self.state = 12509
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12510
                localctx.nvp_string = self.scalar_expr(0)
                self.state = 12519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12511
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12512
                    localctx.name_delimiters = self.char_string_literal()
                    self.state = 12513
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12514
                    localctx.value_delimiters = self.char_string_literal()
                    self.state = 12517
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1208:
                        self.state = 12515
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 12516
                        localctx.ignore_characters = self.char_string_literal()




                self.state = 12521
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 12523
                self.match(TeradataSQLParser.JSON_AGG)
                self.state = 12524
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12525
                self.json_param_spec()
                self.state = 12530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12526
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12527
                    self.json_param_spec()
                    self.state = 12532
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12533
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 12535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1605,self._ctx)
                if la_ == 1:
                    self.state = 12534
                    self.returns_clause()


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 12537
                self.match(TeradataSQLParser.JSON_COMPOSE)
                self.state = 12538
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12539
                self.json_param_spec()
                self.state = 12544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12540
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12541
                    self.json_param_spec()
                    self.state = 12546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12547
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 12549
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1607,self._ctx)
                if la_ == 1:
                    self.state = 12548
                    self.returns_clause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_data = None # Scalar_exprContext
            self.xquery_expr = None # Char_string_literalContext
            self.xml_value_exp = None # Scalar_exprContext
            self.xml_value_expr = None # Scalar_exprContext
            self.xml_comment = None # Scalar_exprContext
            self.xml_text = None # Scalar_exprContext
            self.xml_schema = None # Scalar_exprContext
            self.xml_uri = None # Char_string_literalContext
            self.xml_valid_element_name = None # Scalar_exprContext
            self.doc_id = None # Scalar_exprContext
            self.source_doc = None # Scalar_exprContext
            self.split_size = None # Scalar_exprContext
            self.split_path = None # Scalar_exprContext
            self._scalar_expr = None # Scalar_exprContext
            self.replication_list = list() # of Scalar_exprContexts
            self.query_string = None # Scalar_exprContext
            self.xslt = None # Scalar_exprContext
            self.xml_string = None # Scalar_exprContext
            self.result_code = None # Scalar_exprContext
            self.document_grouping_spec = None # Scalar_exprContext

        def CREATEXML(self):
            return self.getToken(TeradataSQLParser.CREATEXML, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def DATASIZE(self):
            return self.getToken(TeradataSQLParser.DATASIZE, 0)

        def td_sysfnlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysfnlibContext,0)


        def XMLQUERY(self):
            return self.getToken(TeradataSQLParser.XMLQUERY, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def xml_query_argument(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_query_argumentContext,0)


        def xml_returning_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_returning_specContext,0)


        def xml_query_on_empty(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_query_on_emptyContext,0)


        def XMLSERIALIZE(self):
            return self.getToken(TeradataSQLParser.XMLSERIALIZE, 0)

        def DOCUMENT(self):
            return self.getToken(TeradataSQLParser.DOCUMENT, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLParser.CONTENT, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def xml_encoding(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_encodingContext,0)


        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def BOM(self):
            return self.getToken(TeradataSQLParser.BOM, 0)

        def VERSION(self):
            return self.getToken(TeradataSQLParser.VERSION, 0)

        def XMLDECLARATION(self):
            return self.getToken(TeradataSQLParser.XMLDECLARATION, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.NO)
            else:
                return self.getToken(TeradataSQLParser.NO, i)

        def INDENT(self):
            return self.getToken(TeradataSQLParser.INDENT, 0)

        def INCLUDING(self):
            return self.getToken(TeradataSQLParser.INCLUDING, 0)

        def EXCLUDING(self):
            return self.getToken(TeradataSQLParser.EXCLUDING, 0)

        def SIZE(self):
            return self.getToken(TeradataSQLParser.SIZE, 0)

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def XMLDOCUMENT(self):
            return self.getToken(TeradataSQLParser.XMLDOCUMENT, 0)

        def XMLELEMENT(self):
            return self.getToken(TeradataSQLParser.XMLELEMENT, 0)

        def NAME(self):
            return self.getToken(TeradataSQLParser.NAME, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def xml_namespace_declaration(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_namespace_declarationContext,0)


        def xml_attribute_declaration(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_attribute_declarationContext,0)


        def xml_value_declaration(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_value_declarationContext,0)


        def XMLFOREST(self):
            return self.getToken(TeradataSQLParser.XMLFOREST, 0)

        def xml_forest_element_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Xml_forest_element_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Xml_forest_element_specContext,i)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_content_option_specContext,0)


        def XMLCONCAT(self):
            return self.getToken(TeradataSQLParser.XMLCONCAT, 0)

        def XMLCOMMENT(self):
            return self.getToken(TeradataSQLParser.XMLCOMMENT, 0)

        def XMLPI(self):
            return self.getToken(TeradataSQLParser.XMLPI, 0)

        def XMLTEXT(self):
            return self.getToken(TeradataSQLParser.XMLTEXT, 0)

        def XMLPARSE(self):
            return self.getToken(TeradataSQLParser.XMLPARSE, 0)

        def WHITESPACE(self):
            return self.getToken(TeradataSQLParser.WHITESPACE, 0)

        def PRESERVE(self):
            return self.getToken(TeradataSQLParser.PRESERVE, 0)

        def STRIP(self):
            return self.getToken(TeradataSQLParser.STRIP, 0)

        def XMLVALIDATE(self):
            return self.getToken(TeradataSQLParser.XMLVALIDATE, 0)

        def ACCORDING(self):
            return self.getToken(TeradataSQLParser.ACCORDING, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def XMLSCHEMA(self):
            return self.getToken(TeradataSQLParser.XMLSCHEMA, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLParser.VALUE, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLParser.SEQUENCE, 0)

        def NAMESPACE(self):
            return self.getToken(TeradataSQLParser.NAMESPACE, 0)

        def ELEMENT(self):
            return self.getToken(TeradataSQLParser.ELEMENT, 0)

        def XMLAGG(self):
            return self.getToken(TeradataSQLParser.XMLAGG, 0)

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_spec_fullContext,i)


        def XMLSPLIT(self):
            return self.getToken(TeradataSQLParser.XMLSPLIT, 0)

        def td_sysxml(self):
            return self.getTypedRuleContext(TeradataSQLParser.Td_sysxmlContext,0)


        def XMLPUBLISH(self):
            return self.getToken(TeradataSQLParser.XMLPUBLISH, 0)

        def XMLPUBLISH_STREAM(self):
            return self.getToken(TeradataSQLParser.XMLPUBLISH_STREAM, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_function" ):
                listener.enterXml_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_function" ):
                listener.exitXml_function(self)




    def xml_function(self):

        localctx = TeradataSQLParser.Xml_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_xml_function)
        self._la = 0 # Token type
        try:
            self.state = 12800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1642,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12553
                self.match(TeradataSQLParser.CREATEXML)
                self.state = 12554
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12555
                localctx.xml_data = self.scalar_expr(0)
                self.state = 12556
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1091:
                    self.state = 12558
                    self.td_sysfnlib()


                self.state = 12561
                self.match(TeradataSQLParser.DATASIZE)
                self.state = 12562
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12563
                self.scalar_expr(0)
                self.state = 12564
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12566
                self.match(TeradataSQLParser.XMLQUERY)
                self.state = 12567
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12568
                localctx.xquery_expr = self.char_string_literal()
                self.state = 12570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==845:
                    self.state = 12569
                    self.xml_query_argument()


                self.state = 12573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12572
                    self.xml_returning_spec()


                self.state = 12576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==274 or _la==649:
                    self.state = 12575
                    self.xml_query_on_empty()


                self.state = 12578
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 12580
                self.match(TeradataSQLParser.XMLSERIALIZE)
                self.state = 12581
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12582
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12583
                localctx.xml_value_exp = self.scalar_expr(0)
                self.state = 12586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 12584
                    self.match(TeradataSQLParser.AS)
                    self.state = 12585
                    self.data_type()


                self.state = 12589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==653:
                    self.state = 12588
                    self.xml_encoding()


                self.state = 12596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 12591
                    self.match(TeradataSQLParser.WITH)
                    self.state = 12593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==268:
                        self.state = 12592
                        self.match(TeradataSQLParser.NO)


                    self.state = 12595
                    self.match(TeradataSQLParser.BOM)


                self.state = 12600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1023:
                    self.state = 12598
                    self.match(TeradataSQLParser.VERSION)
                    self.state = 12599
                    self.char_string_literal()


                self.state = 12604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==661 or _la==701:
                    self.state = 12602
                    _la = self._input.LA(1)
                    if not(_la==661 or _la==701):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12603
                    self.match(TeradataSQLParser.XMLDECLARATION)


                self.state = 12612
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [268]:
                    self.state = 12606
                    self.match(TeradataSQLParser.NO)
                    self.state = 12607
                    self.match(TeradataSQLParser.INDENT)
                    pass
                elif token in [704]:
                    self.state = 12608
                    self.match(TeradataSQLParser.INDENT)

                    self.state = 12609
                    self.match(TeradataSQLParser.SIZE)
                    self.state = 12610
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 12611
                    self.integer_literal()
                    pass
                elif token in [1214]:
                    pass
                else:
                    pass
                self.state = 12614
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 12616
                self.match(TeradataSQLParser.XMLDOCUMENT)
                self.state = 12617
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12618
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 12620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12619
                    self.xml_returning_spec()


                self.state = 12622
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 12624
                self.match(TeradataSQLParser.XMLELEMENT)
                self.state = 12625
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12626
                self.match(TeradataSQLParser.NAME)
                self.state = 12627
                self.column_name()
                self.state = 12630
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1621,self._ctx)
                if la_ == 1:
                    self.state = 12628
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12629
                    self.xml_namespace_declaration()


                self.state = 12634
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1622,self._ctx)
                if la_ == 1:
                    self.state = 12632
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12633
                    self.xml_attribute_declaration()


                self.state = 12638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12636
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12637
                    self.xml_value_declaration()


                self.state = 12641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12640
                    self.xml_returning_spec()


                self.state = 12643
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 12645
                self.match(TeradataSQLParser.XMLFOREST)
                self.state = 12646
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1625,self._ctx)
                if la_ == 1:
                    self.state = 12647
                    self.xml_namespace_declaration()


                self.state = 12658
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1627,self._ctx)
                if la_ == 1:
                    self.state = 12650
                    self.xml_forest_element_spec()
                    self.state = 12655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 12651
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 12652
                        self.xml_forest_element_spec()
                        self.state = 12657
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 12661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==289:
                    self.state = 12660
                    self.xml_content_option_spec()


                self.state = 12664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12663
                    self.xml_returning_spec()


                self.state = 12666
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 12667
                self.match(TeradataSQLParser.XMLCONCAT)
                self.state = 12668
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12669
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 12674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12670
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12671
                    localctx.xml_value_expr = self.scalar_expr(0)
                    self.state = 12676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12677
                    self.xml_returning_spec()


                self.state = 12680
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 12682
                self.match(TeradataSQLParser.XMLCOMMENT)
                self.state = 12683
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12684
                localctx.xml_comment = self.scalar_expr(0)
                self.state = 12686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12685
                    self.xml_returning_spec()


                self.state = 12688
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 12690
                self.match(TeradataSQLParser.XMLPI)
                self.state = 12691
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12692
                self.match(TeradataSQLParser.NAME)
                self.state = 12693
                self.column_name()
                self.state = 12696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12694
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12695
                    self.scalar_expr(0)


                self.state = 12699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12698
                    self.xml_returning_spec()


                self.state = 12701
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 12703
                self.match(TeradataSQLParser.XMLTEXT)
                self.state = 12704
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12705
                localctx.xml_text = self.scalar_expr(0)
                self.state = 12707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12706
                    self.xml_returning_spec()


                self.state = 12709
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 12711
                self.match(TeradataSQLParser.XMLPARSE)
                self.state = 12712
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12713
                _la = self._input.LA(1)
                if not(_la==593 or _la==636):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12714
                self.scalar_expr(0)
                self.state = 12715
                _la = self._input.LA(1)
                if not(_la==307 or _la==942):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12716
                self.match(TeradataSQLParser.WHITESPACE)
                self.state = 12717
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 12719
                self.match(TeradataSQLParser.XMLVALIDATE)
                self.state = 12720
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12721
                _la = self._input.LA(1)
                if not(_la==593 or _la==636 or _la==914):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 12722
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 12723
                self.match(TeradataSQLParser.ACCORDING)
                self.state = 12724
                self.match(TeradataSQLParser.TO)
                self.state = 12725
                self.match(TeradataSQLParser.XMLSCHEMA)
                self.state = 12726
                self.match(TeradataSQLParser.VALUE)
                self.state = 12727
                localctx.xml_schema = self.scalar_expr(0)
                self.state = 12732
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [790]:
                    self.state = 12728
                    self.match(TeradataSQLParser.NAMESPACE)
                    self.state = 12729
                    localctx.xml_uri = self.char_string_literal()
                    pass
                elif token in [268]:
                    self.state = 12730
                    self.match(TeradataSQLParser.NO)
                    self.state = 12731
                    self.match(TeradataSQLParser.NAMESPACE)
                    pass
                elif token in [646, 1214]:
                    pass
                else:
                    pass
                self.state = 12736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==646:
                    self.state = 12734
                    self.match(TeradataSQLParser.ELEMENT)
                    self.state = 12735
                    localctx.xml_valid_element_name = self.scalar_expr(0)


                self.state = 12738
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 12740
                self.match(TeradataSQLParser.XMLAGG)
                self.state = 12741
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12742
                localctx.xml_value_expr = self.scalar_expr(0)
                self.state = 12753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==291:
                    self.state = 12743
                    self.match(TeradataSQLParser.ORDER)
                    self.state = 12744
                    self.match(TeradataSQLParser.BY)
                    self.state = 12745
                    self.order_by_spec_full()
                    self.state = 12750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 12746
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 12747
                        self.order_by_spec_full()
                        self.state = 12752
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 12756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==889:
                    self.state = 12755
                    self.xml_returning_spec()


                self.state = 12758
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 12760
                self.match(TeradataSQLParser.XMLSPLIT)
                self.state = 12761
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12762
                localctx.doc_id = self.scalar_expr(0)
                self.state = 12763
                self.match(TeradataSQLParser.COMMA)
                self.state = 12764
                localctx.source_doc = self.scalar_expr(0)
                self.state = 12765
                self.match(TeradataSQLParser.COMMA)
                self.state = 12766
                localctx.split_size = self.scalar_expr(0)
                self.state = 12767
                self.match(TeradataSQLParser.COMMA)
                self.state = 12768
                localctx.split_path = self.scalar_expr(0)
                self.state = 12773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12769
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12770
                    localctx._scalar_expr = self.scalar_expr(0)
                    localctx.replication_list.append(localctx._scalar_expr)
                    self.state = 12775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12776
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 12778
                self.td_sysxml()
                self.state = 12779
                self.match(TeradataSQLParser.XMLPUBLISH)
                self.state = 12780
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12781
                localctx.query_string = self.scalar_expr(0)
                self.state = 12782
                self.match(TeradataSQLParser.COMMA)
                self.state = 12783
                localctx.xslt = self.scalar_expr(0)
                self.state = 12784
                self.match(TeradataSQLParser.COMMA)
                self.state = 12785
                localctx.xml_string = self.scalar_expr(0)
                self.state = 12786
                self.match(TeradataSQLParser.COMMA)
                self.state = 12787
                localctx.result_code = self.scalar_expr(0)
                self.state = 12788
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 12790
                self.td_sysxml()
                self.state = 12791
                self.match(TeradataSQLParser.XMLPUBLISH_STREAM)
                self.state = 12792
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12793
                localctx.query_string = self.scalar_expr(0)
                self.state = 12794
                self.match(TeradataSQLParser.COMMA)
                self.state = 12795
                localctx.xslt = self.scalar_expr(0)
                self.state = 12796
                self.match(TeradataSQLParser.COMMA)
                self.state = 12797
                localctx.document_grouping_spec = self.scalar_expr(0)
                self.state = 12798
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def returns_clause(self):
            return self.getTypedRuleContext(TeradataSQLParser.Returns_clauseContext,0)


        def window_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_other_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_function" ):
                listener.enterOther_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_function" ):
                listener.exitOther_function(self)




    def other_function(self):

        localctx = TeradataSQLParser.Other_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_other_function)
        self._la = 0 # Token type
        try:
            self.state = 12824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1646,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12802
                self.function_name()
                self.state = 12803
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12804
                self.scalar_expr(0)
                self.state = 12809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 12805
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12806
                    self.scalar_expr(0)
                    self.state = 12811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 12812
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 12815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1644,self._ctx)
                if la_ == 1:
                    self.state = 12813
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 12814
                    self.window_spec()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12817
                self.function_name()
                self.state = 12818
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12819
                self.match(TeradataSQLParser.CLOSE_PAR)
                self.state = 12822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1645,self._ctx)
                if la_ == 1:
                    self.state = 12820
                    self.returns_clause()

                elif la_ == 2:
                    self.state = 12821
                    self.window_spec()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partitioning_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE_N(self):
            return self.getToken(TeradataSQLParser.CASE_N, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def logical_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Logical_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def case_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Case_specContext,0)


        def RANGE_N(self):
            return self.getToken(TeradataSQLParser.RANGE_N, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def BETWEEN(self):
            return self.getToken(TeradataSQLParser.BETWEEN, 0)

        def range_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Range_exprContext,0)


        def range_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Range_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_partitioning_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitioning_expr" ):
                listener.enterPartitioning_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitioning_expr" ):
                listener.exitPartitioning_expr(self)




    def partitioning_expr(self):

        localctx = TeradataSQLParser.Partitioning_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_partitioning_expr)
        self._la = 0 # Token type
        try:
            self.state = 12853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12826
                self.match(TeradataSQLParser.CASE_N)
                self.state = 12827
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12828
                self.logical_expr(0)
                self.state = 12833
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1647,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 12829
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 12830
                        self.logical_expr(0) 
                    self.state = 12835
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1647,self._ctx)

                self.state = 12838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12836
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12837
                    self.case_spec()


                self.state = 12840
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12842
                self.match(TeradataSQLParser.RANGE_N)
                self.state = 12843
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 12844
                self.scalar_expr(0)
                self.state = 12845
                self.match(TeradataSQLParser.BETWEEN)
                self.state = 12846
                self.range_expr()
                self.state = 12849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1208:
                    self.state = 12847
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12848
                    self.range_spec()


                self.state = 12851
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysfnlibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSFNLIB(self):
            return self.getToken(TeradataSQLParser.TD_SYSFNLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_td_sysfnlib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysfnlib" ):
                listener.enterTd_sysfnlib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysfnlib" ):
                listener.exitTd_sysfnlib(self)




    def td_sysfnlib(self):

        localctx = TeradataSQLParser.Td_sysfnlibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_td_sysfnlib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12855
            self.match(TeradataSQLParser.TD_SYSFNLIB)
            self.state = 12856
            self.match(TeradataSQLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_sysxmlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SYSXML(self):
            return self.getToken(TeradataSQLParser.TD_SYSXML, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_td_sysxml

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_sysxml" ):
                listener.enterTd_sysxml(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_sysxml" ):
                listener.exitTd_sysxml(self)




    def td_sysxml(self):

        localctx = TeradataSQLParser.Td_sysxmlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_td_sysxml)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12858
            self.match(TeradataSQLParser.TD_SYSXML)
            self.state = 12859
            self.match(TeradataSQLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyslibContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYSLIB(self):
            return self.getToken(TeradataSQLParser.SYSLIB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_syslib

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyslib" ):
                listener.enterSyslib(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyslib" ):
                listener.exitSyslib(self)




    def syslib(self):

        localctx = TeradataSQLParser.SyslibContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_syslib)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12861
            self.match(TeradataSQLParser.SYSLIB)
            self.state = 12862
            self.match(TeradataSQLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Td_server_dbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TD_SERVER_DB(self):
            return self.getToken(TeradataSQLParser.TD_SERVER_DB, 0)

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_td_server_db

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTd_server_db" ):
                listener.enterTd_server_db(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTd_server_db" ):
                listener.exitTd_server_db(self)




    def td_server_db(self):

        localctx = TeradataSQLParser.Td_server_dbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_td_server_db)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12864
            self.match(TeradataSQLParser.TD_SERVER_DB)
            self.state = 12865
            self.match(TeradataSQLParser.DOT_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Translation_mappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATIN_TO_UNICODE(self):
            return self.getToken(TeradataSQLParser.LATIN_TO_UNICODE, 0)

        def UNICODE_TO_LATIN(self):
            return self.getToken(TeradataSQLParser.UNICODE_TO_LATIN, 0)

        def LOCALE_TO_UNICODE(self):
            return self.getToken(TeradataSQLParser.LOCALE_TO_UNICODE, 0)

        def UNICODE_TO_LOCALE(self):
            return self.getToken(TeradataSQLParser.UNICODE_TO_LOCALE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_translation_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslation_mapping" ):
                listener.enterTranslation_mapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslation_mapping" ):
                listener.exitTranslation_mapping(self)




    def translation_mapping(self):

        localctx = TeradataSQLParser.Translation_mappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_translation_mapping)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12867
            _la = self._input.LA(1)
            if not(((((_la - 1104)) & ~0x3f) == 0 and ((1 << (_la - 1104)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def attribute_modification_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Attribute_modification_optionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Attribute_modification_optionContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_attribute_modification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification" ):
                listener.enterAttribute_modification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification" ):
                listener.exitAttribute_modification(self)




    def attribute_modification(self):

        localctx = TeradataSQLParser.Attribute_modificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_attribute_modification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12869
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 12870
            self.attribute_modification_option()
            self.state = 12875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 12871
                self.match(TeradataSQLParser.COMMA)
                self.state = 12872
                self.attribute_modification_option()
                self.state = 12877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 12878
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(TeradataSQLParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def STYLE(self):
            return self.getToken(TeradataSQLParser.STYLE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_returns_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_clause" ):
                listener.enterReturns_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_clause" ):
                listener.exitReturns_clause(self)




    def returns_clause(self):

        localctx = TeradataSQLParser.Returns_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_returns_clause)
        try:
            self.state = 12885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1652,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12880
                self.match(TeradataSQLParser.RETURNS)
                self.state = 12881
                self.data_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12882
                self.match(TeradataSQLParser.RETURNS)
                self.state = 12883
                self.match(TeradataSQLParser.STYLE)
                self.state = 12884
                self.column_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_modification_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def teradata_type_conversion_data_attribute(self):
            return self.getTypedRuleContext(TeradataSQLParser.Teradata_type_conversion_data_attributeContext,0)


        def casespecific_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Casespecific_phraseContext,0)


        def character_set_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Character_set_phraseContext,0)


        def uppercase_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Uppercase_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_attribute_modification_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_modification_option" ):
                listener.enterAttribute_modification_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_modification_option" ):
                listener.exitAttribute_modification_option(self)




    def attribute_modification_option(self):

        localctx = TeradataSQLParser.Attribute_modification_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_attribute_modification_option)
        try:
            self.state = 12891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161, 262, 425]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12887
                self.teradata_type_conversion_data_attribute()
                pass
            elif token in [49, 88, 272, 1211]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12888
                self.casespecific_phrase()
                pass
            elif token in [52, 55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 12889
                self.character_set_phrase()
                pass
            elif token in [438, 455]:
                self.enterOuterAlt(localctx, 4)
                self.state = 12890
                self.uppercase_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def teradata_type_conversion_data_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Teradata_type_conversion_data_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Teradata_type_conversion_data_attributeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def character_set_phrase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Character_set_phraseContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Character_set_phraseContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_teradata_type_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion" ):
                listener.enterTeradata_type_conversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion" ):
                listener.exitTeradata_type_conversion(self)




    def teradata_type_conversion(self):

        localctx = TeradataSQLParser.Teradata_type_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_teradata_type_conversion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12893
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 12899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==161 or _la==262 or _la==425:
                self.state = 12894
                self.teradata_type_conversion_data_attribute()
                self.state = 12895
                self.match(TeradataSQLParser.COMMA)
                self.state = 12901
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 12902
            self.data_type()
            self.state = 12910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 12903
                self.match(TeradataSQLParser.COMMA)
                self.state = 12906
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [161, 262, 425]:
                    self.state = 12904
                    self.teradata_type_conversion_data_attribute()
                    pass
                elif token in [52, 55]:
                    self.state = 12905
                    self.character_set_phrase()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 12912
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 12913
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Teradata_type_conversion_data_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Format_phraseContext,0)


        def named_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Named_phraseContext,0)


        def title_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Title_phraseContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_teradata_type_conversion_data_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTeradata_type_conversion_data_attribute" ):
                listener.enterTeradata_type_conversion_data_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTeradata_type_conversion_data_attribute" ):
                listener.exitTeradata_type_conversion_data_attribute(self)




    def teradata_type_conversion_data_attribute(self):

        localctx = TeradataSQLParser.Teradata_type_conversion_data_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_teradata_type_conversion_data_attribute)
        try:
            self.state = 12918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12915
                self.format_phrase()
                pass
            elif token in [262]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12916
                self.named_phrase()
                pass
            elif token in [425]:
                self.enterOuterAlt(localctx, 3)
                self.state = 12917
                self.title_phrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def CASE(self):
            return self.getToken(TeradataSQLParser.CASE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_case_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_spec" ):
                listener.enterCase_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_spec" ):
                listener.exitCase_spec(self)




    def case_spec(self):

        localctx = TeradataSQLParser.Case_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_case_spec)
        self._la = 0 # Token type
        try:
            self.state = 12927
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12920
                self.match(TeradataSQLParser.NO)
                self.state = 12921
                self.match(TeradataSQLParser.CASE)
                self.state = 12924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 12922
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12923
                    self.match(TeradataSQLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12926
                self.match(TeradataSQLParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLParser.Range_expr_1Context,0)


        def range_expr_2(self):
            return self.getTypedRuleContext(TeradataSQLParser.Range_expr_2Context,0)


        def range_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Range_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_range_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr" ):
                listener.enterRange_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr" ):
                listener.exitRange_expr(self)




    def range_expr(self):

        localctx = TeradataSQLParser.Range_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_range_expr)
        try:
            self.state = 12932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1660,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12929
                self.range_expr_1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12930
                self.range_expr_2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 12931
                self.range_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def range_expr_1(self):
            return self.getTypedRuleContext(TeradataSQLParser.Range_expr_1Context,0)


        def range_expr_3(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Range_expr_3Context)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Range_expr_3Context,i)


        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_range_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_list" ):
                listener.enterRange_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_list" ):
                listener.exitRange_list(self)




    def range_list(self):

        localctx = TeradataSQLParser.Range_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_range_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 12934
                self.range_expr_3()
                pass
            elif token in [1219]:
                self.state = 12935
                self.match(TeradataSQLParser.MUL_SIGN)
                self.state = 12938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 12936
                    self.match(TeradataSQLParser.AND)
                    self.state = 12937
                    self.scalar_expr(0)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 12946
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1663,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 12942
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 12943
                    self.range_expr_3() 
                self.state = 12948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1663,self._ctx)

            self.state = 12949
            self.match(TeradataSQLParser.COMMA)
            self.state = 12950
            self.range_expr_1()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def MUL_SIGN(self):
            return self.getToken(TeradataSQLParser.MUL_SIGN, 0)

        def EACH(self):
            return self.getToken(TeradataSQLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_range_expr_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_1" ):
                listener.enterRange_expr_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_1" ):
                listener.exitRange_expr_1(self)




    def range_expr_1(self):

        localctx = TeradataSQLParser.Range_expr_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_range_expr_1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12952
            self.scalar_expr(0)
            self.state = 12953
            self.match(TeradataSQLParser.AND)
            self.state = 12956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 12954
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 12955
                self.match(TeradataSQLParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 12960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 12958
                self.match(TeradataSQLParser.EACH)
                self.state = 12959
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MUL_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.MUL_SIGN)
            else:
                return self.getToken(TeradataSQLParser.MUL_SIGN, i)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_range_expr_2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_2" ):
                listener.enterRange_expr_2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_2" ):
                listener.exitRange_expr_2(self)




    def range_expr_2(self):

        localctx = TeradataSQLParser.Range_expr_2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_range_expr_2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12962
            self.match(TeradataSQLParser.MUL_SIGN)
            self.state = 12963
            self.match(TeradataSQLParser.AND)
            self.state = 12966
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 12964
                self.scalar_expr(0)
                pass
            elif token in [1219]:
                self.state = 12965
                self.match(TeradataSQLParser.MUL_SIGN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_expr_3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def EACH(self):
            return self.getToken(TeradataSQLParser.EACH, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_range_expr_3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_expr_3" ):
                listener.enterRange_expr_3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_expr_3" ):
                listener.exitRange_expr_3(self)




    def range_expr_3(self):

        localctx = TeradataSQLParser.Range_expr_3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_range_expr_3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 12968
            self.scalar_expr(0)

            self.state = 12969
            self.match(TeradataSQLParser.AND)
            self.state = 12970
            self.scalar_expr(0)
            self.state = 12974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 12972
                self.match(TeradataSQLParser.EACH)
                self.state = 12973
                self.scalar_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Range_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def RANGE(self):
            return self.getToken(TeradataSQLParser.RANGE, 0)

        def UNKNOWN(self):
            return self.getToken(TeradataSQLParser.UNKNOWN, 0)

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def OR(self):
            return self.getToken(TeradataSQLParser.OR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_range_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_spec" ):
                listener.enterRange_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_spec" ):
                listener.exitRange_spec(self)




    def range_spec(self):

        localctx = TeradataSQLParser.Range_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_range_spec)
        self._la = 0 # Token type
        try:
            self.state = 12983
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [268]:
                self.enterOuterAlt(localctx, 1)
                self.state = 12976
                self.match(TeradataSQLParser.NO)
                self.state = 12977
                self.match(TeradataSQLParser.RANGE)
                self.state = 12980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==290 or _la==1208:
                    self.state = 12978
                    _la = self._input.LA(1)
                    if not(_la==290 or _la==1208):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 12979
                    self.match(TeradataSQLParser.UNKNOWN)


                pass
            elif token in [1016]:
                self.enterOuterAlt(localctx, 2)
                self.state = 12982
                self.match(TeradataSQLParser.UNKNOWN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash_bucket_number_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sparcemap_name = None # Char_string_literalContext
            self.colocation_name = None # Char_string_literalContext
            self.contiguousmap_name = None # Char_string_literalContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def MAP(self):
            return self.getToken(TeradataSQLParser.MAP, 0)

        def EQUALS_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EQUALS_SIGN)
            else:
                return self.getToken(TeradataSQLParser.EQUALS_SIGN, i)

        def COLOCATE(self):
            return self.getToken(TeradataSQLParser.COLOCATE, 0)

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def char_string_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Char_string_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_hash_bucket_number_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash_bucket_number_expr" ):
                listener.enterHash_bucket_number_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash_bucket_number_expr" ):
                listener.exitHash_bucket_number_expr(self)




    def hash_bucket_number_expr(self):

        localctx = TeradataSQLParser.Hash_bucket_number_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_hash_bucket_number_expr)
        self._la = 0 # Token type
        try:
            self.state = 13004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1671,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 12985
                self.scalar_expr(0)
                self.state = 12994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 12986
                    self.match(TeradataSQLParser.MAP)
                    self.state = 12987
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 12988
                    localctx.sparcemap_name = self.char_string_literal()
                    self.state = 12989
                    self.match(TeradataSQLParser.COLOCATE)
                    self.state = 12990
                    self.match(TeradataSQLParser.USING)
                    self.state = 12991
                    self.match(TeradataSQLParser.EQUALS_SIGN)
                    self.state = 12992
                    localctx.colocation_name = self.char_string_literal()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 12996
                self.scalar_expr(0)
                self.state = 12997
                self.match(TeradataSQLParser.MAP)
                self.state = 12998
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 12999
                localctx.contiguousmap_name = self.char_string_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13001
                self.match(TeradataSQLParser.MAP)
                self.state = 13002
                self.match(TeradataSQLParser.EQUALS_SIGN)
                self.state = 13003
                localctx.contiguousmap_name = self.char_string_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_partition_byContext,0)


        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_order_byContext,0)


        def window_rows(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_rowsContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_window_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec" ):
                listener.enterWindow_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec" ):
                listener.exitWindow_spec(self)




    def window_spec(self):

        localctx = TeradataSQLParser.Window_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_window_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13006
            self.match(TeradataSQLParser.OVER)
            self.state = 13007
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 13008
                self.window_partition_by()


            self.state = 13012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 13011
                self.window_order_by()


            self.state = 13015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==364:
                self.state = 13014
                self.window_rows()


            self.state = 13017
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_without_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_partition_byContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_window_spec_without_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_without_rows" ):
                listener.enterWindow_spec_without_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_without_rows" ):
                listener.exitWindow_spec_without_rows(self)




    def window_spec_without_rows(self):

        localctx = TeradataSQLParser.Window_spec_without_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_window_spec_without_rows)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13019
            self.match(TeradataSQLParser.OVER)
            self.state = 13020
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 13021
                self.window_partition_by()


            self.state = 13024
            self.window_order_by()
            self.state = 13025
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_spec_with_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(TeradataSQLParser.OVER, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def window_order_by(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_order_byContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def window_partition_by(self):
            return self.getTypedRuleContext(TeradataSQLParser.Window_partition_byContext,0)


        def with_ties(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_tiesContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_window_spec_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_spec_with_ties" ):
                listener.enterWindow_spec_with_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_spec_with_ties" ):
                listener.exitWindow_spec_with_ties(self)




    def window_spec_with_ties(self):

        localctx = TeradataSQLParser.Window_spec_with_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_window_spec_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13027
            self.match(TeradataSQLParser.OVER)
            self.state = 13028
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==840:
                self.state = 13029
                self.window_partition_by()


            self.state = 13032
            self.window_order_by()
            self.state = 13034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13033
                self.with_ties()


            self.state = 13036
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(TeradataSQLParser.PARTITION, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_window_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_partition_by" ):
                listener.enterWindow_partition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_partition_by" ):
                listener.exitWindow_partition_by(self)




    def window_partition_by(self):

        localctx = TeradataSQLParser.Window_partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_window_partition_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13038
            self.match(TeradataSQLParser.PARTITION)
            self.state = 13039
            self.match(TeradataSQLParser.BY)
            self.state = 13040
            self.scalar_expr(0)
            self.state = 13045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13041
                self.match(TeradataSQLParser.COMMA)
                self.state = 13042
                self.scalar_expr(0)
                self.state = 13047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_order_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(TeradataSQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def order_by_spec_full(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Order_by_spec_fullContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Order_by_spec_fullContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def RESET(self):
            return self.getToken(TeradataSQLParser.RESET, 0)

        def WHEN(self):
            return self.getToken(TeradataSQLParser.WHEN, 0)

        def logical_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_window_order_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_order_by" ):
                listener.enterWindow_order_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_order_by" ):
                listener.exitWindow_order_by(self)




    def window_order_by(self):

        localctx = TeradataSQLParser.Window_order_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_window_order_by)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13048
            self.match(TeradataSQLParser.ORDER)
            self.state = 13049
            self.match(TeradataSQLParser.BY)
            self.state = 13050
            self.order_by_spec_full()
            self.state = 13055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13051
                self.match(TeradataSQLParser.COMMA)
                self.state = 13052
                self.order_by_spec_full()
                self.state = 13057
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==884:
                self.state = 13058
                self.match(TeradataSQLParser.RESET)
                self.state = 13059
                self.match(TeradataSQLParser.WHEN)
                self.state = 13060
                self.logical_expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(TeradataSQLParser.ROWS, 0)

        def UNBOUNDED(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.UNBOUNDED)
            else:
                return self.getToken(TeradataSQLParser.UNBOUNDED, i)

        def PRECEDING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.PRECEDING)
            else:
                return self.getToken(TeradataSQLParser.PRECEDING, i)

        def number_of_rows(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Number_of_rowsContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Number_of_rowsContext,i)


        def CURRENT(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.CURRENT)
            else:
                return self.getToken(TeradataSQLParser.CURRENT, i)

        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ROW)
            else:
                return self.getToken(TeradataSQLParser.ROW, i)

        def BETWEEN(self):
            return self.getToken(TeradataSQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(TeradataSQLParser.AND, 0)

        def FOLLOWING(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.FOLLOWING)
            else:
                return self.getToken(TeradataSQLParser.FOLLOWING, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_window_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_rows" ):
                listener.enterWindow_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_rows" ):
                listener.exitWindow_rows(self)




    def window_rows(self):

        localctx = TeradataSQLParser.Window_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_window_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13063
            self.match(TeradataSQLParser.ROWS)
            self.state = 13148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1013]:
                self.state = 13064
                self.match(TeradataSQLParser.UNBOUNDED)
                self.state = 13065
                self.match(TeradataSQLParser.PRECEDING)
                pass
            elif token in [1194]:
                self.state = 13066
                self.number_of_rows()
                self.state = 13067
                self.match(TeradataSQLParser.PRECEDING)
                pass
            elif token in [93]:
                self.state = 13069
                self.match(TeradataSQLParser.CURRENT)
                self.state = 13070
                self.match(TeradataSQLParser.ROW)
                pass
            elif token in [35]:
                self.state = 13071
                self.match(TeradataSQLParser.BETWEEN)
                self.state = 13146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1681,self._ctx)
                if la_ == 1:
                    self.state = 13072
                    self.match(TeradataSQLParser.UNBOUNDED)
                    self.state = 13073
                    self.match(TeradataSQLParser.PRECEDING)
                    self.state = 13074
                    self.match(TeradataSQLParser.AND)
                    self.state = 13075
                    self.match(TeradataSQLParser.UNBOUNDED)
                    self.state = 13076
                    self.match(TeradataSQLParser.FOLLOWING)
                    pass

                elif la_ == 2:
                    self.state = 13077
                    self.match(TeradataSQLParser.UNBOUNDED)
                    self.state = 13078
                    self.match(TeradataSQLParser.PRECEDING)
                    self.state = 13079
                    self.match(TeradataSQLParser.AND)
                    self.state = 13080
                    self.number_of_rows()
                    self.state = 13081
                    self.match(TeradataSQLParser.PRECEDING)
                    pass

                elif la_ == 3:
                    self.state = 13083
                    self.match(TeradataSQLParser.UNBOUNDED)
                    self.state = 13084
                    self.match(TeradataSQLParser.PRECEDING)
                    self.state = 13085
                    self.match(TeradataSQLParser.AND)
                    self.state = 13086
                    self.match(TeradataSQLParser.CURRENT)
                    self.state = 13087
                    self.match(TeradataSQLParser.ROW)
                    pass

                elif la_ == 4:
                    self.state = 13088
                    self.match(TeradataSQLParser.UNBOUNDED)
                    self.state = 13089
                    self.match(TeradataSQLParser.PRECEDING)
                    self.state = 13090
                    self.match(TeradataSQLParser.AND)
                    self.state = 13091
                    self.number_of_rows()
                    self.state = 13092
                    self.match(TeradataSQLParser.FOLLOWING)
                    pass

                elif la_ == 5:
                    self.state = 13094
                    self.number_of_rows()
                    self.state = 13095
                    self.match(TeradataSQLParser.PRECEDING)
                    self.state = 13096
                    self.match(TeradataSQLParser.AND)
                    self.state = 13097
                    self.match(TeradataSQLParser.UNBOUNDED)
                    self.state = 13098
                    self.match(TeradataSQLParser.FOLLOWING)
                    pass

                elif la_ == 6:
                    self.state = 13100
                    self.number_of_rows()
                    self.state = 13101
                    self.match(TeradataSQLParser.PRECEDING)
                    self.state = 13102
                    self.match(TeradataSQLParser.AND)
                    self.state = 13103
                    self.number_of_rows()
                    self.state = 13104
                    self.match(TeradataSQLParser.PRECEDING)
                    pass

                elif la_ == 7:
                    self.state = 13106
                    self.number_of_rows()
                    self.state = 13107
                    self.match(TeradataSQLParser.PRECEDING)
                    self.state = 13108
                    self.match(TeradataSQLParser.AND)
                    self.state = 13109
                    self.match(TeradataSQLParser.CURRENT)
                    self.state = 13110
                    self.match(TeradataSQLParser.ROW)
                    pass

                elif la_ == 8:
                    self.state = 13112
                    self.number_of_rows()
                    self.state = 13113
                    self.match(TeradataSQLParser.PRECEDING)
                    self.state = 13114
                    self.match(TeradataSQLParser.AND)
                    self.state = 13115
                    self.number_of_rows()
                    self.state = 13116
                    self.match(TeradataSQLParser.FOLLOWING)
                    pass

                elif la_ == 9:
                    self.state = 13118
                    self.match(TeradataSQLParser.CURRENT)
                    self.state = 13119
                    self.match(TeradataSQLParser.ROW)
                    self.state = 13120
                    self.match(TeradataSQLParser.AND)
                    self.state = 13121
                    self.match(TeradataSQLParser.UNBOUNDED)
                    self.state = 13122
                    self.match(TeradataSQLParser.FOLLOWING)
                    pass

                elif la_ == 10:
                    self.state = 13123
                    self.match(TeradataSQLParser.CURRENT)
                    self.state = 13124
                    self.match(TeradataSQLParser.ROW)
                    self.state = 13125
                    self.match(TeradataSQLParser.AND)
                    self.state = 13126
                    self.match(TeradataSQLParser.CURRENT)
                    self.state = 13127
                    self.match(TeradataSQLParser.ROW)
                    pass

                elif la_ == 11:
                    self.state = 13128
                    self.match(TeradataSQLParser.CURRENT)
                    self.state = 13129
                    self.match(TeradataSQLParser.ROW)
                    self.state = 13130
                    self.match(TeradataSQLParser.AND)
                    self.state = 13131
                    self.number_of_rows()
                    self.state = 13132
                    self.match(TeradataSQLParser.FOLLOWING)
                    pass

                elif la_ == 12:
                    self.state = 13134
                    self.number_of_rows()
                    self.state = 13135
                    self.match(TeradataSQLParser.FOLLOWING)
                    self.state = 13136
                    self.match(TeradataSQLParser.AND)
                    self.state = 13137
                    self.match(TeradataSQLParser.UNBOUNDED)
                    self.state = 13138
                    self.match(TeradataSQLParser.FOLLOWING)
                    pass

                elif la_ == 13:
                    self.state = 13140
                    self.number_of_rows()
                    self.state = 13141
                    self.match(TeradataSQLParser.FOLLOWING)
                    self.state = 13142
                    self.match(TeradataSQLParser.AND)
                    self.state = 13143
                    self.number_of_rows()
                    self.state = 13144
                    self.match(TeradataSQLParser.FOLLOWING)
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Json_param_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.param = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def format_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Format_phraseContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_json_param_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJson_param_spec" ):
                listener.enterJson_param_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJson_param_spec" ):
                listener.exitJson_param_spec(self)




    def json_param_spec(self):

        localctx = TeradataSQLParser.Json_param_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_json_param_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13150
            localctx.param = self.scalar_expr(0)
            self.state = 13155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 13151
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 13152
                self.format_phrase()
                self.state = 13153
                self.match(TeradataSQLParser.CLOSE_PAR)


            self.state = 13159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13157
                self.match(TeradataSQLParser.AS)
                self.state = 13158
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_context_item = None # Column_nameContext

        def PASSING(self):
            return self.getToken(TeradataSQLParser.PASSING, 0)

        def xml_query_variable_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Xml_query_variable_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Xml_query_variable_specContext,i)


        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def VALUE(self):
            return self.getToken(TeradataSQLParser.VALUE, 0)

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_query_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_argument" ):
                listener.enterXml_query_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_argument" ):
                listener.exitXml_query_argument(self)




    def xml_query_argument(self):

        localctx = TeradataSQLParser.Xml_query_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_xml_query_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13161
            self.match(TeradataSQLParser.PASSING)
            self.state = 13164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 13162
                self.match(TeradataSQLParser.BY)
                self.state = 13163
                self.match(TeradataSQLParser.VALUE)


            self.state = 13175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1687,self._ctx)
            if la_ == 1:
                self.state = 13166
                localctx.xml_query_context_item = self.column_name()
                pass

            elif la_ == 2:
                self.state = 13167
                self.xml_query_variable_spec()
                self.state = 13172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13168
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13169
                    self.xml_query_variable_spec()
                    self.state = 13174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_variable_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_query_variable = None # Column_nameContext

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_query_variable_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_variable_spec" ):
                listener.enterXml_query_variable_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_variable_spec" ):
                listener.exitXml_query_variable_spec(self)




    def xml_query_variable_spec(self):

        localctx = TeradataSQLParser.Xml_query_variable_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_xml_query_variable_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13177
            localctx.xml_query_variable = self.column_name()
            self.state = 13178
            self.match(TeradataSQLParser.AS)
            self.state = 13179
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLATTRIBUTES(self):
            return self.getToken(TeradataSQLParser.XMLATTRIBUTES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def xml_attribute_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Xml_attribute_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Xml_attribute_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_attribute_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_declaration" ):
                listener.enterXml_attribute_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_declaration" ):
                listener.exitXml_attribute_declaration(self)




    def xml_attribute_declaration(self):

        localctx = TeradataSQLParser.Xml_attribute_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_xml_attribute_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13181
            self.match(TeradataSQLParser.XMLATTRIBUTES)
            self.state = 13182
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13183
            self.xml_attribute_spec()
            self.state = 13188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13184
                self.match(TeradataSQLParser.COMMA)
                self.state = 13185
                self.xml_attribute_spec()
                self.state = 13190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13191
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_attribute_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_attribute_value = None # Column_nameContext
            self.xml_attribute_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_attribute_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_attribute_spec" ):
                listener.enterXml_attribute_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_attribute_spec" ):
                listener.exitXml_attribute_spec(self)




    def xml_attribute_spec(self):

        localctx = TeradataSQLParser.Xml_attribute_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_xml_attribute_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13193
            localctx.xml_attribute_value = self.column_name()
            self.state = 13196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13194
                self.match(TeradataSQLParser.AS)
                self.state = 13195
                localctx.xml_attribute_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_forest_element_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_forest_element_value = None # Column_nameContext
            self.xml_forest_element_name = None # Alias_nameContext

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_forest_element_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_forest_element_spec" ):
                listener.enterXml_forest_element_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_forest_element_spec" ):
                listener.exitXml_forest_element_spec(self)




    def xml_forest_element_spec(self):

        localctx = TeradataSQLParser.Xml_forest_element_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_xml_forest_element_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13198
            localctx.xml_forest_element_value = self.column_name()
            self.state = 13201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13199
                self.match(TeradataSQLParser.AS)
                self.state = 13200
                localctx.xml_forest_element_name = self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_value_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_value_expr = None # Scalar_exprContext

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def xml_content_option_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Xml_content_option_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_value_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_value_declaration" ):
                listener.enterXml_value_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_value_declaration" ):
                listener.exitXml_value_declaration(self)




    def xml_value_declaration(self):

        localctx = TeradataSQLParser.Xml_value_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_xml_value_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13203
            localctx.xml_value_expr = self.scalar_expr(0)
            self.state = 13205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==289:
                self.state = 13204
                self.xml_content_option_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_declarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XMLNAMESPACES(self):
            return self.getToken(TeradataSQLParser.XMLNAMESPACES, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def xml_namespace_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Xml_namespace_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Xml_namespace_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_namespace_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_declaration" ):
                listener.enterXml_namespace_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_declaration" ):
                listener.exitXml_namespace_declaration(self)




    def xml_namespace_declaration(self):

        localctx = TeradataSQLParser.Xml_namespace_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_xml_namespace_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13207
            self.match(TeradataSQLParser.XMLNAMESPACES)
            self.state = 13208
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13209
            self.xml_namespace_spec()
            self.state = 13214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13210
                self.match(TeradataSQLParser.COMMA)
                self.state = 13211
                self.xml_namespace_spec()
                self.state = 13216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13217
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_namespace_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_namespace_uri = None # Char_string_literalContext
            self.xml_namespace_prefix = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_namespace_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_namespace_spec" ):
                listener.enterXml_namespace_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_namespace_spec" ):
                listener.exitXml_namespace_spec(self)




    def xml_namespace_spec(self):

        localctx = TeradataSQLParser.Xml_namespace_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_xml_namespace_spec)
        try:
            self.state = 13227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1069, 1070, 1071, 1072, 1203]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13219
                localctx.xml_namespace_uri = self.char_string_literal()
                self.state = 13220
                self.match(TeradataSQLParser.AS)
                self.state = 13221
                localctx.xml_namespace_prefix = self.alias_name()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13223
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 13224
                localctx.xml_namespace_uri = self.char_string_literal()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13225
                self.match(TeradataSQLParser.NO)
                self.state = 13226
                self.match(TeradataSQLParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_columns_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS(self):
            return self.getToken(TeradataSQLParser.COLUMNS, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,i)


        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.FOR)
            else:
                return self.getToken(TeradataSQLParser.FOR, i)

        def ORDINALITY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ORDINALITY)
            else:
                return self.getToken(TeradataSQLParser.ORDINALITY, i)

        def xml_regular_column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Xml_regular_column_definitionContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Xml_regular_column_definitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_columns_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_columns_spec" ):
                listener.enterXml_columns_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_columns_spec" ):
                listener.exitXml_columns_spec(self)




    def xml_columns_spec(self):

        localctx = TeradataSQLParser.Xml_columns_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_xml_columns_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13229
            self.match(TeradataSQLParser.COLUMNS)
            self.state = 13235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1694,self._ctx)
            if la_ == 1:
                self.state = 13230
                self.column_name()
                self.state = 13231
                self.match(TeradataSQLParser.FOR)
                self.state = 13232
                self.match(TeradataSQLParser.ORDINALITY)
                pass

            elif la_ == 2:
                self.state = 13234
                self.xml_regular_column_definition()
                pass


            self.state = 13247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13237
                self.match(TeradataSQLParser.COMMA)
                self.state = 13243
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1695,self._ctx)
                if la_ == 1:
                    self.state = 13238
                    self.column_name()
                    self.state = 13239
                    self.match(TeradataSQLParser.FOR)
                    self.state = 13240
                    self.match(TeradataSQLParser.ORDINALITY)
                    pass

                elif la_ == 2:
                    self.state = 13242
                    self.xml_regular_column_definition()
                    pass


                self.state = 13249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_regular_column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def PATH(self):
            return self.getToken(TeradataSQLParser.PATH, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.LiteralContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_regular_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_regular_column_definition" ):
                listener.enterXml_regular_column_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_regular_column_definition" ):
                listener.exitXml_regular_column_definition(self)




    def xml_regular_column_definition(self):

        localctx = TeradataSQLParser.Xml_regular_column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_xml_regular_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13250
            localctx.name = self.unqualified_name()
            self.state = 13251
            self.data_type()
            self.state = 13254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1082:
                self.state = 13252
                self.match(TeradataSQLParser.PATH)
                self.state = 13253
                self.char_string_literal()


            self.state = 13258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==111:
                self.state = 13256
                self.match(TeradataSQLParser.DEFAULT)
                self.state = 13257
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xml_encoding_name = None # Char_string_literalContext

        def ENCODING(self):
            return self.getToken(TeradataSQLParser.ENCODING, 0)

        def char_string_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Char_string_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_encoding" ):
                listener.enterXml_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_encoding" ):
                listener.exitXml_encoding(self)




    def xml_encoding(self):

        localctx = TeradataSQLParser.Xml_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_xml_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13260
            self.match(TeradataSQLParser.ENCODING)
            self.state = 13261
            localctx.xml_encoding_name = self.char_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_query_on_emptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def EMPTY(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.EMPTY)
            else:
                return self.getToken(TeradataSQLParser.EMPTY, i)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_query_on_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_query_on_empty" ):
                listener.enterXml_query_on_empty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_query_on_empty" ):
                listener.exitXml_query_on_empty(self)




    def xml_query_on_empty(self):

        localctx = TeradataSQLParser.Xml_query_on_emptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_xml_query_on_empty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13263
            _la = self._input.LA(1)
            if not(_la==274 or _la==649):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13264
            self.match(TeradataSQLParser.ON)
            self.state = 13265
            self.match(TeradataSQLParser.EMPTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_returning_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(TeradataSQLParser.RETURNING, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLParser.CONTENT, 0)

        def SEQUENCE(self):
            return self.getToken(TeradataSQLParser.SEQUENCE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_returning_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_returning_spec" ):
                listener.enterXml_returning_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_returning_spec" ):
                listener.exitXml_returning_spec(self)




    def xml_returning_spec(self):

        localctx = TeradataSQLParser.Xml_returning_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_xml_returning_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13267
            self.match(TeradataSQLParser.RETURNING)
            self.state = 13268
            _la = self._input.LA(1)
            if not(_la==593 or _la==914):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xml_content_option_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(TeradataSQLParser.OPTION, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.NULL)
            else:
                return self.getToken(TeradataSQLParser.NULL, i)

        def NIL(self):
            return self.getToken(TeradataSQLParser.NIL, 0)

        def NO(self):
            return self.getToken(TeradataSQLParser.NO, 0)

        def CONTENT(self):
            return self.getToken(TeradataSQLParser.CONTENT, 0)

        def EMPTY(self):
            return self.getToken(TeradataSQLParser.EMPTY, 0)

        def ABSENT(self):
            return self.getToken(TeradataSQLParser.ABSENT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_xml_content_option_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_content_option_spec" ):
                listener.enterXml_content_option_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_content_option_spec" ):
                listener.exitXml_content_option_spec(self)




    def xml_content_option_spec(self):

        localctx = TeradataSQLParser.Xml_content_option_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_xml_content_option_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13270
            self.match(TeradataSQLParser.OPTION)
            self.state = 13278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1699,self._ctx)
            if la_ == 1:
                self.state = 13271
                _la = self._input.LA(1)
                if not(_la==274 or _la==489 or _la==649 or _la==794):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13272
                self.match(TeradataSQLParser.ON)
                self.state = 13273
                self.match(TeradataSQLParser.NULL)
                pass

            elif la_ == 2:
                self.state = 13274
                self.match(TeradataSQLParser.NIL)
                self.state = 13275
                self.match(TeradataSQLParser.ON)
                self.state = 13276
                self.match(TeradataSQLParser.NO)
                self.state = 13277
                self.match(TeradataSQLParser.CONTENT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ignore_respect_nullsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULLS(self):
            return self.getToken(TeradataSQLParser.NULLS, 0)

        def IGNORE(self):
            return self.getToken(TeradataSQLParser.IGNORE, 0)

        def RESPECT(self):
            return self.getToken(TeradataSQLParser.RESPECT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_ignore_respect_nulls

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnore_respect_nulls" ):
                listener.enterIgnore_respect_nulls(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnore_respect_nulls" ):
                listener.exitIgnore_respect_nulls(self)




    def ignore_respect_nulls(self):

        localctx = TeradataSQLParser.Ignore_respect_nullsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_ignore_respect_nulls)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13280
            _la = self._input.LA(1)
            if not(_la==697 or _la==885):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13281
            self.match(TeradataSQLParser.NULLS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_of_rowsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_number_of_rows

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_of_rows" ):
                listener.enterNumber_of_rows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_of_rows" ):
                listener.exitNumber_of_rows(self)




    def number_of_rows(self):

        localctx = TeradataSQLParser.Number_of_rowsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_number_of_rows)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13283
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_tiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def TIES(self):
            return self.getToken(TeradataSQLParser.TIES, 0)

        def LOW(self):
            return self.getToken(TeradataSQLParser.LOW, 0)

        def HIGH(self):
            return self.getToken(TeradataSQLParser.HIGH, 0)

        def AVG(self):
            return self.getToken(TeradataSQLParser.AVG, 0)

        def DENSE(self):
            return self.getToken(TeradataSQLParser.DENSE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_ties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_ties" ):
                listener.enterWith_ties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_ties" ):
                listener.exitWith_ties(self)




    def with_ties(self):

        localctx = TeradataSQLParser.With_tiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_with_ties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13285
            self.match(TeradataSQLParser.WITH)
            self.state = 13286
            self.match(TeradataSQLParser.TIES)
            self.state = 13287
            _la = self._input.LA(1)
            if not(_la==32 or _la==629 or _la==690 or _la==745):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PIVOT(self):
            return self.getToken(TeradataSQLParser.PIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def pivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Pivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def pivot_with_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Pivot_with_phraseContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_pivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot" ):
                listener.enterPivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot" ):
                listener.exitPivot(self)




    def pivot(self):

        localctx = TeradataSQLParser.PivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_pivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13289
            self.match(TeradataSQLParser.PIVOT)
            self.state = 13290
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13291
            self.pivot_spec()
            self.state = 13292
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 13294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13293
                self.pivot_with_phrase()


            self.state = 13297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13296
                self.match(TeradataSQLParser.AS)


            self.state = 13299
            self.alias_name()
            self.state = 13301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1702,self._ctx)
            if la_ == 1:
                self.state = 13300
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pivot_agg_func_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Pivot_agg_func_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Pivot_agg_func_specContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def pivot_for_phrase(self):
            return self.getTypedRuleContext(TeradataSQLParser.Pivot_for_phraseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_pivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_spec" ):
                listener.enterPivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_spec" ):
                listener.exitPivot_spec(self)




    def pivot_spec(self):

        localctx = TeradataSQLParser.Pivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_pivot_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13303
            self.pivot_agg_func_spec()
            self.state = 13308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13304
                self.match(TeradataSQLParser.COMMA)
                self.state = 13305
                self.pivot_agg_func_spec()
                self.state = 13310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13311
            self.match(TeradataSQLParser.FOR)
            self.state = 13312
            self.pivot_for_phrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def pivot_with_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Pivot_with_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Pivot_with_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_pivot_with_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_phrase" ):
                listener.enterPivot_with_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_phrase" ):
                listener.exitPivot_with_phrase(self)




    def pivot_with_phrase(self):

        localctx = TeradataSQLParser.Pivot_with_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_pivot_with_phrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13314
            self.match(TeradataSQLParser.WITH)
            self.state = 13315
            self.pivot_with_spec()
            self.state = 13320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13316
                self.match(TeradataSQLParser.COMMA)
                self.state = 13317
                self.pivot_with_spec()
                self.state = 13322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_agg_func_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_pivot_agg_func_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_agg_func_spec" ):
                listener.enterPivot_agg_func_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_agg_func_spec" ):
                listener.exitPivot_agg_func_spec(self)




    def pivot_agg_func_spec(self):

        localctx = TeradataSQLParser.Pivot_agg_func_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_pivot_agg_func_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13323
            self.aggregate_function()
            self.state = 13328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 13325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 13324
                    self.match(TeradataSQLParser.AS)


                self.state = 13327
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_for_phraseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def pivot_expr_spec_scalar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Pivot_expr_spec_scalarContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Pivot_expr_spec_scalarContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def pivot_expr_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Pivot_expr_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Pivot_expr_spec_listContext,i)


        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_pivot_for_phrase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_for_phrase" ):
                listener.enterPivot_for_phrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_for_phrase" ):
                listener.exitPivot_for_phrase(self)




    def pivot_for_phrase(self):

        localctx = TeradataSQLParser.Pivot_for_phraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_pivot_for_phrase)
        self._la = 0 # Token type
        try:
            self.state = 13373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1710,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13330
                self.column_name()
                self.state = 13331
                self.match(TeradataSQLParser.IN)
                self.state = 13332
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 13333
                self.pivot_expr_spec_scalar()
                self.state = 13338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13334
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13335
                    self.pivot_expr_spec_scalar()
                    self.state = 13340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13341
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13343
                self.column_list()
                self.state = 13344
                self.match(TeradataSQLParser.IN)
                self.state = 13345
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 13346
                self.pivot_expr_spec_scalar()
                self.state = 13351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13347
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13348
                    self.pivot_expr_spec_scalar()
                    self.state = 13353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13354
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13356
                self.column_list()
                self.state = 13357
                self.match(TeradataSQLParser.IN)
                self.state = 13358
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 13359
                self.pivot_expr_spec_list()
                self.state = 13364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13360
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13361
                    self.pivot_expr_spec_list()
                    self.state = 13366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13367
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13369
                self.column_name()
                self.state = 13370
                self.match(TeradataSQLParser.IN)
                self.state = 13371
                self.subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_with_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_function(self):
            return self.getTypedRuleContext(TeradataSQLParser.Aggregate_functionContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_pivot_with_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_with_spec" ):
                listener.enterPivot_with_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_with_spec" ):
                listener.exitPivot_with_spec(self)




    def pivot_with_spec(self):

        localctx = TeradataSQLParser.Pivot_with_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_pivot_with_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13375
            self.aggregate_function()
            self.state = 13377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13376
                self.match(TeradataSQLParser.AS)


            self.state = 13379
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_pivot_expr_spec_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_scalar" ):
                listener.enterPivot_expr_spec_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_scalar" ):
                listener.exitPivot_expr_spec_scalar(self)




    def pivot_expr_spec_scalar(self):

        localctx = TeradataSQLParser.Pivot_expr_spec_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_pivot_expr_spec_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13381
            self.scalar_expr(0)
            self.state = 13386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or ((((_la - 488)) & ~0x3f) == 0 and ((1 << (_la - 488)) & -1) != 0) or ((((_la - 552)) & ~0x3f) == 0 and ((1 << (_la - 552)) & -1) != 0) or ((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & -1) != 0) or ((((_la - 680)) & ~0x3f) == 0 and ((1 << (_la - 680)) & -1) != 0) or ((((_la - 744)) & ~0x3f) == 0 and ((1 << (_la - 744)) & -1) != 0) or ((((_la - 808)) & ~0x3f) == 0 and ((1 << (_la - 808)) & -1) != 0) or ((((_la - 872)) & ~0x3f) == 0 and ((1 << (_la - 872)) & -1) != 0) or ((((_la - 936)) & ~0x3f) == 0 and ((1 << (_la - 936)) & -1) != 0) or ((((_la - 1000)) & ~0x3f) == 0 and ((1 << (_la - 1000)) & -1) != 0) or ((((_la - 1064)) & ~0x3f) == 0 and ((1 << (_la - 1064)) & -1) != 0) or ((((_la - 1128)) & ~0x3f) == 0 and ((1 << (_la - 1128)) & -1) != 0) or _la==1192 or _la==1193:
                self.state = 13383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 13382
                    self.match(TeradataSQLParser.AS)


                self.state = 13385
                self.alias_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pivot_expr_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_expr_list_comma_separated(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_list_comma_separatedContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_pivot_expr_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPivot_expr_spec_list" ):
                listener.enterPivot_expr_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPivot_expr_spec_list" ):
                listener.exitPivot_expr_spec_list(self)




    def pivot_expr_spec_list(self):

        localctx = TeradataSQLParser.Pivot_expr_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_pivot_expr_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13388
            self.scalar_expr_list_comma_separated()
            self.state = 13390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13389
                self.match(TeradataSQLParser.AS)


            self.state = 13392
            self.alias_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnpivotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNPIVOT(self):
            return self.getToken(TeradataSQLParser.UNPIVOT, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def unpivot_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unpivot_specContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def NULLS(self):
            return self.getToken(TeradataSQLParser.NULLS, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def INCLUDE(self):
            return self.getToken(TeradataSQLParser.INCLUDE, 0)

        def EXCLUDE(self):
            return self.getToken(TeradataSQLParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_unpivot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot" ):
                listener.enterUnpivot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot" ):
                listener.exitUnpivot(self)




    def unpivot(self):

        localctx = TeradataSQLParser.UnpivotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_unpivot)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13394
            self.match(TeradataSQLParser.UNPIVOT)
            self.state = 13397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==660 or _la==700:
                self.state = 13395
                _la = self._input.LA(1)
                if not(_la==660 or _la==700):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13396
                self.match(TeradataSQLParser.NULLS)


            self.state = 13399
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13400
            self.unpivot_spec()
            self.state = 13401
            self.match(TeradataSQLParser.CLOSE_PAR)
            self.state = 13403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13402
                self.match(TeradataSQLParser.AS)


            self.state = 13405
            self.alias_name()
            self.state = 13407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1717,self._ctx)
            if la_ == 1:
                self.state = 13406
                self.column_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,i)


        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def unpivot_column_name_spec_single(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unpivot_column_name_spec_singleContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unpivot_column_name_spec_singleContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def unpivot_column_name_spec_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Unpivot_column_name_spec_listContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Unpivot_column_name_spec_listContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_unpivot_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_spec" ):
                listener.enterUnpivot_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_spec" ):
                listener.exitUnpivot_spec(self)




    def unpivot_spec(self):

        localctx = TeradataSQLParser.Unpivot_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_unpivot_spec)
        self._la = 0 # Token type
        try:
            self.state = 13439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [363, 366, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13409
                self.column_name()
                self.state = 13410
                self.match(TeradataSQLParser.FOR)
                self.state = 13411
                self.column_name()
                self.state = 13412
                self.match(TeradataSQLParser.IN)
                self.state = 13413
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 13414
                self.unpivot_column_name_spec_single()
                self.state = 13419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13415
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13416
                    self.unpivot_column_name_spec_single()
                    self.state = 13421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13422
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            elif token in [1213]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13424
                self.column_list()
                self.state = 13425
                self.match(TeradataSQLParser.FOR)
                self.state = 13426
                self.column_name()
                self.state = 13427
                self.match(TeradataSQLParser.IN)
                self.state = 13428
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 13429
                self.unpivot_column_name_spec_list()
                self.state = 13434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13430
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13431
                    self.unpivot_column_name_spec_list()
                    self.state = 13436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13437
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_unpivot_column_name_spec_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_single" ):
                listener.enterUnpivot_column_name_spec_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_single" ):
                listener.exitUnpivot_column_name_spec_single(self)




    def unpivot_column_name_spec_single(self):

        localctx = TeradataSQLParser.Unpivot_column_name_spec_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_unpivot_column_name_spec_single)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13441
            self.column_name()
            self.state = 13446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 13443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 13442
                    self.match(TeradataSQLParser.AS)


                self.state = 13445
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unpivot_column_name_spec_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def literal(self):
            return self.getTypedRuleContext(TeradataSQLParser.LiteralContext,0)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_unpivot_column_name_spec_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnpivot_column_name_spec_list" ):
                listener.enterUnpivot_column_name_spec_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnpivot_column_name_spec_list" ):
                listener.exitUnpivot_column_name_spec_list(self)




    def unpivot_column_name_spec_list(self):

        localctx = TeradataSQLParser.Unpivot_column_name_spec_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_unpivot_column_name_spec_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13448
            self.column_list()
            self.state = 13453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20 or _la==104 or _la==205 or _la==274 or _la==421 or _la==422 or _la==853 or ((((_la - 1069)) & ~0x3f) == 0 and ((1 << (_la - 1069)) & 15) != 0) or ((((_la - 1194)) & ~0x3f) == 0 and ((1 << (_la - 1194)) & 1919) != 0):
                self.state = 13450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 13449
                    self.match(TeradataSQLParser.AS)


                self.state = 13452
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class At_timezoneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(TeradataSQLParser.AT, 0)

        def LOCAL(self):
            return self.getToken(TeradataSQLParser.LOCAL, 0)

        def scalar_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,0)


        def TIME(self):
            return self.getToken(TeradataSQLParser.TIME, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_at_timezone

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAt_timezone" ):
                listener.enterAt_timezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAt_timezone" ):
                listener.exitAt_timezone(self)




    def at_timezone(self):

        localctx = TeradataSQLParser.At_timezoneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_at_timezone)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13455
            self.match(TeradataSQLParser.AT)
            self.state = 13462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224]:
                self.state = 13456
                self.match(TeradataSQLParser.LOCAL)
                pass
            elif token in [3, 5, 6, 7, 9, 22, 23, 25, 26, 27, 30, 31, 32, 34, 43, 45, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 66, 80, 81, 82, 83, 84, 85, 89, 94, 95, 96, 97, 98, 102, 104, 111, 113, 134, 147, 152, 161, 175, 179, 180, 181, 182, 185, 192, 205, 213, 219, 222, 228, 233, 237, 238, 239, 240, 241, 244, 246, 248, 249, 251, 258, 260, 265, 267, 274, 275, 276, 281, 301, 304, 311, 316, 318, 319, 320, 321, 327, 328, 329, 330, 331, 332, 333, 334, 335, 355, 357, 362, 363, 366, 368, 371, 378, 379, 380, 383, 390, 396, 397, 399, 401, 402, 403, 407, 408, 421, 422, 425, 433, 434, 436, 437, 454, 456, 461, 462, 465, 478, 479, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1207, 1210, 1213, 1221, 1222]:
                self.state = 13459
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1725,self._ctx)
                if la_ == 1:
                    self.state = 13457
                    self.match(TeradataSQLParser.TIME)
                    self.state = 13458
                    self.match(TeradataSQLParser.ZONE)


                self.state = 13461
                self.scalar_expr(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elements_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def scalar_expr_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Scalar_expr_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_elements_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElements_list" ):
                listener.enterElements_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElements_list" ):
                listener.exitElements_list(self)




    def elements_list(self):

        localctx = TeradataSQLParser.Elements_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_elements_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1727,self._ctx)
            if la_ == 1:
                self.state = 13464
                self.subquery()
                pass

            elif la_ == 2:
                self.state = 13465
                self.scalar_expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.OR)
            else:
                return self.getToken(TeradataSQLParser.OR, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_scalar_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list" ):
                listener.enterScalar_expr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list" ):
                listener.exitScalar_expr_list(self)




    def scalar_expr_list(self):

        localctx = TeradataSQLParser.Scalar_expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_scalar_expr_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13468
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13469
            self.scalar_expr(0)
            self.state = 13474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==290 or _la==1208:
                self.state = 13470
                _la = self._input.LA(1)
                if not(_la==290 or _la==1208):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13471
                self.scalar_expr(0)
                self.state = 13476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13477
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_expr_list_comma_separatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def scalar_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Scalar_exprContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Scalar_exprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_scalar_expr_list_comma_separated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_expr_list_comma_separated" ):
                listener.enterScalar_expr_list_comma_separated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_expr_list_comma_separated" ):
                listener.exitScalar_expr_list_comma_separated(self)




    def scalar_expr_list_comma_separated(self):

        localctx = TeradataSQLParser.Scalar_expr_list_comma_separatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_scalar_expr_list_comma_separated)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13479
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13480
            self.scalar_expr(0)
            self.state = 13485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13481
                self.match(TeradataSQLParser.COMMA)
                self.state = 13482
                self.scalar_expr(0)
                self.state = 13487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13488
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = TeradataSQLParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13490
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13491
            self.column_name()
            self.state = 13496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13492
                self.match(TeradataSQLParser.COMMA)
                self.state = 13493
                self.column_name()
                self.state = 13498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13499
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)




    def subquery(self):

        localctx = TeradataSQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_subquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13501
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13502
                self.with_request_modifier()


            self.state = 13505
            self.query_expr(0)
            self.state = 13506
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Unqualified_nameContext

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_column_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_spec" ):
                listener.enterColumn_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_spec" ):
                listener.exitColumn_spec(self)




    def column_spec(self):

        localctx = TeradataSQLParser.Column_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_column_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13508
            localctx.name = self.unqualified_name()
            self.state = 13509
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(TeradataSQLParser.COLON, 0)

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_reference" ):
                listener.enterVariable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_reference" ):
                listener.exitVariable_reference(self)




    def variable_reference(self):

        localctx = TeradataSQLParser.Variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1192, self.RULE_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13511
            self.match(TeradataSQLParser.COLON)
            self.state = 13512
            self.variable_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cursor_variable_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_reference = None # Variable_referenceContext
            self.name = None # Unqualified_nameContext

        def DOT_(self):
            return self.getToken(TeradataSQLParser.DOT_, 0)

        def variable_reference(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_referenceContext,0)


        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_cursor_variable_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_variable_reference" ):
                listener.enterCursor_variable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_variable_reference" ):
                listener.exitCursor_variable_reference(self)




    def cursor_variable_reference(self):

        localctx = TeradataSQLParser.Cursor_variable_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1194, self.RULE_cursor_variable_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13514
            localctx.cursor_reference = self.variable_reference()
            self.state = 13515
            self.match(TeradataSQLParser.DOT_)
            self.state = 13516
            localctx.name = self.unqualified_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Macro_parameter_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Parameter_nameContext,0)


        def COLON(self):
            return self.getToken(TeradataSQLParser.COLON, 0)

        def AT_SIGN(self):
            return self.getToken(TeradataSQLParser.AT_SIGN, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_macro_parameter_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacro_parameter_reference" ):
                listener.enterMacro_parameter_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacro_parameter_reference" ):
                listener.exitMacro_parameter_reference(self)




    def macro_parameter_reference(self):

        localctx = TeradataSQLParser.Macro_parameter_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1196, self.RULE_macro_parameter_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13518
            _la = self._input.LA(1)
            if not(_la==1207 or _la==1210):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13519
            self.parameter_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_scope_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.array_lower_bounds = None # Integer_literalContext
            self.array_upper_bounds = None # Integer_literalContext

        def COMMA(self):
            return self.getToken(TeradataSQLParser.COMMA, 0)

        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_array_scope_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_scope_reference" ):
                listener.enterArray_scope_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_scope_reference" ):
                listener.exitArray_scope_reference(self)




    def array_scope_reference(self):

        localctx = TeradataSQLParser.Array_scope_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1198, self.RULE_array_scope_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13521
            localctx.array_lower_bounds = self.integer_literal()
            self.state = 13522
            self.match(TeradataSQLParser.COMMA)
            self.state = 13523
            localctx.array_upper_bounds = self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.EQUALS_SIGN, 0)

        def EQ(self):
            return self.getToken(TeradataSQLParser.EQ, 0)

        def NOT_EQUALS_SIGN(self):
            return self.getToken(TeradataSQLParser.NOT_EQUALS_SIGN, 0)

        def NOT_EQUALS_SIGN_TD(self):
            return self.getToken(TeradataSQLParser.NOT_EQUALS_SIGN_TD, 0)

        def NE(self):
            return self.getToken(TeradataSQLParser.NE, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def LT_SIGN(self):
            return self.getToken(TeradataSQLParser.LT_SIGN, 0)

        def GT_SIGN(self):
            return self.getToken(TeradataSQLParser.GT_SIGN, 0)

        def LT(self):
            return self.getToken(TeradataSQLParser.LT, 0)

        def LE_SIGN(self):
            return self.getToken(TeradataSQLParser.LE_SIGN, 0)

        def LE(self):
            return self.getToken(TeradataSQLParser.LE, 0)

        def GT(self):
            return self.getToken(TeradataSQLParser.GT, 0)

        def GE_SIGN(self):
            return self.getToken(TeradataSQLParser.GE_SIGN, 0)

        def GE(self):
            return self.getToken(TeradataSQLParser.GE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = TeradataSQLParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1200, self.RULE_comparison_operator)
        try:
            self.state = 13542
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1732,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13525
                self.match(TeradataSQLParser.EQUALS_SIGN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13526
                self.match(TeradataSQLParser.EQ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13527
                self.match(TeradataSQLParser.NOT_EQUALS_SIGN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13528
                self.match(TeradataSQLParser.NOT_EQUALS_SIGN_TD)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 13529
                self.match(TeradataSQLParser.NE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 13530
                self.match(TeradataSQLParser.NOT)
                self.state = 13531
                self.match(TeradataSQLParser.EQUALS_SIGN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 13532
                self.match(TeradataSQLParser.LT_SIGN)
                self.state = 13533
                self.match(TeradataSQLParser.GT_SIGN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 13534
                self.match(TeradataSQLParser.LT_SIGN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 13535
                self.match(TeradataSQLParser.LT)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 13536
                self.match(TeradataSQLParser.LE_SIGN)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 13537
                self.match(TeradataSQLParser.LE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 13538
                self.match(TeradataSQLParser.GT_SIGN)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 13539
                self.match(TeradataSQLParser.GT)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 13540
                self.match(TeradataSQLParser.GE_SIGN)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 13541
                self.match(TeradataSQLParser.GE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def ANY(self):
            return self.getToken(TeradataSQLParser.ANY, 0)

        def SOME(self):
            return self.getToken(TeradataSQLParser.SOME, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifier" ):
                listener.enterQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifier" ):
                listener.exitQuantifier(self)




    def quantifier(self):

        localctx = TeradataSQLParser.QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1202, self.RULE_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13544
            _la = self._input.LA(1)
            if not(_la==13 or _la==18 or _la==382):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Locking_request_modifierContext,0)


        def with_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_request_modifierContext,0)


        def using_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Using_request_modifierContext,0)


        def explain_request_modifier(self):
            return self.getTypedRuleContext(TeradataSQLParser.Explain_request_modifierContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequest_modifier" ):
                listener.enterRequest_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequest_modifier" ):
                listener.exitRequest_modifier(self)




    def request_modifier(self):

        localctx = TeradataSQLParser.Request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1204, self.RULE_request_modifier)
        try:
            self.state = 13550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [226, 227]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13546
                self.locking_request_modifier()
                pass
            elif token in [474]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13547
                self.with_request_modifier()
                pass
            elif token in [457]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13548
                self.using_request_modifier()
                pass
            elif token in [128, 150, 938]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13549
                self.explain_request_modifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locking_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Locking_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Locking_specContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_locking_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_request_modifier" ):
                listener.enterLocking_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_request_modifier" ):
                listener.exitLocking_request_modifier(self)




    def locking_request_modifier(self):

        localctx = TeradataSQLParser.Locking_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1206, self.RULE_locking_request_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13553 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 13552
                    self.locking_spec()

                else:
                    raise NoViableAltException(self)
                self.state = 13555 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1734,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Locking_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.view_name = None # Table_nameContext

        def lock_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Lock_typeContext,0)


        def LOCKING(self):
            return self.getToken(TeradataSQLParser.LOCKING, 0)

        def LOCK(self):
            return self.getToken(TeradataSQLParser.LOCK, 0)

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Table_nameContext,0)


        def ROW(self):
            return self.getToken(TeradataSQLParser.ROW, 0)

        def MODE(self):
            return self.getToken(TeradataSQLParser.MODE, 0)

        def NOWAIT(self):
            return self.getToken(TeradataSQLParser.NOWAIT, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_locking_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocking_spec" ):
                listener.enterLocking_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocking_spec" ):
                listener.exitLocking_spec(self)




    def locking_spec(self):

        localctx = TeradataSQLParser.Locking_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1208, self.RULE_locking_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13557
            _la = self._input.LA(1)
            if not(_la==226 or _la==227):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 13571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1738,self._ctx)
            if la_ == 1:
                self.state = 13559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==102:
                    self.state = 13558
                    self.match(TeradataSQLParser.DATABASE)


                self.state = 13561
                self.database_name()
                pass

            elif la_ == 2:
                self.state = 13563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==406:
                    self.state = 13562
                    self.match(TeradataSQLParser.TABLE)


                self.state = 13565
                self.table_name()
                pass

            elif la_ == 3:
                self.state = 13567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==468:
                    self.state = 13566
                    self.match(TeradataSQLParser.VIEW)


                self.state = 13569
                localctx.view_name = self.table_name()
                pass

            elif la_ == 4:
                self.state = 13570
                self.match(TeradataSQLParser.ROW)
                pass


            self.state = 13574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==159 or _la==190:
                self.state = 13573
                _la = self._input.LA(1)
                if not(_la==159 or _la==190):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 13576
            self.lock_type()
            self.state = 13578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==252:
                self.state = 13577
                self.match(TeradataSQLParser.MODE)


            self.state = 13581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 13580
                self.match(TeradataSQLParser.NOWAIT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lock_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(TeradataSQLParser.ACCESS, 0)

        def EXCL(self):
            return self.getToken(TeradataSQLParser.EXCL, 0)

        def EXCLUSIVE(self):
            return self.getToken(TeradataSQLParser.EXCLUSIVE, 0)

        def SHARE(self):
            return self.getToken(TeradataSQLParser.SHARE, 0)

        def READ(self):
            return self.getToken(TeradataSQLParser.READ, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLParser.OVERRIDE, 0)

        def WRITE(self):
            return self.getToken(TeradataSQLParser.WRITE, 0)

        def CHECKSUM(self):
            return self.getToken(TeradataSQLParser.CHECKSUM, 0)

        def LOAD(self):
            return self.getToken(TeradataSQLParser.LOAD, 0)

        def COMMITTED(self):
            return self.getToken(TeradataSQLParser.COMMITTED, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_lock_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLock_type" ):
                listener.enterLock_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLock_type" ):
                listener.exitLock_type(self)




    def lock_type(self):

        localctx = TeradataSQLParser.Lock_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1210, self.RULE_lock_type)
        self._la = 0 # Token type
        try:
            self.state = 13594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [490]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13583
                self.match(TeradataSQLParser.ACCESS)
                pass
            elif token in [659, 662]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13584
                _la = self._input.LA(1)
                if not(_la==659 or _la==662):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [923]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13585
                self.match(TeradataSQLParser.SHARE)
                pass
            elif token in [877]:
                self.enterOuterAlt(localctx, 4)
                self.state = 13586
                self.match(TeradataSQLParser.READ)
                self.state = 13588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 13587
                    self.match(TeradataSQLParser.OVERRIDE)


                pass
            elif token in [1041]:
                self.enterOuterAlt(localctx, 5)
                self.state = 13590
                self.match(TeradataSQLParser.WRITE)
                pass
            elif token in [571]:
                self.enterOuterAlt(localctx, 6)
                self.state = 13591
                self.match(TeradataSQLParser.CHECKSUM)
                pass
            elif token in [742]:
                self.enterOuterAlt(localctx, 7)
                self.state = 13592
                self.match(TeradataSQLParser.LOAD)
                self.state = 13593
                self.match(TeradataSQLParser.COMMITTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def cte_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Cte_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Cte_specContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_request_modifier" ):
                listener.enterWith_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_request_modifier" ):
                listener.exitWith_request_modifier(self)




    def with_request_modifier(self):

        localctx = TeradataSQLParser.With_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1212, self.RULE_with_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13596
            self.match(TeradataSQLParser.WITH)
            self.state = 13597
            self.cte_spec()
            self.state = 13602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13598
                self.match(TeradataSQLParser.COMMA)
                self.state = 13599
                self.cte_spec()
                self.state = 13604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Regular_cte_specContext,0)


        def recursive_cte_spec(self):
            return self.getTypedRuleContext(TeradataSQLParser.Recursive_cte_specContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_spec" ):
                listener.enterCte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_spec" ):
                listener.exitCte_spec(self)




    def cte_spec(self):

        localctx = TeradataSQLParser.Cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1214, self.RULE_cte_spec)
        try:
            self.state = 13607
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13605
                self.regular_cte_spec()
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13606
                self.recursive_cte_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def subquery(self):
            return self.getTypedRuleContext(TeradataSQLParser.SubqueryContext,0)


        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_regular_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_cte_spec" ):
                listener.enterRegular_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_cte_spec" ):
                listener.exitRegular_cte_spec(self)




    def regular_cte_spec(self):

        localctx = TeradataSQLParser.Regular_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1216, self.RULE_regular_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13609
            localctx.query_name = self.alias_name()
            self.state = 13611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 13610
                self.column_list()


            self.state = 13613
            self.match(TeradataSQLParser.AS)
            self.state = 13614
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cte_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query_name = None # Alias_nameContext

        def RECURSIVE(self):
            return self.getToken(TeradataSQLParser.RECURSIVE, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def query_expr(self):
            return self.getTypedRuleContext(TeradataSQLParser.Query_exprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def alias_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Alias_nameContext,0)


        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.UNION)
            else:
                return self.getToken(TeradataSQLParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.ALL)
            else:
                return self.getToken(TeradataSQLParser.ALL, i)

        def query_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Query_termContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Query_termContext,i)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_recursive_cte_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte_spec" ):
                listener.enterRecursive_cte_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte_spec" ):
                listener.exitRecursive_cte_spec(self)




    def recursive_cte_spec(self):

        localctx = TeradataSQLParser.Recursive_cte_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1218, self.RULE_recursive_cte_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13616
            self.match(TeradataSQLParser.RECURSIVE)
            self.state = 13617
            localctx.query_name = self.alias_name()
            self.state = 13619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1213:
                self.state = 13618
                self.column_list()


            self.state = 13621
            self.match(TeradataSQLParser.AS)
            self.state = 13622
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13623
            self.query_expr(0)
            self.state = 13627 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 13624
                self.match(TeradataSQLParser.UNION)
                self.state = 13625
                self.match(TeradataSQLParser.ALL)
                self.state = 13626
                self.query_term()
                self.state = 13629 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==447):
                    break

            self.state = 13631
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(TeradataSQLParser.USING, 0)

        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def using_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Using_specContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Using_specContext,i)


        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_using_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_request_modifier" ):
                listener.enterUsing_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_request_modifier" ):
                listener.exitUsing_request_modifier(self)




    def using_request_modifier(self):

        localctx = TeradataSQLParser.Using_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1220, self.RULE_using_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13633
            self.match(TeradataSQLParser.USING)
            self.state = 13634
            self.match(TeradataSQLParser.OPEN_PAR)
            self.state = 13635
            self.using_spec()
            self.state = 13640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13636
                self.match(TeradataSQLParser.COMMA)
                self.state = 13637
                self.using_spec()
                self.state = 13642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13643
            self.match(TeradataSQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Using_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Variable_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def data_type_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Data_type_attributeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Data_type_attributeContext,i)


        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def DEFERRED(self):
            return self.getToken(TeradataSQLParser.DEFERRED, 0)

        def LOCATOR(self):
            return self.getToken(TeradataSQLParser.LOCATOR, 0)

        def BY(self):
            return self.getToken(TeradataSQLParser.BY, 0)

        def NAME(self):
            return self.getToken(TeradataSQLParser.NAME, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_using_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsing_spec" ):
                listener.enterUsing_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsing_spec" ):
                listener.exitUsing_spec(self)




    def using_spec(self):

        localctx = TeradataSQLParser.Using_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1222, self.RULE_using_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13645
            self.variable_name()
            self.state = 13646
            self.data_type()
            self.state = 13650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 41095346616532992) != 0) or _la==88 or _la==111 or _la==161 or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 5121) != 0) or ((((_la - 425)) & ~0x3f) == 0 and ((1 << (_la - 425)) & 562951027171329) != 0) or _la==1211:
                self.state = 13647
                self.data_type_attribute()
                self.state = 13652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 13653
                self.match(TeradataSQLParser.AS)
                self.state = 13660
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [112]:
                    self.state = 13654
                    self.match(TeradataSQLParser.DEFERRED)
                    self.state = 13657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==42:
                        self.state = 13655
                        self.match(TeradataSQLParser.BY)
                        self.state = 13656
                        self.match(TeradataSQLParser.NAME)


                    pass
                elif token in [225]:
                    self.state = 13659
                    self.match(TeradataSQLParser.LOCATOR)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explain_request_modifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXPLAIN(self):
            return self.getToken(TeradataSQLParser.EXPLAIN, 0)

        def IN(self):
            return self.getToken(TeradataSQLParser.IN, 0)

        def XML(self):
            return self.getToken(TeradataSQLParser.XML, 0)

        def STATIC(self):
            return self.getToken(TeradataSQLParser.STATIC, 0)

        def DYNAMIC(self):
            return self.getToken(TeradataSQLParser.DYNAMIC, 0)

        def NODDLTEXT(self):
            return self.getToken(TeradataSQLParser.NODDLTEXT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_explain_request_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain_request_modifier" ):
                listener.enterExplain_request_modifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain_request_modifier" ):
                listener.exitExplain_request_modifier(self)




    def explain_request_modifier(self):

        localctx = TeradataSQLParser.Explain_request_modifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1224, self.RULE_explain_request_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128 or _la==938:
                self.state = 13664
                _la = self._input.LA(1)
                if not(_la==128 or _la==938):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 13667
            self.match(TeradataSQLParser.EXPLAIN)
            self.state = 13673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 13668
                self.match(TeradataSQLParser.IN)
                self.state = 13669
                self.match(TeradataSQLParser.XML)
                self.state = 13671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==795:
                    self.state = 13670
                    self.match(TeradataSQLParser.NODDLTEXT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dcl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def give_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Give_statContext,0)


        def grant_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_statContext,0)


        def revoke_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_dcl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDcl_stat" ):
                listener.enterDcl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDcl_stat" ):
                listener.exitDcl_stat(self)




    def dcl_stat(self):

        localctx = TeradataSQLParser.Dcl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1226, self.RULE_dcl_stat)
        try:
            self.state = 13678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 13675
                self.give_stat()
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 2)
                self.state = 13676
                self.grant_stat()
                pass
            elif token in [354]:
                self.enterOuterAlt(localctx, 3)
                self.state = 13677
                self.revoke_stat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Give_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.recipient_name = None # Database_nameContext

        def GIVE(self):
            return self.getToken(TeradataSQLParser.GIVE, 0)

        def database_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Database_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_give_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGive_stat" ):
                listener.enterGive_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGive_stat" ):
                listener.exitGive_stat(self)




    def give_stat(self):

        localctx = TeradataSQLParser.Give_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1228, self.RULE_give_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13680
            self.match(TeradataSQLParser.GIVE)
            self.state = 13681
            self.database_name()
            self.state = 13682
            self.match(TeradataSQLParser.TO)
            self.state = 13683
            localctx.recipient_name = self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grant_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_role_statContext,0)


        def grant_monitor_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_monitor_statContext,0)


        def grant_sql_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_sql_form_statContext,0)


        def grant_connect_through_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_connect_through_statContext,0)


        def grant_logon_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_logon_statContext,0)


        def grant_map_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_map_statContext,0)


        def grant_zone_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_zone_statContext,0)


        def grant_zone_override_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_zone_override_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_stat" ):
                listener.enterGrant_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_stat" ):
                listener.exitGrant_stat(self)




    def grant_stat(self):

        localctx = TeradataSQLParser.Grant_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1230, self.RULE_grant_stat)
        try:
            self.state = 13693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1758,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13685
                self.grant_role_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13686
                self.grant_monitor_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13687
                self.grant_sql_form_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13688
                self.grant_connect_through_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 13689
                self.grant_logon_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 13690
                self.grant_map_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 13691
                self.grant_zone_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 13692
                self.grant_zone_override_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_monitor_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def MONITOR(self):
            return self.getToken(TeradataSQLParser.MONITOR, 0)

        def monitor_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Monitor_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Monitor_privilegeContext,i)


        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def grantee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.GranteeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.GranteeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLParser.PUBLIC, 0)

        def PRIVILEGES(self):
            return self.getToken(TeradataSQLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLParser.BUT, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def with_grant_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_grant_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_monitor_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_monitor_stat" ):
                listener.enterGrant_monitor_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_monitor_stat" ):
                listener.exitGrant_monitor_stat(self)




    def grant_monitor_stat(self):

        localctx = TeradataSQLParser.Grant_monitor_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1232, self.RULE_grant_monitor_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13695
            self.match(TeradataSQLParser.GRANT)
            self.state = 13718
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [255]:
                self.state = 13696
                self.match(TeradataSQLParser.MONITOR)
                self.state = 13708
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [309]:
                    self.state = 13697
                    self.match(TeradataSQLParser.PRIVILEGES)
                    pass
                elif token in [41]:
                    self.state = 13698
                    self.match(TeradataSQLParser.BUT)
                    self.state = 13699
                    self.match(TeradataSQLParser.NOT)
                    self.state = 13700
                    self.monitor_privilege()
                    self.state = 13705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13701
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 13702
                        self.monitor_privilege()
                        self.state = 13707
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [426]:
                    pass
                else:
                    pass
                pass
            elif token in [2, 256, 257, 373, 375]:
                self.state = 13710
                self.monitor_privilege()
                self.state = 13715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13711
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13712
                    self.monitor_privilege()
                    self.state = 13717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 13720
            self.match(TeradataSQLParser.TO)
            self.state = 13743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1767,self._ctx)
            if la_ == 1:
                self.state = 13730
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [13, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 13721
                    self.grantee()
                    self.state = 13726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13722
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 13723
                        self.grantee()
                        self.state = 13728
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [313]:
                    self.state = 13729
                    self.match(TeradataSQLParser.PUBLIC)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 13733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 13732
                    self.with_grant_option()


                pass

            elif la_ == 2:
                self.state = 13735
                self.role_name()
                self.state = 13740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13736
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13737
                    self.role_name()
                    self.state = 13742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_or_role = None # Role_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def with_admin_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_admin_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_role_stat" ):
                listener.enterGrant_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_role_stat" ):
                listener.exitGrant_role_stat(self)




    def grant_role_stat(self):

        localctx = TeradataSQLParser.Grant_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1234, self.RULE_grant_role_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13745
            self.match(TeradataSQLParser.GRANT)
            self.state = 13746
            self.role_name()

            self.state = 13747
            self.match(TeradataSQLParser.COMMA)
            self.state = 13748
            self.role_name()
            self.state = 13750
            self.match(TeradataSQLParser.TO)

            self.state = 13751
            localctx.user_or_role = self.role_name()
            self.state = 13756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13752
                self.match(TeradataSQLParser.COMMA)

                self.state = 13753
                localctx.user_or_role = self.role_name()
                self.state = 13758
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 13760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13759
                self.with_admin_option()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_sql_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def privilege_object(self):
            return self.getTypedRuleContext(TeradataSQLParser.Privilege_objectContext,0)


        def map_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Map_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Map_privilegeContext,i)


        def role_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_privilegeContext,i)


        def profile_privilege(self):
            return self.getTypedRuleContext(TeradataSQLParser.Profile_privilegeContext,0)


        def zone_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Zone_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Zone_privilegeContext,i)


        def CONSTRAINT(self):
            return self.getToken(TeradataSQLParser.CONSTRAINT, 0)

        def ASSIGNMENT(self):
            return self.getToken(TeradataSQLParser.ASSIGNMENT, 0)

        def DEFINITION(self):
            return self.getToken(TeradataSQLParser.DEFINITION, 0)

        def grantee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.GranteeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.GranteeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.PrivilegeContext,i)


        def CTCONTROL(self):
            return self.getToken(TeradataSQLParser.CTCONTROL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def with_grant_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_grant_optionContext,0)


        def PRIVILEGES(self):
            return self.getToken(TeradataSQLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLParser.BUT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_sql_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_sql_form_stat" ):
                listener.enterGrant_sql_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_sql_form_stat" ):
                listener.exitGrant_sql_form_stat(self)




    def grant_sql_form_stat(self):

        localctx = TeradataSQLParser.Grant_sql_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1236, self.RULE_grant_sql_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13762
            self.match(TeradataSQLParser.GRANT)
            self.state = 13820
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1778,self._ctx)
            if la_ == 1:
                self.state = 13780
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1773,self._ctx)
                if la_ == 1:
                    self.state = 13763
                    self.match(TeradataSQLParser.ALL)
                    self.state = 13765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==309:
                        self.state = 13764
                        self.match(TeradataSQLParser.PRIVILEGES)


                    pass

                elif la_ == 2:
                    self.state = 13769
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 13767
                        self.match(TeradataSQLParser.ALL)
                        self.state = 13768
                        self.match(TeradataSQLParser.BUT)


                    self.state = 13771
                    self.privilege()
                    self.state = 13776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13772
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 13773
                        self.privilege()
                        self.state = 13778
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 3:
                    self.state = 13779
                    self.match(TeradataSQLParser.CTCONTROL)
                    pass


                self.state = 13782
                self.match(TeradataSQLParser.ON)
                self.state = 13783
                self.privilege_object()
                pass

            elif la_ == 2:
                self.state = 13784
                self.map_privilege()
                self.state = 13789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13785
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13786
                    self.map_privilege()
                    self.state = 13791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 13792
                self.role_privilege()
                self.state = 13797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13793
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13794
                    self.role_privilege()
                    self.state = 13799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.state = 13800
                self.profile_privilege()
                self.state = 13805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13801
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13802
                    self.role_privilege()
                    self.state = 13807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.state = 13808
                self.zone_privilege()
                self.state = 13813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13809
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13810
                    self.zone_privilege()
                    self.state = 13815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.state = 13816
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 13817
                self.match(TeradataSQLParser.ASSIGNMENT)
                pass

            elif la_ == 7:
                self.state = 13818
                self.match(TeradataSQLParser.CONSTRAINT)
                self.state = 13819
                self.match(TeradataSQLParser.DEFINITION)
                pass


            self.state = 13822
            self.match(TeradataSQLParser.TO)
            self.state = 13846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1783,self._ctx)
            if la_ == 1:
                self.state = 13823
                self.grantee()
                self.state = 13828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13824
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13825
                    self.grantee()
                    self.state = 13830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 13831
                    self.with_grant_option()


                pass

            elif la_ == 2:
                self.state = 13834
                self.match(TeradataSQLParser.PUBLIC)
                self.state = 13836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 13835
                    self.with_grant_option()


                pass

            elif la_ == 3:
                self.state = 13838
                self.role_name()
                self.state = 13843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13839
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13840
                    self.role_name()
                    self.state = 13845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_connect_through_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.trusted_user_name = None # User_nameContext
            self.application_user_name = None # User_nameContext
            self.permanent_user_name = None # User_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def CONNECT(self):
            return self.getToken(TeradataSQLParser.CONNECT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLParser.THROUGH, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,i)


        def PERMANENT(self):
            return self.getToken(TeradataSQLParser.PERMANENT, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.WITH)
            else:
                return self.getToken(TeradataSQLParser.WITH, i)

        def TRUST_ONLY(self):
            return self.getToken(TeradataSQLParser.TRUST_ONLY, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Profile_nameContext,0)


        def WITHOUT(self):
            return self.getToken(TeradataSQLParser.WITHOUT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_connect_through_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_connect_through_stat" ):
                listener.enterGrant_connect_through_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_connect_through_stat" ):
                listener.exitGrant_connect_through_stat(self)




    def grant_connect_through_stat(self):

        localctx = TeradataSQLParser.Grant_connect_through_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1238, self.RULE_grant_connect_through_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13848
            self.match(TeradataSQLParser.GRANT)
            self.state = 13849
            self.match(TeradataSQLParser.CONNECT)
            self.state = 13850
            self.match(TeradataSQLParser.THROUGH)
            self.state = 13851
            localctx.trusted_user_name = self.user_name()
            self.state = 13854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13852
                self.match(TeradataSQLParser.WITH)
                self.state = 13853
                self.match(TeradataSQLParser.TRUST_ONLY)


            self.state = 13856
            self.match(TeradataSQLParser.TO)
            self.state = 13908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 13857
                localctx.application_user_name = self.user_name()
                self.state = 13862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13858
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13859
                    localctx.application_user_name = self.user_name()
                    self.state = 13864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1788,self._ctx)
                if la_ == 1:
                    self.state = 13865
                    self.match(TeradataSQLParser.WITH)
                    self.state = 13866
                    self.match(TeradataSQLParser.ROLE)
                    self.state = 13867
                    self.role_name()
                    self.state = 13872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13868
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 13869
                        self.role_name()
                        self.state = 13874
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 13878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==474:
                        self.state = 13875
                        self.match(TeradataSQLParser.WITH)
                        self.state = 13876
                        self.match(TeradataSQLParser.PROFILE)
                        self.state = 13877
                        self.profile_name()


                    pass

                elif la_ == 2:
                    self.state = 13880
                    self.match(TeradataSQLParser.WITH)
                    self.state = 13881
                    self.match(TeradataSQLParser.PROFILE)
                    self.state = 13882
                    self.profile_name()
                    pass


                pass
            elif token in [303]:
                self.state = 13885
                self.match(TeradataSQLParser.PERMANENT)
                self.state = 13886
                localctx.permanent_user_name = self.user_name()
                self.state = 13891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13887
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13888
                    localctx.permanent_user_name = self.user_name()
                    self.state = 13893
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13906
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [474]:
                    self.state = 13894
                    self.match(TeradataSQLParser.WITH)
                    self.state = 13895
                    self.match(TeradataSQLParser.ROLE)
                    self.state = 13896
                    self.role_name()
                    self.state = 13901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 13897
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 13898
                        self.role_name()
                        self.state = 13903
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [475]:
                    self.state = 13904
                    self.match(TeradataSQLParser.WITHOUT)
                    self.state = 13905
                    self.match(TeradataSQLParser.ROLE)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_logon_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.host_id = list() # of Integer_literalContexts

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def LOGON(self):
            return self.getToken(TeradataSQLParser.LOGON, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,i)


        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def NULL(self):
            return self.getToken(TeradataSQLParser.NULL, 0)

        def PASSWORD(self):
            return self.getToken(TeradataSQLParser.PASSWORD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_logon_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_logon_stat" ):
                listener.enterGrant_logon_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_logon_stat" ):
                listener.exitGrant_logon_stat(self)




    def grant_logon_stat(self):

        localctx = TeradataSQLParser.Grant_logon_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1240, self.RULE_grant_logon_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13910
            self.match(TeradataSQLParser.GRANT)
            self.state = 13911
            self.match(TeradataSQLParser.LOGON)
            self.state = 13912
            self.match(TeradataSQLParser.ON)
            self.state = 13922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 13913
                localctx._integer_literal = self.integer_literal()
                localctx.host_id.append(localctx._integer_literal)
                self.state = 13918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13914
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13915
                    localctx._integer_literal = self.integer_literal()
                    localctx.host_id.append(localctx._integer_literal)
                    self.state = 13920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [13]:
                self.state = 13921
                self.match(TeradataSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 13935
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.state = 13924
                self.match(TeradataSQLParser.AS)
                self.state = 13925
                self.match(TeradataSQLParser.DEFAULT)
                pass
            elif token in [164, 426]:
                self.state = 13926
                _la = self._input.LA(1)
                if not(_la==164 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 13927
                self.user_name()
                self.state = 13932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13928
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13929
                    self.user_name()
                    self.state = 13934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 13940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==474:
                self.state = 13937
                self.match(TeradataSQLParser.WITH)
                self.state = 13938
                self.match(TeradataSQLParser.NULL)
                self.state = 13939
                self.match(TeradataSQLParser.PASSWORD)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_map_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def MAP(self):
            return self.getToken(TeradataSQLParser.MAP, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def PUBLIC(self):
            return self.getToken(TeradataSQLParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def with_grant_option(self):
            return self.getTypedRuleContext(TeradataSQLParser.With_grant_optionContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_map_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_map_stat" ):
                listener.enterGrant_map_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_map_stat" ):
                listener.exitGrant_map_stat(self)




    def grant_map_stat(self):

        localctx = TeradataSQLParser.Grant_map_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1242, self.RULE_grant_map_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13942
            self.match(TeradataSQLParser.GRANT)
            self.state = 13943
            self.match(TeradataSQLParser.MAP)
            self.state = 13944
            localctx.map_name = self.unqualified_name()
            self.state = 13945
            self.match(TeradataSQLParser.TO)
            self.state = 13958
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 13946
                localctx.user_or_role = self.role_name()
                self.state = 13951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 13947
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 13948
                    localctx.user_or_role = self.role_name()
                    self.state = 13953
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 13955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==474:
                    self.state = 13954
                    self.with_grant_option()


                pass
            elif token in [313]:
                self.state = 13957
                self.match(TeradataSQLParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_zone_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.zone_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_zone_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_zone_stat" ):
                listener.enterGrant_zone_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_zone_stat" ):
                listener.exitGrant_zone_stat(self)




    def grant_zone_stat(self):

        localctx = TeradataSQLParser.Grant_zone_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1244, self.RULE_grant_zone_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13960
            self.match(TeradataSQLParser.GRANT)
            self.state = 13961
            self.match(TeradataSQLParser.ZONE)
            self.state = 13962
            localctx.zone_name = self.unqualified_name()
            self.state = 13963
            self.match(TeradataSQLParser.TO)
            self.state = 13964
            localctx.user_or_role = self.role_name()
            self.state = 13969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13965
                self.match(TeradataSQLParser.COMMA)
                self.state = 13966
                localctx.user_or_role = self.role_name()
                self.state = 13971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_zone_override_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLParser.OVERRIDE, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_zone_override_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_zone_override_stat" ):
                listener.enterGrant_zone_override_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_zone_override_stat" ):
                listener.exitGrant_zone_override_stat(self)




    def grant_zone_override_stat(self):

        localctx = TeradataSQLParser.Grant_zone_override_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1246, self.RULE_grant_zone_override_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13972
            self.match(TeradataSQLParser.GRANT)
            self.state = 13973
            self.match(TeradataSQLParser.ZONE)
            self.state = 13974
            self.match(TeradataSQLParser.OVERRIDE)
            self.state = 13975
            self.match(TeradataSQLParser.TO)
            self.state = 13976
            self.user_name()
            self.state = 13981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 13977
                self.match(TeradataSQLParser.COMMA)
                self.state = 13978
                self.user_name()
                self.state = 13983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def revoke_monitor_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_monitor_statContext,0)


        def revoke_role_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_role_statContext,0)


        def revoke_sql_form_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_sql_form_statContext,0)


        def revoke_connect_through_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_connect_through_statContext,0)


        def revoke_logon_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_logon_statContext,0)


        def revoke_map_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_map_statContext,0)


        def revoke_zone_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_zone_statContext,0)


        def revoke_zone_override_stat(self):
            return self.getTypedRuleContext(TeradataSQLParser.Revoke_zone_override_statContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revoke_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_stat" ):
                listener.enterRevoke_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_stat" ):
                listener.exitRevoke_stat(self)




    def revoke_stat(self):

        localctx = TeradataSQLParser.Revoke_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1248, self.RULE_revoke_stat)
        try:
            self.state = 13992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1803,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 13984
                self.revoke_monitor_stat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 13985
                self.revoke_role_stat()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 13986
                self.revoke_sql_form_stat()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 13987
                self.revoke_connect_through_stat()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 13988
                self.revoke_logon_stat()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 13989
                self.revoke_map_stat()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 13990
                self.revoke_zone_stat()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 13991
                self.revoke_zone_override_stat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_monitor_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(TeradataSQLParser.REVOKE, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def MONITOR(self):
            return self.getToken(TeradataSQLParser.MONITOR, 0)

        def monitor_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Monitor_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Monitor_privilegeContext,i)


        def revokee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.RevokeeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.RevokeeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLParser.PUBLIC, 0)

        def grant_option_for(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_option_forContext,0)


        def PRIVILEGES(self):
            return self.getToken(TeradataSQLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLParser.BUT, 0)

        def NOT(self):
            return self.getToken(TeradataSQLParser.NOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revoke_monitor_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_monitor_stat" ):
                listener.enterRevoke_monitor_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_monitor_stat" ):
                listener.exitRevoke_monitor_stat(self)




    def revoke_monitor_stat(self):

        localctx = TeradataSQLParser.Revoke_monitor_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1250, self.RULE_revoke_monitor_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 13994
            self.match(TeradataSQLParser.REVOKE)
            self.state = 13996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 13995
                self.grant_option_for()


            self.state = 14020
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [255]:
                self.state = 13998
                self.match(TeradataSQLParser.MONITOR)
                self.state = 14010
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [309]:
                    self.state = 13999
                    self.match(TeradataSQLParser.PRIVILEGES)
                    pass
                elif token in [41]:
                    self.state = 14000
                    self.match(TeradataSQLParser.BUT)
                    self.state = 14001
                    self.match(TeradataSQLParser.NOT)
                    self.state = 14002
                    self.monitor_privilege()
                    self.state = 14007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 14003
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 14004
                        self.monitor_privilege()
                        self.state = 14009
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [164, 426]:
                    pass
                else:
                    pass
                pass
            elif token in [2, 256, 257, 373, 375]:
                self.state = 14012
                self.monitor_privilege()
                self.state = 14017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14013
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14014
                    self.monitor_privilege()
                    self.state = 14019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 14022
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 14023
                self.revokee()
                self.state = 14028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14024
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14025
                    self.revokee()
                    self.state = 14030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [313]:
                self.state = 14031
                self.match(TeradataSQLParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_role_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.user_or_role = None # Role_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLParser.REVOKE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revoke_role_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_role_stat" ):
                listener.enterRevoke_role_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_role_stat" ):
                listener.exitRevoke_role_stat(self)




    def revoke_role_stat(self):

        localctx = TeradataSQLParser.Revoke_role_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1252, self.RULE_revoke_role_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14034
            self.match(TeradataSQLParser.REVOKE)
            self.state = 14038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1811,self._ctx)
            if la_ == 1:
                self.state = 14035
                self.match(TeradataSQLParser.ADMIN)
                self.state = 14036
                self.match(TeradataSQLParser.OPTION)
                self.state = 14037
                self.match(TeradataSQLParser.FOR)


            self.state = 14040
            self.role_name()
            self.state = 14045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 14041
                self.match(TeradataSQLParser.COMMA)
                self.state = 14042
                self.role_name()
                self.state = 14047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 14048
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()

            self.state = 14049
            localctx.user_or_role = self.role_name()
            self.state = 14054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 14050
                self.match(TeradataSQLParser.COMMA)

                self.state = 14051
                localctx.user_or_role = self.role_name()
                self.state = 14056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_sql_form_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(TeradataSQLParser.REVOKE, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def privilege_object(self):
            return self.getTypedRuleContext(TeradataSQLParser.Privilege_objectContext,0)


        def map_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Map_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Map_privilegeContext,i)


        def role_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_privilegeContext,i)


        def profile_privilege(self):
            return self.getTypedRuleContext(TeradataSQLParser.Profile_privilegeContext,0)


        def zone_privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Zone_privilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Zone_privilegeContext,i)


        def revokee(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.RevokeeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.RevokeeContext,i)


        def PUBLIC(self):
            return self.getToken(TeradataSQLParser.PUBLIC, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def grant_option_for(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_option_forContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def privilege(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.PrivilegeContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.PrivilegeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def PRIVILEGES(self):
            return self.getToken(TeradataSQLParser.PRIVILEGES, 0)

        def BUT(self):
            return self.getToken(TeradataSQLParser.BUT, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revoke_sql_form_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_sql_form_stat" ):
                listener.enterRevoke_sql_form_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_sql_form_stat" ):
                listener.exitRevoke_sql_form_stat(self)




    def revoke_sql_form_stat(self):

        localctx = TeradataSQLParser.Revoke_sql_form_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1254, self.RULE_revoke_sql_form_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14057
            self.match(TeradataSQLParser.REVOKE)
            self.state = 14059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 14058
                self.grant_option_for()


            self.state = 14113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1823,self._ctx)
            if la_ == 1:
                self.state = 14077
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1818,self._ctx)
                if la_ == 1:
                    self.state = 14061
                    self.match(TeradataSQLParser.ALL)
                    self.state = 14063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==309:
                        self.state = 14062
                        self.match(TeradataSQLParser.PRIVILEGES)


                    pass

                elif la_ == 2:
                    self.state = 14067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 14065
                        self.match(TeradataSQLParser.ALL)
                        self.state = 14066
                        self.match(TeradataSQLParser.BUT)


                    self.state = 14069
                    self.privilege()
                    self.state = 14074
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 14070
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 14071
                        self.privilege()
                        self.state = 14076
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 14079
                self.match(TeradataSQLParser.ON)
                self.state = 14080
                self.privilege_object()
                pass

            elif la_ == 2:
                self.state = 14081
                self.map_privilege()
                self.state = 14086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14082
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14083
                    self.map_privilege()
                    self.state = 14088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 14089
                self.role_privilege()
                self.state = 14094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14090
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14091
                    self.role_privilege()
                    self.state = 14096
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.state = 14097
                self.profile_privilege()
                self.state = 14102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14098
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14099
                    self.role_privilege()
                    self.state = 14104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.state = 14105
                self.zone_privilege()
                self.state = 14110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14106
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14107
                    self.zone_privilege()
                    self.state = 14112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 14115
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14133
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1826,self._ctx)
            if la_ == 1:
                self.state = 14116
                self.revokee()
                self.state = 14121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14117
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14118
                    self.revokee()
                    self.state = 14123
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 14124
                self.match(TeradataSQLParser.PUBLIC)
                pass

            elif la_ == 3:
                self.state = 14125
                self.role_name()
                self.state = 14130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14126
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14127
                    self.role_name()
                    self.state = 14132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_connect_through_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.trusted_user_name = None # User_nameContext
            self.application_user_name = None # User_nameContext
            self.permanent_user_name = None # User_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLParser.REVOKE, 0)

        def CONNECT(self):
            return self.getToken(TeradataSQLParser.CONNECT, 0)

        def THROUGH(self):
            return self.getToken(TeradataSQLParser.THROUGH, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,i)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.WITH)
            else:
                return self.getToken(TeradataSQLParser.WITH, i)

        def TRUST(self):
            return self.getToken(TeradataSQLParser.TRUST, 0)

        def ONLY(self):
            return self.getToken(TeradataSQLParser.ONLY, 0)

        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def PERMANENT(self):
            return self.getToken(TeradataSQLParser.PERMANENT, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def profile_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Profile_nameContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revoke_connect_through_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_connect_through_stat" ):
                listener.enterRevoke_connect_through_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_connect_through_stat" ):
                listener.exitRevoke_connect_through_stat(self)




    def revoke_connect_through_stat(self):

        localctx = TeradataSQLParser.Revoke_connect_through_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1256, self.RULE_revoke_connect_through_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14135
            self.match(TeradataSQLParser.REVOKE)
            self.state = 14136
            self.match(TeradataSQLParser.CONNECT)
            self.state = 14137
            self.match(TeradataSQLParser.THROUGH)
            self.state = 14138
            localctx.trusted_user_name = self.user_name()
            self.state = 14194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [164, 426]:
                self.state = 14139
                _la = self._input.LA(1)
                if not(_la==164 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 14189
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                    self.state = 14140
                    localctx.application_user_name = self.user_name()
                    self.state = 14145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 14141
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 14142
                        localctx.application_user_name = self.user_name()
                        self.state = 14147
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 14166
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1830,self._ctx)
                    if la_ == 1:
                        self.state = 14148
                        self.match(TeradataSQLParser.WITH)
                        self.state = 14149
                        self.match(TeradataSQLParser.ROLE)
                        self.state = 14150
                        self.role_name()
                        self.state = 14155
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 14151
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 14152
                            self.role_name()
                            self.state = 14157
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 14161
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==474:
                            self.state = 14158
                            self.match(TeradataSQLParser.WITH)
                            self.state = 14159
                            self.match(TeradataSQLParser.PROFILE)
                            self.state = 14160
                            self.profile_name()


                        pass

                    elif la_ == 2:
                        self.state = 14163
                        self.match(TeradataSQLParser.WITH)
                        self.state = 14164
                        self.match(TeradataSQLParser.PROFILE)
                        self.state = 14165
                        self.profile_name()
                        pass


                    pass
                elif token in [303]:
                    self.state = 14168
                    self.match(TeradataSQLParser.PERMANENT)
                    self.state = 14169
                    localctx.permanent_user_name = self.user_name()
                    self.state = 14174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 14170
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 14171
                        localctx.permanent_user_name = self.user_name()
                        self.state = 14176
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 14187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==474:
                        self.state = 14177
                        self.match(TeradataSQLParser.WITH)
                        self.state = 14178
                        self.match(TeradataSQLParser.ROLE)
                        self.state = 14179
                        self.role_name()
                        self.state = 14184
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1208:
                            self.state = 14180
                            self.match(TeradataSQLParser.COMMA)
                            self.state = 14181
                            self.role_name()
                            self.state = 14186
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [474]:
                self.state = 14191
                self.match(TeradataSQLParser.WITH)
                self.state = 14192
                self.match(TeradataSQLParser.TRUST)
                self.state = 14193
                self.match(TeradataSQLParser.ONLY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_logon_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._integer_literal = None # Integer_literalContext
            self.host_id = list() # of Integer_literalContexts

        def REVOKE(self):
            return self.getToken(TeradataSQLParser.REVOKE, 0)

        def LOGON(self):
            return self.getToken(TeradataSQLParser.LOGON, 0)

        def ON(self):
            return self.getToken(TeradataSQLParser.ON, 0)

        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def AS(self):
            return self.getToken(TeradataSQLParser.AS, 0)

        def DEFAULT(self):
            return self.getToken(TeradataSQLParser.DEFAULT, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,i)


        def integer_literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Integer_literalContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Integer_literalContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revoke_logon_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_logon_stat" ):
                listener.enterRevoke_logon_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_logon_stat" ):
                listener.exitRevoke_logon_stat(self)




    def revoke_logon_stat(self):

        localctx = TeradataSQLParser.Revoke_logon_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1258, self.RULE_revoke_logon_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14196
            self.match(TeradataSQLParser.REVOKE)
            self.state = 14197
            self.match(TeradataSQLParser.LOGON)
            self.state = 14198
            self.match(TeradataSQLParser.ON)
            self.state = 14208
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1194]:
                self.state = 14199
                localctx._integer_literal = self.integer_literal()
                localctx.host_id.append(localctx._integer_literal)
                self.state = 14204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14200
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14201
                    localctx._integer_literal = self.integer_literal()
                    localctx.host_id.append(localctx._integer_literal)
                    self.state = 14206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [13]:
                self.state = 14207
                self.match(TeradataSQLParser.ALL)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 14221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20]:
                self.state = 14210
                self.match(TeradataSQLParser.AS)
                self.state = 14211
                self.match(TeradataSQLParser.DEFAULT)
                pass
            elif token in [164, 426]:
                self.state = 14212
                _la = self._input.LA(1)
                if not(_la==164 or _la==426):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 14213
                self.user_name()
                self.state = 14218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14214
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14215
                    self.user_name()
                    self.state = 14220
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_map_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.map_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLParser.REVOKE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLParser.MAP, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def PUBLIC(self):
            return self.getToken(TeradataSQLParser.PUBLIC, 0)

        def grant_option_for(self):
            return self.getTypedRuleContext(TeradataSQLParser.Grant_option_forContext,0)


        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revoke_map_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_map_stat" ):
                listener.enterRevoke_map_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_map_stat" ):
                listener.exitRevoke_map_stat(self)




    def revoke_map_stat(self):

        localctx = TeradataSQLParser.Revoke_map_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1260, self.RULE_revoke_map_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14223
            self.match(TeradataSQLParser.REVOKE)
            self.state = 14225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 14224
                self.grant_option_for()


            self.state = 14227
            self.match(TeradataSQLParser.MAP)
            self.state = 14228
            localctx.map_name = self.unqualified_name()
            self.state = 14229
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14239
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193]:
                self.state = 14230
                localctx.user_or_role = self.role_name()
                self.state = 14235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1208:
                    self.state = 14231
                    self.match(TeradataSQLParser.COMMA)
                    self.state = 14232
                    localctx.user_or_role = self.role_name()
                    self.state = 14237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [313]:
                self.state = 14238
                self.match(TeradataSQLParser.PUBLIC)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_zone_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.zone_name = None # Unqualified_nameContext
            self.user_or_role = None # Role_nameContext

        def REVOKE(self):
            return self.getToken(TeradataSQLParser.REVOKE, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def unqualified_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Unqualified_nameContext,0)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def role_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Role_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Role_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revoke_zone_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_zone_stat" ):
                listener.enterRevoke_zone_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_zone_stat" ):
                listener.exitRevoke_zone_stat(self)




    def revoke_zone_stat(self):

        localctx = TeradataSQLParser.Revoke_zone_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1262, self.RULE_revoke_zone_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14241
            self.match(TeradataSQLParser.REVOKE)
            self.state = 14242
            self.match(TeradataSQLParser.ZONE)
            self.state = 14243
            localctx.zone_name = self.unqualified_name()
            self.state = 14244
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14245
            localctx.user_or_role = self.role_name()
            self.state = 14250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 14246
                self.match(TeradataSQLParser.COMMA)
                self.state = 14247
                localctx.user_or_role = self.role_name()
                self.state = 14252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Revoke_zone_override_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REVOKE(self):
            return self.getToken(TeradataSQLParser.REVOKE, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLParser.OVERRIDE, 0)

        def user_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.User_nameContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.User_nameContext,i)


        def TO(self):
            return self.getToken(TeradataSQLParser.TO, 0)

        def FROM(self):
            return self.getToken(TeradataSQLParser.FROM, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revoke_zone_override_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevoke_zone_override_stat" ):
                listener.enterRevoke_zone_override_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevoke_zone_override_stat" ):
                listener.exitRevoke_zone_override_stat(self)




    def revoke_zone_override_stat(self):

        localctx = TeradataSQLParser.Revoke_zone_override_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1264, self.RULE_revoke_zone_override_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14253
            self.match(TeradataSQLParser.REVOKE)
            self.state = 14254
            self.match(TeradataSQLParser.ZONE)
            self.state = 14255
            self.match(TeradataSQLParser.OVERRIDE)
            self.state = 14256
            _la = self._input.LA(1)
            if not(_la==164 or _la==426):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 14257
            self.user_name()
            self.state = 14262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1208:
                self.state = 14258
                self.match(TeradataSQLParser.COMMA)
                self.state = 14259
                self.user_name()
                self.state = 14264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(TeradataSQLParser.ALTER, 0)

        def EXTERNAL(self):
            return self.getToken(TeradataSQLParser.EXTERNAL, 0)

        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def ANY(self):
            return self.getToken(TeradataSQLParser.ANY, 0)

        def CHECKPOINT(self):
            return self.getToken(TeradataSQLParser.CHECKPOINT, 0)

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def AUTHORIZATION(self):
            return self.getToken(TeradataSQLParser.AUTHORIZATION, 0)

        def DATABASE(self):
            return self.getToken(TeradataSQLParser.DATABASE, 0)

        def DATASET(self):
            return self.getToken(TeradataSQLParser.DATASET, 0)

        def SCHEMA(self):
            return self.getToken(TeradataSQLParser.SCHEMA, 0)

        def GLOP(self):
            return self.getToken(TeradataSQLParser.GLOP, 0)

        def MACRO(self):
            return self.getToken(TeradataSQLParser.MACRO, 0)

        def OWNER(self):
            return self.getToken(TeradataSQLParser.OWNER, 0)

        def SERVER(self):
            return self.getToken(TeradataSQLParser.SERVER, 0)

        def TABLE(self):
            return self.getToken(TeradataSQLParser.TABLE, 0)

        def TRIGGER(self):
            return self.getToken(TeradataSQLParser.TRIGGER, 0)

        def USER(self):
            return self.getToken(TeradataSQLParser.USER, 0)

        def VIEW(self):
            return self.getToken(TeradataSQLParser.VIEW, 0)

        def DELETE(self):
            return self.getToken(TeradataSQLParser.DELETE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def DUMP(self):
            return self.getToken(TeradataSQLParser.DUMP, 0)

        def EXECUTE(self):
            return self.getToken(TeradataSQLParser.EXECUTE, 0)

        def MEMBER(self):
            return self.getToken(TeradataSQLParser.MEMBER, 0)

        def INDEX(self):
            return self.getToken(TeradataSQLParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(TeradataSQLParser.INSERT, 0)

        def column_list(self):
            return self.getTypedRuleContext(TeradataSQLParser.Column_listContext,0)


        def NONTEMPORAL(self):
            return self.getToken(TeradataSQLParser.NONTEMPORAL, 0)

        def OVERRIDE(self):
            return self.getToken(TeradataSQLParser.OVERRIDE, 0)

        def RESTORE(self):
            return self.getToken(TeradataSQLParser.RESTORE, 0)

        def SELECT(self):
            return self.getToken(TeradataSQLParser.SELECT, 0)

        def UPDATE(self):
            return self.getToken(TeradataSQLParser.UPDATE, 0)

        def REFERENCES(self):
            return self.getToken(TeradataSQLParser.REFERENCES, 0)

        def RETRIEVE(self):
            return self.getToken(TeradataSQLParser.RETRIEVE, 0)

        def SHOW(self):
            return self.getToken(TeradataSQLParser.SHOW, 0)

        def STATISTICS(self):
            return self.getToken(TeradataSQLParser.STATISTICS, 0)

        def UDT(self):
            return self.getToken(TeradataSQLParser.UDT, 0)

        def METHOD(self):
            return self.getToken(TeradataSQLParser.METHOD, 0)

        def UDTMETHOD(self):
            return self.getToken(TeradataSQLParser.UDTMETHOD, 0)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def UDTTYPE(self):
            return self.getToken(TeradataSQLParser.UDTTYPE, 0)

        def USAGE(self):
            return self.getToken(TeradataSQLParser.USAGE, 0)

        def UDTUSAGE(self):
            return self.getToken(TeradataSQLParser.UDTUSAGE, 0)

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = TeradataSQLParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1266, self.RULE_privilege)
        try:
            self.state = 14391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1845,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14265
                self.match(TeradataSQLParser.ALTER)
                self.state = 14266
                self.match(TeradataSQLParser.EXTERNAL)
                self.state = 14267
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14268
                self.match(TeradataSQLParser.ALTER)
                self.state = 14269
                self.match(TeradataSQLParser.FUNCTION)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 14270
                self.match(TeradataSQLParser.ALTER)
                self.state = 14271
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 14272
                self.match(TeradataSQLParser.ANY)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 14273
                self.match(TeradataSQLParser.CHECKPOINT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 14274
                self.match(TeradataSQLParser.CREATE)
                self.state = 14275
                self.match(TeradataSQLParser.AUTHORIZATION)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 14276
                self.match(TeradataSQLParser.CREATE)
                self.state = 14277
                self.match(TeradataSQLParser.DATABASE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 14278
                self.match(TeradataSQLParser.CREATE)
                self.state = 14279
                self.match(TeradataSQLParser.DATASET)
                self.state = 14280
                self.match(TeradataSQLParser.SCHEMA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 14281
                self.match(TeradataSQLParser.CREATE)
                self.state = 14282
                self.match(TeradataSQLParser.EXTERNAL)
                self.state = 14283
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 14284
                self.match(TeradataSQLParser.CREATE)
                self.state = 14285
                self.match(TeradataSQLParser.FUNCTION)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 14286
                self.match(TeradataSQLParser.CREATE)
                self.state = 14287
                self.match(TeradataSQLParser.GLOP)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 14288
                self.match(TeradataSQLParser.CREATE)
                self.state = 14289
                self.match(TeradataSQLParser.MACRO)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 14290
                self.match(TeradataSQLParser.CREATE)
                self.state = 14291
                self.match(TeradataSQLParser.OWNER)
                self.state = 14292
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 14293
                self.match(TeradataSQLParser.CREATE)
                self.state = 14294
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 14295
                self.match(TeradataSQLParser.CREATE)
                self.state = 14296
                self.match(TeradataSQLParser.SERVER)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 14297
                self.match(TeradataSQLParser.CREATE)
                self.state = 14298
                self.match(TeradataSQLParser.TABLE)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 14299
                self.match(TeradataSQLParser.CREATE)
                self.state = 14300
                self.match(TeradataSQLParser.TRIGGER)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 14301
                self.match(TeradataSQLParser.CREATE)
                self.state = 14302
                self.match(TeradataSQLParser.USER)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 14303
                self.match(TeradataSQLParser.CREATE)
                self.state = 14304
                self.match(TeradataSQLParser.VIEW)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 14305
                self.match(TeradataSQLParser.DATABASE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 14306
                self.match(TeradataSQLParser.DELETE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 14307
                self.match(TeradataSQLParser.DROP)
                self.state = 14308
                self.match(TeradataSQLParser.AUTHORIZATION)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 14309
                self.match(TeradataSQLParser.DROP)
                self.state = 14310
                self.match(TeradataSQLParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 14311
                self.match(TeradataSQLParser.DROP)
                self.state = 14312
                self.match(TeradataSQLParser.DATASET)
                self.state = 14313
                self.match(TeradataSQLParser.SCHEMA)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 14314
                self.match(TeradataSQLParser.DROP)
                self.state = 14315
                self.match(TeradataSQLParser.FUNCTION)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 14316
                self.match(TeradataSQLParser.DROP)
                self.state = 14317
                self.match(TeradataSQLParser.GLOP)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 14318
                self.match(TeradataSQLParser.DROP)
                self.state = 14319
                self.match(TeradataSQLParser.MACRO)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 14320
                self.match(TeradataSQLParser.DROP)
                self.state = 14321
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 14322
                self.match(TeradataSQLParser.DROP)
                self.state = 14323
                self.match(TeradataSQLParser.SERVER)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 14324
                self.match(TeradataSQLParser.DROP)
                self.state = 14325
                self.match(TeradataSQLParser.TABLE)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 14326
                self.match(TeradataSQLParser.DROP)
                self.state = 14327
                self.match(TeradataSQLParser.TRIGGER)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 14328
                self.match(TeradataSQLParser.DROP)
                self.state = 14329
                self.match(TeradataSQLParser.USER)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 14330
                self.match(TeradataSQLParser.DROP)
                self.state = 14331
                self.match(TeradataSQLParser.VIEW)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 14332
                self.match(TeradataSQLParser.DUMP)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 14333
                self.match(TeradataSQLParser.EXECUTE)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 14334
                self.match(TeradataSQLParser.EXECUTE)
                self.state = 14335
                self.match(TeradataSQLParser.FUNCTION)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 14336
                self.match(TeradataSQLParser.EXECUTE)
                self.state = 14337
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 14338
                self.match(TeradataSQLParser.FUNCTION)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 14339
                self.match(TeradataSQLParser.GLOP)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 14340
                self.match(TeradataSQLParser.GLOP)
                self.state = 14341
                self.match(TeradataSQLParser.MEMBER)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 14342
                self.match(TeradataSQLParser.INDEX)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 14343
                self.match(TeradataSQLParser.INSERT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 14344
                self.match(TeradataSQLParser.INSERT)
                self.state = 14345
                self.column_list()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 14346
                self.match(TeradataSQLParser.MACRO)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 14347
                self.match(TeradataSQLParser.NONTEMPORAL)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 14348
                self.match(TeradataSQLParser.OVERRIDE)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 14349
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 14350
                self.match(TeradataSQLParser.DELETE)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 14351
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 14352
                self.match(TeradataSQLParser.DUMP)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 14353
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 14354
                self.match(TeradataSQLParser.INSERT)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 14355
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 14356
                self.match(TeradataSQLParser.RESTORE)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 14357
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 14358
                self.match(TeradataSQLParser.SELECT)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 14359
                self.match(TeradataSQLParser.OVERRIDE)
                self.state = 14360
                self.match(TeradataSQLParser.UPDATE)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 14361
                self.match(TeradataSQLParser.PROCEDURE)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 14362
                self.match(TeradataSQLParser.REFERENCES)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 14363
                self.match(TeradataSQLParser.REFERENCES)
                self.state = 14364
                self.column_list()
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 14365
                self.match(TeradataSQLParser.RESTORE)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 14366
                self.match(TeradataSQLParser.RETRIEVE)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 14367
                self.match(TeradataSQLParser.SELECT)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 14368
                self.match(TeradataSQLParser.SELECT)
                self.state = 14369
                self.column_list()
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 14370
                self.match(TeradataSQLParser.SHOW)
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 14371
                self.match(TeradataSQLParser.STATISTICS)
                pass

            elif la_ == 62:
                self.enterOuterAlt(localctx, 62)
                self.state = 14372
                self.match(TeradataSQLParser.TABLE)
                pass

            elif la_ == 63:
                self.enterOuterAlt(localctx, 63)
                self.state = 14373
                self.match(TeradataSQLParser.TRIGGER)
                pass

            elif la_ == 64:
                self.enterOuterAlt(localctx, 64)
                self.state = 14374
                self.match(TeradataSQLParser.UDT)
                self.state = 14375
                self.match(TeradataSQLParser.METHOD)
                pass

            elif la_ == 65:
                self.enterOuterAlt(localctx, 65)
                self.state = 14376
                self.match(TeradataSQLParser.UDTMETHOD)
                pass

            elif la_ == 66:
                self.enterOuterAlt(localctx, 66)
                self.state = 14377
                self.match(TeradataSQLParser.UDT)
                self.state = 14378
                self.match(TeradataSQLParser.TYPE)
                pass

            elif la_ == 67:
                self.enterOuterAlt(localctx, 67)
                self.state = 14379
                self.match(TeradataSQLParser.UDTTYPE)
                pass

            elif la_ == 68:
                self.enterOuterAlt(localctx, 68)
                self.state = 14380
                self.match(TeradataSQLParser.UDT)
                self.state = 14381
                self.match(TeradataSQLParser.USAGE)
                pass

            elif la_ == 69:
                self.enterOuterAlt(localctx, 69)
                self.state = 14382
                self.match(TeradataSQLParser.UDTUSAGE)
                pass

            elif la_ == 70:
                self.enterOuterAlt(localctx, 70)
                self.state = 14383
                self.match(TeradataSQLParser.UPDATE)
                pass

            elif la_ == 71:
                self.enterOuterAlt(localctx, 71)
                self.state = 14384
                self.match(TeradataSQLParser.UPDATE)
                self.state = 14385
                self.column_list()
                pass

            elif la_ == 72:
                self.enterOuterAlt(localctx, 72)
                self.state = 14386
                self.match(TeradataSQLParser.USER)
                pass

            elif la_ == 73:
                self.enterOuterAlt(localctx, 73)
                self.state = 14387
                self.match(TeradataSQLParser.VIEW)
                pass

            elif la_ == 74:
                self.enterOuterAlt(localctx, 74)
                self.state = 14388
                self.match(TeradataSQLParser.WITH)
                self.state = 14389
                self.match(TeradataSQLParser.DATASET)
                self.state = 14390
                self.match(TeradataSQLParser.SCHEMA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Privilege_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def object_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Object_nameContext,0)


        def PROCEDURE(self):
            return self.getToken(TeradataSQLParser.PROCEDURE, 0)

        def procedure_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Procedure_nameContext,0)


        def SPECIFIC(self):
            return self.getToken(TeradataSQLParser.SPECIFIC, 0)

        def FUNCTION(self):
            return self.getToken(TeradataSQLParser.FUNCTION, 0)

        def function_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(TeradataSQLParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(TeradataSQLParser.CLOSE_PAR, 0)

        def function_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TeradataSQLParser.Function_parameterContext)
            else:
                return self.getTypedRuleContext(TeradataSQLParser.Function_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(TeradataSQLParser.COMMA)
            else:
                return self.getToken(TeradataSQLParser.COMMA, i)

        def TYPE(self):
            return self.getToken(TeradataSQLParser.TYPE, 0)

        def udt_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Udt_nameContext,0)


        def sysudtlib(self):
            return self.getTypedRuleContext(TeradataSQLParser.SysudtlibContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_privilege_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege_object" ):
                listener.enterPrivilege_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege_object" ):
                listener.exitPrivilege_object(self)




    def privilege_object(self):

        localctx = TeradataSQLParser.Privilege_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1268, self.RULE_privilege_object)
        self._la = 0 # Token type
        try:
            self.state = 14421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1850,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 14393
                self.object_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 14394
                self.match(TeradataSQLParser.PROCEDURE)
                self.state = 14395
                self.procedure_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 14396
                self.match(TeradataSQLParser.SPECIFIC)
                self.state = 14397
                self.match(TeradataSQLParser.FUNCTION)
                self.state = 14398
                self.function_name()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 14400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==166:
                    self.state = 14399
                    self.match(TeradataSQLParser.FUNCTION)


                self.state = 14402
                self.function_name()
                self.state = 14403
                self.match(TeradataSQLParser.OPEN_PAR)
                self.state = 14412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4652245284389126144) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 9007199255789617) != 0) or ((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & 288230381251985409) != 0) or ((((_la - 277)) & ~0x3f) == 0 and ((1 << (_la - 277)) & 70368744177667) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & 3298534883329) != 0) or ((((_la - 463)) & ~0x3f) == 0 and ((1 << (_la - 463)) & -33554425) != 0) or ((((_la - 527)) & ~0x3f) == 0 and ((1 << (_la - 527)) & -1) != 0) or ((((_la - 591)) & ~0x3f) == 0 and ((1 << (_la - 591)) & -1) != 0) or ((((_la - 655)) & ~0x3f) == 0 and ((1 << (_la - 655)) & -1) != 0) or ((((_la - 719)) & ~0x3f) == 0 and ((1 << (_la - 719)) & -1) != 0) or ((((_la - 783)) & ~0x3f) == 0 and ((1 << (_la - 783)) & -1) != 0) or ((((_la - 847)) & ~0x3f) == 0 and ((1 << (_la - 847)) & -1) != 0) or ((((_la - 911)) & ~0x3f) == 0 and ((1 << (_la - 911)) & -1) != 0) or ((((_la - 975)) & ~0x3f) == 0 and ((1 << (_la - 975)) & -1) != 0) or ((((_la - 1039)) & ~0x3f) == 0 and ((1 << (_la - 1039)) & -1) != 0) or ((((_la - 1103)) & ~0x3f) == 0 and ((1 << (_la - 1103)) & -1) != 0) or ((((_la - 1167)) & ~0x3f) == 0 and ((1 << (_la - 1167)) & 134217727) != 0):
                    self.state = 14404
                    self.function_parameter()
                    self.state = 14409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1208:
                        self.state = 14405
                        self.match(TeradataSQLParser.COMMA)
                        self.state = 14406
                        self.function_parameter()
                        self.state = 14411
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 14414
                self.match(TeradataSQLParser.CLOSE_PAR)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 14416
                self.match(TeradataSQLParser.TYPE)
                self.state = 14418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1849,self._ctx)
                if la_ == 1:
                    self.state = 14417
                    self.sysudtlib()


                self.state = 14420
                self.udt_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Map_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def MAP(self):
            return self.getToken(TeradataSQLParser.MAP, 0)

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_map_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMap_privilege" ):
                listener.enterMap_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMap_privilege" ):
                listener.exitMap_privilege(self)




    def map_privilege(self):

        localctx = TeradataSQLParser.Map_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1270, self.RULE_map_privilege)
        try:
            self.state = 14428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14423
                self.match(TeradataSQLParser.CREATE)
                self.state = 14424
                self.match(TeradataSQLParser.MAP)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14425
                self.match(TeradataSQLParser.DROP)
                self.state = 14426
                self.match(TeradataSQLParser.MAP)
                pass
            elif token in [236]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14427
                self.match(TeradataSQLParser.MAP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Role_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(TeradataSQLParser.ROLE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_role_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRole_privilege" ):
                listener.enterRole_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRole_privilege" ):
                listener.exitRole_privilege(self)




    def role_privilege(self):

        localctx = TeradataSQLParser.Role_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1272, self.RULE_role_privilege)
        try:
            self.state = 14435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14430
                self.match(TeradataSQLParser.CREATE)
                self.state = 14431
                self.match(TeradataSQLParser.ROLE)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14432
                self.match(TeradataSQLParser.DROP)
                self.state = 14433
                self.match(TeradataSQLParser.ROLE)
                pass
            elif token in [357]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14434
                self.match(TeradataSQLParser.ROLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Profile_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def PROFILE(self):
            return self.getToken(TeradataSQLParser.PROFILE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_profile_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProfile_privilege" ):
                listener.enterProfile_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProfile_privilege" ):
                listener.exitProfile_privilege(self)




    def profile_privilege(self):

        localctx = TeradataSQLParser.Profile_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1274, self.RULE_profile_privilege)
        try:
            self.state = 14442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14437
                self.match(TeradataSQLParser.CREATE)
                self.state = 14438
                self.match(TeradataSQLParser.PROFILE)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14439
                self.match(TeradataSQLParser.DROP)
                self.state = 14440
                self.match(TeradataSQLParser.PROFILE)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14441
                self.match(TeradataSQLParser.PROFILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Zone_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(TeradataSQLParser.CREATE, 0)

        def ZONE(self):
            return self.getToken(TeradataSQLParser.ZONE, 0)

        def DROP(self):
            return self.getToken(TeradataSQLParser.DROP, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_zone_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterZone_privilege" ):
                listener.enterZone_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitZone_privilege" ):
                listener.exitZone_privilege(self)




    def zone_privilege(self):

        localctx = TeradataSQLParser.Zone_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1276, self.RULE_zone_privilege)
        try:
            self.state = 14449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 14444
                self.match(TeradataSQLParser.CREATE)
                self.state = 14445
                self.match(TeradataSQLParser.ZONE)
                pass
            elif token in [125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 14446
                self.match(TeradataSQLParser.DROP)
                self.state = 14447
                self.match(TeradataSQLParser.ZONE)
                pass
            elif token in [480]:
                self.enterOuterAlt(localctx, 3)
                self.state = 14448
                self.match(TeradataSQLParser.ZONE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Monitor_privilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORTSESSION(self):
            return self.getToken(TeradataSQLParser.ABORTSESSION, 0)

        def MONRESOURCE(self):
            return self.getToken(TeradataSQLParser.MONRESOURCE, 0)

        def MONSESSION(self):
            return self.getToken(TeradataSQLParser.MONSESSION, 0)

        def SETRESRATE(self):
            return self.getToken(TeradataSQLParser.SETRESRATE, 0)

        def SETSESSRATE(self):
            return self.getToken(TeradataSQLParser.SETSESSRATE, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_monitor_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMonitor_privilege" ):
                listener.enterMonitor_privilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMonitor_privilege" ):
                listener.exitMonitor_privilege(self)




    def monitor_privilege(self):

        localctx = TeradataSQLParser.Monitor_privilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1278, self.RULE_monitor_privilege)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14451
            _la = self._input.LA(1)
            if not(_la==2 or _la==256 or _la==257 or _la==373 or _la==375):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GranteeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grantee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantee" ):
                listener.enterGrantee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantee" ):
                listener.exitGrantee(self)




    def grantee(self):

        localctx = TeradataSQLParser.GranteeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1280, self.RULE_grantee)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 14453
                self.match(TeradataSQLParser.ALL)


            self.state = 14456
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def database_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Database_nameContext,0)


        def ALL(self):
            return self.getToken(TeradataSQLParser.ALL, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_revokee

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokee" ):
                listener.enterRevokee(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokee" ):
                listener.exitRevokee(self)




    def revokee(self):

        localctx = TeradataSQLParser.RevokeeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1282, self.RULE_revokee)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 14458
                self.match(TeradataSQLParser.ALL)


            self.state = 14461
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def data_type(self):
            return self.getTypedRuleContext(TeradataSQLParser.Data_typeContext,0)


        def parameter_name(self):
            return self.getTypedRuleContext(TeradataSQLParser.Parameter_nameContext,0)


        def getRuleIndex(self):
            return TeradataSQLParser.RULE_function_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_parameter" ):
                listener.enterFunction_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_parameter" ):
                listener.exitFunction_parameter(self)




    def function_parameter(self):

        localctx = TeradataSQLParser.Function_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1284, self.RULE_function_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1857,self._ctx)
            if la_ == 1:
                self.state = 14463
                self.parameter_name()


            self.state = 14466
            self.data_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_admin_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def ADMIN(self):
            return self.getToken(TeradataSQLParser.ADMIN, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_admin_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_admin_option" ):
                listener.enterWith_admin_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_admin_option" ):
                listener.exitWith_admin_option(self)




    def with_admin_option(self):

        localctx = TeradataSQLParser.With_admin_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1286, self.RULE_with_admin_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14468
            self.match(TeradataSQLParser.WITH)
            self.state = 14469
            self.match(TeradataSQLParser.ADMIN)
            self.state = 14470
            self.match(TeradataSQLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_grant_optionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(TeradataSQLParser.WITH, 0)

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLParser.OPTION, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_with_grant_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_grant_option" ):
                listener.enterWith_grant_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_grant_option" ):
                listener.exitWith_grant_option(self)




    def with_grant_option(self):

        localctx = TeradataSQLParser.With_grant_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1288, self.RULE_with_grant_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14472
            self.match(TeradataSQLParser.WITH)
            self.state = 14473
            self.match(TeradataSQLParser.GRANT)
            self.state = 14474
            self.match(TeradataSQLParser.OPTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grant_option_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GRANT(self):
            return self.getToken(TeradataSQLParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(TeradataSQLParser.OPTION, 0)

        def FOR(self):
            return self.getToken(TeradataSQLParser.FOR, 0)

        def getRuleIndex(self):
            return TeradataSQLParser.RULE_grant_option_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_option_for" ):
                listener.enterGrant_option_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_option_for" ):
                listener.exitGrant_option_for(self)




    def grant_option_for(self):

        localctx = TeradataSQLParser.Grant_option_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1290, self.RULE_grant_option_for)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 14476
            self.match(TeradataSQLParser.GRANT)
            self.state = 14477
            self.match(TeradataSQLParser.OPTION)
            self.state = 14478
            self.match(TeradataSQLParser.FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[139] = self.ji_joined_table_sempred
        self._predicates[419] = self.query_expr_sempred
        self._predicates[499] = self.logical_expr_sempred
        self._predicates[500] = self.scalar_expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def ji_joined_table_sempred(self, localctx:Ji_joined_tableContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def query_expr_sempred(self, localctx:Query_exprContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def logical_expr_sempred(self, localctx:Logical_exprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 11)
         

    def scalar_expr_sempred(self, localctx:Scalar_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 69)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 68)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 67)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 66)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 65)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 61)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 60)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 49:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 50:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 51:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 52:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 53:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 54:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 55:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 56:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 57:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 58:
                return self.precpred(self._ctx, 4)
         




