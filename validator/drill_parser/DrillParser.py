# Generated from sql/drill/DrillParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,154,993,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,1,0,5,0,168,8,0,10,0,
        12,0,171,9,0,1,0,1,0,1,1,1,1,3,1,177,8,1,1,2,1,2,3,2,181,8,2,1,3,
        1,3,1,3,3,3,186,8,3,1,4,1,4,1,4,1,4,1,4,3,4,193,8,4,1,5,1,5,3,5,
        197,8,5,1,5,1,5,1,5,3,5,202,8,5,1,5,1,5,1,5,1,5,5,5,208,8,5,10,5,
        12,5,211,9,5,1,5,1,5,3,5,215,8,5,1,5,1,5,1,5,1,5,1,5,3,5,222,8,5,
        1,5,1,5,1,5,1,5,1,5,3,5,229,8,5,1,6,1,6,1,6,3,6,234,8,6,1,6,3,6,
        237,8,6,1,6,3,6,240,8,6,1,6,3,6,243,8,6,1,7,1,7,1,7,5,7,248,8,7,
        10,7,12,7,251,9,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,261,8,9,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,5,11,273,8,11,10,11,
        12,11,276,9,11,1,12,1,12,1,12,1,12,1,12,3,12,283,8,12,1,12,3,12,
        286,8,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,3,15,303,8,15,1,15,1,15,1,15,1,15,3,15,309,8,
        15,1,15,1,15,3,15,313,8,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,330,8,17,3,17,332,8,17,
        1,18,1,18,1,19,1,19,1,19,3,19,339,8,19,1,20,1,20,1,20,3,20,344,8,
        20,1,20,1,20,1,20,3,20,349,8,20,1,20,1,20,1,21,1,21,1,21,3,21,356,
        8,21,1,21,1,21,1,21,3,21,361,8,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,379,8,23,
        1,24,1,24,3,24,383,8,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,3,25,
        392,8,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,403,8,
        26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,3,27,418,8,27,1,27,1,27,1,27,3,27,423,8,27,3,27,425,8,27,1,27,
        1,27,1,27,1,27,1,27,3,27,432,8,27,3,27,434,8,27,1,27,1,27,1,27,1,
        27,1,27,1,27,3,27,442,8,27,3,27,444,8,27,1,28,1,28,1,29,1,29,1,29,
        1,29,3,29,452,8,29,1,29,1,29,3,29,456,8,29,1,29,3,29,459,8,29,1,
        29,1,29,1,29,1,29,1,29,3,29,466,8,29,1,29,1,29,1,29,1,29,1,29,3,
        29,473,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,484,
        8,30,3,30,486,8,30,1,31,1,31,1,31,1,32,3,32,492,8,32,1,32,1,32,3,
        32,496,8,32,1,32,3,32,499,8,32,1,32,3,32,502,8,32,1,32,3,32,505,
        8,32,1,32,3,32,508,8,32,1,32,3,32,511,8,32,1,32,3,32,514,8,32,1,
        33,1,33,1,33,1,33,5,33,520,8,33,10,33,12,33,523,9,33,1,34,1,34,3,
        34,527,8,34,1,34,1,34,1,34,1,35,1,35,3,35,534,8,35,1,35,1,35,1,35,
        5,35,539,8,35,10,35,12,35,542,9,35,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,3,36,551,8,36,1,36,1,36,3,36,555,8,36,1,36,1,36,3,36,559,8,
        36,1,36,3,36,562,8,36,1,36,3,36,565,8,36,1,37,1,37,1,37,1,37,5,37,
        571,8,37,10,37,12,37,574,9,37,1,38,1,38,3,38,578,8,38,1,38,1,38,
        3,38,582,8,38,1,38,1,38,3,38,586,8,38,1,38,1,38,3,38,590,8,38,1,
        38,3,38,593,8,38,1,38,1,38,1,38,3,38,598,8,38,3,38,600,8,38,1,39,
        3,39,603,8,39,1,39,1,39,3,39,607,8,39,3,39,609,8,39,1,39,1,39,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,623,8,40,10,
        40,12,40,626,9,40,1,40,1,40,3,40,630,8,40,1,41,1,41,1,41,1,41,1,
        41,3,41,637,8,41,1,42,3,42,640,8,42,1,42,1,42,3,42,644,8,42,1,42,
        3,42,647,8,42,1,42,1,42,1,43,1,43,3,43,653,8,43,1,44,1,44,1,44,1,
        44,1,44,1,44,1,45,3,45,662,8,45,1,45,1,45,3,45,666,8,45,1,46,1,46,
        1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,4,47,680,8,47,
        11,47,12,47,681,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,692,
        8,47,1,47,1,47,1,47,1,47,3,47,698,8,47,1,47,1,47,1,47,1,47,3,47,
        704,8,47,1,47,1,47,3,47,708,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,3,47,717,8,47,1,47,1,47,1,47,1,47,1,47,3,47,724,8,47,1,47,1,47,
        1,47,1,47,1,47,1,47,3,47,732,8,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,3,47,741,8,47,1,48,1,48,1,48,3,48,746,8,48,1,48,3,48,749,8,
        48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,772,8,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
        49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,795,8,49,1,49,1,49,1,49,1,
        49,1,49,5,49,802,8,49,10,49,12,49,805,9,49,1,50,1,50,3,50,809,8,
        50,1,51,1,51,1,52,1,52,1,52,3,52,816,8,52,1,52,1,52,1,53,1,53,1,
        54,1,54,1,54,5,54,825,8,54,10,54,12,54,828,9,54,1,55,1,55,1,55,1,
        55,1,56,1,56,1,57,1,57,1,57,1,57,3,57,840,8,57,1,57,1,57,3,57,844,
        8,57,1,58,1,58,1,58,3,58,849,8,58,1,59,1,59,1,59,1,59,1,60,1,60,
        1,61,1,61,1,61,1,61,3,61,861,8,61,1,61,3,61,864,8,61,1,61,1,61,1,
        61,3,61,869,8,61,1,61,1,61,1,61,3,61,874,8,61,1,61,5,61,877,8,61,
        10,61,12,61,880,9,61,1,62,1,62,3,62,884,8,62,1,62,3,62,887,8,62,
        1,62,3,62,890,8,62,1,62,3,62,893,8,62,1,62,3,62,896,8,62,1,62,3,
        62,899,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,
        63,911,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,3,63,924,8,63,1,64,1,64,1,64,1,65,3,65,930,8,65,1,65,1,65,1,66,
        1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,
        1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,74,3,74,959,
        8,74,1,74,1,74,1,75,1,75,1,75,3,75,966,8,75,1,75,1,75,1,75,3,75,
        971,8,75,1,75,1,75,3,75,975,8,75,1,76,1,76,1,77,1,77,1,78,1,78,1,
        79,1,79,1,80,1,80,3,80,987,8,80,1,81,1,81,1,82,1,82,1,82,0,2,98,
        122,83,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,0,14,2,0,18,18,34,34,2,0,21,21,93,93,3,0,
        22,22,94,94,105,105,2,0,43,43,50,50,3,0,44,44,60,60,89,89,3,0,1,
        1,5,5,101,101,1,0,153,154,1,0,150,152,5,0,36,36,72,72,109,109,125,
        125,127,129,1,0,132,137,2,0,7,7,28,28,2,0,39,39,58,58,1,0,90,91,
        5,0,24,24,48,48,66,67,95,95,119,119,1089,0,169,1,0,0,0,2,174,1,0,
        0,0,4,180,1,0,0,0,6,185,1,0,0,0,8,192,1,0,0,0,10,194,1,0,0,0,12,
        230,1,0,0,0,14,244,1,0,0,0,16,252,1,0,0,0,18,256,1,0,0,0,20,265,
        1,0,0,0,22,269,1,0,0,0,24,277,1,0,0,0,26,290,1,0,0,0,28,294,1,0,
        0,0,30,300,1,0,0,0,32,317,1,0,0,0,34,319,1,0,0,0,36,333,1,0,0,0,
        38,338,1,0,0,0,40,340,1,0,0,0,42,352,1,0,0,0,44,364,1,0,0,0,46,378,
        1,0,0,0,48,382,1,0,0,0,50,391,1,0,0,0,52,396,1,0,0,0,54,406,1,0,
        0,0,56,445,1,0,0,0,58,472,1,0,0,0,60,485,1,0,0,0,62,487,1,0,0,0,
        64,491,1,0,0,0,66,515,1,0,0,0,68,524,1,0,0,0,70,531,1,0,0,0,72,558,
        1,0,0,0,74,566,1,0,0,0,76,599,1,0,0,0,78,608,1,0,0,0,80,629,1,0,
        0,0,82,631,1,0,0,0,84,646,1,0,0,0,86,650,1,0,0,0,88,654,1,0,0,0,
        90,661,1,0,0,0,92,667,1,0,0,0,94,740,1,0,0,0,96,742,1,0,0,0,98,771,
        1,0,0,0,100,808,1,0,0,0,102,810,1,0,0,0,104,812,1,0,0,0,106,819,
        1,0,0,0,108,821,1,0,0,0,110,829,1,0,0,0,112,833,1,0,0,0,114,835,
        1,0,0,0,116,848,1,0,0,0,118,850,1,0,0,0,120,854,1,0,0,0,122,868,
        1,0,0,0,124,881,1,0,0,0,126,923,1,0,0,0,128,925,1,0,0,0,130,929,
        1,0,0,0,132,933,1,0,0,0,134,936,1,0,0,0,136,941,1,0,0,0,138,944,
        1,0,0,0,140,947,1,0,0,0,142,949,1,0,0,0,144,951,1,0,0,0,146,953,
        1,0,0,0,148,958,1,0,0,0,150,970,1,0,0,0,152,976,1,0,0,0,154,978,
        1,0,0,0,156,980,1,0,0,0,158,982,1,0,0,0,160,986,1,0,0,0,162,988,
        1,0,0,0,164,990,1,0,0,0,166,168,3,2,1,0,167,166,1,0,0,0,168,171,
        1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,
        1,0,0,0,172,173,5,0,0,1,173,1,1,0,0,0,174,176,3,4,2,0,175,177,5,
        149,0,0,176,175,1,0,0,0,176,177,1,0,0,0,177,3,1,0,0,0,178,181,3,
        6,3,0,179,181,3,46,23,0,180,178,1,0,0,0,180,179,1,0,0,0,181,5,1,
        0,0,0,182,186,3,32,16,0,183,186,3,8,4,0,184,186,3,38,19,0,185,182,
        1,0,0,0,185,183,1,0,0,0,185,184,1,0,0,0,186,7,1,0,0,0,187,193,3,
        10,5,0,188,193,3,18,9,0,189,193,3,24,12,0,190,193,3,28,14,0,191,
        193,3,30,15,0,192,187,1,0,0,0,192,188,1,0,0,0,192,189,1,0,0,0,192,
        190,1,0,0,0,192,191,1,0,0,0,193,9,1,0,0,0,194,196,5,19,0,0,195,197,
        3,136,68,0,196,195,1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,201,
        5,93,0,0,199,200,5,64,0,0,200,202,3,142,71,0,201,199,1,0,0,0,201,
        202,1,0,0,0,202,214,1,0,0,0,203,204,5,142,0,0,204,209,3,12,6,0,205,
        206,5,148,0,0,206,208,3,12,6,0,207,205,1,0,0,0,208,211,1,0,0,0,209,
        207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,
        213,5,143,0,0,213,215,1,0,0,0,214,203,1,0,0,0,214,215,1,0,0,0,215,
        221,1,0,0,0,216,217,5,41,0,0,217,218,5,104,0,0,218,222,3,150,75,
        0,219,220,5,82,0,0,220,222,3,142,71,0,221,216,1,0,0,0,221,219,1,
        0,0,0,221,222,1,0,0,0,222,228,1,0,0,0,223,224,5,85,0,0,224,225,5,
        142,0,0,225,226,3,14,7,0,226,227,5,143,0,0,227,229,1,0,0,0,228,223,
        1,0,0,0,228,229,1,0,0,0,229,11,1,0,0,0,230,231,3,156,78,0,231,233,
        3,126,63,0,232,234,3,130,65,0,233,232,1,0,0,0,233,234,1,0,0,0,234,
        236,1,0,0,0,235,237,3,132,66,0,236,235,1,0,0,0,236,237,1,0,0,0,237,
        239,1,0,0,0,238,240,3,128,64,0,239,238,1,0,0,0,239,240,1,0,0,0,240,
        242,1,0,0,0,241,243,3,134,67,0,242,241,1,0,0,0,242,243,1,0,0,0,243,
        13,1,0,0,0,244,249,3,16,8,0,245,246,5,148,0,0,246,248,3,16,8,0,247,
        245,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,
        15,1,0,0,0,251,249,1,0,0,0,252,253,3,142,71,0,253,254,5,133,0,0,
        254,255,3,142,71,0,255,17,1,0,0,0,256,257,5,19,0,0,257,258,5,104,
        0,0,258,260,3,150,75,0,259,261,3,20,10,0,260,259,1,0,0,0,260,261,
        1,0,0,0,261,262,1,0,0,0,262,263,5,6,0,0,263,264,3,122,61,0,264,19,
        1,0,0,0,265,266,5,142,0,0,266,267,3,22,11,0,267,268,5,143,0,0,268,
        21,1,0,0,0,269,274,3,156,78,0,270,271,5,148,0,0,271,273,3,156,78,
        0,272,270,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,
        0,275,23,1,0,0,0,276,274,1,0,0,0,277,278,5,19,0,0,278,279,5,106,
        0,0,279,280,5,104,0,0,280,282,3,146,73,0,281,283,3,20,10,0,282,281,
        1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,286,3,26,13,0,285,284,
        1,0,0,0,285,286,1,0,0,0,286,287,1,0,0,0,287,288,5,6,0,0,288,289,
        3,122,61,0,289,25,1,0,0,0,290,291,5,81,0,0,291,292,5,13,0,0,292,
        293,3,20,10,0,293,27,1,0,0,0,294,295,5,19,0,0,295,296,5,45,0,0,296,
        297,5,113,0,0,297,298,5,56,0,0,298,299,3,142,71,0,299,29,1,0,0,0,
        300,302,5,19,0,0,301,303,3,136,68,0,302,301,1,0,0,0,302,303,1,0,
        0,0,303,304,1,0,0,0,304,308,5,116,0,0,305,306,3,144,72,0,306,307,
        5,140,0,0,307,309,1,0,0,0,308,305,1,0,0,0,308,309,1,0,0,0,309,310,
        1,0,0,0,310,312,3,152,76,0,311,313,3,20,10,0,312,311,1,0,0,0,312,
        313,1,0,0,0,313,314,1,0,0,0,314,315,5,6,0,0,315,316,3,122,61,0,316,
        31,1,0,0,0,317,318,3,34,17,0,318,33,1,0,0,0,319,320,5,2,0,0,320,
        331,5,103,0,0,321,322,5,98,0,0,322,323,3,36,18,0,323,324,5,133,0,
        0,324,325,3,164,82,0,325,332,1,0,0,0,326,329,5,88,0,0,327,330,3,
        36,18,0,328,330,5,1,0,0,329,327,1,0,0,0,329,328,1,0,0,0,330,332,
        1,0,0,0,331,321,1,0,0,0,331,326,1,0,0,0,332,35,1,0,0,0,333,334,5,
        124,0,0,334,37,1,0,0,0,335,339,3,40,20,0,336,339,3,42,21,0,337,339,
        3,44,22,0,338,335,1,0,0,0,338,336,1,0,0,0,338,337,1,0,0,0,339,39,
        1,0,0,0,340,341,5,32,0,0,341,343,5,104,0,0,342,344,3,138,69,0,343,
        342,1,0,0,0,343,344,1,0,0,0,344,348,1,0,0,0,345,346,3,144,72,0,346,
        347,5,140,0,0,347,349,1,0,0,0,348,345,1,0,0,0,348,349,1,0,0,0,349,
        350,1,0,0,0,350,351,3,146,73,0,351,41,1,0,0,0,352,353,5,32,0,0,353,
        355,5,116,0,0,354,356,3,138,69,0,355,354,1,0,0,0,355,356,1,0,0,0,
        356,360,1,0,0,0,357,358,3,144,72,0,358,359,5,140,0,0,359,361,1,0,
        0,0,360,357,1,0,0,0,360,361,1,0,0,0,361,362,1,0,0,0,362,363,3,152,
        76,0,363,43,1,0,0,0,364,365,5,32,0,0,365,366,5,45,0,0,366,367,5,
        113,0,0,367,368,5,56,0,0,368,369,3,142,71,0,369,45,1,0,0,0,370,379,
        3,48,24,0,371,379,3,54,27,0,372,379,3,50,25,0,373,379,3,52,26,0,
        374,379,3,58,29,0,375,379,3,60,30,0,376,379,3,62,31,0,377,379,3,
        64,32,0,378,370,1,0,0,0,378,371,1,0,0,0,378,372,1,0,0,0,378,373,
        1,0,0,0,378,374,1,0,0,0,378,375,1,0,0,0,378,376,1,0,0,0,378,377,
        1,0,0,0,379,47,1,0,0,0,380,381,5,2,0,0,381,383,5,97,0,0,382,380,
        1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,5,98,0,0,385,386,
        3,36,18,0,386,387,5,133,0,0,387,388,3,164,82,0,388,49,1,0,0,0,389,
        390,5,2,0,0,390,392,5,97,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,
        393,1,0,0,0,393,394,5,88,0,0,394,395,3,140,70,0,395,51,1,0,0,0,396,
        397,5,86,0,0,397,398,5,104,0,0,398,402,5,65,0,0,399,400,5,17,0,0,
        400,403,3,20,10,0,401,403,5,70,0,0,402,399,1,0,0,0,402,401,1,0,0,
        0,402,403,1,0,0,0,403,404,1,0,0,0,404,405,3,150,75,0,405,53,1,0,
        0,0,406,407,5,3,0,0,407,417,5,104,0,0,408,418,3,150,75,0,409,410,
        5,104,0,0,410,411,5,142,0,0,411,412,3,140,70,0,412,413,5,142,0,0,
        413,414,3,56,28,0,414,415,5,143,0,0,415,416,5,143,0,0,416,418,1,
        0,0,0,417,408,1,0,0,0,417,409,1,0,0,0,417,418,1,0,0,0,418,424,1,
        0,0,0,419,422,5,17,0,0,420,423,3,20,10,0,421,423,5,70,0,0,422,420,
        1,0,0,0,422,421,1,0,0,0,423,425,1,0,0,0,424,419,1,0,0,0,424,425,
        1,0,0,0,425,433,1,0,0,0,426,427,5,86,0,0,427,431,5,65,0,0,428,429,
        3,142,71,0,429,430,5,61,0,0,430,432,1,0,0,0,431,428,1,0,0,0,431,
        432,1,0,0,0,432,434,1,0,0,0,433,426,1,0,0,0,433,434,1,0,0,0,434,
        443,1,0,0,0,435,436,7,0,0,0,436,441,5,102,0,0,437,438,5,92,0,0,438,
        439,3,120,60,0,439,440,5,83,0,0,440,442,1,0,0,0,441,437,1,0,0,0,
        441,442,1,0,0,0,442,444,1,0,0,0,443,435,1,0,0,0,443,444,1,0,0,0,
        444,55,1,0,0,0,445,446,3,108,54,0,446,57,1,0,0,0,447,451,5,29,0,
        0,448,449,3,144,72,0,449,450,5,140,0,0,450,452,1,0,0,0,451,448,1,
        0,0,0,451,452,1,0,0,0,452,455,1,0,0,0,453,456,3,150,75,0,454,456,
        3,152,76,0,455,453,1,0,0,0,455,454,1,0,0,0,456,458,1,0,0,0,457,459,
        3,156,78,0,458,457,1,0,0,0,458,459,1,0,0,0,459,473,1,0,0,0,460,461,
        5,29,0,0,461,462,7,1,0,0,462,465,3,146,73,0,463,464,5,140,0,0,464,
        466,3,144,72,0,465,463,1,0,0,0,465,466,1,0,0,0,466,473,1,0,0,0,467,
        468,5,29,0,0,468,469,5,142,0,0,469,470,3,122,61,0,470,471,5,143,
        0,0,471,473,1,0,0,0,472,447,1,0,0,0,472,460,1,0,0,0,472,467,1,0,
        0,0,473,59,1,0,0,0,474,475,5,99,0,0,475,486,7,2,0,0,476,477,5,99,
        0,0,477,483,5,38,0,0,478,479,7,3,0,0,479,480,3,140,70,0,480,481,
        5,140,0,0,481,482,3,140,70,0,482,484,1,0,0,0,483,478,1,0,0,0,483,
        484,1,0,0,0,484,486,1,0,0,0,485,474,1,0,0,0,485,476,1,0,0,0,486,
        61,1,0,0,0,487,488,5,112,0,0,488,489,3,148,74,0,489,63,1,0,0,0,490,
        492,3,66,33,0,491,490,1,0,0,0,491,492,1,0,0,0,492,493,1,0,0,0,493,
        495,3,70,35,0,494,496,3,74,37,0,495,494,1,0,0,0,495,496,1,0,0,0,
        496,498,1,0,0,0,497,499,3,92,46,0,498,497,1,0,0,0,498,499,1,0,0,
        0,499,501,1,0,0,0,500,502,3,110,55,0,501,500,1,0,0,0,501,502,1,0,
        0,0,502,504,1,0,0,0,503,505,3,112,56,0,504,503,1,0,0,0,504,505,1,
        0,0,0,505,507,1,0,0,0,506,508,3,114,57,0,507,506,1,0,0,0,507,508,
        1,0,0,0,508,510,1,0,0,0,509,511,3,116,58,0,510,509,1,0,0,0,510,511,
        1,0,0,0,511,513,1,0,0,0,512,514,3,118,59,0,513,512,1,0,0,0,513,514,
        1,0,0,0,514,65,1,0,0,0,515,516,5,118,0,0,516,521,3,68,34,0,517,518,
        5,148,0,0,518,520,3,68,34,0,519,517,1,0,0,0,520,523,1,0,0,0,521,
        519,1,0,0,0,521,522,1,0,0,0,522,67,1,0,0,0,523,521,1,0,0,0,524,526,
        3,146,73,0,525,527,3,20,10,0,526,525,1,0,0,0,526,527,1,0,0,0,527,
        528,1,0,0,0,528,529,5,6,0,0,529,530,3,122,61,0,530,69,1,0,0,0,531,
        533,5,96,0,0,532,534,5,30,0,0,533,532,1,0,0,0,533,534,1,0,0,0,534,
        535,1,0,0,0,535,540,3,72,36,0,536,537,5,148,0,0,537,539,3,72,36,
        0,538,536,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,
        0,541,71,1,0,0,0,542,540,1,0,0,0,543,544,5,17,0,0,544,545,5,144,
        0,0,545,546,3,120,60,0,546,547,5,145,0,0,547,559,1,0,0,0,548,551,
        3,150,75,0,549,551,3,160,80,0,550,548,1,0,0,0,550,549,1,0,0,0,551,
        552,1,0,0,0,552,553,5,140,0,0,553,555,1,0,0,0,554,550,1,0,0,0,554,
        555,1,0,0,0,555,556,1,0,0,0,556,559,5,150,0,0,557,559,3,98,49,0,
        558,543,1,0,0,0,558,554,1,0,0,0,558,557,1,0,0,0,559,564,1,0,0,0,
        560,562,5,6,0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,
        563,565,3,160,80,0,564,561,1,0,0,0,564,565,1,0,0,0,565,73,1,0,0,
        0,566,567,5,43,0,0,567,572,3,76,38,0,568,569,5,148,0,0,569,571,3,
        76,38,0,570,568,1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,
        1,0,0,0,573,75,1,0,0,0,574,572,1,0,0,0,575,577,3,66,33,0,576,578,
        3,90,45,0,577,576,1,0,0,0,577,578,1,0,0,0,578,600,1,0,0,0,579,581,
        3,150,75,0,580,582,3,90,45,0,581,580,1,0,0,0,581,582,1,0,0,0,582,
        600,1,0,0,0,583,585,3,96,48,0,584,586,3,90,45,0,585,584,1,0,0,0,
        585,586,1,0,0,0,586,600,1,0,0,0,587,600,3,82,41,0,588,590,5,59,0,
        0,589,588,1,0,0,0,589,590,1,0,0,0,590,592,1,0,0,0,591,593,3,78,39,
        0,592,591,1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,597,3,80,40,
        0,595,596,5,76,0,0,596,598,5,109,0,0,597,595,1,0,0,0,597,598,1,0,
        0,0,598,600,1,0,0,0,599,575,1,0,0,0,599,579,1,0,0,0,599,583,1,0,
        0,0,599,587,1,0,0,0,599,589,1,0,0,0,600,77,1,0,0,0,601,603,5,51,
        0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,609,1,0,0,0,604,606,5,60,
        0,0,605,607,5,79,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,609,1,0,
        0,0,608,602,1,0,0,0,608,604,1,0,0,0,609,610,1,0,0,0,610,611,5,57,
        0,0,611,79,1,0,0,0,612,630,3,88,44,0,613,614,5,142,0,0,614,615,3,
        70,35,0,615,616,5,43,0,0,616,624,3,88,44,0,617,618,5,148,0,0,618,
        619,3,70,35,0,619,620,5,43,0,0,620,621,3,88,44,0,621,623,1,0,0,0,
        622,617,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,
        625,627,1,0,0,0,626,624,1,0,0,0,627,628,5,143,0,0,628,630,1,0,0,
        0,629,612,1,0,0,0,629,613,1,0,0,0,630,81,1,0,0,0,631,632,3,86,43,
        0,632,633,3,84,42,0,633,636,3,86,43,0,634,635,5,76,0,0,635,637,3,
        94,47,0,636,634,1,0,0,0,636,637,1,0,0,0,637,83,1,0,0,0,638,640,5,
        51,0,0,639,638,1,0,0,0,639,640,1,0,0,0,640,647,1,0,0,0,641,643,7,
        4,0,0,642,644,5,79,0,0,643,642,1,0,0,0,643,644,1,0,0,0,644,647,1,
        0,0,0,645,647,5,20,0,0,646,639,1,0,0,0,646,641,1,0,0,0,646,645,1,
        0,0,0,647,648,1,0,0,0,648,649,5,57,0,0,649,85,1,0,0,0,650,652,3,
        150,75,0,651,653,3,90,45,0,652,651,1,0,0,0,652,653,1,0,0,0,653,87,
        1,0,0,0,654,655,5,111,0,0,655,656,5,142,0,0,656,657,3,98,49,0,657,
        658,5,143,0,0,658,659,3,90,45,0,659,89,1,0,0,0,660,662,5,6,0,0,661,
        660,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,665,3,154,77,0,664,
        666,3,20,10,0,665,664,1,0,0,0,665,666,1,0,0,0,666,91,1,0,0,0,667,
        668,5,117,0,0,668,669,3,94,47,0,669,93,1,0,0,0,670,671,3,98,49,0,
        671,672,5,4,0,0,672,673,3,98,49,0,673,741,1,0,0,0,674,675,3,98,49,
        0,675,676,5,77,0,0,676,677,3,98,49,0,677,741,1,0,0,0,678,680,5,71,
        0,0,679,678,1,0,0,0,680,681,1,0,0,0,681,679,1,0,0,0,681,682,1,0,
        0,0,682,683,1,0,0,0,683,741,3,98,49,0,684,685,3,98,49,0,685,686,
        3,106,53,0,686,687,3,98,49,0,687,741,1,0,0,0,688,689,3,98,49,0,689,
        691,5,55,0,0,690,692,5,71,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,
        693,1,0,0,0,693,694,5,72,0,0,694,741,1,0,0,0,695,697,3,142,71,0,
        696,698,5,71,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,1,0,0,0,
        699,700,5,62,0,0,700,703,3,142,71,0,701,702,5,33,0,0,702,704,3,142,
        71,0,703,701,1,0,0,0,703,704,1,0,0,0,704,741,1,0,0,0,705,707,3,98,
        49,0,706,708,5,71,0,0,707,706,1,0,0,0,707,708,1,0,0,0,708,709,1,
        0,0,0,709,710,5,9,0,0,710,711,3,98,49,0,711,712,5,4,0,0,712,713,
        3,98,49,0,713,741,1,0,0,0,714,716,3,98,49,0,715,717,5,71,0,0,716,
        715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,0,718,719,5,50,0,0,719,
        720,3,96,48,0,720,741,1,0,0,0,721,723,3,98,49,0,722,724,5,71,0,0,
        723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,726,5,50,0,0,
        726,727,5,142,0,0,727,728,3,108,54,0,728,729,5,143,0,0,729,741,1,
        0,0,0,730,732,5,71,0,0,731,730,1,0,0,0,731,732,1,0,0,0,732,733,1,
        0,0,0,733,734,5,35,0,0,734,741,3,96,48,0,735,736,3,98,49,0,736,737,
        3,106,53,0,737,738,7,5,0,0,738,739,3,96,48,0,739,741,1,0,0,0,740,
        670,1,0,0,0,740,674,1,0,0,0,740,679,1,0,0,0,740,684,1,0,0,0,740,
        688,1,0,0,0,740,695,1,0,0,0,740,705,1,0,0,0,740,714,1,0,0,0,740,
        721,1,0,0,0,740,731,1,0,0,0,740,735,1,0,0,0,741,95,1,0,0,0,742,743,
        5,142,0,0,743,745,3,122,61,0,744,746,3,114,57,0,745,744,1,0,0,0,
        745,746,1,0,0,0,746,748,1,0,0,0,747,749,3,118,59,0,748,747,1,0,0,
        0,748,749,1,0,0,0,749,750,1,0,0,0,750,751,5,143,0,0,751,97,1,0,0,
        0,752,753,6,49,-1,0,753,772,3,100,50,0,754,755,5,142,0,0,755,756,
        3,98,49,0,756,757,5,143,0,0,757,772,1,0,0,0,758,772,3,96,48,0,759,
        772,3,104,52,0,760,761,7,6,0,0,761,772,3,98,49,10,762,763,5,71,0,
        0,763,772,3,98,49,3,764,765,5,14,0,0,765,766,5,142,0,0,766,767,3,
        98,49,0,767,768,5,6,0,0,768,769,3,126,63,0,769,770,5,143,0,0,770,
        772,1,0,0,0,771,752,1,0,0,0,771,754,1,0,0,0,771,758,1,0,0,0,771,
        759,1,0,0,0,771,760,1,0,0,0,771,762,1,0,0,0,771,764,1,0,0,0,772,
        803,1,0,0,0,773,774,10,9,0,0,774,775,7,7,0,0,775,802,3,98,49,10,
        776,777,10,8,0,0,777,778,7,6,0,0,778,802,3,98,49,9,779,780,10,7,
        0,0,780,781,5,140,0,0,781,802,3,98,49,8,782,783,10,6,0,0,783,784,
        3,106,53,0,784,785,3,98,49,7,785,802,1,0,0,0,786,787,10,5,0,0,787,
        788,5,4,0,0,788,802,3,98,49,6,789,790,10,4,0,0,790,791,5,77,0,0,
        791,802,3,98,49,5,792,794,10,2,0,0,793,795,5,71,0,0,794,793,1,0,
        0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,797,5,50,0,0,797,798,5,142,
        0,0,798,799,3,108,54,0,799,800,5,143,0,0,800,802,1,0,0,0,801,773,
        1,0,0,0,801,776,1,0,0,0,801,779,1,0,0,0,801,782,1,0,0,0,801,786,
        1,0,0,0,801,789,1,0,0,0,801,792,1,0,0,0,802,805,1,0,0,0,803,801,
        1,0,0,0,803,804,1,0,0,0,804,99,1,0,0,0,805,803,1,0,0,0,806,809,3,
        102,51,0,807,809,3,140,70,0,808,806,1,0,0,0,808,807,1,0,0,0,809,
        101,1,0,0,0,810,811,7,8,0,0,811,103,1,0,0,0,812,813,3,158,79,0,813,
        815,5,142,0,0,814,816,3,108,54,0,815,814,1,0,0,0,815,816,1,0,0,0,
        816,817,1,0,0,0,817,818,5,143,0,0,818,105,1,0,0,0,819,820,7,9,0,
        0,820,107,1,0,0,0,821,826,3,98,49,0,822,823,5,148,0,0,823,825,3,
        98,49,0,824,822,1,0,0,0,825,828,1,0,0,0,826,824,1,0,0,0,826,827,
        1,0,0,0,827,109,1,0,0,0,828,826,1,0,0,0,829,830,5,46,0,0,830,831,
        5,13,0,0,831,832,3,108,54,0,832,111,1,0,0,0,833,834,5,47,0,0,834,
        113,1,0,0,0,835,836,5,78,0,0,836,837,5,13,0,0,837,839,3,98,49,0,
        838,840,7,10,0,0,839,838,1,0,0,0,839,840,1,0,0,0,840,843,1,0,0,0,
        841,842,5,73,0,0,842,844,7,11,0,0,843,841,1,0,0,0,843,844,1,0,0,
        0,844,115,1,0,0,0,845,849,5,63,0,0,846,847,5,37,0,0,847,849,5,69,
        0,0,848,845,1,0,0,0,848,846,1,0,0,0,849,117,1,0,0,0,850,851,5,75,
        0,0,851,852,3,120,60,0,852,853,7,12,0,0,853,119,1,0,0,0,854,855,
        5,127,0,0,855,121,1,0,0,0,856,857,6,61,-1,0,857,858,5,142,0,0,858,
        860,3,122,61,0,859,861,3,114,57,0,860,859,1,0,0,0,860,861,1,0,0,
        0,861,863,1,0,0,0,862,864,3,118,59,0,863,862,1,0,0,0,863,864,1,0,
        0,0,864,865,1,0,0,0,865,866,5,143,0,0,866,869,1,0,0,0,867,869,3,
        64,32,0,868,856,1,0,0,0,868,867,1,0,0,0,869,878,1,0,0,0,870,871,
        10,2,0,0,871,873,5,110,0,0,872,874,5,1,0,0,873,872,1,0,0,0,873,874,
        1,0,0,0,874,875,1,0,0,0,875,877,3,122,61,3,876,870,1,0,0,0,877,880,
        1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,123,1,0,0,0,880,878,
        1,0,0,0,881,883,3,70,35,0,882,884,3,74,37,0,883,882,1,0,0,0,883,
        884,1,0,0,0,884,886,1,0,0,0,885,887,3,92,46,0,886,885,1,0,0,0,886,
        887,1,0,0,0,887,889,1,0,0,0,888,890,3,110,55,0,889,888,1,0,0,0,889,
        890,1,0,0,0,890,892,1,0,0,0,891,893,3,112,56,0,892,891,1,0,0,0,892,
        893,1,0,0,0,893,895,1,0,0,0,894,896,3,114,57,0,895,894,1,0,0,0,895,
        896,1,0,0,0,896,898,1,0,0,0,897,899,3,118,59,0,898,897,1,0,0,0,898,
        899,1,0,0,0,899,125,1,0,0,0,900,924,5,10,0,0,901,924,5,11,0,0,902,
        924,5,12,0,0,903,924,5,23,0,0,904,924,5,26,0,0,905,924,5,25,0,0,
        906,924,5,74,0,0,907,924,5,40,0,0,908,910,5,31,0,0,909,911,5,84,
        0,0,910,909,1,0,0,0,910,911,1,0,0,0,911,924,1,0,0,0,912,924,5,53,
        0,0,913,924,5,52,0,0,914,915,5,54,0,0,915,924,7,13,0,0,916,924,5,
        100,0,0,917,924,5,107,0,0,918,924,5,108,0,0,919,920,5,16,0,0,920,
        924,5,115,0,0,921,924,5,15,0,0,922,924,5,114,0,0,923,900,1,0,0,0,
        923,901,1,0,0,0,923,902,1,0,0,0,923,903,1,0,0,0,923,904,1,0,0,0,
        923,905,1,0,0,0,923,906,1,0,0,0,923,907,1,0,0,0,923,908,1,0,0,0,
        923,912,1,0,0,0,923,913,1,0,0,0,923,914,1,0,0,0,923,916,1,0,0,0,
        923,917,1,0,0,0,923,918,1,0,0,0,923,919,1,0,0,0,923,921,1,0,0,0,
        923,922,1,0,0,0,924,127,1,0,0,0,925,926,5,27,0,0,926,927,3,142,71,
        0,927,129,1,0,0,0,928,930,5,71,0,0,929,928,1,0,0,0,929,930,1,0,0,
        0,930,931,1,0,0,0,931,932,5,72,0,0,932,131,1,0,0,0,933,934,5,42,
        0,0,934,935,3,142,71,0,935,133,1,0,0,0,936,937,5,85,0,0,937,938,
        5,146,0,0,938,939,3,14,7,0,939,940,5,147,0,0,940,135,1,0,0,0,941,
        942,5,77,0,0,942,943,5,87,0,0,943,137,1,0,0,0,944,945,5,49,0,0,945,
        946,5,35,0,0,946,139,1,0,0,0,947,948,5,123,0,0,948,141,1,0,0,0,949,
        950,5,125,0,0,950,143,1,0,0,0,951,952,3,146,73,0,952,145,1,0,0,0,
        953,954,5,123,0,0,954,147,1,0,0,0,955,956,3,140,70,0,956,957,5,140,
        0,0,957,959,1,0,0,0,958,955,1,0,0,0,958,959,1,0,0,0,959,960,1,0,
        0,0,960,961,3,146,73,0,961,149,1,0,0,0,962,963,3,140,70,0,963,964,
        5,140,0,0,964,966,1,0,0,0,965,962,1,0,0,0,965,966,1,0,0,0,966,967,
        1,0,0,0,967,968,3,140,70,0,968,969,5,140,0,0,969,971,1,0,0,0,970,
        965,1,0,0,0,970,971,1,0,0,0,971,974,1,0,0,0,972,975,3,146,73,0,973,
        975,3,162,81,0,974,972,1,0,0,0,974,973,1,0,0,0,975,151,1,0,0,0,976,
        977,3,146,73,0,977,153,1,0,0,0,978,979,3,146,73,0,979,155,1,0,0,
        0,980,981,3,146,73,0,981,157,1,0,0,0,982,983,3,146,73,0,983,159,
        1,0,0,0,984,987,3,146,73,0,985,987,5,124,0,0,986,984,1,0,0,0,986,
        985,1,0,0,0,987,161,1,0,0,0,988,989,5,124,0,0,989,163,1,0,0,0,990,
        991,3,102,51,0,991,165,1,0,0,0,125,169,176,180,185,192,196,201,209,
        214,221,228,233,236,239,242,249,260,274,282,285,302,308,312,329,
        331,338,343,348,355,360,378,382,391,402,417,422,424,431,433,441,
        443,451,455,458,465,472,483,485,491,495,498,501,504,507,510,513,
        521,526,533,540,550,554,558,561,564,572,577,581,585,589,592,597,
        599,602,606,608,624,629,636,639,643,646,652,661,665,681,691,697,
        703,707,716,723,731,740,745,748,771,794,801,803,808,815,826,839,
        843,848,860,863,868,873,878,883,886,889,892,895,898,910,923,929,
        958,965,970,974,986
    ]

class DrillParser ( Parser ):

    grammarFileName = "DrillParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", 
                     "'ANY'", "'AS'", "'ASC'", "'ASSIGN'", "'BETWEEN'", 
                     "'BIGINT'", "'BINARY'", "'BOOLEAN'", "'BY'", "'CAST'", 
                     "'CHAR'", "'CHARACTER'", "'COLUMNS'", "'COMPUTE'", 
                     "'CREATE'", "'CROSS'", "'DATABASE'", "'DATABASES'", 
                     "'DATE'", "'DAY'", "'DEC'", "'DECIMAL'", "'DEFAULT'", 
                     "'DESC'", "'DESCRIBE'", "'DISTINCT'", "'DOUBLE'", "'DROP'", 
                     "'ESCAPE'", "'ESTIMATE'", "'EXISTS'", "'FALSE'", "'FETCH'", 
                     "'FILES'", "'FIRST'", "'FLOAT'", "'FOR'", "'FORMAT'", 
                     "'FROM'", "'FULL'", "'FUNCTION'", "'GROUP'", "'HAVING'", 
                     "'HOUR'", "'IF'", "'IN'", "'INNER'", "'INT'", "'INTEGER'", 
                     "'INTERVAL'", "'IS'", "'JAR'", "'JOIN'", "'LAST'", 
                     "'LATERAL'", "'LEFT'", "'LEVEL'", "'LIKE'", "'LIMIT'", 
                     "'LOAD'", "'METADATA'", "'MINUTE'", "'MONTH'", "'NATURAL'", 
                     "'NEXT'", "'NONE'", "'NOT'", "'NULL'", "'NULLS'", "'NUMERIC'", 
                     "'OFFSET'", "'ON'", "'OR'", "'ORDER'", "'OUTER'", "'OVER'", 
                     "'PARTITION'", "'PATH'", "'PERCENT'", "'PRECISION'", 
                     "'PROPERTIES'", "'REFRESH'", "'REPLACE'", "'RESET'", 
                     "'RIGHT'", "'ROW'", "'ROWS'", "'SAMPLE'", "'SCHEMA'", 
                     "'SCHEMAS'", "'SECOND'", "'SELECT'", "'SESSION'", "'SET'", 
                     "'SHOW'", "'SMALLINT'", "'SOME'", "'STATISTICS'", "'SYSTEM'", 
                     "'TABLE'", "'TABLES'", "'TEMPORARY'", "'TIME'", "'TIMESTAMP'", 
                     "'TRUE'", "'UNION'", "'UNNEST'", "'USE'", "'USING'", 
                     "'VARCHAR'", "'VARYING'", "'VIEW'", "'WHERE'", "'WITH'", 
                     "'YEAR'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'!='", "'<>'", 
                     "'='", "'>'", "'>='", "'<'", "'<='", "'!'", "'||'", 
                     "'.'", "'_'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "','", "';'", "'*'", "'/'", "'%'", "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>", "ALL", "ALTER", "ANALYZE", "AND", "ANY", 
                      "AS", "ASC", "ASSIGN", "BETWEEN", "BIGINT", "BINARY", 
                      "BOOLEAN", "BY", "CAST", "CHAR", "CHARACTER", "COLUMNS", 
                      "COMPUTE", "CREATE", "CROSS", "DATABASE", "DATABASES", 
                      "DATE", "DAY", "DEC", "DECIMAL", "DEFAULT", "DESC", 
                      "DESCRIBE", "DISTINCT", "DOUBLE", "DROP", "ESCAPE", 
                      "ESTIMATE", "EXISTS", "FALSE", "FETCH", "FILES", "FIRST", 
                      "FLOAT", "FOR", "FORMAT", "FROM", "FULL", "FUNCTION", 
                      "GROUP", "HAVING", "HOUR", "IF", "IN", "INNER", "INT", 
                      "INTEGER", "INTERVAL", "IS", "JAR", "JOIN", "LAST", 
                      "LATERAL", "LEFT", "LEVEL", "LIKE", "LIMIT", "LOAD", 
                      "METADATA", "MINUTE", "MONTH", "NATURAL", "NEXT", 
                      "NONE", "NOT", "NULL_", "NULLS", "NUMERIC", "OFFSET", 
                      "ON", "OR", "ORDER", "OUTER", "OVER", "PARTITION", 
                      "PATH", "PERCENT", "PRECISION", "PROPERTIES", "REFRESH", 
                      "REPLACE", "RESET", "RIGHT", "ROW", "ROWS", "SAMPLE", 
                      "SCHEMA", "SCHEMAS", "SECOND", "SELECT", "SESSION", 
                      "SET", "SHOW", "SMALLINT", "SOME", "STATISTICS", "SYSTEM", 
                      "TABLE", "TABLES", "TEMPORARY", "TIME", "TIMESTAMP", 
                      "TRUE", "UNION", "UNNEST", "USE", "USING", "VARCHAR", 
                      "VARYING", "VIEW", "WHERE", "WITH", "YEAR", "WHITE_SPACE", 
                      "SQL_COMMENT", "LINE_COMMENT", "IDENTIFIER", "BS_STRING_LITERAL", 
                      "SQ_STRING_LITERAL", "DQ_STRING_LITERAL", "DECIMAL_LITERAL", 
                      "FLOAT_LITERAL", "REAL_LITERAL", "CHAR_LITERAL", "NE", 
                      "LTGT", "EQ", "GT", "GE", "LT", "LE", "EXCLAMATION", 
                      "PIPE_PIPE", "DOT", "UNDERLINE", "LRB", "RRB", "LSB", 
                      "RSB", "LCB", "RCB", "COMMA", "SEMI", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUS" ]

    RULE_drill_file = 0
    RULE_batch = 1
    RULE_sql_command = 2
    RULE_ddl_command = 3
    RULE_create_command = 4
    RULE_create_schema = 5
    RULE_column_definition = 6
    RULE_kv_list = 7
    RULE_kv_pair = 8
    RULE_create_table = 9
    RULE_column_list_paren = 10
    RULE_column_list = 11
    RULE_create_temp_table = 12
    RULE_partition_by_clause = 13
    RULE_create_function = 14
    RULE_create_view = 15
    RULE_alter_command = 16
    RULE_alter_system = 17
    RULE_option_name = 18
    RULE_drop_command = 19
    RULE_drop_table = 20
    RULE_drop_view = 21
    RULE_drop_function = 22
    RULE_other_command = 23
    RULE_set_command = 24
    RULE_reset_command = 25
    RULE_refresh_table_metadata = 26
    RULE_analyze_command = 27
    RULE_param_list = 28
    RULE_describe_command = 29
    RULE_show_command = 30
    RULE_use_command = 31
    RULE_select_stmt = 32
    RULE_with_clause = 33
    RULE_with_item = 34
    RULE_select_clause = 35
    RULE_select_item = 36
    RULE_from_clause = 37
    RULE_table_expression = 38
    RULE_lateral_join_type = 39
    RULE_lateral_subquery = 40
    RULE_join_clause = 41
    RULE_join_type = 42
    RULE_table_reference = 43
    RULE_unnest_table_expr = 44
    RULE_correlation_clause = 45
    RULE_where_clause = 46
    RULE_boolean_expression = 47
    RULE_table_subquery = 48
    RULE_expression = 49
    RULE_primitive_expression = 50
    RULE_literal = 51
    RULE_function_call = 52
    RULE_comparison_operator = 53
    RULE_expr_list = 54
    RULE_group_by_clause = 55
    RULE_having_clause = 56
    RULE_order_by_clause = 57
    RULE_limit_clause = 58
    RULE_offset_clause = 59
    RULE_number = 60
    RULE_query = 61
    RULE_select_expression = 62
    RULE_data_type = 63
    RULE_default_clause = 64
    RULE_nullability = 65
    RULE_format_clause = 66
    RULE_properties_clause = 67
    RULE_or_replace = 68
    RULE_if_exists = 69
    RULE_id_ = 70
    RULE_string = 71
    RULE_workspace = 72
    RULE_name = 73
    RULE_schema_name = 74
    RULE_table_name = 75
    RULE_view_name = 76
    RULE_correlation_name = 77
    RULE_column_name = 78
    RULE_function_name = 79
    RULE_column_alias = 80
    RULE_table_path = 81
    RULE_value = 82

    ruleNames =  [ "drill_file", "batch", "sql_command", "ddl_command", 
                   "create_command", "create_schema", "column_definition", 
                   "kv_list", "kv_pair", "create_table", "column_list_paren", 
                   "column_list", "create_temp_table", "partition_by_clause", 
                   "create_function", "create_view", "alter_command", "alter_system", 
                   "option_name", "drop_command", "drop_table", "drop_view", 
                   "drop_function", "other_command", "set_command", "reset_command", 
                   "refresh_table_metadata", "analyze_command", "param_list", 
                   "describe_command", "show_command", "use_command", "select_stmt", 
                   "with_clause", "with_item", "select_clause", "select_item", 
                   "from_clause", "table_expression", "lateral_join_type", 
                   "lateral_subquery", "join_clause", "join_type", "table_reference", 
                   "unnest_table_expr", "correlation_clause", "where_clause", 
                   "boolean_expression", "table_subquery", "expression", 
                   "primitive_expression", "literal", "function_call", "comparison_operator", 
                   "expr_list", "group_by_clause", "having_clause", "order_by_clause", 
                   "limit_clause", "offset_clause", "number", "query", "select_expression", 
                   "data_type", "default_clause", "nullability", "format_clause", 
                   "properties_clause", "or_replace", "if_exists", "id_", 
                   "string", "workspace", "name", "schema_name", "table_name", 
                   "view_name", "correlation_name", "column_name", "function_name", 
                   "column_alias", "table_path", "value" ]

    EOF = Token.EOF
    ALL=1
    ALTER=2
    ANALYZE=3
    AND=4
    ANY=5
    AS=6
    ASC=7
    ASSIGN=8
    BETWEEN=9
    BIGINT=10
    BINARY=11
    BOOLEAN=12
    BY=13
    CAST=14
    CHAR=15
    CHARACTER=16
    COLUMNS=17
    COMPUTE=18
    CREATE=19
    CROSS=20
    DATABASE=21
    DATABASES=22
    DATE=23
    DAY=24
    DEC=25
    DECIMAL=26
    DEFAULT=27
    DESC=28
    DESCRIBE=29
    DISTINCT=30
    DOUBLE=31
    DROP=32
    ESCAPE=33
    ESTIMATE=34
    EXISTS=35
    FALSE=36
    FETCH=37
    FILES=38
    FIRST=39
    FLOAT=40
    FOR=41
    FORMAT=42
    FROM=43
    FULL=44
    FUNCTION=45
    GROUP=46
    HAVING=47
    HOUR=48
    IF=49
    IN=50
    INNER=51
    INT=52
    INTEGER=53
    INTERVAL=54
    IS=55
    JAR=56
    JOIN=57
    LAST=58
    LATERAL=59
    LEFT=60
    LEVEL=61
    LIKE=62
    LIMIT=63
    LOAD=64
    METADATA=65
    MINUTE=66
    MONTH=67
    NATURAL=68
    NEXT=69
    NONE=70
    NOT=71
    NULL_=72
    NULLS=73
    NUMERIC=74
    OFFSET=75
    ON=76
    OR=77
    ORDER=78
    OUTER=79
    OVER=80
    PARTITION=81
    PATH=82
    PERCENT=83
    PRECISION=84
    PROPERTIES=85
    REFRESH=86
    REPLACE=87
    RESET=88
    RIGHT=89
    ROW=90
    ROWS=91
    SAMPLE=92
    SCHEMA=93
    SCHEMAS=94
    SECOND=95
    SELECT=96
    SESSION=97
    SET=98
    SHOW=99
    SMALLINT=100
    SOME=101
    STATISTICS=102
    SYSTEM=103
    TABLE=104
    TABLES=105
    TEMPORARY=106
    TIME=107
    TIMESTAMP=108
    TRUE=109
    UNION=110
    UNNEST=111
    USE=112
    USING=113
    VARCHAR=114
    VARYING=115
    VIEW=116
    WHERE=117
    WITH=118
    YEAR=119
    WHITE_SPACE=120
    SQL_COMMENT=121
    LINE_COMMENT=122
    IDENTIFIER=123
    BS_STRING_LITERAL=124
    SQ_STRING_LITERAL=125
    DQ_STRING_LITERAL=126
    DECIMAL_LITERAL=127
    FLOAT_LITERAL=128
    REAL_LITERAL=129
    CHAR_LITERAL=130
    NE=131
    LTGT=132
    EQ=133
    GT=134
    GE=135
    LT=136
    LE=137
    EXCLAMATION=138
    PIPE_PIPE=139
    DOT=140
    UNDERLINE=141
    LRB=142
    RRB=143
    LSB=144
    RSB=145
    LCB=146
    RCB=147
    COMMA=148
    SEMI=149
    STAR=150
    DIVIDE=151
    MODULE=152
    PLUS=153
    MINUS=154

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Drill_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(DrillParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.BatchContext)
            else:
                return self.getTypedRuleContext(DrillParser.BatchContext,i)


        def getRuleIndex(self):
            return DrillParser.RULE_drill_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrill_file" ):
                listener.enterDrill_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrill_file" ):
                listener.exitDrill_file(self)




    def drill_file(self):

        localctx = DrillParser.Drill_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_drill_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4832362508) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 4362089477) != 0):
                self.state = 166
                self.batch()
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 172
            self.match(DrillParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_command(self):
            return self.getTypedRuleContext(DrillParser.Sql_commandContext,0)


        def SEMI(self):
            return self.getToken(DrillParser.SEMI, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)




    def batch(self):

        localctx = DrillParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.sql_command()
            self.state = 176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==149:
                self.state = 175
                self.match(DrillParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddl_command(self):
            return self.getTypedRuleContext(DrillParser.Ddl_commandContext,0)


        def other_command(self):
            return self.getTypedRuleContext(DrillParser.Other_commandContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_sql_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_command" ):
                listener.enterSql_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_command" ):
                listener.exitSql_command(self)




    def sql_command(self):

        localctx = DrillParser.Sql_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_command)
        try:
            self.state = 180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 178
                self.ddl_command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 179
                self.other_command()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ddl_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_command(self):
            return self.getTypedRuleContext(DrillParser.Alter_commandContext,0)


        def create_command(self):
            return self.getTypedRuleContext(DrillParser.Create_commandContext,0)


        def drop_command(self):
            return self.getTypedRuleContext(DrillParser.Drop_commandContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_ddl_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_command" ):
                listener.enterDdl_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_command" ):
                listener.exitDdl_command(self)




    def ddl_command(self):

        localctx = DrillParser.Ddl_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_ddl_command)
        try:
            self.state = 185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 182
                self.alter_command()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 183
                self.create_command()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 3)
                self.state = 184
                self.drop_command()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_schema(self):
            return self.getTypedRuleContext(DrillParser.Create_schemaContext,0)


        def create_table(self):
            return self.getTypedRuleContext(DrillParser.Create_tableContext,0)


        def create_temp_table(self):
            return self.getTypedRuleContext(DrillParser.Create_temp_tableContext,0)


        def create_function(self):
            return self.getTypedRuleContext(DrillParser.Create_functionContext,0)


        def create_view(self):
            return self.getTypedRuleContext(DrillParser.Create_viewContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_create_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_command" ):
                listener.enterCreate_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_command" ):
                listener.exitCreate_command(self)




    def create_command(self):

        localctx = DrillParser.Create_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_create_command)
        try:
            self.state = 192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 187
                self.create_schema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 188
                self.create_table()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 189
                self.create_temp_table()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 190
                self.create_function()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 191
                self.create_view()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_schemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(DrillParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(DrillParser.SCHEMA, 0)

        def or_replace(self):
            return self.getTypedRuleContext(DrillParser.Or_replaceContext,0)


        def LOAD(self):
            return self.getToken(DrillParser.LOAD, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.StringContext)
            else:
                return self.getTypedRuleContext(DrillParser.StringContext,i)


        def LRB(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.LRB)
            else:
                return self.getToken(DrillParser.LRB, i)

        def column_definition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Column_definitionContext)
            else:
                return self.getTypedRuleContext(DrillParser.Column_definitionContext,i)


        def RRB(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.RRB)
            else:
                return self.getToken(DrillParser.RRB, i)

        def FOR(self):
            return self.getToken(DrillParser.FOR, 0)

        def TABLE(self):
            return self.getToken(DrillParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(DrillParser.Table_nameContext,0)


        def PATH(self):
            return self.getToken(DrillParser.PATH, 0)

        def PROPERTIES(self):
            return self.getToken(DrillParser.PROPERTIES, 0)

        def kv_list(self):
            return self.getTypedRuleContext(DrillParser.Kv_listContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.COMMA)
            else:
                return self.getToken(DrillParser.COMMA, i)

        def getRuleIndex(self):
            return DrillParser.RULE_create_schema

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_schema" ):
                listener.enterCreate_schema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_schema" ):
                listener.exitCreate_schema(self)




    def create_schema(self):

        localctx = DrillParser.Create_schemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_create_schema)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.match(DrillParser.CREATE)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 195
                self.or_replace()


            self.state = 198
            self.match(DrillParser.SCHEMA)
            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 199
                self.match(DrillParser.LOAD)
                self.state = 200
                self.string()


            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 203
                self.match(DrillParser.LRB)
                self.state = 204
                self.column_definition()
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==148:
                    self.state = 205
                    self.match(DrillParser.COMMA)
                    self.state = 206
                    self.column_definition()
                    self.state = 211
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 212
                self.match(DrillParser.RRB)


            self.state = 221
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.state = 216
                self.match(DrillParser.FOR)
                self.state = 217
                self.match(DrillParser.TABLE)
                self.state = 218
                self.table_name()
                pass
            elif token in [82]:
                self.state = 219
                self.match(DrillParser.PATH)
                self.state = 220
                self.string()
                pass
            elif token in [-1, 2, 3, 19, 29, 32, 85, 86, 88, 96, 98, 99, 112, 118, 149]:
                pass
            else:
                pass
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 223
                self.match(DrillParser.PROPERTIES)
                self.state = 224
                self.match(DrillParser.LRB)
                self.state = 225
                self.kv_list()
                self.state = 226
                self.match(DrillParser.RRB)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(DrillParser.Column_nameContext,0)


        def data_type(self):
            return self.getTypedRuleContext(DrillParser.Data_typeContext,0)


        def nullability(self):
            return self.getTypedRuleContext(DrillParser.NullabilityContext,0)


        def format_clause(self):
            return self.getTypedRuleContext(DrillParser.Format_clauseContext,0)


        def default_clause(self):
            return self.getTypedRuleContext(DrillParser.Default_clauseContext,0)


        def properties_clause(self):
            return self.getTypedRuleContext(DrillParser.Properties_clauseContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)




    def column_definition(self):

        localctx = DrillParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 230
            self.column_name()
            self.state = 231
            self.data_type()
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71 or _la==72:
                self.state = 232
                self.nullability()


            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 235
                self.format_clause()


            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 238
                self.default_clause()


            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 241
                self.properties_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kv_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kv_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Kv_pairContext)
            else:
                return self.getTypedRuleContext(DrillParser.Kv_pairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.COMMA)
            else:
                return self.getToken(DrillParser.COMMA, i)

        def getRuleIndex(self):
            return DrillParser.RULE_kv_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKv_list" ):
                listener.enterKv_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKv_list" ):
                listener.exitKv_list(self)




    def kv_list(self):

        localctx = DrillParser.Kv_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_kv_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.kv_pair()
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==148:
                self.state = 245
                self.match(DrillParser.COMMA)
                self.state = 246
                self.kv_pair()
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kv_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.StringContext)
            else:
                return self.getTypedRuleContext(DrillParser.StringContext,i)


        def EQ(self):
            return self.getToken(DrillParser.EQ, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_kv_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKv_pair" ):
                listener.enterKv_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKv_pair" ):
                listener.exitKv_pair(self)




    def kv_pair(self):

        localctx = DrillParser.Kv_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_kv_pair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.string()
            self.state = 253
            self.match(DrillParser.EQ)
            self.state = 254
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(DrillParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(DrillParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(DrillParser.Table_nameContext,0)


        def AS(self):
            return self.getToken(DrillParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(DrillParser.QueryContext,0)


        def column_list_paren(self):
            return self.getTypedRuleContext(DrillParser.Column_list_parenContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)




    def create_table(self):

        localctx = DrillParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(DrillParser.CREATE)
            self.state = 257
            self.match(DrillParser.TABLE)
            self.state = 258
            self.table_name()
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 259
                self.column_list_paren()


            self.state = 262
            self.match(DrillParser.AS)
            self.state = 263
            self.query(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_list_parenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LRB(self):
            return self.getToken(DrillParser.LRB, 0)

        def column_list(self):
            return self.getTypedRuleContext(DrillParser.Column_listContext,0)


        def RRB(self):
            return self.getToken(DrillParser.RRB, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_column_list_paren

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list_paren" ):
                listener.enterColumn_list_paren(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list_paren" ):
                listener.exitColumn_list_paren(self)




    def column_list_paren(self):

        localctx = DrillParser.Column_list_parenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_column_list_paren)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(DrillParser.LRB)
            self.state = 266
            self.column_list()
            self.state = 267
            self.match(DrillParser.RRB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(DrillParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.COMMA)
            else:
                return self.getToken(DrillParser.COMMA, i)

        def getRuleIndex(self):
            return DrillParser.RULE_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_list" ):
                listener.enterColumn_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_list" ):
                listener.exitColumn_list(self)




    def column_list(self):

        localctx = DrillParser.Column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_column_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.column_name()
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==148:
                self.state = 270
                self.match(DrillParser.COMMA)
                self.state = 271
                self.column_name()
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_temp_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(DrillParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(DrillParser.TEMPORARY, 0)

        def TABLE(self):
            return self.getToken(DrillParser.TABLE, 0)

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def AS(self):
            return self.getToken(DrillParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(DrillParser.QueryContext,0)


        def column_list_paren(self):
            return self.getTypedRuleContext(DrillParser.Column_list_parenContext,0)


        def partition_by_clause(self):
            return self.getTypedRuleContext(DrillParser.Partition_by_clauseContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_create_temp_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_temp_table" ):
                listener.enterCreate_temp_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_temp_table" ):
                listener.exitCreate_temp_table(self)




    def create_temp_table(self):

        localctx = DrillParser.Create_temp_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_temp_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(DrillParser.CREATE)
            self.state = 278
            self.match(DrillParser.TEMPORARY)
            self.state = 279
            self.match(DrillParser.TABLE)
            self.state = 280
            self.name()
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 281
                self.column_list_paren()


            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==81:
                self.state = 284
                self.partition_by_clause()


            self.state = 287
            self.match(DrillParser.AS)
            self.state = 288
            self.query(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(DrillParser.PARTITION, 0)

        def BY(self):
            return self.getToken(DrillParser.BY, 0)

        def column_list_paren(self):
            return self.getTypedRuleContext(DrillParser.Column_list_parenContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_partition_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by_clause" ):
                listener.enterPartition_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by_clause" ):
                listener.exitPartition_by_clause(self)




    def partition_by_clause(self):

        localctx = DrillParser.Partition_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_partition_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(DrillParser.PARTITION)
            self.state = 291
            self.match(DrillParser.BY)
            self.state = 292
            self.column_list_paren()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(DrillParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(DrillParser.FUNCTION, 0)

        def USING(self):
            return self.getToken(DrillParser.USING, 0)

        def JAR(self):
            return self.getToken(DrillParser.JAR, 0)

        def string(self):
            return self.getTypedRuleContext(DrillParser.StringContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_create_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_function" ):
                listener.enterCreate_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_function" ):
                listener.exitCreate_function(self)




    def create_function(self):

        localctx = DrillParser.Create_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(DrillParser.CREATE)
            self.state = 295
            self.match(DrillParser.FUNCTION)
            self.state = 296
            self.match(DrillParser.USING)
            self.state = 297
            self.match(DrillParser.JAR)
            self.state = 298
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(DrillParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(DrillParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(DrillParser.View_nameContext,0)


        def AS(self):
            return self.getToken(DrillParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(DrillParser.QueryContext,0)


        def or_replace(self):
            return self.getTypedRuleContext(DrillParser.Or_replaceContext,0)


        def workspace(self):
            return self.getTypedRuleContext(DrillParser.WorkspaceContext,0)


        def DOT(self):
            return self.getToken(DrillParser.DOT, 0)

        def column_list_paren(self):
            return self.getTypedRuleContext(DrillParser.Column_list_parenContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)




    def create_view(self):

        localctx = DrillParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(DrillParser.CREATE)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 301
                self.or_replace()


            self.state = 304
            self.match(DrillParser.VIEW)
            self.state = 308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 305
                self.workspace()
                self.state = 306
                self.match(DrillParser.DOT)


            self.state = 310
            self.view_name()
            self.state = 312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 311
                self.column_list_paren()


            self.state = 314
            self.match(DrillParser.AS)
            self.state = 315
            self.query(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_system(self):
            return self.getTypedRuleContext(DrillParser.Alter_systemContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_alter_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_command" ):
                listener.enterAlter_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_command" ):
                listener.exitAlter_command(self)




    def alter_command(self):

        localctx = DrillParser.Alter_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_alter_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.alter_system()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_systemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(DrillParser.ALTER, 0)

        def SYSTEM(self):
            return self.getToken(DrillParser.SYSTEM, 0)

        def SET(self):
            return self.getToken(DrillParser.SET, 0)

        def option_name(self):
            return self.getTypedRuleContext(DrillParser.Option_nameContext,0)


        def EQ(self):
            return self.getToken(DrillParser.EQ, 0)

        def value(self):
            return self.getTypedRuleContext(DrillParser.ValueContext,0)


        def RESET(self):
            return self.getToken(DrillParser.RESET, 0)

        def ALL(self):
            return self.getToken(DrillParser.ALL, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_alter_system

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_system" ):
                listener.enterAlter_system(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_system" ):
                listener.exitAlter_system(self)




    def alter_system(self):

        localctx = DrillParser.Alter_systemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_alter_system)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(DrillParser.ALTER)
            self.state = 320
            self.match(DrillParser.SYSTEM)
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [98]:
                self.state = 321
                self.match(DrillParser.SET)
                self.state = 322
                self.option_name()
                self.state = 323
                self.match(DrillParser.EQ)
                self.state = 324
                self.value()
                pass
            elif token in [88]:
                self.state = 326
                self.match(DrillParser.RESET)
                self.state = 329
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [124]:
                    self.state = 327
                    self.option_name()
                    pass
                elif token in [1]:
                    self.state = 328
                    self.match(DrillParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Option_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BS_STRING_LITERAL(self):
            return self.getToken(DrillParser.BS_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_option_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_name" ):
                listener.enterOption_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_name" ):
                listener.exitOption_name(self)




    def option_name(self):

        localctx = DrillParser.Option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_option_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(DrillParser.BS_STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def drop_table(self):
            return self.getTypedRuleContext(DrillParser.Drop_tableContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(DrillParser.Drop_viewContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(DrillParser.Drop_functionContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_drop_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_command" ):
                listener.enterDrop_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_command" ):
                listener.exitDrop_command(self)




    def drop_command(self):

        localctx = DrillParser.Drop_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_drop_command)
        try:
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.drop_table()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 336
                self.drop_view()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 337
                self.drop_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(DrillParser.DROP, 0)

        def TABLE(self):
            return self.getToken(DrillParser.TABLE, 0)

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(DrillParser.If_existsContext,0)


        def workspace(self):
            return self.getTypedRuleContext(DrillParser.WorkspaceContext,0)


        def DOT(self):
            return self.getToken(DrillParser.DOT, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)




    def drop_table(self):

        localctx = DrillParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(DrillParser.DROP)
            self.state = 341
            self.match(DrillParser.TABLE)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 342
                self.if_exists()


            self.state = 348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 345
                self.workspace()
                self.state = 346
                self.match(DrillParser.DOT)


            self.state = 350
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_viewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(DrillParser.DROP, 0)

        def VIEW(self):
            return self.getToken(DrillParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(DrillParser.View_nameContext,0)


        def if_exists(self):
            return self.getTypedRuleContext(DrillParser.If_existsContext,0)


        def workspace(self):
            return self.getTypedRuleContext(DrillParser.WorkspaceContext,0)


        def DOT(self):
            return self.getToken(DrillParser.DOT, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)




    def drop_view(self):

        localctx = DrillParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(DrillParser.DROP)
            self.state = 353
            self.match(DrillParser.VIEW)
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 354
                self.if_exists()


            self.state = 360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 357
                self.workspace()
                self.state = 358
                self.match(DrillParser.DOT)


            self.state = 362
            self.view_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(DrillParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(DrillParser.FUNCTION, 0)

        def USING(self):
            return self.getToken(DrillParser.USING, 0)

        def JAR(self):
            return self.getToken(DrillParser.JAR, 0)

        def string(self):
            return self.getTypedRuleContext(DrillParser.StringContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_drop_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function" ):
                listener.enterDrop_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function" ):
                listener.exitDrop_function(self)




    def drop_function(self):

        localctx = DrillParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_drop_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(DrillParser.DROP)
            self.state = 365
            self.match(DrillParser.FUNCTION)
            self.state = 366
            self.match(DrillParser.USING)
            self.state = 367
            self.match(DrillParser.JAR)
            self.state = 368
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Other_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_command(self):
            return self.getTypedRuleContext(DrillParser.Set_commandContext,0)


        def analyze_command(self):
            return self.getTypedRuleContext(DrillParser.Analyze_commandContext,0)


        def reset_command(self):
            return self.getTypedRuleContext(DrillParser.Reset_commandContext,0)


        def refresh_table_metadata(self):
            return self.getTypedRuleContext(DrillParser.Refresh_table_metadataContext,0)


        def describe_command(self):
            return self.getTypedRuleContext(DrillParser.Describe_commandContext,0)


        def show_command(self):
            return self.getTypedRuleContext(DrillParser.Show_commandContext,0)


        def use_command(self):
            return self.getTypedRuleContext(DrillParser.Use_commandContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(DrillParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_other_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOther_command" ):
                listener.enterOther_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOther_command" ):
                listener.exitOther_command(self)




    def other_command(self):

        localctx = DrillParser.Other_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_other_command)
        try:
            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 370
                self.set_command()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 371
                self.analyze_command()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 372
                self.reset_command()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 373
                self.refresh_table_metadata()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 374
                self.describe_command()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 375
                self.show_command()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 376
                self.use_command()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 377
                self.select_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(DrillParser.SET, 0)

        def option_name(self):
            return self.getTypedRuleContext(DrillParser.Option_nameContext,0)


        def EQ(self):
            return self.getToken(DrillParser.EQ, 0)

        def value(self):
            return self.getTypedRuleContext(DrillParser.ValueContext,0)


        def ALTER(self):
            return self.getToken(DrillParser.ALTER, 0)

        def SESSION(self):
            return self.getToken(DrillParser.SESSION, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_set_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_command" ):
                listener.enterSet_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_command" ):
                listener.exitSet_command(self)




    def set_command(self):

        localctx = DrillParser.Set_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_set_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 380
                self.match(DrillParser.ALTER)
                self.state = 381
                self.match(DrillParser.SESSION)


            self.state = 384
            self.match(DrillParser.SET)
            self.state = 385
            self.option_name()
            self.state = 386
            self.match(DrillParser.EQ)
            self.state = 387
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reset_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(DrillParser.RESET, 0)

        def id_(self):
            return self.getTypedRuleContext(DrillParser.Id_Context,0)


        def ALTER(self):
            return self.getToken(DrillParser.ALTER, 0)

        def SESSION(self):
            return self.getToken(DrillParser.SESSION, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_reset_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReset_command" ):
                listener.enterReset_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReset_command" ):
                listener.exitReset_command(self)




    def reset_command(self):

        localctx = DrillParser.Reset_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_reset_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 389
                self.match(DrillParser.ALTER)
                self.state = 390
                self.match(DrillParser.SESSION)


            self.state = 393
            self.match(DrillParser.RESET)
            self.state = 394
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Refresh_table_metadataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFRESH(self):
            return self.getToken(DrillParser.REFRESH, 0)

        def TABLE(self):
            return self.getToken(DrillParser.TABLE, 0)

        def METADATA(self):
            return self.getToken(DrillParser.METADATA, 0)

        def table_name(self):
            return self.getTypedRuleContext(DrillParser.Table_nameContext,0)


        def COLUMNS(self):
            return self.getToken(DrillParser.COLUMNS, 0)

        def column_list_paren(self):
            return self.getTypedRuleContext(DrillParser.Column_list_parenContext,0)


        def NONE(self):
            return self.getToken(DrillParser.NONE, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_refresh_table_metadata

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefresh_table_metadata" ):
                listener.enterRefresh_table_metadata(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefresh_table_metadata" ):
                listener.exitRefresh_table_metadata(self)




    def refresh_table_metadata(self):

        localctx = DrillParser.Refresh_table_metadataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_refresh_table_metadata)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(DrillParser.REFRESH)
            self.state = 397
            self.match(DrillParser.TABLE)
            self.state = 398
            self.match(DrillParser.METADATA)
            self.state = 402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 399
                self.match(DrillParser.COLUMNS)
                self.state = 400
                self.column_list_paren()
                pass
            elif token in [70]:
                self.state = 401
                self.match(DrillParser.NONE)
                pass
            elif token in [123, 124]:
                pass
            else:
                pass
            self.state = 404
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(DrillParser.ANALYZE, 0)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.TABLE)
            else:
                return self.getToken(DrillParser.TABLE, i)

        def table_name(self):
            return self.getTypedRuleContext(DrillParser.Table_nameContext,0)


        def LRB(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.LRB)
            else:
                return self.getToken(DrillParser.LRB, i)

        def id_(self):
            return self.getTypedRuleContext(DrillParser.Id_Context,0)


        def param_list(self):
            return self.getTypedRuleContext(DrillParser.Param_listContext,0)


        def RRB(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.RRB)
            else:
                return self.getToken(DrillParser.RRB, i)

        def COLUMNS(self):
            return self.getToken(DrillParser.COLUMNS, 0)

        def REFRESH(self):
            return self.getToken(DrillParser.REFRESH, 0)

        def METADATA(self):
            return self.getToken(DrillParser.METADATA, 0)

        def STATISTICS(self):
            return self.getToken(DrillParser.STATISTICS, 0)

        def COMPUTE(self):
            return self.getToken(DrillParser.COMPUTE, 0)

        def ESTIMATE(self):
            return self.getToken(DrillParser.ESTIMATE, 0)

        def column_list_paren(self):
            return self.getTypedRuleContext(DrillParser.Column_list_parenContext,0)


        def NONE(self):
            return self.getToken(DrillParser.NONE, 0)

        def string(self):
            return self.getTypedRuleContext(DrillParser.StringContext,0)


        def LEVEL(self):
            return self.getToken(DrillParser.LEVEL, 0)

        def SAMPLE(self):
            return self.getToken(DrillParser.SAMPLE, 0)

        def number(self):
            return self.getTypedRuleContext(DrillParser.NumberContext,0)


        def PERCENT(self):
            return self.getToken(DrillParser.PERCENT, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_analyze_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_command" ):
                listener.enterAnalyze_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_command" ):
                listener.exitAnalyze_command(self)




    def analyze_command(self):

        localctx = DrillParser.Analyze_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_analyze_command)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(DrillParser.ANALYZE)
            self.state = 407
            self.match(DrillParser.TABLE)
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123, 124]:
                self.state = 408
                self.table_name()
                pass
            elif token in [104]:
                self.state = 409
                self.match(DrillParser.TABLE)
                self.state = 410
                self.match(DrillParser.LRB)
                self.state = 411
                self.id_()
                self.state = 412
                self.match(DrillParser.LRB)
                self.state = 413
                self.param_list()
                self.state = 414
                self.match(DrillParser.RRB)
                self.state = 415
                self.match(DrillParser.RRB)
                pass
            elif token in [-1, 2, 3, 17, 18, 19, 29, 32, 34, 86, 88, 96, 98, 99, 112, 118, 149]:
                pass
            else:
                pass
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 419
                self.match(DrillParser.COLUMNS)
                self.state = 422
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [142]:
                    self.state = 420
                    self.column_list_paren()
                    pass
                elif token in [70]:
                    self.state = 421
                    self.match(DrillParser.NONE)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 426
                self.match(DrillParser.REFRESH)
                self.state = 427
                self.match(DrillParser.METADATA)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 428
                    self.string()
                    self.state = 429
                    self.match(DrillParser.LEVEL)




            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18 or _la==34:
                self.state = 435
                _la = self._input.LA(1)
                if not(_la==18 or _la==34):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 436
                self.match(DrillParser.STATISTICS)
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 437
                    self.match(DrillParser.SAMPLE)
                    self.state = 438
                    self.number()
                    self.state = 439
                    self.match(DrillParser.PERCENT)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_list(self):
            return self.getTypedRuleContext(DrillParser.Expr_listContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)




    def param_list(self):

        localctx = DrillParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_param_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.expr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Describe_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIBE(self):
            return self.getToken(DrillParser.DESCRIBE, 0)

        def table_name(self):
            return self.getTypedRuleContext(DrillParser.Table_nameContext,0)


        def view_name(self):
            return self.getTypedRuleContext(DrillParser.View_nameContext,0)


        def workspace(self):
            return self.getTypedRuleContext(DrillParser.WorkspaceContext,0)


        def DOT(self):
            return self.getToken(DrillParser.DOT, 0)

        def column_name(self):
            return self.getTypedRuleContext(DrillParser.Column_nameContext,0)


        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def SCHEMA(self):
            return self.getToken(DrillParser.SCHEMA, 0)

        def DATABASE(self):
            return self.getToken(DrillParser.DATABASE, 0)

        def LRB(self):
            return self.getToken(DrillParser.LRB, 0)

        def query(self):
            return self.getTypedRuleContext(DrillParser.QueryContext,0)


        def RRB(self):
            return self.getToken(DrillParser.RRB, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_describe_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribe_command" ):
                listener.enterDescribe_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribe_command" ):
                listener.exitDescribe_command(self)




    def describe_command(self):

        localctx = DrillParser.Describe_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_describe_command)
        self._la = 0 # Token type
        try:
            self.state = 472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.match(DrillParser.DESCRIBE)
                self.state = 451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 448
                    self.workspace()
                    self.state = 449
                    self.match(DrillParser.DOT)


                self.state = 455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 453
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 454
                    self.view_name()
                    pass


                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 457
                    self.column_name()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.match(DrillParser.DESCRIBE)
                self.state = 461
                _la = self._input.LA(1)
                if not(_la==21 or _la==93):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 462
                self.name()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==140:
                    self.state = 463
                    self.match(DrillParser.DOT)
                    self.state = 464
                    self.workspace()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 467
                self.match(DrillParser.DESCRIBE)
                self.state = 468
                self.match(DrillParser.LRB)
                self.state = 469
                self.query(0)
                self.state = 470
                self.match(DrillParser.RRB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fs = None # Id_Context
            self.dir_ = None # Id_Context

        def SHOW(self):
            return self.getToken(DrillParser.SHOW, 0)

        def TABLES(self):
            return self.getToken(DrillParser.TABLES, 0)

        def DATABASES(self):
            return self.getToken(DrillParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(DrillParser.SCHEMAS, 0)

        def FILES(self):
            return self.getToken(DrillParser.FILES, 0)

        def DOT(self):
            return self.getToken(DrillParser.DOT, 0)

        def FROM(self):
            return self.getToken(DrillParser.FROM, 0)

        def IN(self):
            return self.getToken(DrillParser.IN, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Id_Context)
            else:
                return self.getTypedRuleContext(DrillParser.Id_Context,i)


        def getRuleIndex(self):
            return DrillParser.RULE_show_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_command" ):
                listener.enterShow_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_command" ):
                listener.exitShow_command(self)




    def show_command(self):

        localctx = DrillParser.Show_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_show_command)
        self._la = 0 # Token type
        try:
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.match(DrillParser.SHOW)
                self.state = 475
                _la = self._input.LA(1)
                if not(_la==22 or _la==94 or _la==105):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.match(DrillParser.SHOW)
                self.state = 477
                self.match(DrillParser.FILES)
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43 or _la==50:
                    self.state = 478
                    _la = self._input.LA(1)
                    if not(_la==43 or _la==50):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 479
                    localctx.fs = self.id_()
                    self.state = 480
                    self.match(DrillParser.DOT)
                    self.state = 481
                    localctx.dir_ = self.id_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_commandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(DrillParser.USE, 0)

        def schema_name(self):
            return self.getTypedRuleContext(DrillParser.Schema_nameContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_use_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_command" ):
                listener.enterUse_command(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_command" ):
                listener.exitUse_command(self)




    def use_command(self):

        localctx = DrillParser.Use_commandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_use_command)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(DrillParser.USE)
            self.state = 488
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(DrillParser.Select_clauseContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(DrillParser.With_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(DrillParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(DrillParser.Where_clauseContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(DrillParser.Group_by_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(DrillParser.Having_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(DrillParser.Order_by_clauseContext,0)


        def limit_clause(self):
            return self.getTypedRuleContext(DrillParser.Limit_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(DrillParser.Offset_clauseContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = DrillParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==118:
                self.state = 490
                self.with_clause()


            self.state = 493
            self.select_clause()
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 494
                self.from_clause()


            self.state = 498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 497
                self.where_clause()


            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 500
                self.group_by_clause()


            self.state = 504
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 503
                self.having_clause()


            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 506
                self.order_by_clause()


            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 509
                self.limit_clause()


            self.state = 513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 512
                self.offset_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(DrillParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.With_itemContext)
            else:
                return self.getTypedRuleContext(DrillParser.With_itemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.COMMA)
            else:
                return self.getToken(DrillParser.COMMA, i)

        def getRuleIndex(self):
            return DrillParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = DrillParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_with_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(DrillParser.WITH)
            self.state = 516
            self.with_item()
            self.state = 521
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 517
                    self.match(DrillParser.COMMA)
                    self.state = 518
                    self.with_item() 
                self.state = 523
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def AS(self):
            return self.getToken(DrillParser.AS, 0)

        def query(self):
            return self.getTypedRuleContext(DrillParser.QueryContext,0)


        def column_list_paren(self):
            return self.getTypedRuleContext(DrillParser.Column_list_parenContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)




    def with_item(self):

        localctx = DrillParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.name()
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==142:
                self.state = 525
                self.column_list_paren()


            self.state = 528
            self.match(DrillParser.AS)
            self.state = 529
            self.query(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(DrillParser.SELECT, 0)

        def select_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Select_itemContext)
            else:
                return self.getTypedRuleContext(DrillParser.Select_itemContext,i)


        def DISTINCT(self):
            return self.getToken(DrillParser.DISTINCT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.COMMA)
            else:
                return self.getToken(DrillParser.COMMA, i)

        def getRuleIndex(self):
            return DrillParser.RULE_select_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_clause" ):
                listener.enterSelect_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_clause" ):
                listener.exitSelect_clause(self)




    def select_clause(self):

        localctx = DrillParser.Select_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_select_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(DrillParser.SELECT)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30:
                self.state = 532
                self.match(DrillParser.DISTINCT)


            self.state = 535
            self.select_item()
            self.state = 540
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 536
                    self.match(DrillParser.COMMA)
                    self.state = 537
                    self.select_item() 
                self.state = 542
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLUMNS(self):
            return self.getToken(DrillParser.COLUMNS, 0)

        def LSB(self):
            return self.getToken(DrillParser.LSB, 0)

        def number(self):
            return self.getTypedRuleContext(DrillParser.NumberContext,0)


        def RSB(self):
            return self.getToken(DrillParser.RSB, 0)

        def STAR(self):
            return self.getToken(DrillParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(DrillParser.ExpressionContext,0)


        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(DrillParser.Column_aliasContext,i)


        def DOT(self):
            return self.getToken(DrillParser.DOT, 0)

        def AS(self):
            return self.getToken(DrillParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(DrillParser.Table_nameContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_select_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_item" ):
                listener.enterSelect_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_item" ):
                listener.exitSelect_item(self)




    def select_item(self):

        localctx = DrillParser.Select_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_select_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 543
                self.match(DrillParser.COLUMNS)
                self.state = 544
                self.match(DrillParser.LSB)
                self.state = 545
                self.number()
                self.state = 546
                self.match(DrillParser.RSB)
                pass

            elif la_ == 2:
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123 or _la==124:
                    self.state = 550
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                    if la_ == 1:
                        self.state = 548
                        self.table_name()
                        pass

                    elif la_ == 2:
                        self.state = 549
                        self.column_alias()
                        pass


                    self.state = 552
                    self.match(DrillParser.DOT)


                self.state = 556
                self.match(DrillParser.STAR)
                pass

            elif la_ == 3:
                self.state = 557
                self.expression(0)
                pass


            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 560
                    self.match(DrillParser.AS)


                self.state = 563
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(DrillParser.FROM, 0)

        def table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Table_expressionContext)
            else:
                return self.getTypedRuleContext(DrillParser.Table_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.COMMA)
            else:
                return self.getToken(DrillParser.COMMA, i)

        def getRuleIndex(self):
            return DrillParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)




    def from_clause(self):

        localctx = DrillParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(DrillParser.FROM)
            self.state = 567
            self.table_expression()
            self.state = 572
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 568
                    self.match(DrillParser.COMMA)
                    self.state = 569
                    self.table_expression() 
                self.state = 574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def with_clause(self):
            return self.getTypedRuleContext(DrillParser.With_clauseContext,0)


        def correlation_clause(self):
            return self.getTypedRuleContext(DrillParser.Correlation_clauseContext,0)


        def table_name(self):
            return self.getTypedRuleContext(DrillParser.Table_nameContext,0)


        def table_subquery(self):
            return self.getTypedRuleContext(DrillParser.Table_subqueryContext,0)


        def join_clause(self):
            return self.getTypedRuleContext(DrillParser.Join_clauseContext,0)


        def lateral_subquery(self):
            return self.getTypedRuleContext(DrillParser.Lateral_subqueryContext,0)


        def LATERAL(self):
            return self.getToken(DrillParser.LATERAL, 0)

        def lateral_join_type(self):
            return self.getTypedRuleContext(DrillParser.Lateral_join_typeContext,0)


        def ON(self):
            return self.getToken(DrillParser.ON, 0)

        def TRUE(self):
            return self.getToken(DrillParser.TRUE, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_expression" ):
                listener.enterTable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_expression" ):
                listener.exitTable_expression(self)




    def table_expression(self):

        localctx = DrillParser.Table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_table_expression)
        self._la = 0 # Token type
        try:
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self.with_clause()
                self.state = 577
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 576
                    self.correlation_clause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self.table_name()
                self.state = 581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 580
                    self.correlation_clause()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 583
                self.table_subquery()
                self.state = 585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 584
                    self.correlation_clause()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 587
                self.join_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 588
                    self.match(DrillParser.LATERAL)


                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1299288492496388096) != 0):
                    self.state = 591
                    self.lateral_join_type()


                self.state = 594
                self.lateral_subquery()
                self.state = 597
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 595
                    self.match(DrillParser.ON)
                    self.state = 596
                    self.match(DrillParser.TRUE)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lateral_join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(DrillParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(DrillParser.LEFT, 0)

        def INNER(self):
            return self.getToken(DrillParser.INNER, 0)

        def OUTER(self):
            return self.getToken(DrillParser.OUTER, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_lateral_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateral_join_type" ):
                listener.enterLateral_join_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateral_join_type" ):
                listener.exitLateral_join_type(self)




    def lateral_join_type(self):

        localctx = DrillParser.Lateral_join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_lateral_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 57]:
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 601
                    self.match(DrillParser.INNER)


                pass
            elif token in [60]:
                self.state = 604
                self.match(DrillParser.LEFT)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 605
                    self.match(DrillParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 610
            self.match(DrillParser.JOIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lateral_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unnest_table_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Unnest_table_exprContext)
            else:
                return self.getTypedRuleContext(DrillParser.Unnest_table_exprContext,i)


        def LRB(self):
            return self.getToken(DrillParser.LRB, 0)

        def select_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Select_clauseContext)
            else:
                return self.getTypedRuleContext(DrillParser.Select_clauseContext,i)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.FROM)
            else:
                return self.getToken(DrillParser.FROM, i)

        def RRB(self):
            return self.getToken(DrillParser.RRB, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.COMMA)
            else:
                return self.getToken(DrillParser.COMMA, i)

        def getRuleIndex(self):
            return DrillParser.RULE_lateral_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateral_subquery" ):
                listener.enterLateral_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateral_subquery" ):
                listener.exitLateral_subquery(self)




    def lateral_subquery(self):

        localctx = DrillParser.Lateral_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_lateral_subquery)
        self._la = 0 # Token type
        try:
            self.state = 629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [111]:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.unnest_table_expr()
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(DrillParser.LRB)
                self.state = 614
                self.select_clause()
                self.state = 615
                self.match(DrillParser.FROM)
                self.state = 616
                self.unnest_table_expr()
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==148:
                    self.state = 617
                    self.match(DrillParser.COMMA)
                    self.state = 618
                    self.select_clause()
                    self.state = 619
                    self.match(DrillParser.FROM)
                    self.state = 620
                    self.unnest_table_expr()
                    self.state = 626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 627
                self.match(DrillParser.RRB)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(DrillParser.Table_referenceContext,i)


        def join_type(self):
            return self.getTypedRuleContext(DrillParser.Join_typeContext,0)


        def ON(self):
            return self.getToken(DrillParser.ON, 0)

        def boolean_expression(self):
            return self.getTypedRuleContext(DrillParser.Boolean_expressionContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = DrillParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_join_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.table_reference()
            self.state = 632
            self.join_type()
            self.state = 633
            self.table_reference()
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 634
                self.match(DrillParser.ON)
                self.state = 635
                self.boolean_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(DrillParser.JOIN, 0)

        def CROSS(self):
            return self.getToken(DrillParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(DrillParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(DrillParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(DrillParser.FULL, 0)

        def INNER(self):
            return self.getToken(DrillParser.INNER, 0)

        def OUTER(self):
            return self.getToken(DrillParser.OUTER, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)




    def join_type(self):

        localctx = DrillParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 57]:
                self.state = 639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 638
                    self.match(DrillParser.INNER)


                pass
            elif token in [44, 60, 89]:
                self.state = 641
                _la = self._input.LA(1)
                if not(((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & 35184372154369) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 642
                    self.match(DrillParser.OUTER)


                pass
            elif token in [20]:
                self.state = 645
                self.match(DrillParser.CROSS)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 648
            self.match(DrillParser.JOIN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(DrillParser.Table_nameContext,0)


        def correlation_clause(self):
            return self.getTypedRuleContext(DrillParser.Correlation_clauseContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)




    def table_reference(self):

        localctx = DrillParser.Table_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_table_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.table_name()
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 651
                self.correlation_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unnest_table_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNNEST(self):
            return self.getToken(DrillParser.UNNEST, 0)

        def LRB(self):
            return self.getToken(DrillParser.LRB, 0)

        def expression(self):
            return self.getTypedRuleContext(DrillParser.ExpressionContext,0)


        def RRB(self):
            return self.getToken(DrillParser.RRB, 0)

        def correlation_clause(self):
            return self.getTypedRuleContext(DrillParser.Correlation_clauseContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_unnest_table_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnest_table_expr" ):
                listener.enterUnnest_table_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnest_table_expr" ):
                listener.exitUnnest_table_expr(self)




    def unnest_table_expr(self):

        localctx = DrillParser.Unnest_table_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_unnest_table_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(DrillParser.UNNEST)
            self.state = 655
            self.match(DrillParser.LRB)
            self.state = 656
            self.expression(0)
            self.state = 657
            self.match(DrillParser.RRB)
            self.state = 658
            self.correlation_clause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Correlation_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def correlation_name(self):
            return self.getTypedRuleContext(DrillParser.Correlation_nameContext,0)


        def AS(self):
            return self.getToken(DrillParser.AS, 0)

        def column_list_paren(self):
            return self.getTypedRuleContext(DrillParser.Column_list_parenContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_correlation_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrelation_clause" ):
                listener.enterCorrelation_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrelation_clause" ):
                listener.exitCorrelation_clause(self)




    def correlation_clause(self):

        localctx = DrillParser.Correlation_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_correlation_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 660
                self.match(DrillParser.AS)


            self.state = 663
            self.correlation_name()
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 664
                self.column_list_paren()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(DrillParser.WHERE, 0)

        def boolean_expression(self):
            return self.getTypedRuleContext(DrillParser.Boolean_expressionContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = DrillParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(DrillParser.WHERE)
            self.state = 668
            self.boolean_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(DrillParser.ExpressionContext,i)


        def AND(self):
            return self.getToken(DrillParser.AND, 0)

        def OR(self):
            return self.getToken(DrillParser.OR, 0)

        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.NOT)
            else:
                return self.getToken(DrillParser.NOT, i)

        def comparison_operator(self):
            return self.getTypedRuleContext(DrillParser.Comparison_operatorContext,0)


        def IS(self):
            return self.getToken(DrillParser.IS, 0)

        def NULL_(self):
            return self.getToken(DrillParser.NULL_, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.StringContext)
            else:
                return self.getTypedRuleContext(DrillParser.StringContext,i)


        def LIKE(self):
            return self.getToken(DrillParser.LIKE, 0)

        def ESCAPE(self):
            return self.getToken(DrillParser.ESCAPE, 0)

        def BETWEEN(self):
            return self.getToken(DrillParser.BETWEEN, 0)

        def IN(self):
            return self.getToken(DrillParser.IN, 0)

        def table_subquery(self):
            return self.getTypedRuleContext(DrillParser.Table_subqueryContext,0)


        def LRB(self):
            return self.getToken(DrillParser.LRB, 0)

        def expr_list(self):
            return self.getTypedRuleContext(DrillParser.Expr_listContext,0)


        def RRB(self):
            return self.getToken(DrillParser.RRB, 0)

        def EXISTS(self):
            return self.getToken(DrillParser.EXISTS, 0)

        def ALL(self):
            return self.getToken(DrillParser.ALL, 0)

        def ANY(self):
            return self.getToken(DrillParser.ANY, 0)

        def SOME(self):
            return self.getToken(DrillParser.SOME, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_boolean_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_expression" ):
                listener.enterBoolean_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_expression" ):
                listener.exitBoolean_expression(self)




    def boolean_expression(self):

        localctx = DrillParser.Boolean_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_boolean_expression)
        self._la = 0 # Token type
        try:
            self.state = 740
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.expression(0)
                self.state = 671
                self.match(DrillParser.AND)
                self.state = 672
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.expression(0)
                self.state = 675
                self.match(DrillParser.OR)
                self.state = 676
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 679 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 678
                        self.match(DrillParser.NOT)

                    else:
                        raise NoViableAltException(self)
                    self.state = 681 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                self.state = 683
                self.expression(0)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 684
                self.expression(0)
                self.state = 685
                self.comparison_operator()
                self.state = 686
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 688
                self.expression(0)
                self.state = 689
                self.match(DrillParser.IS)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 690
                    self.match(DrillParser.NOT)


                self.state = 693
                self.match(DrillParser.NULL_)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 695
                self.string()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 696
                    self.match(DrillParser.NOT)


                self.state = 699
                self.match(DrillParser.LIKE)
                self.state = 700
                self.string()
                self.state = 703
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 701
                    self.match(DrillParser.ESCAPE)
                    self.state = 702
                    self.string()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 705
                self.expression(0)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 706
                    self.match(DrillParser.NOT)


                self.state = 709
                self.match(DrillParser.BETWEEN)
                self.state = 710
                self.expression(0)
                self.state = 711
                self.match(DrillParser.AND)
                self.state = 712
                self.expression(0)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 714
                self.expression(0)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 715
                    self.match(DrillParser.NOT)


                self.state = 718
                self.match(DrillParser.IN)
                self.state = 719
                self.table_subquery()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 721
                self.expression(0)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 722
                    self.match(DrillParser.NOT)


                self.state = 725
                self.match(DrillParser.IN)
                self.state = 726
                self.match(DrillParser.LRB)
                self.state = 727
                self.expr_list()
                self.state = 728
                self.match(DrillParser.RRB)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 730
                    self.match(DrillParser.NOT)


                self.state = 733
                self.match(DrillParser.EXISTS)
                self.state = 734
                self.table_subquery()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 735
                self.expression(0)
                self.state = 736
                self.comparison_operator()
                self.state = 737
                _la = self._input.LA(1)
                if not(_la==1 or _la==5 or _la==101):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 738
                self.table_subquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LRB(self):
            return self.getToken(DrillParser.LRB, 0)

        def query(self):
            return self.getTypedRuleContext(DrillParser.QueryContext,0)


        def RRB(self):
            return self.getToken(DrillParser.RRB, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(DrillParser.Order_by_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(DrillParser.Offset_clauseContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_table_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_subquery" ):
                listener.enterTable_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_subquery" ):
                listener.exitTable_subquery(self)




    def table_subquery(self):

        localctx = DrillParser.Table_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_table_subquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(DrillParser.LRB)
            self.state = 743
            self.query(0)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 744
                self.order_by_clause()


            self.state = 748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 747
                self.offset_clause()


            self.state = 750
            self.match(DrillParser.RRB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def primitive_expression(self):
            return self.getTypedRuleContext(DrillParser.Primitive_expressionContext,0)


        def LRB(self):
            return self.getToken(DrillParser.LRB, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(DrillParser.ExpressionContext,i)


        def RRB(self):
            return self.getToken(DrillParser.RRB, 0)

        def table_subquery(self):
            return self.getTypedRuleContext(DrillParser.Table_subqueryContext,0)


        def function_call(self):
            return self.getTypedRuleContext(DrillParser.Function_callContext,0)


        def PLUS(self):
            return self.getToken(DrillParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(DrillParser.MINUS, 0)

        def NOT(self):
            return self.getToken(DrillParser.NOT, 0)

        def CAST(self):
            return self.getToken(DrillParser.CAST, 0)

        def AS(self):
            return self.getToken(DrillParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(DrillParser.Data_typeContext,0)


        def STAR(self):
            return self.getToken(DrillParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(DrillParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(DrillParser.MODULE, 0)

        def DOT(self):
            return self.getToken(DrillParser.DOT, 0)

        def comparison_operator(self):
            return self.getTypedRuleContext(DrillParser.Comparison_operatorContext,0)


        def AND(self):
            return self.getToken(DrillParser.AND, 0)

        def OR(self):
            return self.getToken(DrillParser.OR, 0)

        def IN(self):
            return self.getToken(DrillParser.IN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(DrillParser.Expr_listContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = DrillParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 753
                self.primitive_expression()
                pass

            elif la_ == 2:
                self.state = 754
                self.match(DrillParser.LRB)
                self.state = 755
                self.expression(0)
                self.state = 756
                self.match(DrillParser.RRB)
                pass

            elif la_ == 3:
                self.state = 758
                self.table_subquery()
                pass

            elif la_ == 4:
                self.state = 759
                self.function_call()
                pass

            elif la_ == 5:
                self.state = 760
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==153 or _la==154):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 761
                self.expression(10)
                pass

            elif la_ == 6:
                self.state = 762
                self.match(DrillParser.NOT)
                self.state = 763
                self.expression(3)
                pass

            elif la_ == 7:
                self.state = 764
                self.match(DrillParser.CAST)
                self.state = 765
                self.match(DrillParser.LRB)
                self.state = 766
                self.expression(0)
                self.state = 767
                self.match(DrillParser.AS)
                self.state = 768
                self.data_type()
                self.state = 769
                self.match(DrillParser.RRB)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 803
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 801
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        localctx = DrillParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 773
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 774
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 7) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 775
                        self.expression(10)
                        pass

                    elif la_ == 2:
                        localctx = DrillParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 776
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 777
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==153 or _la==154):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 778
                        self.expression(9)
                        pass

                    elif la_ == 3:
                        localctx = DrillParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 779
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 780
                        self.match(DrillParser.DOT)
                        self.state = 781
                        self.expression(8)
                        pass

                    elif la_ == 4:
                        localctx = DrillParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 782
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 783
                        self.comparison_operator()
                        self.state = 784
                        self.expression(7)
                        pass

                    elif la_ == 5:
                        localctx = DrillParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 786
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 787
                        self.match(DrillParser.AND)
                        self.state = 788
                        self.expression(6)
                        pass

                    elif la_ == 6:
                        localctx = DrillParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 789
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 790
                        self.match(DrillParser.OR)
                        self.state = 791
                        self.expression(5)
                        pass

                    elif la_ == 7:
                        localctx = DrillParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 792
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 794
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==71:
                            self.state = 793
                            self.match(DrillParser.NOT)


                        self.state = 796
                        self.match(DrillParser.IN)
                        self.state = 797
                        self.match(DrillParser.LRB)
                        self.state = 798
                        self.expr_list()
                        self.state = 799
                        self.match(DrillParser.RRB)
                        pass

             
                self.state = 805
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Primitive_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(DrillParser.LiteralContext,0)


        def id_(self):
            return self.getTypedRuleContext(DrillParser.Id_Context,0)


        def getRuleIndex(self):
            return DrillParser.RULE_primitive_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)




    def primitive_expression(self):

        localctx = DrillParser.Primitive_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_primitive_expression)
        try:
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36, 72, 109, 125, 127, 128, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.literal()
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.id_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(DrillParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(DrillParser.FALSE, 0)

        def NULL_(self):
            return self.getToken(DrillParser.NULL_, 0)

        def SQ_STRING_LITERAL(self):
            return self.getToken(DrillParser.SQ_STRING_LITERAL, 0)

        def DECIMAL_LITERAL(self):
            return self.getToken(DrillParser.DECIMAL_LITERAL, 0)

        def FLOAT_LITERAL(self):
            return self.getToken(DrillParser.FLOAT_LITERAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(DrillParser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = DrillParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            _la = self._input.LA(1)
            if not(_la==36 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 261208915826442241) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_name(self):
            return self.getTypedRuleContext(DrillParser.Function_nameContext,0)


        def LRB(self):
            return self.getToken(DrillParser.LRB, 0)

        def RRB(self):
            return self.getToken(DrillParser.RRB, 0)

        def expr_list(self):
            return self.getTypedRuleContext(DrillParser.Expr_listContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = DrillParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.function_name()
            self.state = 813
            self.match(DrillParser.LRB)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 432345564231761921) != 0) or ((((_la - 109)) & ~0x3f) == 0 and ((1 << (_la - 109)) & 52785149984769) != 0):
                self.state = 814
                self.expr_list()


            self.state = 817
            self.match(DrillParser.RRB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(DrillParser.LT, 0)

        def EQ(self):
            return self.getToken(DrillParser.EQ, 0)

        def GT(self):
            return self.getToken(DrillParser.GT, 0)

        def LE(self):
            return self.getToken(DrillParser.LE, 0)

        def GE(self):
            return self.getToken(DrillParser.GE, 0)

        def LTGT(self):
            return self.getToken(DrillParser.LTGT, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)




    def comparison_operator(self):

        localctx = DrillParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_comparison_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            _la = self._input.LA(1)
            if not(((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(DrillParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.COMMA)
            else:
                return self.getToken(DrillParser.COMMA, i)

        def getRuleIndex(self):
            return DrillParser.RULE_expr_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_list" ):
                listener.enterExpr_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_list" ):
                listener.exitExpr_list(self)




    def expr_list(self):

        localctx = DrillParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_expr_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.expression(0)
            self.state = 826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 822
                    self.match(DrillParser.COMMA)
                    self.state = 823
                    self.expression(0) 
                self.state = 828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(DrillParser.GROUP, 0)

        def BY(self):
            return self.getToken(DrillParser.BY, 0)

        def expr_list(self):
            return self.getTypedRuleContext(DrillParser.Expr_listContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)




    def group_by_clause(self):

        localctx = DrillParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(DrillParser.GROUP)
            self.state = 830
            self.match(DrillParser.BY)
            self.state = 831
            self.expr_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(DrillParser.HAVING, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)




    def having_clause(self):

        localctx = DrillParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(DrillParser.HAVING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(DrillParser.ORDER, 0)

        def BY(self):
            return self.getToken(DrillParser.BY, 0)

        def expression(self):
            return self.getTypedRuleContext(DrillParser.ExpressionContext,0)


        def NULLS(self):
            return self.getToken(DrillParser.NULLS, 0)

        def ASC(self):
            return self.getToken(DrillParser.ASC, 0)

        def DESC(self):
            return self.getToken(DrillParser.DESC, 0)

        def FIRST(self):
            return self.getToken(DrillParser.FIRST, 0)

        def LAST(self):
            return self.getToken(DrillParser.LAST, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)




    def order_by_clause(self):

        localctx = DrillParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(DrillParser.ORDER)
            self.state = 836
            self.match(DrillParser.BY)
            self.state = 837
            self.expression(0)
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 838
                _la = self._input.LA(1)
                if not(_la==7 or _la==28):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 843
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 841
                self.match(DrillParser.NULLS)
                self.state = 842
                _la = self._input.LA(1)
                if not(_la==39 or _la==58):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(DrillParser.LIMIT, 0)

        def FETCH(self):
            return self.getToken(DrillParser.FETCH, 0)

        def NEXT(self):
            return self.getToken(DrillParser.NEXT, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_limit_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_clause" ):
                listener.enterLimit_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_clause" ):
                listener.exitLimit_clause(self)




    def limit_clause(self):

        localctx = DrillParser.Limit_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_limit_clause)
        try:
            self.state = 848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [63]:
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.match(DrillParser.LIMIT)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.match(DrillParser.FETCH)
                self.state = 847
                self.match(DrillParser.NEXT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(DrillParser.OFFSET, 0)

        def number(self):
            return self.getTypedRuleContext(DrillParser.NumberContext,0)


        def ROW(self):
            return self.getToken(DrillParser.ROW, 0)

        def ROWS(self):
            return self.getToken(DrillParser.ROWS, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset_clause" ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset_clause" ):
                listener.exitOffset_clause(self)




    def offset_clause(self):

        localctx = DrillParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_offset_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(DrillParser.OFFSET)
            self.state = 851
            self.number()
            self.state = 852
            _la = self._input.LA(1)
            if not(_la==90 or _la==91):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(DrillParser.DECIMAL_LITERAL, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = DrillParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(DrillParser.DECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LRB(self):
            return self.getToken(DrillParser.LRB, 0)

        def query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.QueryContext)
            else:
                return self.getTypedRuleContext(DrillParser.QueryContext,i)


        def RRB(self):
            return self.getToken(DrillParser.RRB, 0)

        def order_by_clause(self):
            return self.getTypedRuleContext(DrillParser.Order_by_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(DrillParser.Offset_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(DrillParser.Select_stmtContext,0)


        def UNION(self):
            return self.getToken(DrillParser.UNION, 0)

        def ALL(self):
            return self.getToken(DrillParser.ALL, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)



    def query(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = DrillParser.QueryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_query, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142]:
                self.state = 857
                self.match(DrillParser.LRB)
                self.state = 858
                self.query(0)
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 859
                    self.order_by_clause()


                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 862
                    self.offset_clause()


                self.state = 865
                self.match(DrillParser.RRB)
                pass
            elif token in [96, 118]:
                self.state = 867
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = DrillParser.QueryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                    self.state = 870
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 871
                    self.match(DrillParser.UNION)
                    self.state = 873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1:
                        self.state = 872
                        self.match(DrillParser.ALL)


                    self.state = 875
                    self.query(3) 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Select_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_clause(self):
            return self.getTypedRuleContext(DrillParser.Select_clauseContext,0)


        def from_clause(self):
            return self.getTypedRuleContext(DrillParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(DrillParser.Where_clauseContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(DrillParser.Group_by_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(DrillParser.Having_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(DrillParser.Order_by_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(DrillParser.Offset_clauseContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_select_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_expression" ):
                listener.enterSelect_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_expression" ):
                listener.exitSelect_expression(self)




    def select_expression(self):

        localctx = DrillParser.Select_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_select_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.select_clause()
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 882
                self.from_clause()


            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 885
                self.where_clause()


            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 888
                self.group_by_clause()


            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 891
                self.having_clause()


            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 894
                self.order_by_clause()


            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75:
                self.state = 897
                self.offset_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Data_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIGINT(self):
            return self.getToken(DrillParser.BIGINT, 0)

        def BINARY(self):
            return self.getToken(DrillParser.BINARY, 0)

        def BOOLEAN(self):
            return self.getToken(DrillParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(DrillParser.DATE, 0)

        def DECIMAL(self):
            return self.getToken(DrillParser.DECIMAL, 0)

        def DEC(self):
            return self.getToken(DrillParser.DEC, 0)

        def NUMERIC(self):
            return self.getToken(DrillParser.NUMERIC, 0)

        def FLOAT(self):
            return self.getToken(DrillParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(DrillParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(DrillParser.PRECISION, 0)

        def INTEGER(self):
            return self.getToken(DrillParser.INTEGER, 0)

        def INT(self):
            return self.getToken(DrillParser.INT, 0)

        def INTERVAL(self):
            return self.getToken(DrillParser.INTERVAL, 0)

        def YEAR(self):
            return self.getToken(DrillParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(DrillParser.MONTH, 0)

        def DAY(self):
            return self.getToken(DrillParser.DAY, 0)

        def HOUR(self):
            return self.getToken(DrillParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(DrillParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(DrillParser.SECOND, 0)

        def SMALLINT(self):
            return self.getToken(DrillParser.SMALLINT, 0)

        def TIME(self):
            return self.getToken(DrillParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(DrillParser.TIMESTAMP, 0)

        def CHARACTER(self):
            return self.getToken(DrillParser.CHARACTER, 0)

        def VARYING(self):
            return self.getToken(DrillParser.VARYING, 0)

        def CHAR(self):
            return self.getToken(DrillParser.CHAR, 0)

        def VARCHAR(self):
            return self.getToken(DrillParser.VARCHAR, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)




    def data_type(self):

        localctx = DrillParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.state = 923
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self.match(DrillParser.BIGINT)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 901
                self.match(DrillParser.BINARY)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 902
                self.match(DrillParser.BOOLEAN)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 4)
                self.state = 903
                self.match(DrillParser.DATE)
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 5)
                self.state = 904
                self.match(DrillParser.DECIMAL)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 6)
                self.state = 905
                self.match(DrillParser.DEC)
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 7)
                self.state = 906
                self.match(DrillParser.NUMERIC)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 8)
                self.state = 907
                self.match(DrillParser.FLOAT)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 9)
                self.state = 908
                self.match(DrillParser.DOUBLE)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84:
                    self.state = 909
                    self.match(DrillParser.PRECISION)


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 10)
                self.state = 912
                self.match(DrillParser.INTEGER)
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 11)
                self.state = 913
                self.match(DrillParser.INT)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 12)
                self.state = 914
                self.match(DrillParser.INTERVAL)
                self.state = 915
                _la = self._input.LA(1)
                if not(_la==24 or _la==48 or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 9007199791611907) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 13)
                self.state = 916
                self.match(DrillParser.SMALLINT)
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 14)
                self.state = 917
                self.match(DrillParser.TIME)
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 15)
                self.state = 918
                self.match(DrillParser.TIMESTAMP)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 16)
                self.state = 919
                self.match(DrillParser.CHARACTER)
                self.state = 920
                self.match(DrillParser.VARYING)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 17)
                self.state = 921
                self.match(DrillParser.CHAR)
                pass
            elif token in [114]:
                self.enterOuterAlt(localctx, 18)
                self.state = 922
                self.match(DrillParser.VARCHAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(DrillParser.DEFAULT, 0)

        def string(self):
            return self.getTypedRuleContext(DrillParser.StringContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_default_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_clause" ):
                listener.enterDefault_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_clause" ):
                listener.exitDefault_clause(self)




    def default_clause(self):

        localctx = DrillParser.Default_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_default_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(DrillParser.DEFAULT)
            self.state = 926
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_(self):
            return self.getToken(DrillParser.NULL_, 0)

        def NOT(self):
            return self.getToken(DrillParser.NOT, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_nullability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullability" ):
                listener.enterNullability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullability" ):
                listener.exitNullability(self)




    def nullability(self):

        localctx = DrillParser.NullabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_nullability)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 928
                self.match(DrillParser.NOT)


            self.state = 931
            self.match(DrillParser.NULL_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Format_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FORMAT(self):
            return self.getToken(DrillParser.FORMAT, 0)

        def string(self):
            return self.getTypedRuleContext(DrillParser.StringContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_format_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormat_clause" ):
                listener.enterFormat_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormat_clause" ):
                listener.exitFormat_clause(self)




    def format_clause(self):

        localctx = DrillParser.Format_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_format_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(DrillParser.FORMAT)
            self.state = 934
            self.string()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Properties_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROPERTIES(self):
            return self.getToken(DrillParser.PROPERTIES, 0)

        def LCB(self):
            return self.getToken(DrillParser.LCB, 0)

        def kv_list(self):
            return self.getTypedRuleContext(DrillParser.Kv_listContext,0)


        def RCB(self):
            return self.getToken(DrillParser.RCB, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_properties_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProperties_clause" ):
                listener.enterProperties_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProperties_clause" ):
                listener.exitProperties_clause(self)




    def properties_clause(self):

        localctx = DrillParser.Properties_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_properties_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(DrillParser.PROPERTIES)
            self.state = 937
            self.match(DrillParser.LCB)
            self.state = 938
            self.kv_list()
            self.state = 939
            self.match(DrillParser.RCB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_replaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(DrillParser.OR, 0)

        def REPLACE(self):
            return self.getToken(DrillParser.REPLACE, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_or_replace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_replace" ):
                listener.enterOr_replace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_replace" ):
                listener.exitOr_replace(self)




    def or_replace(self):

        localctx = DrillParser.Or_replaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_or_replace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(DrillParser.OR)
            self.state = 942
            self.match(DrillParser.REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_existsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(DrillParser.IF, 0)

        def EXISTS(self):
            return self.getToken(DrillParser.EXISTS, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_if_exists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_exists" ):
                listener.enterIf_exists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_exists" ):
                listener.exitIf_exists(self)




    def if_exists(self):

        localctx = DrillParser.If_existsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_if_exists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(DrillParser.IF)
            self.state = 945
            self.match(DrillParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Id_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(DrillParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_id_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_" ):
                listener.enterId_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_" ):
                listener.exitId_(self)




    def id_(self):

        localctx = DrillParser.Id_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_id_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(DrillParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQ_STRING_LITERAL(self):
            return self.getToken(DrillParser.SQ_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = DrillParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(DrillParser.SQ_STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WorkspaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_workspace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWorkspace" ):
                listener.enterWorkspace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWorkspace" ):
                listener.exitWorkspace(self)




    def workspace(self):

        localctx = DrillParser.WorkspaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_workspace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(DrillParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = DrillParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(DrillParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def id_(self):
            return self.getTypedRuleContext(DrillParser.Id_Context,0)


        def DOT(self):
            return self.getToken(DrillParser.DOT, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = DrillParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 955
                self.id_()
                self.state = 956
                self.match(DrillParser.DOT)


            self.state = 960
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def table_path(self):
            return self.getTypedRuleContext(DrillParser.Table_pathContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DrillParser.Id_Context)
            else:
                return self.getTypedRuleContext(DrillParser.Id_Context,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(DrillParser.DOT)
            else:
                return self.getToken(DrillParser.DOT, i)

        def getRuleIndex(self):
            return DrillParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = DrillParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                if la_ == 1:
                    self.state = 962
                    self.id_()
                    self.state = 963
                    self.match(DrillParser.DOT)


                self.state = 967
                self.id_()
                self.state = 968
                self.match(DrillParser.DOT)


            self.state = 974
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.state = 972
                self.name()
                pass
            elif token in [124]:
                self.state = 973
                self.table_path()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = DrillParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Correlation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_correlation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrelation_name" ):
                listener.enterCorrelation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrelation_name" ):
                listener.exitCorrelation_name(self)




    def correlation_name(self):

        localctx = DrillParser.Correlation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_correlation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = DrillParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = DrillParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(DrillParser.NameContext,0)


        def BS_STRING_LITERAL(self):
            return self.getToken(DrillParser.BS_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = DrillParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_column_alias)
        try:
            self.state = 986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [123]:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.name()
                pass
            elif token in [124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(DrillParser.BS_STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BS_STRING_LITERAL(self):
            return self.getToken(DrillParser.BS_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return DrillParser.RULE_table_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_path" ):
                listener.enterTable_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_path" ):
                listener.exitTable_path(self)




    def table_path(self):

        localctx = DrillParser.Table_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_table_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(DrillParser.BS_STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(DrillParser.LiteralContext,0)


        def getRuleIndex(self):
            return DrillParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = DrillParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[49] = self.expression_sempred
        self._predicates[61] = self.query_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def query_sempred(self, localctx:QueryContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         




